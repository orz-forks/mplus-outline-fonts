%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (243F.eps)
%%CreationDate: (4/23/04) (11:35 AM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
1 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
500 600 m
500 700 L
400 700 L
400 600 L
500 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
400 600 m
400 700 L
300 700 L
300 600 L
400 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
500 500 m
500 600 L
400 600 L
400 500 L
500 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
400 500 m
400 600 L
300 600 L
300 500 L
400 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
0 Ap
0 O
0 g
362 683.6 m
344.4951 678.6645 331 661.6496 331 644 c
331 622.9736 343.5482 611 363 611 C
366.294 611 368.9375 611.3125 372 612 C
371.4 614.9 L
368.4665 614.2415 365.9923 614 363 614 c
344.8411 614 334 625.2149 334 644 c
334 663.4645 352.1422 682 372 682 c
390 682 L
390 685 L
310 685 L
310 682 L
362 682 L
362 683.6 L
f
1 D
482 670 m
433.5774 660.7284 416 646.5802 416 631 c
416 618.838 427.7423 610 450 610 c
463.1234 610 471 610.75 483 613 C
482.5 616 L
470.4483 613.7403 462.8143 613 450 613 c
429.712 613 419 620.5638 419 631 c
419 644.9539 436.6828 658.2081 482.6 667 C
482 670 L
f
439 654 m
435.8339 665.9664 432.9567 679.2275 431 691 C
428 690.5 L
429.9845 678.5603 432.9314 665.276 436.1 653.3 C
439 654 L
f
0 D
253 679 m
274.1696 679 287 667.8846 287 653 c
287 629.4058 270.9604 617 228 617 C
228 614 L
272.1781 614 290 627.1814 290 653 c
290 669.5662 275.9841 682 253 682 c
238.388 682 223.3356 679.5258 210 675 C
211 672.1 L
224.155 676.5645 238.6592 679 253 679 c
f
u
361.7 583.5636 m
343.8619 578.5341 330.5 561.6612 330.5 543.9969 c
330.5 522.7935 343.2115 510.6636 362.8333 510.6636 C
366.3471 510.6636 369.2708 510.9865 372.5 511.6636 C
371.7333 516.8803 L
368.7533 516.2503 366.1607 515.997 363.1667 515.997 c
346.3179 515.997 336.1667 526.4295 336.1667 544.3303 c
336.1667 562.6635 353.2247 579.9969 372.3333 579.9969 C
390.3333 579.9969 L
390.3333 585.3303 L
309.6666 585.3303 L
309.6666 579.9969 L
361.8333 579.9969 L
361.7 583.5636 L
f
361.4 483.5272 m
343.2288 478.4039 330 461.6729 330 443.9939 c
330 422.6134 342.8748 410.3272 362.6666 410.3272 C
366.4002 410.3272 369.6042 410.6605 373 411.3272 C
372.0667 418.8607 L
369.0402 418.2592 366.3291 417.994 363.3333 417.994 c
347.7948 417.994 338.3334 427.6441 338.3334 444.6606 c
338.3334 461.8624 354.3071 477.9938 372.6667 477.9938 C
390.6667 477.9938 L
390.6667 485.6606 L
309.3333 485.6606 L
309.3333 477.9938 L
361.6666 477.9938 L
361.4 483.5272 L
f
361.1 383.5 m
342.5957 378.2827 329.5 361.6937 329.5 344 c
329.5 322.4425 342.5382 310 362.5 310 C
366.4533 310 369.9375 310.3437 373.5 311 C
372.4 320.85 L
369.327 320.277 366.4974 320 363.5 320 c
349.2715 320 340.5 328.8676 340.5 345 c
340.5 361.0706 355.3895 376 373 376 C
391 376 L
391 386 L
309 386 L
309 376 L
361.5 376 L
361.1 383.5 L
f
360.8 283.4636 m
341.9625 278.1524 329 261.7054 329 243.9969 c
329 222.2625 342.2015 209.6636 362.3333 209.6636 C
366.5065 209.6636 370.2708 210.0178 374 210.6636 C
372.7333 222.8303 L
369.6138 222.2858 366.6658 221.997 363.6667 221.997 c
350.7483 221.997 342.6667 230.0822 342.6667 245.3303 c
342.6667 260.2696 356.4719 273.9969 373.3333 273.9969 C
391.3333 273.9969 L
391.3333 286.3303 L
308.6666 286.3303 L
308.6666 273.9969 L
361.3333 273.9969 L
360.8 283.4636 L
f
360.5 183.4364 m
341.3294 178.0312 328.5 161.7262 328.5 144.003 c
328.5 122.0915 341.8648 109.3364 362.1667 109.3364 C
366.5596 109.3364 370.6041 109.701 374.5 110.3364 C
373.0666 124.8196 L
369.9006 124.3036 366.8342 124.003 363.8333 124.003 c
352.2251 124.003 344.8332 131.3058 344.8332 145.6697 c
344.8332 159.4777 357.5543 172.0031 373.6666 172.0031 C
391.6666 172.0031 L
391.6666 186.6697 L
308.3333 186.6697 L
308.3333 172.0031 L
361.1667 172.0031 L
360.5 183.4364 L
f
U
360.2 83.4 m
340.6963 77.9009 328 61.7378 328 44 c
328 21.9115 341.5282 9 362 9 c
366.6127 9 370.9375 9.375 375 10 C
373.4 26.8 L
370.1875 26.3125 367.0026 26 364 26 c
353.7019 26 347 32.5204 347 46 c
347 58.6767 358.6367 70 374 70 C
392 70 L
392 87 L
308 87 L
308 70 L
361 70 L
360.2 83.4 L
f
u
1 D
440.5 554.3303 m
437.334 566.2967 434.4567 579.5578 432.5 591.3303 C
426.8666 590.4303 L
428.861 578.4308 431.8167 565.0746 435.0166 552.9803 C
440.5 554.3303 L
f
442.0001 454.6606 m
438.834 466.627 435.9568 479.8881 434.0001 491.6606 C
425.7332 490.3606 L
427.7376 478.3012 430.702 464.8733 433.9333 452.6605 C
442.0001 454.6606 L
f
443.5 355 m
440.3339 366.9664 437.4567 380.2275 435.5 392 C
424.6 390.3 L
426.6143 378.1808 429.5875 364.681 432.85 352.35 C
443.5 355 L
f
445 255.3303 m
441.834 267.2967 438.9567 280.5578 437 292.3303 C
423.4666 290.2303 L
425.4909 278.0513 428.4728 264.4797 431.7666 252.0303 C
445 255.3303 L
f
446.4999 155.6697 m
443.3339 167.6361 440.4566 180.8972 438.4999 192.6697 C
422.3334 190.1697 L
424.3676 177.9309 427.3582 164.2875 430.6834 151.7197 C
446.4999 155.6697 L
f
U
u
0 D
211.0666 570.1802 m
209.5 575.4969 L
222.9977 580.0145 238.2389 582.4969 252.8333 582.4969 c
276.2078 582.4969 290.5 569.8924 290.5 552.9969 c
290.5 526.9028 272.3977 513.4969 227.5 513.4969 C
227.5 518.997 L
269.3835 518.997 284.6666 530.6448 284.6666 552.9969 c
284.6666 566.7044 272.7471 576.9969 252.8333 576.9969 c
238.7871 576.9969 224.1777 574.5728 211.0666 570.1802 C
f
211.1333 468.2604 m
209 475.9939 L
222.6598 480.5032 238.0899 482.9939 252.6666 482.9939 c
276.4315 482.9939 291 470.2187 291 452.9939 c
291 426.6242 272.6173 412.9939 227 412.9939 C
227 420.994 L
267.8066 420.994 282.3332 431.8838 282.3332 452.9939 c
282.3332 465.5243 271.3246 474.9938 252.6666 474.9938 c
238.915 474.9938 224.2005 472.5812 211.1333 468.2604 C
f
211.2 366.35 m
208.5 376.5 L
222.3219 381.001 237.9408 383.5 252.5 383.5 c
276.6553 383.5 291.5 370.554 291.5 353 c
291.5 326.3547 272.8369 312.5 226.5 312.5 C
226.5 323 L
266.2299 323 280 333.1318 280 353 c
280 364.3533 269.9022 373 252.5 373 c
239.0429 373 224.2233 370.5988 211.2 366.35 C
f
211.2666 264.4302 m
208 276.9969 L
221.984 281.4898 237.7918 283.9969 252.3333 283.9969 c
276.879 283.9969 292 270.8803 292 252.9969 c
292 226.0761 273.0565 211.9969 226 211.9969 C
226 224.997 L
264.653 224.997 277.6666 234.3708 277.6666 252.9969 c
277.6666 263.1732 268.4797 270.9969 252.3333 270.9969 c
239.1708 270.9969 224.246 268.6072 211.2666 264.4302 C
f
211.3333 162.5198 m
207.5 177.503 L
221.6461 181.9876 237.6428 184.503 252.1667 184.503 c
277.1027 184.503 292.5 171.2156 292.5 153.003 c
292.5 125.8067 273.2761 111.503 225.5 111.503 C
225.5 127.003 L
263.0763 127.003 275.3334 135.6188 275.3334 153.003 c
275.3334 162.0023 267.0574 169.0031 252.1667 169.0031 c
239.2987 169.0031 224.2687 166.6248 211.3333 162.5198 C
f
U
207 78 m
221.3082 82.4764 237.4937 85 252 85 c
277.3264 85 293 71.5419 293 53 c
293 25.5281 273.4958 11 225 11 C
225 29 L
261.4994 29 273 36.8578 273 53 c
273 60.8221 265.6349 67 252 67 c
239.4266 67 224.2915 64.6332 211.4 60.6 C
207 78 L
f
u
1 D
482.0167 571.3303 m
433.1701 561.726 415.5 547.3388 415.5 531.4969 c
415.5 518.5808 427.2232 509.6636 450 509.6636 c
463.1044 509.6636 471.4687 510.4344 483.5 512.6636 C
482.7167 517.9803 L
470.8329 515.7763 462.7023 514.997 450 514.997 c
431.0462 514.997 421.3334 521.8699 421.3334 531.6636 c
421.3334 544.5171 438.705 557.3483 483.1 566.0302 C
482.0167 571.3303 L
f
482.0333 472.6606 m
432.7628 462.7236 415 448.0973 415 431.9939 c
415 418.3237 426.7042 409.3272 450 409.3272 c
463.0855 409.3272 471.9375 410.1189 484 412.3272 C
482.9333 419.9607 L
471.2174 417.8123 462.5904 416.994 450 416.994 c
432.3803 416.994 423.6668 423.1759 423.6668 432.3273 c
423.6668 444.0802 440.7271 456.4885 483.6 465.0605 C
482.0333 472.6606 L
f
482.05 374 m
432.3555 363.7303 414.5 348.865 414.5 332.5 c
414.5 318.0757 426.1852 309 450 309 c
463.0666 309 472.4062 309.8125 484.5 312 C
483.15 321.95 L
471.6019 319.8573 462.4784 319 450 319 c
433.7144 319 426 324.491 426 333 c
426 343.6525 442.7491 355.6379 484.1 364.1 C
482.05 374 L
f
482.0667 275.3303 m
431.9482 264.7279 414 249.6236 414 232.9969 c
414 217.8186 425.6661 208.6636 450 208.6636 c
463.0477 208.6636 472.875 209.4969 485 211.6636 C
483.3667 223.9303 L
471.9865 221.8933 462.3664 220.997 450 220.997 c
435.0486 220.997 428.3334 225.7971 428.3334 233.6636 c
428.3334 243.2157 444.7713 254.7781 484.6 263.1302 C
482.0667 275.3303 L
f
482.0833 176.6697 m
431.5409 165.7346 413.5 150.3912 413.5 133.503 c
413.5 117.5707 425.1471 108.3364 450 108.3364 c
463.0288 108.3364 473.3437 109.1905 485.5 111.3364 C
483.5833 125.9196 L
472.371 123.9383 462.2544 123.003 450 123.003 c
436.3826 123.003 430.6666 127.1121 430.6666 134.3363 c
430.6666 142.788 446.7932 153.9275 485.1 162.1697 C
482.0833 176.6697 L
f
U
448 56 m
444.8339 67.9664 441.9567 81.2275 440 93 C
421.2 90.1 L
423.2442 77.8013 426.2435 64.0861 429.6 51.4 C
448 56 L
f
482.1 78 m
431.1336 66.7323 413 51.1498 413 34 c
413 17.3135 424.628 8 450 8 c
463.0099 8 473.8125 8.875 486 11 C
483.8 27.9 L
472.7555 25.9743 462.1424 25 450 25 c
437.7168 25 433 28.4182 433 35 c
433 42.3511 448.8154 53.0676 485.6 61.2 C
482.1 78 L
f
132.8 36.4 m
142.5809 57.3588 146.8459 72.3757 149.1 95 C
131 95 L
129.0452 75.3793 125.3813 63.1025 116 43 C
132.8 36.4 L
f
132.8 36.4 m
140.3141 42.1957 146.2541 44 157 44 c
164.6661 44 168 40.9649 168 36 c
168 28.3403 160.1969 24 148 24 c
141.3176 24 131.905 25.1685 124.9 26.8 C
122 11 L
129.7196 9.0035 139.5572 8 148 8 c
171.2983 8 186 19.3916 186 35 c
186 50.5232 175.8751 60 157 60 c
139.6935 60 123.9057 52.9889 116 43 C
132.8 36.4 L
f
191 68 m
191 84 L
109 84 L
109 68 L
191 68 L
f
23.7 8 m
32.1882 34.7006 39.0436 63.6717 44 94.6 C
26 96 L
21.1249 65.5795 14.6539 38.5649 6 11.6 C
23.7 8 L
f
74 85 m
9 85 L
9 69 L
74 69 L
74 85 L
f
48 43 m
42.4998 38.4165 40 33.2515 40 28 c
40 16.0578 49.3008 9 71 9 c
78.6663 9 84.4375 9.5625 92 11 C
90 26.9 L
82.6788 25.5084 77.1334 25 71 25 c
60.1384 25 58 26.4119 58 30 C
58 32.709 59.275 35.575 61.4 37.7 C
48 43 L
f
88 46 m
88 62 L
49 62 L
49 46 L
88 46 L
f
u
21.7333 108.1864 m
30.1839 134.6588 37.0856 163.6643 42 194.4364 C
26.5 195.6697 L
21.6776 165.4747 15.1387 138.1821 6.5 111.3364 C
21.7333 108.1864 L
f
19.7665 208.3728 m
28.1796 234.617 35.1277 263.657 39.9999 294.2727 C
27 295.3394 L
22.2303 265.3699 15.6234 237.7993 7 211.0727 C
19.7665 208.3728 L
f
17.8 308.55 m
26.1755 334.5661 33.1699 363.6405 38 394.1 C
27.5 395 L
22.783 365.2559 16.1082 337.4074 7.5 310.8 C
17.8 308.55 L
f
15.8333 408.7364 m
24.1712 434.5243 31.2119 463.6332 36 493.9364 C
28 494.6697 L
23.3356 465.1511 16.593 437.0247 8 410.5364 C
15.8333 408.7364 L
f
13.8667 508.9136 m
22.1672 534.4734 29.2541 563.6167 34.0001 593.7636 C
28.5 594.3303 L
23.8883 565.0371 17.0777 536.6328 8.5 510.2636 C
13.8667 508.9136 L
f
U
u
73.3333 184.1697 m
9.5 184.1697 L
9.5 170.3364 L
73.3333 170.3364 L
73.3333 184.1697 L
f
72.6666 283.3394 m
10 283.3394 L
10 271.6728 L
72.6666 271.6728 L
72.6666 283.3394 L
f
72 382.5 m
10.5 382.5 L
10.5 373 L
72 373 L
72 382.5 L
f
71.3333 481.6697 m
11 481.6697 L
11 474.3364 L
71.3333 474.3364 L
71.3333 481.6697 L
f
70.6667 580.8303 m
11.5 580.8303 L
11.5 575.6636 L
70.6667 575.6636 L
70.6667 580.8303 L
f
U
u
87.5 147.5031 m
87.5 161.3364 L
48.8333 161.3364 L
48.8333 147.5031 L
87.5 147.5031 L
f
87 249.0062 m
87 260.6727 L
48.6667 260.6727 L
48.6667 249.0062 L
87 249.0062 L
f
86.5 350.5 m
86.5 360 L
48.5 360 L
48.5 350.5 L
86.5 350.5 L
f
86 452.0031 m
86 459.3364 L
48.3333 459.3364 L
48.3333 452.0031 L
86 452.0031 L
f
85.5 553.4969 m
85.5 558.6636 L
48.1667 558.6636 L
48.1667 553.4969 L
85.5 553.4969 L
f
U
u
48.8334 142.503 m
42.8783 137.856 40.1667 132.6489 40.1667 127.503 c
40.1667 116.0279 49.3125 109.1697 70.6667 109.1697 c
78.173 109.1697 84.1146 109.7635 91.5 111.1697 C
89.75 124.9196 L
82.5736 123.5531 76.8604 123.003 70.6667 123.003 c
58.7145 123.003 55.6666 124.971 55.6666 129.1697 C
55.6666 132.0052 57.2725 135.1508 60.2833 137.6697 C
48.8334 142.503 L
f
49.6667 242.0061 m
43.2568 237.2955 40.3333 232.0463 40.3333 227.0061 c
40.3333 215.9981 49.3243 209.3394 70.3333 209.3394 c
77.6797 209.3394 83.7916 209.9644 91 211.3394 C
89.5 222.9393 L
82.4683 221.5979 76.5874 221.006 70.3333 221.006 c
57.2905 221.006 53.3332 223.5301 53.3332 228.3394 C
53.3332 231.3014 55.2701 234.7267 59.1666 237.6394 C
49.6667 242.0061 L
f
50.5 341.5 m
43.6353 336.7259 40.5 331.4346 40.5 326.5 c
40.5 315.9591 49.3361 309.5 70 309.5 c
77.1864 309.5 83.4687 310.1562 90.5 311.5 C
89.25 320.95 L
82.3631 319.6337 76.3145 319 70 319 c
55.8667 319 51 322.0802 51 327.5 C
51 330.5886 53.2678 334.2934 58.05 337.6 C
50.5 341.5 L
f
51.3334 441.003 m
44.0139 436.1654 40.6667 430.8321 40.6667 426.003 c
40.6667 415.9293 49.3478 409.6697 69.6667 409.6697 c
76.6931 409.6697 83.1458 410.3572 90 411.6697 C
89 418.9697 L
82.2579 417.6785 76.0415 417.003 69.6667 417.003 c
54.4428 417.003 48.6666 420.6394 48.6666 426.6697 C
48.6666 429.8848 51.2654 433.8693 56.9333 437.5697 C
51.3334 441.003 L
f
52.1667 540.497 m
44.3924 535.5959 40.8333 530.2204 40.8333 525.497 c
40.8333 515.8903 49.3595 509.8303 69.3334 509.8303 c
76.1999 509.8303 82.8229 510.549 89.5 511.8303 C
88.75 516.9803 L
82.1527 515.7143 75.7686 514.997 69.3334 514.997 c
53.019 514.997 46.3334 519.1895 46.3334 525.8303 C
46.3334 529.172 49.2631 533.436 55.8167 537.5303 C
52.1667 540.497 L
f
U
11.9 609.1 m
20.1629 634.4316 27.2961 663.6094 32 693.6 C
29 694 L
24.441 664.9323 17.5625 636.25 9 610 C
11.9 609.1 L
f
70 680 m
12 680 L
12 677 L
70 677 L
70 680 L
f
53 640 m
44.7709 635.0354 41 629.6178 41 625 c
41 615.8605 49.3713 610 69 610 c
75.7066 610 82.5 610.75 89 612 C
88.5 615 L
82.0475 613.7591 75.4956 613 69 613 c
51.5951 613 44 617.7486 44 625 c
44 628.4682 47.2607 633.0119 54.7 637.5 C
53 640 L
f
85 655 m
85 658 L
48 658 L
48 655 L
85 655 L
f
u
190.6667 169.3364 m
190.6667 183.1697 L
109.3334 183.1697 L
109.3334 169.3364 L
190.6667 169.3364 L
f
190.3333 270.6728 m
190.3333 282.3394 L
109.6667 282.3394 L
109.6667 270.6728 L
190.3333 270.6728 L
f
190 372 m
190 381.5 L
110 381.5 L
110 372 L
190 372 L
f
189.6667 473.3364 m
189.6667 480.6697 L
110.3334 480.6697 L
110.3334 473.3364 L
189.6667 473.3364 L
f
189.3334 574.6636 m
189.3334 579.8303 L
110.6667 579.8303 L
110.6667 574.6636 L
189.3334 574.6636 L
f
U
u
131.1166 136.9531 m
140.7437 157.3271 145.0355 172.4431 147.2499 194.6697 C
131.6667 194.6697 L
129.7046 174.9758 125.9175 162.2449 116.6667 142.6697 C
131.1166 136.9531 L
f
129.4332 237.5061 m
138.9066 257.2953 143.225 272.5106 145.3999 294.3394 C
132.3334 294.3394 L
130.3639 274.5722 126.4538 261.3873 117.3334 242.3394 C
129.4332 237.5061 L
f
127.75 338.05 m
137.0696 357.2544 141.4148 372.5689 143.55 394 C
133 394 L
131.0233 374.1595 126.99 360.5206 118 342 C
127.75 338.05 L
f
126.0666 438.6031 m
135.2324 457.2227 139.6044 472.6364 141.6999 493.6697 C
133.6667 493.6697 L
131.6827 473.7559 127.5262 459.663 118.6667 441.6697 C
126.0666 438.6031 L
f
124.3834 539.1469 m
133.3954 557.1818 137.7941 572.6947 139.8501 593.3303 C
134.3333 593.3303 L
132.342 573.3433 128.0624 558.7963 119.3333 541.3303 C
124.3834 539.1469 L
f
U
u
131.1166 136.9531 m
138.5614 143.2064 145.4053 145.5031 157 145.5031 c
166.0154 145.5031 170.0001 141.9089 170.0001 135.8364 c
170.0001 127.4398 161.3933 122.1697 148 122.1697 c
141.0888 122.1697 132.0687 123.2908 125.0529 124.9841 C
122.5 111.3364 L
130.1101 109.3393 139.5186 108.3364 148 108.3364 c
170.9154 108.3364 185.5 119.6972 185.5 135.003 c
185.5 150.1497 175.6656 159.3364 157 159.3364 c
139.6687 159.3364 124.5322 152.6078 116.6667 142.6697 C
131.1166 136.9531 L
f
129.4332 237.5061 m
136.8087 244.2171 144.5565 247.0062 157 247.0062 c
167.3647 247.0062 172.0001 242.8529 172.0001 235.6727 c
172.0001 226.5393 162.5898 220.3393 148 220.3393 c
140.8601 220.3393 132.2324 221.4131 125.2058 223.1681 C
123 211.6728 L
130.5006 209.6751 139.48 208.6728 148 208.6728 c
170.5324 208.6728 185 220.0029 185 235.0061 c
185 249.7762 175.4561 258.6727 157 258.6727 c
139.644 258.6727 125.1587 252.2268 117.3334 242.3394 C
129.4332 237.5061 L
f
127.75 338.05 m
135.0561 345.2186 143.7077 348.5 157 348.5 c
168.7139 348.5 174 343.7877 174 335.5 c
174 325.6297 163.7861 318.5 148 318.5 c
140.6313 318.5 132.3961 319.5264 125.3587 321.3432 C
123.5 312 L
130.891 310.0017 139.4413 309 148 309 c
170.1495 309 184.5 320.2994 184.5 335 c
184.5 349.3936 175.2466 358 157 358 c
139.6193 358 125.7852 351.8366 118 342 C
127.75 338.05 L
f
126.0666 438.6031 m
133.3034 446.2293 142.8589 450.0031 157 450.0031 c
170.0632 450.0031 176.0001 444.7318 176.0001 435.3364 c
176.0001 424.7292 164.9825 416.6697 148 416.6697 c
140.4026 416.6697 132.5598 417.6487 125.5116 419.5273 C
124 412.3364 L
131.2815 410.3376 139.4027 409.3364 148 409.3364 c
169.7666 409.3364 184 420.6051 184 435.003 c
184 449.0201 175.0372 457.3364 157 457.3364 c
139.5945 457.3364 126.4116 451.4555 118.6667 441.6697 C
126.0666 438.6031 L
f
124.3834 539.1469 m
131.5509 547.2308 142.0102 551.4969 157 551.4969 c
171.4124 551.4969 178 545.6666 178 535.1636 c
178 523.8196 166.1788 514.8303 148 514.8303 c
140.1739 514.8303 132.7235 515.762 125.6645 517.7024 C
124.5 512.6636 L
131.672 510.6642 139.3641 509.6636 148 509.6636 c
169.3837 509.6636 183.5 520.9015 183.5 534.9969 c
183.5 548.6375 174.8277 556.6636 157 556.6636 c
139.5697 556.6636 127.0381 551.0654 119.3333 541.3303 C
124.3834 539.1469 L
f
U
122.7 639.7 m
129.7982 648.2415 141.1614 653 157 653 c
172.7617 653 180 646.6106 180 635 c
180 622.9191 167.3753 613 148 613 c
139.9451 613 132.8872 613.8843 125.8174 615.8865 C
125 613 L
132.0625 611 139.3255 610 148 610 c
169.0008 610 183 621.2072 183 635 c
183 648.264 174.6182 656 157 656 c
139.545 656 127.6646 650.6843 120 641 C
122.7 639.7 L
f
189 676 m
189 679 L
111 679 L
111 676 L
189 676 L
f
122.7 639.7 m
131.5583 657.1501 135.9837 672.7622 138 693 C
135 693 L
133.0014 672.9397 128.5987 657.9387 120 641 C
122.7 639.7 L
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
