%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (2421.eps)
%%CreationDate: (2/16/04) (9:20 AM)
%%BoundingBox: 0 0 500 500
%%HiResBoundingBox: 0 0 500 500
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 256.5 244.5 256.5
%AI3_TileBox: -41.5 -119.5 534.5 642.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -139.5 520.5 1 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -119.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
1 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
0 Ap
0 O
0 g
136.2399 410.3199 m
142.0764 410.3199 148.9966 416.788 152.72 431.44 C
147.92 432.56 L
144.8242 420.3776 139.8914 415.4399 136.2399 415.4399 c
130.8389 415.4399 123.9199 426.3279 123.9199 442.96 c
123.9199 451.2224 125.4174 460.2733 127.9199 468.8001 C
122.9599 469.7601 L
120.3473 460.858 118.9599 451.6136 118.9599 442.96 c
118.9599 423.3429 128.1986 410.3199 136.2399 410.3199 c
f
182.6401 420.3999 m
182.6401 440.2939 178.195 457.1486 169.8401 469.1201 C
165.5201 466.8001 L
173.3853 455.5304 177.6801 439.4382 177.6801 420.3999 C
182.6401 420.3999 L
f
136.1599 309.9999 m
142.4477 309.9999 150.0065 317.0706 153.78 331.92 C
147.2 333.52 L
144.3014 322.1134 139.531 317.1399 136.2399 317.1399 c
131.5765 317.1399 125.6999 327.0328 125.6999 342.96 c
125.6999 351.1116 127.2585 360.6414 129.6999 368.9601 C
122.6399 370.0801 L
120.0431 361.2317 118.6399 351.6836 118.6399 342.96 c
118.6399 322.407 127.6123 309.9999 136.1599 309.9999 c
f
136.0799 209.6799 m
142.8191 209.6799 151.0163 217.3532 154.84 232.3999 C
146.48 234.48 L
143.7785 223.8492 139.1705 218.8399 136.2399 218.8399 c
132.3141 218.8399 127.4799 227.7376 127.4799 242.96 c
127.4799 251.0008 129.0996 261.0095 131.4799 269.1201 C
122.3199 270.4001 L
119.7388 261.6054 118.3199 251.7536 118.3199 242.96 c
118.3199 221.4711 127.0259 209.6799 136.0799 209.6799 c
f
135.9999 109.3599 m
143.1904 109.3599 152.0261 117.6359 155.9 132.88 C
145.76 135.44 L
143.2557 125.585 138.8101 120.5399 136.2399 120.5399 c
133.0517 120.5399 129.2599 128.4425 129.2599 142.96 c
129.2599 150.89 130.9407 161.3776 133.2599 169.2801 C
121.9999 170.7201 L
119.4346 161.9791 117.9999 151.8237 117.9999 142.96 c
117.9999 120.5352 126.4395 109.3599 135.9999 109.3599 c
f
182.9601 320.1599 m
182.9601 340.2177 178.4958 357.4162 170.1601 369.3601 C
163.9801 366.4801 L
171.6189 355.5348 175.9001 339.0712 175.9001 320.1599 C
182.9601 320.1599 L
f
183.2801 219.9199 m
183.2801 240.1415 178.7966 257.6838 170.4801 269.6001 C
162.4401 266.1601 L
169.8524 255.5392 174.1201 238.7043 174.1201 219.9199 C
183.2801 219.9199 L
f
183.6001 119.6799 m
183.6001 140.0653 179.0973 157.9514 170.8001 169.8401 C
160.9 165.8401 L
168.086 155.5436 172.3401 138.3374 172.3401 119.6799 C
183.6001 119.6799 L
f
136.2399 22.2399 m
133.7893 22.2399 131.0399 29.1473 131.0399 42.96 c
131.0399 50.7792 132.7817 61.7457 135.0399 69.4401 C
121.6799 71.0401 L
119.1303 62.3528 117.6799 51.8937 117.6799 42.96 c
117.6799 19.5993 125.8532 9.0399 135.9199 9.0399 c
143.5618 9.0399 153.036 17.9185 156.96 33.36 C
145.04 36.4 L
142.7328 27.3208 138.4497 22.2399 136.2399 22.2399 c
f
159.36 65.5201 m
166.3196 55.548 170.5601 37.9705 170.5601 19.4399 C
183.9201 19.4399 L
183.9201 39.9891 179.3981 58.2189 171.1201 70.0801 C
159.36 65.5201 L
f
267.6001 472.4001 m
256.4 472.4001 243.8 473.4801 233.0399 475.2801 C
232.3199 470.4801 L
243.4692 468.615 256.3665 467.6001 267.6001 467.6001 C
267.6001 472.4001 L
f
252.72 449.84 m
268.4817 449.84 273.8401 445.6967 273.8401 436.4 c
273.8401 424.3369 262.8397 415.8262 236.4799 413.5199 C
237.0399 408.5599 L
265.5529 411.0545 278.8001 422.0487 278.8001 436.4 c
278.8001 448.2044 270.9137 454.8 252.72 454.8 c
241.7199 454.8 232.685 452.9667 219.5999 448.08 C
221.0399 443.36 L
233.6442 448.0671 242.2415 449.84 252.72 449.84 c
f
231.6799 368.9401 m
242.8852 367.1246 256.6657 366.0601 268.0001 366.0601 C
268.0001 372.6401 L
256.8487 372.6401 243.4375 373.7451 232.6399 375.5201 C
231.6799 368.9401 L
f
231.0399 267.4001 m
242.3013 265.6342 256.9649 264.5201 268.4001 264.5201 C
268.4001 272.8801 L
257.2973 272.8801 243.075 274.0101 232.2399 275.7601 C
231.0399 267.4001 L
f
230.3999 165.8601 m
241.7173 164.1438 257.2641 162.9801 268.8001 162.9801 C
268.8001 173.1201 L
257.7459 173.1201 242.7125 174.2751 231.8399 176.0001 C
230.3999 165.8601 L
f
252.72 347.9 m
267.5392 347.9 272.0601 344.372 272.0601 336.16 c
272.0601 324.9671 262.108 317.3651 235.7599 315.0599 C
236.5599 308.3199 L
265.8763 310.8848 279.0401 321.7052 279.0401 336.16 c
279.0401 347.9958 271.0398 354.64 252.72 354.64 c
241.7028 354.64 232.543 352.8134 219.4399 347.92 C
221.4399 341.5 L
233.9864 346.1855 242.3709 347.9 252.72 347.9 c
f
252.72 245.96 m
266.5967 245.96 270.2801 243.0474 270.2801 235.92 c
270.2801 225.5973 261.3761 218.9041 235.0399 216.5999 C
236.0799 208.0799 L
266.1997 210.7151 279.2801 221.3616 279.2801 235.92 c
279.2801 247.7872 271.1658 254.48 252.72 254.48 c
241.6858 254.48 232.4009 252.6601 219.2799 247.76 C
221.8399 239.64 L
234.3286 244.3039 242.5002 245.96 252.72 245.96 c
f
252.72 144.02 m
265.6542 144.02 268.5001 141.7228 268.5001 135.68 c
268.5001 126.2275 260.6443 120.443 234.3199 118.1399 C
235.5999 107.8399 L
266.5231 110.5453 279.5201 121.0181 279.5201 135.68 c
279.5201 147.5787 271.2918 154.32 252.72 154.32 c
241.6687 154.32 232.2589 152.5068 219.1199 147.6 C
222.2399 137.78 L
234.6708 142.4223 242.6295 144.02 252.72 144.02 c
f
229.7599 64.3201 m
241.1333 62.6535 257.5633 61.4401 269.2001 61.4401 C
269.2001 73.3601 L
258.1946 73.3601 242.35 74.5401 231.4399 76.2401 C
229.7599 64.3201 L
f
252.72 54.16 m
241.6516 54.16 232.1168 52.3535 218.9599 47.44 C
222.6399 35.92 L
235.013 40.5407 242.7588 42.08 252.72 42.08 c
264.7117 42.08 266.7201 40.3982 266.7201 35.44 c
266.7201 26.8577 259.9125 21.982 233.5999 19.6799 C
235.1199 7.5999 L
266.8464 10.3756 279.7601 20.6746 279.7601 35.44 c
279.7601 47.3701 271.4178 54.16 252.72 54.16 c
f
*u
1 D
17.3599 425.0399 m
17.3599 416.7463 23.4775 410.9599 31.2799 410.9599 c
42.4147 410.9599 55.6581 423.6342 63.5286 445.1583 C
73.9009 443.4762 78.0001 438.7211 78.0001 431.44 c
78.0001 421.3872 69.951 413.4174 58.32 412.3999 C
58.8 407.7599 L
72.4822 408.9569 82.6401 419.6322 82.6401 431.44 c
82.6401 440.3147 76.9022 446.991 64.9934 449.4493 C
65.7758 451.9314 66.4882 454.5163 67.12 457.2001 C
62.48 458.0001 L
61.8343 455.2573 61.1111 452.6466 60.3268 450.1586 C
58.3046 450.3682 56.1461 450.48 53.84 450.48 c
49.5827 450.48 45.6237 450.0579 42 449.2822 C
42 462.1601 L
78.6401 462.1601 L
78.6401 466.8001 L
42 466.8001 L
42 477.0401 L
37.1999 477.0401 L
37.1999 466.8001 L
21.3599 466.8001 L
21.3599 462.1601 L
37.1999 462.1601 L
37.1999 447.9873 L
24.7335 443.8683 17.3599 435.0894 17.3599 425.0399 c
f
0 D
21.9999 425.0399 m
21.9999 432.9277 27.2967 439.7495 37.1999 443.2779 C
37.1999 416.9927 L
35.1602 416.0741 33.1658 415.5999 31.2799 415.5999 c
25.4392 415.5999 21.9999 419.1065 21.9999 425.0399 c
f
53.84 445.84 m
55.604 445.84 57.2521 445.7855 58.7989 445.6826 C
54.2642 433.397 48.1381 424.718 42 419.9374 C
42 444.6419 L
45.5169 445.4158 49.4677 445.84 53.84 445.84 c
f
*U
*u
1 D
31.5799 310.4799 m
43.3394 310.4799 56.4181 322.5214 64.3859 343.7165 C
72.8184 341.9774 76.1401 337.766 76.1401 331.44 c
76.1401 322.1133 69.1591 315.0921 57.92 314.0199 C
58.8 307.6799 L
72.7621 308.9014 82.8001 319.3746 82.8001 331.44 c
82.8001 340.0206 77.35 346.6761 66.3337 349.4246 C
67.0648 351.79 67.7386 354.2454 68.34 356.8 C
61.92 357.9201 L
61.3096 355.3272 60.6367 352.8573 59.9109 350.5073 C
58.0051 350.6967 55.9864 350.8 53.84 350.8 c
50.0168 350.8 46.4299 350.4446 43.1 349.7973 C
43.1 361.4001 L
78.7201 361.4001 L
78.7201 367.5001 L
43.1 367.5001 L
43.1 377.1201 L
36.5199 377.1201 L
36.5199 367.5001 L
21.2799 367.5001 L
21.2799 361.4001 L
36.5199 361.4001 L
36.5199 348.0211 L
24.383 343.7283 17.1199 334.9358 17.1199 325.0399 c
17.1199 316.4297 23.3441 310.4799 31.5799 310.4799 c
f
0 D
53.84 344.62 m
55.2529 344.62 56.5831 344.5825 57.8437 344.5128 C
53.758 333.8229 48.5074 326.1935 43.1 321.6874 C
43.1 343.5831 L
46.3155 344.2518 49.8974 344.62 53.84 344.62 c
f
36.5199 341.5942 m
36.5199 317.7547 L
34.8379 317.1366 33.1804 316.8199 31.5799 316.8199 c
26.5796 316.8199 23.6199 319.8182 23.6199 325.0399 c
23.6199 332.0048 28.126 338.1227 36.5199 341.5942 C
f
*U
*u
1 D
31.8799 209.9999 m
44.2278 209.9999 57.1401 221.4098 65.1982 242.2015 C
71.7155 240.4457 74.2801 236.791 74.2801 231.4399 c
74.2801 222.8394 68.3671 216.7668 57.52 215.6399 C
58.8 207.5998 L
73.0419 208.8459 82.9601 219.1169 82.9601 231.4399 c
82.9601 239.715 77.8135 246.318 67.6542 249.3361 C
68.3433 251.6038 68.984 253.9531 69.5601 256.4 C
61.36 257.8401 L
60.7848 255.3968 60.1583 253.0724 59.4888 250.8591 C
57.7045 251.0281 55.8253 251.12 53.84 251.12 c
50.4428 251.12 47.2223 250.8345 44.2 250.3057 C
44.2 260.6401 L
78.8001 260.6401 L
78.8001 268.2001 L
44.2 268.2001 L
44.2 277.2001 L
35.8399 277.2001 L
35.8399 268.2001 L
21.1999 268.2001 L
21.1999 260.6401 L
35.8399 260.6401 L
35.8399 248.0431 L
24.0227 243.5835 16.8799 234.7822 16.8799 225.0399 c
16.8799 216.1132 23.2108 209.9999 31.8799 209.9999 c
f
0 D
53.84 243.4 m
54.9025 243.4 55.9045 243.3737 56.8722 243.332 C
53.2692 234.2454 48.8489 227.6518 44.2 223.4838 C
44.2 242.524 L
47.1093 243.0908 50.3261 243.4 53.84 243.4 c
f
35.8399 239.8144 m
35.8399 218.6118 L
34.5054 218.2328 33.1807 218.0399 31.8799 218.0399 c
27.7201 218.0399 25.2399 220.53 25.2399 225.0399 c
25.2399 231.0691 28.9459 236.4585 35.8399 239.8144 C
f
*U
*u
1 D
32.1799 109.5199 m
45.0699 109.5199 57.8208 120.2671 65.9619 140.5585 C
70.5851 138.84 72.4201 135.7743 72.4201 131.44 c
72.4201 123.5656 67.5752 118.4415 57.12 117.2599 C
58.8 107.5199 L
73.3218 108.7903 83.1201 118.8593 83.1201 131.44 c
83.1201 139.3985 78.2903 145.9176 68.9535 149.1797 C
69.6098 151.3704 70.2238 153.6373 70.7801 156.0001 C
60.8 157.7601 L
60.2602 155.4673 59.6783 153.2908 59.0632 151.2137 C
57.4047 151.3624 55.6641 151.44 53.84 151.44 c
50.8561 151.44 48.0064 151.2091 45.3 150.787 C
45.3 159.8801 L
78.8801 159.8801 L
78.8801 168.9001 L
45.3 168.9001 L
45.3 177.2801 L
35.1599 177.2801 L
35.1599 168.9001 L
21.1199 168.9001 L
21.1199 159.8801 L
35.1599 159.8801 L
35.1599 148.0477 L
23.6561 143.4279 16.6399 134.6277 16.6399 125.0399 c
16.6399 115.7966 23.0775 109.5199 32.1799 109.5199 c
f
0 D
53.84 142.18 m
54.5519 142.18 55.225 142.1639 55.8895 142.1442 C
52.8022 134.6578 49.1705 129.0959 45.3 125.3337 C
45.3 141.4529 L
47.9004 141.923 50.7492 142.18 53.84 142.18 c
f
35.1599 137.8865 m
35.1599 119.5639 L
34.1636 119.3622 33.1688 119.2599 32.1799 119.2599 c
28.8605 119.2599 26.8599 121.2418 26.8599 125.0399 c
26.8599 130.1094 29.7639 134.7244 35.1599 137.8865 C
f
*U
*u
1 D
70.2311 48.9515 m
70.8635 51.0872 71.4578 53.2964 72.0001 55.6 C
60.24 57.68 L
59.7352 55.5358 59.197 53.5034 58.6335 51.5601 C
57.1016 51.6894 55.5063 51.76 53.84 51.76 c
51.2617 51.76 48.7801 51.5816 46.4 51.2556 C
46.4 59.1201 L
78.9601 59.1201 L
78.9601 69.6001 L
46.4 69.6001 L
46.4 77.3601 L
34.4799 77.3601 L
34.4799 69.6001 L
21.0399 69.6001 L
21.0399 59.1201 L
34.4799 59.1201 L
34.4799 48.0262 L
23.2867 43.2529 16.3999 34.4703 16.3999 25.0399 c
16.3999 15.48 22.9442 9.0399 32.4799 9.0399 c
45.836 9.0399 58.3937 19.092 66.6098 38.7118 C
69.4206 37.121 70.5601 34.696 70.5601 31.44 c
70.5601 24.2917 66.7832 20.1162 56.72 18.8799 C
58.8 7.4399 L
73.6016 8.7348 83.2801 18.6017 83.2801 31.44 c
83.2801 39.0708 78.778 45.4752 70.2311 48.9515 C
f
0 D
28.4799 25.0399 m
28.4799 29.1057 30.5877 32.8736 34.4799 35.729 C
34.4799 20.6064 L
33.8146 20.5226 33.1476 20.4799 32.4799 20.4799 c
30.001 20.4799 28.4799 21.9536 28.4799 25.0399 c
f
46.4 27.2638 m
46.4 40.3595 L
48.691 40.7396 51.1628 40.96 53.84 40.96 c
54.2026 40.96 54.5344 40.948 54.8831 40.9426 C
52.347 35.056 49.4756 30.5384 46.4 27.2638 C
f
*U
366.64 472.8801 m
355.44 472.8801 344.75 473.8401 333.9999 475.7601 C
333.2799 471.0401 L
344.3559 469.0619 355.2982 468.2401 366.64 468.2401 C
366.64 472.8801 L
f
320.0799 410.1599 m
345.3606 429.9599 346.1557 430.24 350.32 430.24 c
356.5469 430.24 358.2951 428.5709 358.8 422.7999 c
359.6108 413.5325 364.3428 410.1599 373.3601 410.1599 c
376.0501 410.1599 380.0501 410.7099 382.0001 411.2799 C
381.2001 416.0799 L
379.1101 415.4499 375.7326 414.9599 373.3601 414.9599 c
366.0171 414.9599 364.36 416.2622 363.76 423.1199 c
363.0744 430.9561 359.2378 434.6205 351.6801 435.0022 C
373.2001 451.92 L
373.2001 457.2001 L
323.5999 457.2001 L
323.5999 452.4001 L
365.9639 452.4001 L
317.0799 413.9599 L
320.0799 410.1599 L
f
332.6399 369.5801 m
343.4054 367.6574 355.1099 366.7801 367.0401 366.7801 C
367.0401 373.0401 L
355.84 373.0401 344.35 374.0001 333.5999 375.9201 C
332.6399 369.5801 L
f
331.9999 268.1201 m
342.455 266.2528 354.9216 265.3201 367.44 265.3201 C
367.44 273.2001 L
356.24 273.2001 343.95 274.1601 333.1999 276.0801 C
331.9999 268.1201 L
f
331.3599 166.6601 m
341.5045 164.8482 354.7333 163.8601 367.8401 163.8601 C
367.8401 173.3601 L
356.64 173.3601 343.55 174.3201 332.7999 176.2401 C
331.3599 166.6601 L
f
350.02 329.4399 m
355.601 329.4399 357.0017 328.096 357.5 322.3999 c
358.2729 313.5658 363.5474 309.9999 373.3601 309.9999 c
376.0501 309.9999 380.1301 310.5499 382.0801 311.1199 C
381.2001 317.5399 L
379.19 316.9299 375.7029 316.4199 373.3601 316.4199 c
366.2881 316.4199 364.8778 317.5444 364.32 323.9199 c
363.7266 330.702 360.3035 334.4507 353.6053 335.3808 C
373.2801 350.64 L
373.2801 357.1201 L
323.5199 357.1201 L
323.5199 350.7 L
362.7324 350.7 L
317.0099 315.2299 L
320.8799 309.9999 L
345.606 329.1024 346.4137 329.4399 350.02 329.4399 c
f
349.72 228.6399 m
354.6551 228.6399 355.7082 227.621 356.2 221.9999 c
356.935 213.5992 362.752 209.8399 373.3601 209.8399 c
376.0501 209.8399 380.2101 210.3899 382.1601 210.9599 C
381.2001 218.9999 L
379.2699 218.4098 375.6731 217.8799 373.3601 217.8799 c
366.5591 217.8799 365.3956 218.8267 364.88 224.7199 c
364.3668 230.5853 361.3204 234.2783 355.3934 235.6208 C
373.3601 249.36 L
373.3601 257.04 L
323.4399 257.04 L
323.4399 249 L
359.4313 249 L
316.9399 216.4999 L
321.6799 209.8399 L
345.8514 228.2449 346.6716 228.6399 349.72 228.6399 c
f
349.42 127.8399 m
353.7092 127.8399 354.4148 127.146 354.9 121.5999 c
355.5971 113.6325 361.9566 109.6799 373.3601 109.6799 c
376.0501 109.6799 380.2901 110.2299 382.2401 110.7999 C
381.2001 120.4599 L
379.3497 119.8898 375.6434 119.3399 373.3601 119.3399 c
366.8301 119.3399 365.9134 120.1089 365.4401 125.5199 c
364.9975 130.5778 362.303 134.1205 357.084 135.7551 C
373.4401 148.08 L
373.4401 156.96 L
323.3599 156.96 L
323.3599 147.3 L
356.054 147.3 L
316.8699 117.7699 L
322.4799 109.6799 L
346.0968 127.3874 346.9296 127.8399 349.42 127.8399 c
f
330.7199 65.2001 m
340.554 63.4437 354.545 62.4001 368.24 62.4001 C
368.24 73.5201 L
357.04 73.5201 343.15 74.4801 332.3999 76.4001 C
330.7199 65.2001 L
f
373.3601 20.7999 m
367.1011 20.7999 366.4313 21.3912 366.0001 26.3199 c
365.6204 30.6585 363.2573 33.9818 358.6995 35.8025 C
373.5201 46.8 L
373.5201 56.88 L
323.2799 56.88 L
323.2799 45.6 L
352.5933 45.6 L
316.7999 19.0399 L
323.2799 9.5199 L
346.3422 26.5299 347.1875 27.0399 349.12 27.0399 c
352.7633 27.0399 353.1214 26.6711 353.6 21.1999 c
354.2591 13.6659 361.1612 9.5199 373.3601 9.5199 c
376.0501 9.5199 380.3701 10.0699 382.3201 10.6399 C
381.2001 21.9199 L
379.4296 21.3698 375.6136 20.7999 373.3601 20.7999 c
f
*u
1 D
417.3599 425.5199 m
417.3599 416.5445 423.8634 409.9999 432.8799 409.9999 c
440.4729 409.9999 444.4 414.3972 444.4 423.5999 C
444.4 441.7965 L
447.4493 442.2361 450.8041 442.48 454.48 442.48 c
468.9562 442.48 475.4401 437.3533 475.4401 430.16 c
475.4401 420.4495 468.9236 414.2416 456.56 413.1599 C
457.2 408.3599 L
471.5424 409.6147 480.2401 418.1805 480.2401 430.16 c
480.2401 439.7697 471.1327 447.28 454.48 447.28 c
450.8773 447.28 447.5162 447.0354 444.4 446.5862 C
444.4 461.2001 L
464.24 461.2001 L
464.24 465.8401 L
444.4 465.8401 L
444.4 477.0401 L
439.4399 477.0401 L
439.4399 465.8401 L
422.1599 465.8401 L
422.1599 461.2001 L
439.4399 461.2001 L
439.4399 445.6476 L
425.1866 442.2822 417.3599 434.1502 417.3599 425.5199 c
f
0 D
439.4399 423.5999 m
439.4399 416.6559 437.823 414.7999 432.8799 414.7999 c
426.0407 414.7999 422.1599 418.7397 422.1599 425.5199 c
422.1599 431.9256 427.9292 438.024 439.4399 440.8442 C
439.4399 423.5999 L
f
*U
480.7601 454.68 m
484.2401 457.5201 L
479.6534 463.6001 474.9401 468.3401 469.0401 473.0401 C
466.0401 469.7201 L
471.8191 465.1165 476.4774 460.3571 480.7601 454.68 C
f
469.8401 373.7601 m
465.35 369.5101 L
470.8684 364.6832 475.2581 359.9153 479.5101 354.07 C
484.4801 357.7601 L
479.9651 364.0226 475.5101 368.7901 469.8401 373.7601 C
f
470.6401 274.4801 m
464.66 269.3001 L
469.9176 264.2498 474.0387 259.4736 478.2601 253.46 C
484.7201 258 L
480.2767 264.4451 476.0801 269.2401 470.6401 274.4801 C
f
463.97 169.0901 m
468.9669 163.8165 472.8194 159.0318 477.0101 152.85 C
484.9601 158.2401 L
480.5884 164.8676 476.6501 169.6901 471.4401 175.2001 C
463.97 169.0901 L
f
*u
1 D
433.1799 309.6799 m
441.4381 309.6799 446.1 314.8135 446.1 324.3199 C
446.1 340.8788 L
448.6641 341.1764 451.4513 341.34 454.48 341.34 c
467.7574 341.34 473.8201 336.6152 473.8201 329.92 c
473.8201 321.1218 468.1232 315.8249 456.32 314.7699 C
457.2 308.1899 L
471.7592 309.4637 480.6401 318.0748 480.6401 329.92 c
480.6401 339.7277 470.9861 347.76 454.48 347.76 c
451.519 347.76 448.7259 347.6005 446.1 347.3024 C
446.1 359.9001 L
464.02 359.9001 L
464.02 366.0801 L
446.1 366.0801 L
446.1 377.1201 L
439.1999 377.1201 L
439.1999 366.0801 L
422.0799 366.0801 L
422.0799 359.9001 L
439.1999 359.9001 L
439.1999 346.1107 L
424.8531 342.7176 417.1999 334.5112 417.1999 325.5999 c
417.1999 316.3656 423.8461 309.6799 433.1799 309.6799 c
f
0 D
439.1999 339.6209 m
439.1999 324.3199 L
439.1999 317.8231 437.649 316.0999 433.1799 316.0999 c
427.2805 316.0999 423.9399 319.5206 423.9399 325.5999 c
423.9399 331.4543 428.8752 336.9389 439.1999 339.6209 C
f
*U
*u
1 D
433.4799 209.3599 m
442.4033 209.3599 447.8 215.2299 447.8 225.0399 C
447.8 239.9172 L
449.8705 240.1006 452.0924 240.2 454.48 240.2 c
466.5586 240.2 472.2001 235.8771 472.2001 229.6799 c
472.2001 221.7941 467.3228 217.4083 456.08 216.3799 C
457.2 208.0199 L
471.976 209.3127 481.0401 217.9691 481.0401 229.6799 c
481.0401 239.6857 470.8397 248.24 454.48 248.24 c
452.147 248.24 449.9208 248.1444 447.8 247.9628 C
447.8 258.6001 L
463.8 258.6001 L
463.8 266.3201 L
447.8 266.3201 L
447.8 277.2001 L
438.9599 277.2001 L
438.9599 266.3201 L
421.9999 266.3201 L
421.9999 258.6001 L
438.9599 258.6001 L
438.9599 246.5737 L
424.5203 243.1529 417.0399 234.8719 417.0399 225.6799 c
417.0399 216.1866 423.8289 209.3599 433.4799 209.3599 c
f
0 D
438.9599 238.3924 m
438.9599 225.0399 L
438.9599 218.9904 437.475 217.3999 433.4799 217.3999 c
428.5203 217.3999 425.7199 220.3014 425.7199 225.6799 c
425.7199 230.9814 429.8486 235.8638 438.9599 238.3924 C
f
*U
*u
1 D
433.7799 109.0399 m
443.3685 109.0399 449.5 115.6463 449.5 125.7599 C
449.5 138.9103 L
451.0666 139.0079 452.7239 139.06 454.48 139.06 c
465.3598 139.06 470.5801 135.139 470.5801 129.4399 c
470.5801 122.4664 466.5225 118.9916 455.84 117.9899 C
457.2 107.8499 L
472.1928 109.1617 481.4401 117.8633 481.4401 129.4399 c
481.4401 139.6437 470.6931 148.72 454.48 148.72 c
452.7592 148.72 451.1031 148.6655 449.5 148.5687 C
449.5 157.3001 L
463.58 157.3001 L
463.58 166.5601 L
449.5 166.5601 L
449.5 177.2801 L
438.7199 177.2801 L
438.7199 166.5601 L
421.9199 166.5601 L
421.9199 157.3001 L
438.7199 157.3001 L
438.7199 147.0368 L
424.1882 143.5884 416.8799 135.2322 416.8799 125.7599 c
416.8799 116.0077 423.8116 109.0399 433.7799 109.0399 c
f
0 D
438.7199 137.1472 m
438.7199 125.7599 L
438.7199 120.1576 437.301 118.6999 433.7799 118.6999 c
429.76 118.6999 427.4999 121.0823 427.4999 125.7599 c
427.4999 130.5026 430.8616 134.7877 438.7199 137.1472 C
f
*U
463.28 68.8801 m
468.0161 63.3832 471.6001 58.5901 475.7601 52.24 C
485.2001 58.4801 L
480.9001 65.2901 477.2201 70.1401 472.2401 75.9201 C
463.28 68.8801 L
f
*u
1 D
454.48 49.2 m
453.358 49.2 452.2709 49.1723 451.2 49.132 C
451.2 56.0001 L
463.36 56.0001 L
463.36 66.8001 L
451.2 66.8001 L
451.2 77.3601 L
438.4799 77.3601 L
438.4799 66.8001 L
421.8399 66.8001 L
421.8399 56.0001 L
438.4799 56.0001 L
438.4799 47.5 L
423.8567 44.0237 416.7199 35.5921 416.7199 25.8399 c
416.7199 15.8288 423.7943 8.7199 434.0799 8.7199 c
444.3337 8.7199 451.2 16.0627 451.2 26.4799 C
451.2 37.8591 L
452.2498 37.899 453.3418 37.92 454.48 37.92 c
464.161 37.92 468.9601 34.401 468.9601 29.1999 c
468.9601 23.1387 465.722 20.575 455.6 19.5999 C
457.2 7.6799 L
472.4096 9.0107 481.8401 17.7576 481.8401 29.1999 c
481.8401 39.6017 470.5466 49.2 454.48 49.2 c
f
0 D
438.4799 26.4799 m
438.4799 21.3248 437.127 19.9999 434.0799 19.9999 c
430.9998 19.9999 429.2799 21.8631 429.2799 25.8399 c
429.2799 30.017 431.9107 33.7177 438.4799 35.8895 C
438.4799 26.4799 L
f
*U
U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
