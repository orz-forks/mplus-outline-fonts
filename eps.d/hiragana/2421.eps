%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (2421.eps)
%%CreationDate: (4/23/04) (11:37 AM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
1 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
500 600 m
500 700 L
400 700 L
400 600 L
500 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
400 600 m
400 700 L
300 700 L
300 600 L
400 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
500 500 m
500 600 L
400 600 L
400 500 L
500 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
400 500 m
400 600 L
300 600 L
300 500 L
400 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
0 Ap
0 O
0 g
1 D
78.0445 667.6861 m
39.8222 667.6861 L
39.8222 677.2195 L
37.111 677.2195 L
37.111 667.6861 L
21.9554 667.6861 L
21.9554 665.0195 L
37.111 665.0195 L
37.111 614.0193 L
39.8222 614.0193 L
39.8222 665.0195 L
78.0445 665.0195 L
78.0445 667.6861 L
f
58.8 609.1526 m
73.1514 610.4078 82.0668 619.2979 82.0668 631.6193 c
82.0668 642.3796 72.1628 650.1083 54 650.1083 c
32.8549 650.1083 17.9332 637.8122 17.9332 625.2193 c
17.9332 616.993 23.6037 611.5304 32.4221 611.5304 c
45.6599 611.5304 59.4875 626.798 66.1779 660.2639 C
63.4889 660.7194 L
56.6271 626.3675 43.022 614.1971 32.4221 614.1971 c
25.1606 614.1971 20.6443 618.4133 20.6443 625.2193 c
20.6443 635.9734 34.034 647.4416 54 647.4416 c
69.6739 647.4416 79.3556 641.3742 79.3556 631.6193 c
79.3556 620.5337 71.2735 612.9466 58.4445 611.8193 C
58.8 609.1526 L
f
0 D
150.8889 636.5082 m
145.9794 623.0799 138.3135 615.0637 134.1111 615.0637 c
128.7543 615.0637 122.2666 625.706 122.2666 641.9972 c
122.2666 648.9979 123.6413 658.5504 126.211 667.875 C
123.5554 668.4639 L
120.958 659.0431 119.5332 649.4113 119.5332 641.9972 c
119.5332 623.7626 127.0734 612.3081 134.1111 612.3081 c
139.6537 612.3081 148.0906 621.0145 153.4222 635.5971 C
150.8889 636.5082 L
f
179.3334 620.3304 m
179.3334 638.0986 175.357 654.8523 168.4578 667.2773 C
170.8667 668.4639 L
177.9896 655.624 182.0668 638.5674 182.0668 620.3304 C
179.3334 620.3304 L
f
1 D
233.9333 674.0639 m
244.6097 672.0806 256.6916 670.8861 267.6667 670.8861 C
267.6667 668.1972 L
256.819 668.1972 244.6781 669.3809 233.5088 671.455 C
233.9333 674.0639 L
f
0 D
236.0244 613.4193 m
263.14 615.7916 276.1334 625.6421 276.1334 639.5305 c
276.1334 646.4113 269.1548 651.3749 254 651.3749 c
243.1328 651.3749 232.5418 650.0416 221.7443 647.4594 C
221.1332 650.0638 L
232.298 652.7338 243.1808 654.0639 254 654.0639 c
270.9267 654.0639 278.8668 647.9924 278.8668 639.5305 c
278.8668 624.2687 265.2895 613.2657 236.311 610.7304 C
236.0244 613.4193 L
f
1 D
333.5088 672.255 m
344.6781 670.1809 356.819 668.9972 367.6667 668.9972 C
367.6667 671.6861 L
356.6916 671.6861 344.6097 672.8806 333.9333 674.8639 C
333.5088 672.255 L
f
320.511 611.5081 m
374.089 655.2638 L
374.089 657.9972 L
323.5554 657.9972 L
323.5554 655.3083 L
373.1779 655.3083 L
372.4334 657.3639 L
318.7332 613.6082 L
320.511 611.5081 L
f
380.6134 615.746 m
378.4361 614.9302 374.618 614.2415 372.4445 614.2415 c
365.2238 614.2415 363.4949 615.6312 361.9 623.8082 c
360.1626 632.7139 357.1024 635.6416 351.6444 635.6416 c
346.3036 635.6416 345.575 635.3319 318.7332 613.6082 C
320.511 611.5081 L
346.7438 632.7536 347.0932 632.9527 351.5556 632.9527 c
355.7329 632.9527 357.7183 630.6887 359.1889 623.1526 c
360.9908 613.9167 363.8603 611.5304 372.3556 611.5304 C
375.0192 611.5304 379.1738 612.3449 381.2668 613.1304 C
380.6134 615.746 L
f
456.4 609.1526 m
470.4408 610.3811 478.8668 618.4021 478.8668 630.7971 c
478.8668 639.4232 469.7938 646.8638 454.8222 646.8638 c
430.6727 646.8638 417.9332 637.1165 417.9332 625.1971 c
417.9332 617.655 424.5724 611.5304 431.6221 611.5304 c
438.9897 611.5304 443.0222 616.1026 443.0222 628.3749 C
443.0222 662.575 L
464.4889 662.575 L
464.4889 665.2417 L
443.0222 665.2417 L
443.0222 677.2195 L
440.3111 677.2195 L
440.3111 665.2417 L
422.7332 665.2417 L
422.7332 662.575 L
440.3111 662.575 L
440.3111 628.3749 l
440.3111 617.7567 437.457 614.1971 431.6444 614.1971 c
425.7969 614.1971 420.6666 619.3293 420.6666 625.2193 c
420.6666 635.6078 432.8019 644.1749 454.8222 644.1749 c
468.0237 644.1749 476.1334 637.9555 476.1334 630.7749 c
476.1334 619.8375 468.7726 612.9533 456.0289 611.8304 C
456.4 609.1526 L
f
466.56 669.9017 m
471.8727 665.2169 476.025 660.8038 480.7401 654.875 C
482.8668 656.4861 L
478.205 662.3478 473.9637 666.8861 468.4445 671.7528 C
466.56 669.9017 L
f
u
78.3038 568.3688 m
41.2852 568.3688 L
41.2852 577.3466 L
36.5924 577.3466 L
36.5924 568.3688 L
21.6961 568.3688 L
21.6961 563.9798 L
36.5924 563.9798 L
36.5924 514.1464 L
41.2852 514.1464 L
41.2852 563.9798 L
78.3038 563.9798 L
78.3038 568.3688 L
f
78.563 469.0514 m
42.7482 469.0514 L
42.7482 477.4736 L
36.0739 477.4736 L
36.0739 469.0514 L
21.4369 469.0514 L
21.4369 462.9402 L
36.0739 462.9402 L
36.0739 414.2734 L
42.7482 414.2734 L
42.7482 462.9402 L
78.563 462.9402 L
78.563 469.0514 L
f
78.8223 369.7431 m
44.2111 369.7431 L
44.2111 377.6098 L
35.5555 377.6098 L
35.5555 369.7431 L
21.1776 369.7431 L
21.1776 361.9098 L
35.5555 361.9098 L
35.5555 314.4096 L
44.2111 314.4096 L
44.2111 361.9098 L
78.8223 361.9098 L
78.8223 369.7431 L
f
79.0816 270.4257 m
45.6741 270.4257 L
45.6741 277.7369 L
35.0369 277.7369 L
35.0369 270.4257 L
20.9184 270.4257 L
20.9184 260.8701 L
35.0369 260.8701 L
35.0369 214.5366 L
45.6741 214.5366 L
45.6741 260.8701 L
79.0816 260.8701 L
79.0816 270.4257 L
f
79.3408 171.1175 m
47.137 171.1175 L
47.137 177.8731 L
34.5185 177.8731 L
34.5185 171.1175 L
20.6591 171.1175 L
20.6591 159.8397 L
34.5185 159.8397 L
34.5185 114.6728 L
47.137 114.6728 L
47.137 159.8397 L
79.3408 159.8397 L
79.3408 171.1175 L
f
U
u
58.8 508.8908 m
73.4708 510.174 82.4557 518.9865 82.4557 531.7464 c
82.4557 542.8329 72.4555 550.7539 54 550.7539 c
32.5295 550.7539 17.5443 538.3476 17.5443 525.3464 c
17.5443 516.6317 23.2981 511.1389 32.5517 511.1389 c
46.4087 511.1389 60.55 526.2594 67.3816 559.4835 C
62.8407 560.2631 L
56.0942 527.2687 42.9579 515.5279 32.5517 515.5279 c
26.276 515.5279 22.2369 519.3042 22.2369 525.3464 c
22.2369 535.5623 34.9753 546.3649 54 546.3649 c
68.8256 546.3649 77.763 540.6678 77.763 531.7464 c
77.763 521.3789 70.3084 514.3716 58.2371 513.2797 C
58.8 508.8908 L
f
58.8 408.6289 m
73.7901 409.9401 82.8446 418.6752 82.8446 431.8734 c
82.8446 443.2863 72.7482 451.3995 54 451.3995 c
32.2042 451.3995 17.1554 438.883 17.1554 425.4734 c
17.1554 416.2703 22.9924 410.7474 32.6814 410.7474 c
47.1576 410.7474 61.6126 425.7207 68.5853 458.7031 C
62.1925 459.8068 L
55.5614 428.1698 42.8938 416.8587 32.6814 416.8587 c
27.3915 416.8587 23.8296 420.1951 23.8296 425.4734 c
23.8296 435.1512 35.9166 445.2882 54 445.2882 c
67.9773 445.2882 76.1703 439.9613 76.1703 431.8734 c
76.1703 422.2241 69.3433 415.7966 58.0296 414.7402 C
58.8 408.6289 L
f
58.8 308.3762 m
74.1095 309.7154 83.2335 318.373 83.2335 332.0096 c
83.2335 343.7487 73.0409 352.0542 54 352.0542 c
31.8789 352.0542 16.7665 339.4275 16.7665 325.6096 c
16.7665 315.9181 22.6869 310.3651 32.811 310.3651 c
47.9064 310.3651 62.6751 325.1913 69.789 357.932 C
61.5445 359.3597 L
55.0285 329.08 42.8298 318.1985 32.811 318.1985 c
28.5069 318.1985 25.4221 321.0951 25.4221 325.6096 c
25.4221 334.7493 36.8578 344.2208 54 344.2208 c
67.1291 344.2208 74.5778 339.264 74.5778 332.0096 c
74.5778 323.0785 68.3783 317.2306 57.8223 316.2096 C
58.8 308.3762 L
f
58.8 208.1144 m
74.4288 209.4816 83.6224 218.0616 83.6224 232.1367 c
83.6224 244.202 73.3336 252.6998 54 252.6998 c
31.5536 252.6998 16.3776 239.9629 16.3776 225.7367 c
16.3776 215.5568 22.3812 209.9737 32.9407 209.9737 c
48.6552 209.9737 63.7376 224.6527 70.9927 257.1516 C
60.8963 258.9034 L
54.4957 229.9812 42.7657 219.5293 32.9407 219.5293 c
29.6224 219.5293 27.0148 221.986 27.0148 225.7367 c
27.0148 234.3382 37.7991 243.1441 54 243.1441 c
66.2808 243.1441 72.9852 238.5576 72.9852 232.1367 c
72.9852 223.9237 67.4132 218.6556 57.6148 217.67 C
58.8 208.1144 L
f
58.8 107.8617 m
74.7482 109.2569 84.0112 117.7594 84.0112 132.2729 c
84.0112 144.6644 73.6263 153.3544 54 153.3544 c
31.2283 153.3544 15.9888 140.5074 15.9888 125.8729 c
15.9888 115.2046 22.0756 109.5913 33.0703 109.5913 c
49.404 109.5913 64.8001 124.1233 72.1963 156.3804 C
60.2482 158.4563 L
53.9629 130.8914 42.7016 120.8691 33.0703 120.8691 c
30.7378 120.8691 28.6073 122.886 28.6073 125.8729 c
28.6073 133.9363 38.7403 142.0767 54 142.0767 c
65.4326 142.0767 71.3927 137.8603 71.3927 132.2729 c
71.3927 124.778 66.4483 120.0896 57.4074 119.1395 C
58.8 107.8617 L
f
U
79.6001 71.8001 m
48.6 71.8001 L
48.6 78.0001 L
33.9999 78.0001 L
33.9999 71.8001 L
20.3999 71.8001 L
20.3999 58.8 L
33.9999 58.8 L
33.9999 14.7999 L
48.6 14.7999 L
48.6 58.8 L
79.6001 58.8 L
79.6001 71.8001 L
f
30.1999 25.9999 m
30.1999 33.5252 39.6816 41 54 41 c
64.5844 41 69.8001 37.1539 69.8001 32.3999 c
69.8001 25.6232 65.4832 21.5146 57.2 20.5999 C
58.8 7.5998 L
75.0676 9.023 84.4001 17.448 84.4001 32.3999 c
84.4001 45.1177 73.919 54 54 54 c
30.9029 54 15.5999 41.0428 15.5999 25.9999 c
15.5999 14.8433 21.77 9.1999 33.1999 9.1999 c
50.1529 9.1999 65.8627 23.5846 73.4001 55.6 C
59.6 58 L
53.43 31.7925 42.6375 22.1999 33.1999 22.1999 c
31.8532 22.1999 30.1999 23.7769 30.1999 25.9999 c
f
u
0 D
150.3907 537.1538 m
145.8046 524.6102 138.5697 516.7834 134.8426 516.7834 c
129.9596 516.7834 123.9055 526.7806 123.9055 541.9946 c
123.9055 548.9078 125.4114 558.9155 127.9925 568.0928 C
123.2128 568.8502 L
120.5435 559.3845 119.0609 549.5098 119.0609 541.9946 c
119.0609 523.3967 127.065 511.787 134.8426 511.787 c
140.6785 511.787 149.3235 520.6104 154.8019 535.5945 C
150.3907 537.1538 L
f
149.8925 437.7994 m
145.6299 426.1404 138.826 418.5031 135.5741 418.5031 c
131.1649 418.5031 125.5444 427.8551 125.5444 441.992 c
125.5444 448.8177 127.1816 459.2806 129.7741 468.3106 C
122.8702 469.2366 L
120.1291 459.726 118.5887 449.6082 118.5887 441.992 c
118.5887 423.0308 127.0566 411.2659 135.5741 411.2659 c
141.7034 411.2659 150.5563 420.2062 156.1815 435.592 C
149.8925 437.7994 L
f
149.3944 338.4541 m
145.4552 327.6797 139.0822 320.2318 136.3055 320.2318 c
132.37 320.2318 127.1833 328.9388 127.1833 341.9986 c
127.1833 348.7367 128.9516 359.6548 131.5555 368.5375 C
122.5276 369.632 L
119.7146 360.0765 118.1165 349.7159 118.1165 341.9986 c
118.1165 322.6741 127.0482 310.754 136.3055 310.754 c
142.7281 310.754 151.7891 319.8113 157.5611 335.5985 C
149.3944 338.4541 L
f
148.8963 239.0997 m
145.2805 229.2099 139.3384 221.9515 137.037 221.9515 c
133.5753 221.9515 128.8222 230.0133 128.8222 241.996 c
128.8222 248.6465 130.7217 260.0199 133.337 268.7554 C
122.185 270.0183 L
119.3002 260.4179 117.6443 249.8143 117.6443 241.996 c
117.6443 222.3083 127.0398 210.2329 137.037 210.2329 c
143.753 210.2329 153.022 219.4071 158.9408 235.596 C
148.8963 239.0997 L
f
148.3982 139.7544 m
145.1058 130.7492 139.5946 123.6802 137.7685 123.6802 c
134.7805 123.6802 130.461 131.097 130.461 142.0026 c
130.461 148.5656 132.4917 160.3941 135.1184 168.9823 C
121.8425 170.4138 L
118.8858 160.7685 117.1721 149.9219 117.1721 142.0026 c
117.1721 121.9515 127.0314 109.721 137.7685 109.721 c
144.7778 109.721 154.2547 119.0122 160.3204 135.6025 C
148.3982 139.7544 L
f
U
u
177.6944 519.9389 m
177.6944 537.8226 173.778 554.5456 166.8448 567.2747 C
171.3389 568.8502 L
178.5334 555.5593 182.539 538.4984 182.539 519.9389 C
177.6944 519.9389 L
f
176.0555 419.5475 m
176.0555 437.5465 172.199 454.2388 165.2317 467.2721 C
171.8112 469.2366 L
179.0772 455.4946 183.0112 438.4293 183.0112 419.5475 C
176.0555 419.5475 L
f
174.4167 319.1651 m
174.4167 337.2796 170.6202 353.9413 163.6189 367.2787 C
172.2834 369.632 L
179.621 355.439 183.4835 338.3694 183.4835 319.1651 C
174.4167 319.1651 L
f
172.7778 218.7737 m
172.7778 237.0036 169.0412 253.6346 162.0059 267.2761 C
172.7556 270.0183 L
180.1648 255.3742 183.9557 238.3004 183.9557 218.7737 C
172.7778 218.7737 L
f
171.139 118.3914 m
171.139 136.7367 167.4623 153.337 160.393 167.2827 C
173.2278 170.4138 L
180.7085 155.3187 184.4279 138.2405 184.4279 118.3914 C
171.139 118.3914 L
f
U
121.4999 70.8001 m
118.4713 61.1099 116.6999 50.0204 116.6999 42 c
116.6999 21.5857 127.0231 9.1999 138.5 9.1999 c
145.8026 9.1999 155.4876 18.608 161.7 35.6 C
147.9 40.4 L
144.931 32.2794 139.8509 25.3999 138.5 25.3999 c
135.9858 25.3999 132.0999 32.1715 132.0999 42 c
132.0999 48.4754 134.2618 60.7592 136.8999 69.2001 C
121.4999 70.8001 L
f
173.7001 70.8001 m
181.2523 55.2539 184.9001 38.1715 184.9001 17.9999 C
169.5001 17.9999 L
169.5001 36.4606 165.8833 53.0303 158.78 67.2801 C
173.7001 70.8001 L
f
u
1 D
233.5444 574.4502 m
244.3747 572.5642 256.9801 571.4021 268.0556 571.4021 C
268.0556 566.8613 L
257.0634 566.8613 244.3757 568.0087 232.9773 569.9894 C
233.5444 574.4502 L
f
233.1555 474.8366 m
244.1398 473.0477 257.2687 471.918 268.4445 471.918 C
268.4445 465.5253 L
257.3078 465.5253 244.0734 466.6364 232.4458 468.5238 C
233.1555 474.8366 L
f
232.7666 375.232 m
243.9048 373.5404 257.5573 372.4431 268.8334 372.4431 C
268.8334 364.1986 L
257.5522 364.1986 243.7711 365.2735 231.9143 367.0675 C
232.7666 375.232 L
f
232.3777 275.6183 m
243.6699 274.0239 257.8459 272.9591 269.2223 272.9591 C
269.2223 262.8627 L
257.7966 262.8627 243.4688 263.9012 231.3829 265.6019 C
232.3777 275.6183 L
f
231.9888 176.0138 m
243.4349 174.5166 258.1344 173.4841 269.6112 173.4841 C
269.6112 161.536 L
258.041 161.536 243.1665 162.5383 230.8514 164.1456 C
231.9888 176.0138 L
f
U
u
0 D
235.2336 514.8797 m
262.0191 517.2232 274.4111 526.4511 274.4111 539.139 c
274.4111 545.422 268.1011 549.9093 254 549.9093 c
243.3289 549.9093 232.5224 548.5856 221.6535 546.0197 C
220.7443 550.4501 L
232.0127 553.1098 243.1759 554.4502 254 554.4502 c
271.234 554.4502 279.2557 548.2295 279.2557 539.139 c
279.2557 523.7472 265.7431 512.9593 235.7924 510.3389 C
235.2336 514.8797 L
f
234.4428 416.3402 m
260.8982 418.6548 272.6888 427.2601 272.6888 438.7475 c
272.6888 444.4326 267.0475 448.4437 254 448.4437 c
243.525 448.4437 232.5031 447.1296 221.5628 444.5801 C
220.3554 450.8365 L
231.7275 453.4859 243.171 454.8365 254 454.8365 c
271.5413 454.8365 279.6446 448.4666 279.6446 438.7475 c
279.6446 423.2258 266.1967 412.6529 235.2739 409.9474 C
234.4428 416.3402 L
f
233.6521 317.8096 m
259.7774 320.0953 270.9667 328.0781 270.9667 338.3652 c
270.9667 343.4525 265.994 346.9874 254 346.9874 c
243.7211 346.9874 232.4838 345.6828 221.4721 343.1497 C
219.9665 351.2319 L
231.4423 353.871 243.1661 355.232 254 355.232 c
271.8485 355.232 280.0335 348.7129 280.0335 338.3652 c
280.0335 322.7135 266.6503 312.3557 234.7555 309.5651 C
233.6521 317.8096 L
f
232.8614 219.27 m
258.6565 221.5269 269.2444 228.8871 269.2444 237.9738 c
269.2444 242.4632 264.9403 245.5219 254 245.5219 c
243.9172 245.5219 232.4644 244.2268 221.3813 241.71 C
219.5776 251.6183 L
231.157 254.247 243.1612 255.6183 254 255.6183 c
272.1558 255.6183 280.4223 248.95 280.4223 237.9738 c
280.4223 222.192 267.104 212.0493 234.2369 209.1737 C
232.8614 219.27 L
f
232.0707 120.7395 m
257.5357 122.9675 267.5223 129.7052 267.5223 137.5914 c
267.5223 141.4831 263.8868 144.0656 254 144.0656 c
244.1134 144.0656 232.4451 142.7801 221.2906 140.2796 C
219.1888 152.0137 L
230.8718 154.6322 243.1563 156.0137 254 156.0137 c
272.4631 156.0137 280.8112 149.1963 280.8112 137.5914 c
280.8112 121.6798 267.5575 111.752 233.7185 108.7913 C
232.0707 120.7395 L
f
U
233.1999 8.3999 m
268.0112 11.4456 281.2001 21.1583 281.2001 37.2 c
281.2001 49.4334 272.7704 56.4 254 56.4 c
243.1514 56.4 230.5865 55.0082 218.7999 52.4 C
221.1999 38.84 L
232.4257 41.324 244.3095 42.6 254 42.6 c
262.8331 42.6 265.8001 40.4937 265.8001 37.2 c
265.8001 30.5141 256.4148 24.3991 231.2799 22.1999 C
233.1999 8.3999 L
f
1 D
231.5999 76.4001 m
243.2 75.0001 258.423 74.0001 270.0001 74.0001 C
270.0001 60.2001 L
258.2855 60.2001 242.8642 61.166 230.3199 62.68 C
231.5999 76.4001 L
f
u
332.9773 570.7894 m
344.3757 568.8087 357.0634 567.6613 368.0556 567.6613 C
368.0556 572.2021 L
356.9801 572.2021 344.3747 573.3642 333.5444 575.2502 C
332.9773 570.7894 L
f
332.4458 469.3238 m
344.0734 467.4364 357.3078 466.3253 368.4445 466.3253 C
368.4445 472.718 L
357.2687 472.718 344.1398 473.8477 333.1555 475.6366 C
332.4458 469.3238 L
f
331.9143 367.8675 m
343.7711 366.0735 357.5522 364.9986 368.8334 364.9986 C
368.8334 373.2431 L
357.5573 373.2431 343.9048 374.3404 332.7666 376.032 C
331.9143 367.8675 L
f
331.3829 266.4019 m
343.4688 264.7012 357.7966 263.6627 369.2223 263.6627 C
369.2223 273.7591 L
357.8459 273.7591 343.6699 274.8239 332.3777 276.4183 C
331.3829 266.4019 L
f
330.8514 164.9456 m
343.1665 163.3383 358.041 162.336 369.6112 162.336 C
369.6112 174.2841 L
358.1344 174.2841 343.4349 175.3166 331.9888 176.8138 C
330.8514 164.9456 L
f
U
u
321.3258 510.987 m
374.6075 553.3167 L
374.6075 557.9946 L
323.2961 557.9946 L
323.2961 553.4538 L
373.0482 553.4538 L
372.1612 557.1002 L
318.3443 514.7705 L
321.3258 510.987 L
f
322.1407 410.4659 m
375.126 451.3696 L
375.126 457.9921 L
323.0369 457.9921 L
323.0369 451.5993 L
372.9186 451.5993 L
371.8889 456.8365 L
317.9554 415.9327 L
322.1407 410.4659 L
f
322.9554 309.954 m
375.6445 349.4319 L
375.6445 357.9986 L
322.7776 357.9986 L
322.7776 349.7541 L
372.789 349.7541 L
371.6167 356.582 L
317.5665 317.104 L
322.9554 309.954 L
f
323.7703 209.4329 m
376.1631 247.4848 L
376.1631 257.9961 L
322.5184 257.9961 L
322.5184 247.8997 L
372.6593 247.8997 L
371.3445 256.3183 L
317.1776 218.2663 L
323.7703 209.4329 L
f
324.585 108.921 m
376.6816 145.5471 L
376.6816 158.0026 L
322.2592 158.0026 L
322.2592 146.0545 L
372.5297 146.0545 L
371.0723 156.0637 L
316.7888 119.4376 L
324.585 108.921 L
f
U
u
380.9245 517.2453 m
378.6101 516.4572 374.965 515.8316 372.7038 515.8316 c
365.7467 515.8316 364.2497 517.0396 362.7167 524.7371 c
361.0354 533.1698 357.8282 536.065 351.9037 536.065 c
346.033 536.065 345.1375 535.6986 318.3443 514.7705 C
321.3258 510.987 L
347.0886 531.3228 347.4214 531.5242 351.2963 531.5242 c
355.0694 531.5242 356.7547 529.6158 358.1907 522.4241 c
359.942 513.6456 363.1744 511.1389 372.0963 511.1389 C
374.9824 511.1389 379.3098 511.926 381.6557 512.7389 C
380.9245 517.2453 L
f
381.2356 418.7446 m
378.7841 417.9841 375.312 417.4216 372.963 417.4216 c
366.2696 417.4216 365.0045 418.448 363.5334 425.6661 c
361.9081 433.6258 358.5541 436.4883 352.1629 436.4883 c
345.7623 436.4883 344.6999 436.0652 317.9554 415.9327 C
322.1407 410.4659 L
347.4334 429.892 347.7496 430.0956 351.037 430.0956 c
354.406 430.0956 355.7912 428.5429 357.1925 421.6956 c
358.8933 413.3746 362.4886 410.7474 371.8371 410.7474 C
374.9456 410.7474 379.4459 411.5071 382.0446 412.3474 C
381.2356 418.7446 L
f
381.5467 320.253 m
378.9581 319.52 375.659 319.0207 373.2223 319.0207 c
366.7925 319.0207 365.7593 319.8654 364.35 326.6041 c
362.7808 334.0908 359.2799 336.9208 352.4222 336.9208 c
345.4918 336.9208 344.2625 336.4409 317.5665 317.104 C
322.9554 309.954 L
347.7781 328.4705 348.0778 328.6763 350.7778 328.6763 c
353.7426 328.6763 354.8277 327.4792 356.1944 320.9763 c
357.8447 313.1127 361.8028 310.3651 371.5778 310.3651 C
374.9088 310.3651 379.582 311.0974 382.4335 311.9651 C
381.5467 320.253 L
f
381.8579 221.7523 m
379.1321 221.047 376.0061 220.6108 373.4816 220.6108 c
367.3154 220.6108 366.5141 221.2738 365.1667 227.533 c
363.6536 234.5467 360.0058 237.3441 352.6815 237.3441 c
345.2212 237.3441 343.8249 236.8076 317.1776 218.2663 C
323.7703 209.4329 L
348.1229 227.0398 348.4061 227.2478 350.5185 227.2478 c
353.0791 227.2478 353.8642 226.4063 355.1963 220.2477 c
356.7959 212.8416 361.1169 209.9737 371.3186 209.9737 C
374.872 209.9737 379.718 210.6785 382.8224 211.5736 C
381.8579 221.7523 L
f
382.169 123.2606 m
379.3061 122.583 376.3531 122.2098 373.7408 122.2098 c
367.8383 122.2098 367.2689 122.6912 365.9833 128.471 c
364.5263 135.0117 360.7316 137.7766 352.9407 137.7766 c
344.9506 137.7766 343.3875 137.1833 316.7888 119.4376 C
324.585 108.921 L
348.4677 125.6183 348.7343 125.8285 350.2593 125.8285 c
352.4158 125.8285 352.9007 125.3426 354.1982 119.5284 c
355.7473 112.5797 360.4311 109.5913 371.0593 109.5913 C
374.8352 109.5913 379.854 110.2688 383.2112 111.1914 C
382.169 123.2606 L
f
U
330.3199 63.4801 m
342.8642 61.966 358.2855 61.0001 370.0001 61.0001 C
370.0001 74.8001 L
358.423 74.8001 343.2 75.8001 331.5999 77.2001 C
330.3199 63.4801 L
f
325.3999 8.3999 m
377.2001 43.6 L
377.2001 58 L
321.9999 58 L
321.9999 44.2 L
372.4001 44.2 L
370.8001 55.8 L
316.3999 20.5999 L
325.3999 8.3999 L
f
382.4801 24.7599 m
379.4801 24.1099 376.7001 23.7999 374.0001 23.7999 c
368.3612 23.7999 368.0237 24.0996 366.8001 29.3999 c
365.3991 35.4676 361.4575 38.2 353.2 38.2 c
344.68 38.2 342.95 37.55 316.3999 20.5999 C
325.3999 8.3999 L
348.8125 24.1875 349.0625 24.3999 350 24.3999 c
351.7523 24.3999 351.9372 24.2697 353.2 18.7999 c
354.6986 12.3087 359.7453 9.1999 370.8001 9.1999 c
374.7984 9.1999 379.9901 9.8499 383.6001 10.7999 C
382.4801 24.7599 L
f
u
456.4 508.8908 m
470.7676 510.1479 479.2557 518.252 479.2557 530.7945 c
479.2557 539.6399 469.9671 547.2501 454.9518 547.2501 c
430.5743 547.2501 417.5443 537.2873 417.5443 525.1945 c
417.5443 517.4475 424.3829 511.1389 431.7517 511.1389 c
440.2134 511.1389 444.4852 515.8283 444.4852 528.2427 C
444.4852 561.1719 L
464.8408 561.1719 L
464.8408 565.5609 L
444.4852 565.5609 L
444.4852 577.3466 L
439.7926 577.3466 L
439.7926 565.5609 L
422.3443 565.5609 L
422.3443 561.1719 L
439.7926 561.1719 L
439.7926 528.2427 l
439.7926 518.7026 437.2256 515.5279 432.0287 515.5279 c
426.7918 515.5279 422.3889 520.0437 422.3889 525.2214 c
422.3889 534.6628 434.0049 542.7093 454.9518 542.7093 c
467.1651 542.7093 474.4111 537.1475 474.4111 530.6427 c
474.4111 520.7225 467.6993 514.4512 455.7307 513.3557 C
456.4 508.8908 L
f
456.4 408.6289 m
471.0944 409.9146 479.6446 418.1019 479.6446 430.792 c
479.6446 439.8566 470.1404 447.6365 455.0815 447.6365 c
430.4759 447.6365 417.1554 437.458 417.1554 425.192 c
417.1554 417.24 424.1934 410.7474 431.8814 410.7474 c
441.4371 410.7474 445.9482 415.554 445.9482 428.1105 C
445.9482 459.7688 L
465.1926 459.7688 L
465.1926 465.8801 L
445.9482 465.8801 L
445.9482 477.4736 L
439.274 477.4736 L
439.274 465.8801 L
421.9554 465.8801 L
421.9554 459.7688 L
439.274 459.7688 L
439.274 428.1105 l
439.274 419.6484 436.9941 416.8587 432.4129 416.8587 c
427.7867 416.8587 424.1111 420.758 424.1111 425.2234 c
424.1111 433.7178 435.208 441.2438 455.0815 441.2438 c
466.3064 441.2438 472.6888 436.3395 472.6888 430.5105 c
472.6888 421.6075 466.626 415.9492 455.4326 414.8809 C
456.4 408.6289 L
f
456.4 308.3762 m
471.4212 309.6905 480.0335 317.961 480.0335 330.7985 c
480.0335 340.0825 470.3137 348.0319 455.2111 348.0319 c
430.3776 348.0319 416.7665 337.6379 416.7665 325.1985 c
416.7665 317.0417 424.004 310.3651 432.011 310.3651 c
442.6607 310.3651 447.4111 315.2888 447.4111 327.9874 C
447.4111 358.375 L
465.5445 358.375 L
465.5445 366.2084 L
447.4111 366.2084 L
447.4111 377.6098 L
438.7555 377.6098 L
438.7555 366.2084 L
421.5665 366.2084 L
421.5665 358.375 L
438.7555 358.375 L
438.7555 327.9874 l
438.7555 320.6034 436.7627 318.1985 432.7972 318.1985 c
428.7816 318.1985 425.8333 321.4815 425.8333 325.2346 c
425.8333 332.782 436.4109 339.7874 455.2111 339.7874 c
465.4479 339.7874 470.9667 335.5408 470.9667 330.3874 c
470.9667 322.5015 465.5528 317.4561 455.1344 316.4151 C
456.4 308.3762 L
f
456.4 208.1144 m
471.748 209.4573 480.4223 217.8109 480.4223 230.796 c
480.4223 240.2992 470.4869 248.4182 455.3407 248.4182 c
430.2792 248.4182 416.3776 237.8087 416.3776 225.1959 c
416.3776 216.8342 423.8145 209.9737 432.1407 209.9737 c
443.8844 209.9737 448.8741 215.0145 448.8741 227.8552 C
448.8741 256.9719 L
465.8963 256.9719 L
465.8963 266.5276 L
448.8741 266.5276 L
448.8741 277.7369 L
438.237 277.7369 L
438.237 266.5276 L
421.1776 266.5276 L
421.1776 256.9719 L
438.237 256.9719 L
438.237 227.8552 l
438.237 221.5493 436.5313 219.5293 433.1814 219.5293 c
429.7765 219.5293 427.5555 222.1958 427.5555 225.2367 c
427.5555 231.837 437.614 238.3218 455.3407 238.3218 c
464.5893 238.3218 469.2444 234.7328 469.2444 230.2552 c
469.2444 223.3865 464.4795 218.9541 454.8363 217.9404 C
456.4 208.1144 L
f
456.4 107.8617 m
472.0748 109.2332 480.8112 117.67 480.8112 130.8025 c
480.8112 140.5251 470.6602 148.8137 455.4704 148.8137 c
430.1808 148.8137 415.9888 137.9886 415.9888 125.2025 c
415.9888 116.6359 423.625 109.5913 432.2703 109.5913 c
445.108 109.5913 450.337 114.7493 450.337 127.7321 C
450.337 155.5781 L
466.2482 155.5781 L
466.2482 166.8559 L
450.337 166.8559 L
450.337 177.8731 L
437.7185 177.8731 L
437.7185 166.8559 L
420.7888 166.8559 L
420.7888 155.5781 L
437.7185 155.5781 L
437.7185 127.7321 l
437.7185 122.5042 436.2999 120.8691 433.5657 120.8691 c
430.7713 120.8691 429.2776 122.9193 429.2776 125.2479 c
429.2776 130.9013 438.8169 136.8656 455.4704 136.8656 c
463.7307 136.8656 467.5223 133.934 467.5223 130.1322 c
467.5223 124.2806 463.4063 120.461 454.5382 119.4747 C
456.4 107.8617 L
f
U
u
465.46 569.7042 m
470.8041 564.8149 475.0103 560.2388 479.7567 554.2886 C
483.2557 557.0646 L
478.525 562.9942 474.251 567.646 468.7037 572.7202 C
465.46 569.7042 L
f
464.3599 469.5067 m
469.7356 464.4129 473.9956 459.6737 478.7734 453.7022 C
483.6446 457.643 L
478.845 463.6406 474.5383 468.4058 468.963 473.6875 C
464.3599 469.5067 L
f
463.26 369.3184 m
468.6672 364.02 472.981 359.1179 477.7901 353.125 C
484.0335 358.2306 L
479.1651 364.2961 474.8256 369.1748 469.2223 374.664 C
463.26 369.3184 L
f
462.16 269.1209 m
467.5986 263.618 471.9663 258.5528 476.8067 252.5386 C
484.4224 258.809 L
479.4851 264.9425 475.1129 269.9346 469.4815 275.6313 C
462.16 269.1209 L
f
461.0601 168.9326 m
466.5302 163.2252 470.9517 157.997 475.8234 151.9614 C
484.8112 159.3966 L
479.8051 165.598 475.4002 170.7036 469.7408 176.6078 C
461.0601 168.9326 L
f
U
456.4 7.5998 m
472.4016 8.9999 481.2001 17.5199 481.2001 30.7999 c
481.2001 40.7418 470.8335 49.2 455.6 49.2 c
430.0825 49.2 415.5999 38.1593 415.5999 25.1999 c
415.5999 16.4284 423.4356 9.1999 432.3999 9.1999 c
446.3317 9.1999 451.8 14.475 451.8 27.5999 c
451.8 54.175 L
466.6001 54.175 L
466.6001 67.1751 L
451.8 67.1751 L
451.8 78.0001 L
437.1999 78.0001 L
437.1999 67.1751 L
420.3999 67.1751 L
420.3999 54.175 L
437.1999 54.175 L
437.1999 27.5999 l
437.1999 23.4501 436.0685 22.1999 433.9499 22.1999 c
431.7662 22.1999 430.9999 23.6336 430.9999 25.2499 c
430.9999 29.9562 440.0199 35.4 455.6 35.4 c
462.8721 35.4 465.8001 33.126 465.8001 29.9999 c
465.8001 25.1656 462.333 21.959 454.24 20.9999 C
456.4 7.5998 L
f
459.96 68.7351 m
465.4617 62.8231 469.937 57.4319 474.8401 51.375 C
485.2001 59.975 L
480.1251 66.2444 475.6875 71.4634 470.0001 77.5751 C
459.96 68.7351 L
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
