%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (2436.eps)
%%CreationDate: (2/1/04) (8:50 PM)
%%BoundingBox: 0 0 500 500
%%HiResBoundingBox: 0 0 500 500
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 256.5 244.5 256.5
%AI3_TileBox: -41.5 -119.5 534.5 642.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -139.5 520.5 1 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -119.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
1 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
0 Ap
0 O
0 g
149.8 408.2 m
166.0415 408.2 177.4029 417.6077 186.7881 442.8332 C
182.2881 444.6332 L
173.508 421.0341 163.9432 413 149.8 413 c
132.0678 413 124.6 420.8339 124.6 446.8 c
124.6 461.2521 125.3249 477.1911 126.6 490.8 C
121.6 490.8 L
120.2992 476.9179 119.6 461.175 119.6 446.8 c
119.6 418.348 128.9335 408.2 149.8 408.2 c
f
428.4 432.4 m
428.4 418.5986 439.7585 409.2 458 409.2 c
461.8333 409.2 466.475 409.5 470.6 410.2 C
470 415 L
466.5084 414.4075 462.0056 414 458 414 c
442.3044 414 433.4 421.2679 433.4 432.4 c
433.4 442.7818 443.6334 452.4 456.6 452.4 C
489 452.4 L
489 457.2 L
434.6371 457.2 L
448.0259 465.7213 460.9919 474.9178 472.6 484 C
472.6 489.8 L
424.2 489.8 L
424.2 485 L
466.067 485 L
453.2402 475.1688 439.3961 465.6088 425.6823 457.2 C
405.4 457.2 L
405.4 452.4 L
440.9125 452.4 L
432.4633 446.8911 428.4 439.9662 428.4 432.4 c
f
322.8 433.8 m
322.8 415.4926 328.7004 410.2 353.4 410.2 c
362.9633 410.2 370.8567 411.0172 378.8 412.8 C
378 417.6 L
370.3474 415.8824 362.5868 415 353.4 415 c
331.9006 415 327.8 418.9307 327.8 433.8 C
327.8 468.8 L
367.8 468.8 L
367.8 449.5 L
367.9905 442.7969 366.9395 441.8 361 441.8 c
356.0561 441.8 350.3875 443.1875 346 445.5 C
344 441 L
348.775 438.4375 354.8625 437 361 437 c
369.7306 437 372.8 440.1353 372.8 449.5 C
372.8 468.8 L
391.6 468.8 L
391.6 473.6 L
372.8 473.6 L
372.8 493.8 L
367.8 493.8 L
367.8 473.6 L
327.8 473.6 L
327.8 491.8 L
322.8 491.8 L
322.8 473.6 L
306 473.6 L
306 468.8 L
322.8 468.8 L
322.8 433.8 L
f
427.8 332.5 m
427.8 318.657 439.2835 309.1 458 309.1 c
461.8333 309.1 466.675 309.4 470.8 310.1 C
470 316.9 L
466.5751 316.3188 461.9761 315.9 458 315.9 c
443.3117 315.9 435.4 322.4088 435.4 332.5 c
435.4 342.0993 445.0773 351 457.6 351 C
489.1 351 L
489.1 357.9 L
437.8448 357.9 L
446.7399 363.5509 455.4733 369.4549 463.6511 375.3453 C
467.5565 370.3237 471.7373 364.7822 475.4 359.6 C
480.6 363.3 L
476.8022 368.6938 472.8007 374.0937 468.866 379.1543 C
470.3292 380.239 471.7841 381.3229 473.2 382.4 C
473.2 390 L
423.8 390 L
423.8 383.2 L
462.9842 383.2 L
450.9358 374.2574 438.3721 365.7001 425.817 357.9 C
405.3 357.9 L
405.3 351 L
438.4869 351 L
431.2521 345.5326 427.8 339.1546 427.8 332.5 c
f
427.2 232.6 m
427.2 218.7154 438.8085 209 458 209 c
461.8333 209 466.875 209.3 471 210 C
470 218.8 L
466.6418 218.2301 461.9466 217.8 458 217.8 c
444.3189 217.8 437.4 223.5497 437.4 232.6 c
437.4 241.4168 446.5212 249.6 458.5999 249.6 C
489.2 249.6 L
489.2 258.6 L
441.1368 258.6 L
449.2078 263.6977 457.1511 268.9669 464.5684 274.1655 C
468.0601 269.6208 471.8068 264.6017 475 260.1 C
481.4 264.6 L
478.1034 269.282 474.4673 274.2163 470.9987 278.749 C
471.9437 279.4354 472.8793 280.1195 473.8 280.8 C
473.8 290.2 L
423.4 290.2 L
423.4 281.4 L
459.7643 281.4 L
448.6321 273.3732 437.3233 265.7551 425.942 258.6 C
405.2 258.6 L
405.2 249.6 L
436.3625 249.6 L
430.1606 244.3085 427.2 238.4718 427.2 232.6 c
f
426.6 132.7 m
426.6 118.7738 438.3334 108.9 458 108.9 c
461.8333 108.9 467.075 109.2 471.2 109.9 C
470 120.7 L
466.7085 120.1414 461.917 119.7 458 119.7 c
445.3262 119.7 439.4 124.6906 439.4 132.7 c
439.4 140.7343 447.965 148.2 459.5999 148.2 C
489.3 148.2 L
489.3 159.3 L
444.5027 159.3 L
451.7331 163.8248 458.8402 168.446 465.4738 172.968 C
468.5887 168.8652 471.8511 164.4623 474.6 160.6 C
482.2 165.9 L
479.3845 169.8987 476.2014 174.2408 473.136 178.3008 C
473.5572 178.6005 473.9846 178.902 474.4 179.2 C
474.4 190.4 L
423 190.4 L
423 179.6 L
456.4471 179.6 L
446.3398 172.4988 436.2544 165.7792 426.0575 159.3 C
405.1 159.3 L
405.1 148.2 L
434.4095 148.2 L
429.123 143.1808 426.6 137.8777 426.6 132.7 c
f
466.3722 71.7516 m
469.0993 68.1232 471.8677 64.3666 474.2 61.1 C
483 67.2 L
480.555 70.6726 477.7508 74.5129 475 78.1902 C
475 90.6 L
422.6 90.6 L
422.6 77.8 L
453.0055 77.8 L
444.0213 71.6316 435.1524 65.7662 426.1633 60 C
405 60 L
405 46.8 L
432.5901 46.8 L
428.1305 42.1246 426 37.3502 426 32.8 c
426 18.8322 437.8584 8.8 458 8.8 c
461.8333 8.8 467.275 9.1 471.4 9.8 C
470 22.6 L
466.7752 22.0527 461.8875 21.6 458 21.6 c
446.3334 21.6 441.4 25.8315 441.4 32.8 c
441.4 40.0518 449.4089 46.8 460.5998 46.8 C
489.4 46.8 L
489.4 60 L
447.971 60 L
454.3248 63.9286 460.5522 67.8948 466.3722 71.7516 C
f
321.9 333.7 m
321.9 315.6844 328.0255 310.1 353.1 310.1 c
362.6633 310.1 370.7567 310.9172 378.7 312.7 C
377.6 319.6 L
370.097 317.916 362.1335 317 353.1 317 c
332.5338 317 329.1 320.3747 329.1 333.7 C
329.1 366.7 L
365.4 366.7 L
365.4 350.5 L
365.5429 344.302 364.7048 343.5 359.5 343.5 c
355.2171 343.5 349.8719 344.7469 345.8 346.7 C
343.6 340.1 L
348.5844 337.7781 354.5625 336.4 360.7 336.4 c
369.3055 336.4 372.5 339.7437 372.5 348.9 C
372.5 366.7 L
391.7 366.7 L
391.7 373.6 L
372.5 373.6 L
372.5 393.9 L
365.4 393.9 L
365.4 373.6 L
329.1 373.6 L
329.1 391.9 L
321.9 391.9 L
321.9 373.6 L
305.9 373.6 L
305.9 366.7 L
321.9 366.7 L
321.9 333.7 L
f
321 233.6 m
321 215.8762 327.3506 210 352.8 210 c
362.3633 210 370.6567 210.8172 378.6 212.6 C
377.2 221.6 L
369.8466 219.9495 361.6801 219 352.8 219 c
333.167 219 330.4 221.8187 330.4 233.6 C
330.4 264.6 L
363 264.6 L
363 251.5 L
363.0953 245.807 362.4701 245.2 358 245.2 c
354.378 245.2 349.3563 246.3062 345.6 247.9 C
343.2 239.2 L
348.3937 237.1187 354.2625 235.8 360.4 235.8 c
368.8804 235.8 372.2 239.352 372.2 248.3 C
372.2 264.6 L
391.8 264.6 L
391.8 273.6 L
372.2 273.6 L
372.2 288.4127 L
375.3908 284.2645 378.834 279.6554 381.7601 275.5301 C
387.5201 279.5801 L
383.9189 284.6947 379.8641 290.1525 376.1802 294.88 C
372.2 292.1245 L
372.2 294 L
363 294 L
363 273.6 L
330.4 273.6 L
330.4 292 L
321 292 L
321 273.6 L
305.8 273.6 L
305.8 264.6 L
321 264.6 L
321 233.6 L
f
320.1 133.5 m
320.1 116.068 326.6757 109.9 352.5 109.9 c
362.0633 109.9 370.5567 110.7172 378.5 112.5 C
376.8 123.6 L
369.5962 121.9831 361.2268 121 352.5 121 c
333.8002 121 331.7 123.2627 331.7 133.5 C
331.7 162.5 L
360.6 162.5 L
360.6 152.5 L
360.6476 147.3121 360.2353 146.9 356.5 146.9 c
353.539 146.9 348.8406 147.8656 345.4 149.1 C
342.8 138.3 L
348.2031 136.4594 353.9625 135.2 360.1 135.2 c
368.4553 135.2 371.9 138.9604 371.9 147.7 C
371.9 162.5 L
391.9 162.5 L
391.9 173.6 L
371.9 173.6 L
371.9 185.1085 L
374.6079 181.535 377.4185 177.7364 379.8001 174.3901 C
386.6401 179.1601 L
382.9325 184.4259 378.5104 190.3675 374.7602 195.18 C
371.9 193.2113 L
371.9 194.1 L
360.6 194.1 L
360.6 173.6 L
331.7 173.6 L
331.7 192.1 L
320.1 192.1 L
320.1 173.6 L
305.7 173.6 L
305.7 162.5 L
320.1 162.5 L
320.1 133.5 L
f
98.2 482.4 m
94.4352 487.747 90.7462 492.736 86.8 497.8 C
82.7 494.9 L
86.633 489.853 90.5549 484.677 94.2 479.5 C
98.2 482.4 L
f
85 477.6 m
81.2352 482.947 77.5462 487.936 73.6 493 C
69.5 490.1 L
73.433 485.053 77.355 479.8769 81 474.7 C
85 477.6 L
f
61.5337 449.5191 m
54.8842 452.4479 48.3123 453.8 42 453.8 c
23.4278 453.8 13.6 444.8328 13.6 433.2 c
13.6 417.2137 24.9007 408.2 50.4 408.2 c
58.0946 408.2 65.5413 408.866 74.2 410.4 C
73.5 415.2 L
65.0063 413.6953 57.7924 413 50.4 413 c
27.5908 413 18.6 420.1381 18.6 433.2 c
18.6 442.4458 26.7764 449 42 449 c
51.2372 449 58.7482 446.6688 68.1 440.5 C
72 443.6 L
63.3445 454.3008 59.3507 462.1653 57.4463 475.2 C
75 475.2 L
75 480 L
56.8613 480 L
56.4515 484.055 56.1819 488.589 56 493.8 C
51 493.8 L
51.1794 488.6627 51.4672 484.1086 51.8942 480 C
9 480 L
9 475.2 L
52.49 475.2 L
54.0381 464.5159 56.8135 456.9765 61.5337 449.5191 C
f
57.6346 351.822 m
52.2441 353.7399 46.8189 354.7 41.5 354.7 c
23.0529 354.7 12.7 345.2161 12.7 333.5 c
12.7 317.3721 24.1786 308.1 49.9 308.1 c
57.4072 308.1 65.1567 308.8333 74 310.4 C
73 317.2 L
64.471 315.689 56.989 314.9 49.9 314.9 c
28.4015 314.9 20.2 321.3869 20.2 333.5 c
20.2 341.707 27.8204 347.9 41.5 347.9 c
50.1602 347.9 57.3652 345.5117 66 340 C
71.7 344.5 L
63.4634 354.683 59.4831 362.0035 57.4995 373.8 C
73.7 373.8 L
73.7 380.6 L
56.6147 380.6 L
56.2306 384.5032 55.9755 388.8746 55.8 393.9 C
48.5 393.9 L
48.6728 388.9521 48.9411 384.5671 49.3293 380.6 C
8.4 380.6 L
8.4 373.8 L
50.178 373.8 L
51.5783 364.8797 53.9011 358.2498 57.6346 351.822 C
f
54.0483 253.7384 m
49.7325 254.9586 45.3532 255.6 41 255.6 c
22.6779 255.6 11.8 245.5994 11.8 233.8 c
11.8 217.5305 23.4564 208 49.4 208 c
56.7198 208 64.7722 208.8006 73.8 210.4 C
72.5 219.2 L
63.9356 217.6827 56.1856 216.8 49.4 216.8 c
29.2122 216.8 21.8 222.6357 21.8 233.8 c
21.8 240.9681 28.8645 246.8 41 246.8 c
49.0831 246.8 55.9821 244.3545 63.9 239.5 C
71.4 245.4 L
63.6097 255.0312 59.6593 261.8361 57.5983 272.4 C
72.4 272.4 L
72.4 280.4502 L
74.4127 277.7535 76.3962 275.043 78.2 272.5 C
84.6 277 L
80.5987 282.6829 76.0933 288.7471 72 294 C
65.5 289.5 L
67.5134 286.9163 69.6868 284.0756 71.8409 281.2 C
56.3679 281.2 L
56.0091 284.9522 55.7689 289.1635 55.6 294 C
46 294 L
46.166 289.2474 46.4135 285.0248 46.7657 281.2 C
7.8 281.2 L
7.8 272.4 L
47.8884 272.4 L
49.1484 265.0113 51.0911 259.2462 54.0483 253.7384 C
f
50.6766 155.3798 m
47.3241 156.1103 43.9158 156.5 40.5 156.5 c
22.303 156.5 10.9 145.9828 10.9 134.1 c
10.9 117.6889 22.7342 107.9 48.9 107.9 c
56.0323 107.9 64.3876 108.7679 73.6 110.4 C
72 121.2 L
63.4003 119.6765 55.3821 118.7 48.9 118.7 c
30.0228 118.7 23.4 123.8845 23.4 134.1 c
23.4 140.2293 29.9085 145.7 40.5 145.7 c
48.006 145.7 54.5991 143.1973 61.8 139 C
71.1 146.3 L
63.788 155.3398 59.888 161.6521 57.7537 171 C
71.1 171 L
71.1 179.2106 L
73.0938 176.5321 75.0525 173.8552 76.8 171.4 C
84.4 176.7 L
80.2805 182.5509 75.3669 189.1527 71.2 194.5 C
63.5 189.2 L
65.262 186.939 67.2035 184.4009 69.1616 181.8 C
56.1253 181.8 L
55.7905 185.4051 55.5624 189.4501 55.4 194.1 C
43.5 194.1 L
43.659 189.5464 43.8858 185.4822 44.2048 181.8 C
7.2 181.8 L
7.2 171 L
45.6131 171 L
46.733 164.9636 48.3514 160.043 50.6766 155.3798 C
f
67.5 389.8 m
71.5033 384.6628 75.8287 378.9358 79.6 373.6 C
84.8 377.3 L
80.917 382.815 76.8198 388.3416 72.8 393.5 C
67.5 389.8 L
f
81.3 394.6 m
85.3033 389.4627 89.6287 383.7359 93.4 378.4 C
98.6 382.1 L
94.7169 387.615 90.6198 393.1416 86.6 398.3 C
81.3 394.6 L
f
79.9 294.3 m
83.9736 289.0725 88.7024 282.7947 92.6 277.3 C
99 281.8 L
94.9987 287.4829 90.4934 293.5471 86.4 298.8 C
79.9 294.3 L
f
78.5 194 m
82.6439 188.6823 87.7762 181.8536 91.8 176.2 C
99.4 181.5 L
95.2804 187.3509 90.3669 193.9527 86.2 199.3 C
78.5 194 L
f
77.1 93.7 m
81.3142 88.2921 86.85 80.9125 91 75.1 C
99.8 81.2 L
95.5622 87.2189 90.2405 94.3583 86 99.8 C
77.1 93.7 L
f
61.5 88.9 m
63.0292 86.9377 64.7341 84.7125 66.482 82.4 C
55.8837 82.4 L
55.5721 85.8594 55.3558 89.7385 55.2 94.2 C
41 94.2 L
41.1522 89.8397 41.3642 85.9449 41.6535 82.4 C
6.6 82.4 L
6.6 69.6 L
43.3524 69.6 L
44.3301 64.7653 45.6608 60.6684 47.4639 56.7917 C
45.0041 57.1823 42.5104 57.4 40 57.4 c
21.928 57.4 10 46.3661 10 34.4 c
10 17.8473 22.012 7.8 48.4 7.8 c
55.3449 7.8 64.003 8.7352 73.4 10.4 C
71.5 23.2 L
62.8649 21.6702 54.5787 20.6 48.4 20.6 c
30.8335 20.6 25 25.1334 25 34.4 c
25 39.4905 30.9525 44.6 40 44.6 c
46.9289 44.6 53.2161 42.0402 59.7 38.5 C
70.8 47.2 L
64.003 55.603 60.1783 61.4382 57.9789 69.6 C
69.8 69.6 L
69.8 77.9708 L
71.7742 75.3133 73.7039 72.6755 75.4 70.3 C
84.2 76.4 L
79.9622 82.4189 74.6405 89.5583 70.4 95 C
61.5 88.9 L
f
493 466.8 m
489.2352 472.147 485.5462 477.136 481.6 482.2 C
477.5 479.3 L
481.433 474.253 485.3549 469.077 489 463.9 C
493 466.8 L
f
464.3 474.5 m
468.233 469.453 472.155 464.2769 475.8 459.1 C
479.8 462 L
476.0352 467.347 472.3462 472.336 468.4 477.4 C
464.3 474.5 L
f
477.1 380.6 m
481.1033 375.4628 485.4287 369.7359 489.2 364.4 C
494.4 368.1 L
490.5169 373.615 486.4198 379.1416 482.4 384.3 C
477.1 380.6 L
f
476.7 281.9 m
480.7736 276.6725 485.5024 270.3947 489.4 264.9 C
495.8 269.4 L
491.7987 275.0829 487.2933 281.1471 483.2 286.4 C
476.7 281.9 L
f
476.3 183.2 m
480.4439 177.8823 485.5762 171.0536 489.6 165.4 C
497.2 170.7 L
493.0805 176.5509 488.1669 183.1527 484 188.5 C
476.3 183.2 L
f
484.8 90.6 m
475.9 84.5 L
480.1142 79.0921 485.65 71.7125 489.8 65.9 C
498.6 72 L
494.3622 78.0189 489.0405 85.1583 484.8 90.6 C
f
186.8 475.2 m
183.0352 480.547 179.3462 485.536 175.4 490.6 C
171.3 487.7 L
175.233 482.653 179.1549 477.477 182.8 472.3 C
186.8 475.2 L
f
171.2 470.4 m
167.4352 475.747 163.7462 480.736 159.8 485.8 C
155.7 482.9 L
159.633 477.853 163.555 472.6769 167.2 467.5 C
171.2 470.4 L
f
154.3 382.7 m
158.3033 377.5628 162.6287 371.8358 166.4 366.5 C
171.6 370.2 L
167.7169 375.715 163.6198 381.2416 159.6 386.4 C
154.3 382.7 L
f
152.9 282.5 m
156.9736 277.2725 161.7025 270.9947 165.6 265.5 C
172 270 L
167.9987 275.6829 163.4933 281.7471 159.4 287 C
152.9 282.5 L
f
151.5 182.3 m
155.6439 176.9823 160.7762 170.1536 164.8 164.5 C
172.4 169.8 L
168.2804 175.6509 163.3669 182.2527 159.2 187.6 C
151.5 182.3 L
f
188.1 375 m
184.2169 380.515 180.1198 386.0416 176.1 391.2 C
170.8 387.5 L
174.8033 382.3628 179.1287 376.6359 182.9 371.3 C
188.1 375 L
f
189.4 274.8 m
185.3987 280.4829 180.8933 286.5471 176.8 291.8 C
170.3 287.3 L
174.3736 282.0725 179.1024 275.7947 183 270.3 C
189.4 274.8 L
f
190.7 174.6 m
186.5804 180.4509 181.6669 187.0527 177.5 192.4 C
169.8 187.1 L
173.9439 181.7823 179.0762 174.9536 183.1 169.3 C
190.7 174.6 L
f
169.3 86.9 m
173.5142 81.4921 179.05 74.1125 183.2 68.3 C
192 74.4 L
187.7622 80.4189 182.4405 87.5583 178.2 93 C
169.3 86.9 L
f
172.8 69.6 m
168.5622 75.6189 163.2405 82.7583 159 88.2 C
150.1 82.1 L
154.3142 76.6921 159.85 69.3125 164 63.5 C
172.8 69.6 L
f
*u
1 D
258.8 460.8371 m
255.2206 464.9705 250.303 467.2 244.6 467.2 c
233.9458 467.2 225.6 459.0299 225.6 448.6 c
225.6 438.1701 233.9458 430 244.6 430 c
250.9136 430 256.7804 433.2931 260.3287 438.1203 C
259.5584 422.3062 252.1161 414.6218 233 411.2 C
234 406.8 L
255.4691 410.0675 265 420.4818 265 441 c
265 444.6617 264.5802 447.986 263.8 450.9453 C
263.8 476.8 L
293.8 476.8 L
293.8 481.6 L
263.8 481.6 L
263.8 494.8 L
258.8 494.8 L
258.8 481.6 L
206.2 481.6 L
206.2 476.8 L
258.8 476.8 L
258.8 460.8371 L
f
0 D
244.6 434.8 m
236.372 434.8 230.4 440.6037 230.4 448.6 c
230.4 456.5962 236.372 462.4 244.6 462.4 c
252.8093 462.4 258.8 456.4673 258.8 448.6 c
258.8 440.7327 252.8093 434.8 244.6 434.8 c
f
*U
*u
1 D
257.2 362.9279 m
253.6893 365.9619 249.2482 367.6 244.2 367.6 c
232.8063 367.6 224.1 359.1474 224.1 348.4 c
224.1 337.5276 232.9313 329.2 244.2 329.2 c
249.618 329.2 254.8026 331.6215 258.5776 335.2779 C
257.1931 322.3439 250.207 316.2769 231.9 313 C
233.45 306.7 L
256.0244 310.1357 265.6 320.4022 265.6 340.8 c
265.6 344.2561 265.2147 347.4271 264.5 350.2902 C
264.5 375.7 L
293.9 375.7 L
293.9 382.4 L
264.5 382.4 L
264.5 395 L
257.2 395 L
257.2 382.4 L
206.1 382.4 L
206.1 375.7 L
257.2 375.7 L
257.2 362.9279 L
f
0 D
244.2 335.7 m
236.6403 335.7 231.2 341.0397 231.2 348.4 c
231.2 355.6769 236.557 361.1 244.2 361.1 c
251.7639 361.1 257.2 355.6828 257.2 348.4 c
257.2 341.2422 251.8056 335.7 244.2 335.7 c
f
*U
*u
1 D
255.6 264.5533 m
252.26 266.7917 248.2643 268 243.8 268 c
231.6668 268 222.6 259.2649 222.6 248.2 c
222.6 236.885 231.9168 228.4 243.8 228.4 c
248.4733 228.4 253.0297 230.1983 256.7313 232.9944 C
254.9051 222.6454 248.2347 217.9208 230.8 214.8 C
232.9 206.6 L
256.5797 210.2039 266.2 220.3225 266.2 240.6 c
266.2 243.858 265.8517 246.8796 265.2 249.6396 C
265.2 274.6 L
294 274.6 L
294 283.2 L
265.2 283.2 L
265.2 295.2 L
255.6 295.2 L
255.6 283.2 L
206 283.2 L
206 274.6 L
255.6 274.6 L
255.6 264.5533 L
f
0 D
243.8 236.6 m
236.9087 236.6 232 241.4757 232 248.2 c
232 254.7576 236.742 259.8 243.8 259.8 c
250.7184 259.8 255.6 254.8983 255.6 248.2 c
255.6 241.7517 250.8018 236.6 243.8 236.6 c
f
*U
*u
1 D
254 165.8796 m
250.8951 167.5207 247.3246 168.4 243.4 168.4 c
230.5273 168.4 221.1 159.3825 221.1 148 c
221.1 136.2425 230.9023 127.6 243.4 127.6 c
247.3763 127.6 251.3064 128.8924 254.7427 130.9753 C
252.5143 123.0962 246.0074 119.5189 229.7 116.6 C
232.35 106.5 L
257.1351 110.2722 266.8 120.2429 266.8 140.4 c
266.8 143.4552 266.4872 146.3159 265.9 148.9586 C
265.9 154.7442 L
269.6414 149.8819 273.871 144.2179 277.3 139.4 C
284.9 144.7 L
280.7805 150.5509 275.8669 157.1527 271.7 162.5 C
265.9 158.5078 L
265.9 173.5 L
294.1 173.5 L
294.1 184 L
265.9 184 L
265.9 195.4 L
254 195.4 L
254 184 L
205.9 184 L
205.9 173.5 L
254 173.5 L
254 165.8796 L
f
0 D
243.4 137.5 m
237.177 137.5 232.8 141.9118 232.8 148 c
232.8 153.8383 236.927 158.5 243.4 158.5 c
249.6729 158.5 254 154.1138 254 148 c
254 142.2612 249.798 137.5 243.4 137.5 c
f
*U
283.5 466.5 m
287.433 461.453 291.3549 456.277 295 451.1 C
299 454 L
295.2352 459.347 291.5462 464.336 287.6 469.4 C
283.5 466.5 L
f
271.5 461.7 m
275.433 456.653 279.355 451.4769 283 446.3 C
287 449.2 L
283.2352 454.547 279.5462 459.536 275.6 464.6 C
271.5 461.7 L
f
269 360.2 m
273.0033 355.0628 277.3287 349.3358 281.1 344 C
286.3 347.7 L
282.417 353.215 278.3198 358.7416 274.3 363.9 C
269 360.2 L
f
266.5 258.7 m
270.5736 253.4725 275.3025 247.1947 279.2 241.7 C
285.6 246.2 L
281.5987 251.8829 277.0933 257.9471 273 263.2 C
266.5 258.7 L
f
281.9 365 m
285.9033 359.8628 290.2287 354.1359 294 348.8 C
299.2 352.5 L
295.317 358.015 291.2198 363.5416 287.2 368.7 C
281.9 365 L
f
299.4 251 m
295.3987 256.6829 290.8934 262.7471 286.8 268 C
280.3 263.5 L
284.3736 258.2725 289.1024 251.9947 293 246.5 C
299.4 251 L
f
278.7 162 m
282.8439 156.6823 287.9762 149.8536 292 144.2 C
299.6 149.5 L
295.4804 155.3509 290.5669 161.9527 286.4 167.3 C
278.7 162 L
f
277.1 60.5 m
281.3142 55.0921 286.85 47.7125 291 41.9 C
299.8 48 L
295.5622 54.0189 290.2405 61.1583 286 66.6 C
277.1 60.5 L
f
*u
1 D
266.6 59.1955 m
266.6 72.4 L
294.2 72.4 L
294.2 84.8 L
266.6 84.8 L
266.6 95.6 L
252.4 95.6 L
252.4 84.8 L
205.8 84.8 L
205.8 72.4 L
252.4 72.4 L
252.4 66.973 L
249.5715 68.1605 246.4196 68.8 243 68.8 c
229.3878 68.8 219.6 59.5 219.6 47.8 c
219.6 35.6 229.8878 26.8 243 26.8 c
246.2238 26.8 249.4361 27.6486 252.4083 29.0644 C
249.704 23.6267 243.2417 21.0209 228.6 18.4 C
231.8 6.4 L
257.6904 10.3404 267.4 20.1633 267.4 40.2 c
267.4 43.0472 267.1217 45.7358 266.6 48.2468 C
266.6 49.0445 L
269.6327 45.0297 272.7901 40.7554 275.4 37.1 C
284.2 43.2 L
279.9622 49.2189 274.6405 56.3583 270.4 61.8 C
266.6 59.1955 L
f
0 D
243 38.4 m
237.4454 38.4 233.6 42.3478 233.6 47.8 c
233.6 52.919 237.112 57.2 243 57.2 c
248.6275 57.2 252.4 53.3293 252.4 47.8 c
252.4 42.7707 248.7943 38.4 243 38.4 c
f
*U
399 484.7401 m
395.6117 489.5524 392.2916 494.0424 388.7401 498.6 C
385.0501 495.99 L
388.5898 491.4477 392.1194 486.7894 395.4 482.1301 C
399 484.7401 L
f
389.2801 480.4201 m
385.8918 485.2324 382.5717 489.7225 379.0201 494.28 C
375.3302 491.67 L
378.8698 487.1278 382.3996 482.4693 385.6801 477.8101 C
389.2801 480.4201 L
f
383.6301 395.57 m
387.233 390.9465 391.1259 385.7924 394.52 380.9901 C
399.2 384.3201 L
395.7053 389.2835 392.0178 394.2574 388.4001 398.9 C
383.6301 395.57 L
f
382.2101 295.15 m
385.8763 290.4454 390.1323 284.7954 393.64 279.8501 C
399.4 283.9001 L
395.7989 289.0147 391.7441 294.4725 388.0601 299.2 C
382.2101 295.15 L
f
380.7901 194.73 m
384.5196 189.9441 389.1387 183.7984 392.76 178.7101 C
399.6 183.4801 L
395.8924 188.7459 391.4703 194.6875 387.7201 199.5 C
380.7901 194.73 L
f
372.8302 391.25 m
376.4331 386.6266 380.326 381.4723 383.7201 376.6701 C
388.4001 380.0001 L
384.9053 384.9636 381.2179 389.9375 377.6001 394.58 C
372.8302 391.25 L
f
379.3701 94.31 m
383.1629 89.443 388.1451 82.8014 391.88 77.5701 C
399.8 83.0601 L
395.986 88.4771 391.1965 94.9025 387.3801 99.8 C
379.3701 94.31 L
f
*u
1 D
385.7601 78.7401 m
381.9461 84.1571 377.1566 90.5825 373.3402 95.48 C
371.4727 94.2 L
358.2 94.2 L
358.2 73.6 L
333 73.6 L
333 92.2 L
319.2 92.2 L
319.2 73.6 L
305.6 73.6 L
305.6 60.4 L
319.2 60.4 L
319.2 33.4 L
319.2 16.2598 326.0008 9.8 352.2 9.8 c
361.7633 9.8 370.4567 10.6172 378.4 12.4 C
376.4 25.6 L
369.3458 24.0167 360.7735 23 352.2 23 c
334.4334 23 333 24.7067 333 33.4 C
333 60.4 L
358.2 60.4 L
358.2 53.5 L
358.2 48.8172 358.0006 48.6 355 48.6 c
352.7 48.6 348.325 49.425 345.2 50.3 C
342.4 37.4 L
348.0125 35.8 353.6625 34.6 359.8 34.6 c
368.0302 34.6 371.6 38.5688 371.6 47.1 C
371.6 60.4 L
392 60.4 L
392 73.6 L
378.3447 73.6 L
385.7601 78.7401 L
f
0 D
371.6 81.7658 m
373.6942 78.9665 375.7745 76.1337 377.5884 73.6 C
371.6 73.6 L
371.6 81.7658 L
f
*U
149.8 308.1 m
166.1542 308.1 178.0522 318.0807 187.0881 343.6332 C
180.3881 345.9332 L
172.2775 323.1667 162.978 315.2 149.8 315.2 c
133.2551 315.2 126.1 322.5913 126.1 346.8 c
126.1 360.662 126.978 376.9871 128.4 391.1 C
120.9 391.1 L
119.4401 376.9355 118.6 360.875 118.6 346.8 c
118.6 318.7233 128.4891 308.1 149.8 308.1 c
f
149.8 208 m
166.267 208 178.7015 218.5538 187.3881 244.4332 C
178.4881 247.2332 L
171.047 225.2994 162.0128 217.4 149.8 217.4 c
134.4424 217.4 127.6 224.3488 127.6 246.8 c
127.6 260.072 128.6312 276.783 130.2 291.4 C
120.2 291.4 L
118.5811 276.9531 117.6 260.575 117.6 246.8 c
117.6 219.0985 128.0447 208 149.8 208 c
f
149.8 107.9 m
166.3798 107.9 179.3507 119.0269 187.6881 145.2332 C
176.5881 148.5332 L
169.8165 127.4321 161.0475 119.6 149.8 119.6 c
135.6296 119.6 129.1 126.1061 129.1 146.8 c
129.1 159.4819 130.2844 176.579 132 191.7 C
119.5 191.7 L
117.722 176.9708 116.6 160.275 116.6 146.8 c
116.6 119.4738 127.6002 107.9 149.8 107.9 c
f
149.8 21.8 m
136.8169 21.8 130.6 27.8636 130.6 46.8 c
130.6 58.8918 131.9375 76.375 133.8 92 C
118.8 92 L
116.863 76.9884 115.6 59.975 115.6 46.8 c
115.6 19.849 127.1558 7.8 149.8 7.8 c
166.4925 7.8 180 19.5 187.9881 46.0332 C
174.6881 49.8332 L
168.586 29.5647 160.0823 21.8 149.8 21.8 c
f
U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
