%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (2436.eps)
%%CreationDate: (5/26/04) (2:46 PM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
1 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
500 600 m
500 700 L
400 700 L
400 600 L
500 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
400 600 m
400 700 L
300 700 L
300 600 L
400 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
500 500 m
500 600 L
400 600 L
400 500 L
500 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
400 500 m
400 600 L
300 600 L
300 500 L
400 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
0 Ap
0 O
0 g
1 D
83 678 m
10 678 L
10 675 L
83 675 L
83 678 L
f
73.6 615 m
65.9288 613.7008 58.2581 613 51 613 c
28.8423 613 18 621.0618 18 634 c
18 644.2482 26.501 651 43 651 c
53.5492 651 65.1647 647.7917 72.6 643.2 C
75 645 L
66.8805 650.3542 54.8361 654 43 654 c
24.4849 654 15 645.9505 15 634 c
15 619.1603 26.9326 610 51 610 c
58.4638 610 66.25 610.6875 74 612 C
73.6 615 L
f
75 645 m
63.2121 659.9911 59.8289 669.263 59 693 C
56 693 L
56.8299 669.2345 60.2112 658.9553 72.6 643.2 C
75 645 L
f
94 681 m
90.2352 686.347 86.875 690.9375 83 696 C
80.6 694.2 L
84.375 689.25 87.5417 684.9218 91.5 679.3 C
94 681 L
f
80 677 m
76.2352 682.347 72.875 686.9375 69 692 C
66.6 690.2 L
70.375 685.25 73.5417 680.9218 77.5 675.3 C
80 677 L
f
123 691 m
121.7382 677.5343 121 660.9438 121 647 C
121 619.4015 130.7595 609 151 609 c
166.2735 609 177.7103 618.0313 187 643 C
184.2 644 L
175.4709 620.538 165.2777 612 151 612 c
132.3225 612 124 621.4737 124 647 c
124 661.0985 124.7559 677.7223 126 691 C
123 691 L
f
187 675 m
183.2352 680.347 179.875 684.9375 176 690 C
173.6 688.2 L
177.375 683.25 180.5417 678.9218 184.5 673.3 C
187 675 L
f
169 671 m
165.2352 676.347 161.875 680.9375 158 686 C
155.6 684.2 L
159.375 679.25 162.5417 674.9218 166.5 669.3 C
169 671 L
f
258 642 m
258 623.8234 249.5612 614.0064 230.4 611 C
231 608 L
251.158 611.1628 261 621.7538 261 642 c
261 659.5674 253.9341 668 242 668 c
232.059 668 224 659.941 224 650 c
224 640.059 232.059 632 242 632 c
252.1371 632 260 639.9167 260 650 C
260 678 L
291 678 L
291 681 L
260 681 L
260 695 L
257 695 L
257 681 L
207 681 L
207 678 L
257 678 L
257 650 L
257 641.4222 250.0778 635 242 635 c
233.7289 635 227 641.7289 227 650 c
227 658.2711 233.7289 665 242 665 c
252.1167 665 258 657.9284 258 642 c
f
298 657 m
294.2352 662.347 290.875 666.9375 287 672 C
284.6 670.2 L
288.375 665.25 291.5417 660.9218 295.5 655.3 C
298 657 L
f
283 652 m
279.2352 657.347 275.875 661.9375 272 667 C
269.6 665.2 L
273.375 660.25 276.5417 655.9218 280.5 650.3 C
283 652 L
f
u
122 591.1636 m
120.7451 577.6301 120 561.0449 120 547.1636 C
120 519.593 130.2595 508.8303 150.6667 508.8303 c
166.5498 508.8303 178.2117 518.0839 187.6667 543.497 C
182.532 545.4345 L
173.8383 522.2579 164.1839 514.1637 150.6667 514.1637 c
133.4785 514.1637 125.6667 523.0029 125.6667 547.1636 c
125.6667 561.1125 126.4384 577.9213 127.6667 591.1636 C
122 591.1636 L
f
120.9999 491.3273 m
119.7519 477.726 118.9999 461.146 118.9999 447.3273 C
118.9999 419.7844 129.7594 408.6606 150.3333 408.6606 c
166.8261 408.6606 178.713 418.1365 188.3334 443.9939 C
180.864 446.8691 L
172.2056 423.9778 163.0901 416.3274 150.3333 416.3274 c
134.6345 416.3274 127.3334 424.532 127.3334 447.3273 c
127.3334 461.1265 128.1209 478.1202 129.3334 491.3273 C
120.9999 491.3273 L
f
120 391.5 m
118.7589 377.831 118 361.2563 118 347.5 C
118 319.985 129.2595 308.5 150 308.5 c
167.1024 308.5 179.2144 318.1982 189 344.5 C
179.1962 348.3126 L
170.5732 325.7066 161.9964 318.5 150 318.5 c
135.7904 318.5 129 326.0702 129 347.5 c
129 361.1496 129.8033 378.3283 131 391.5 C
120 391.5 L
f
119 291.6636 m
117.7658 277.9268 117 261.3574 117 247.6636 C
117 220.1765 128.7595 208.3303 149.6667 208.3303 c
167.3787 208.3303 179.7157 218.2508 189.6667 244.997 C
177.5283 249.7472 L
168.9406 227.4265 160.9026 220.6637 149.6667 220.6637 c
136.9464 220.6637 130.6667 227.5993 130.6667 247.6636 c
130.6667 261.1636 131.4858 278.5273 132.6667 291.6636 C
119 291.6636 L
f
118 191.8364 m
116.7728 178.0318 116 161.4677 116 147.8364 C
116 120.3771 128.2595 108.1697 149.3333 108.1697 c
167.655 108.1697 180.217 118.3125 190.3333 145.503 C
175.8605 151.1907 L
167.3081 129.1554 159.8089 122.8363 149.3333 122.8363 c
138.1023 122.8363 132.3333 129.1375 132.3333 147.8364 c
132.3333 161.1867 133.1682 178.7354 134.3333 191.8364 C
118 191.8364 L
f
U
u
169.3333 570.6636 m
165.4877 576.1299 161.8021 581.1532 157.8333 586.3303 C
153.8666 583.6136 L
157.7604 578.5282 161.2485 573.7677 165.25 568.0802 C
169.3333 570.6636 L
f
169.6667 470.3272 m
165.7401 475.9127 161.7292 481.3689 157.6666 486.6606 C
152.1332 483.0272 L
156.1457 477.8063 159.9554 472.6135 163.9999 466.8605 C
169.6667 470.3272 L
f
170 370 m
165.9926 375.7047 161.6562 381.5937 157.5 387 C
150.4 382.45 L
154.5312 377.0937 158.6623 371.4686 162.75 365.65 C
170 370 L
f
170.3333 269.6636 m
166.2451 275.4876 161.5833 281.8095 157.3333 287.3303 C
148.6666 281.8636 L
152.9166 276.3719 157.3692 270.3145 161.5 264.4302 C
170.3333 269.6636 L
f
170.6667 169.3364 m
166.4975 175.2796 161.5104 182.0343 157.1667 187.6697 C
146.9334 181.2864 L
151.3021 175.6593 156.0761 169.1696 160.25 163.2198 C
170.6667 169.3364 L
f
U
u
187.6667 574.9969 m
183.821 580.4632 180.1354 585.4866 176.1667 590.6636 C
172.1999 587.947 L
176.0937 582.8615 179.5819 578.101 183.5833 572.4136 C
187.6667 574.9969 L
f
188.3334 474.9939 m
184.4068 480.5794 180.3958 486.0356 176.3333 491.3273 C
170.7999 487.6939 L
174.8124 482.473 178.6221 477.2802 182.6666 471.5272 C
188.3334 474.9939 L
f
189 375 m
184.9926 380.7047 180.6562 386.5937 176.5 392 C
169.4 387.45 L
173.5312 382.0937 177.6623 376.4686 181.75 370.65 C
189 375 L
f
189.6667 274.9969 m
185.5784 280.8209 180.9167 287.1428 176.6667 292.6636 C
168 287.1969 L
172.25 281.7053 176.7025 275.6478 180.8333 269.7636 C
189.6667 274.9969 L
f
190.3333 175.003 m
186.1642 180.9463 181.1771 187.7009 176.8333 193.3364 C
166.6 186.953 L
170.9688 181.326 175.7428 174.8363 179.9167 168.8864 C
190.3333 175.003 L
f
U
u
406.6667 552.4969 m
423.7454 552.4969 440.445 559.4967 472.5 582.9969 C
472.5 588.497 L
426.3333 588.497 L
426.3333 583.3302 L
470.6666 583.3302 L
469.8813 587.2868 L
437.0323 563.1749 421.0439 556.497 406.6667 556.497 C
406.6667 552.4969 L
f
406.3333 451.7939 m
425.3411 451.7939 441.3847 458.3063 472 480.9938 C
472 488.9939 L
425.6666 488.9939 L
425.6666 481.6605 L
469.3332 481.6605 L
468.525 487.1457 L
436.5177 463.377 421.1584 456.9939 406.3333 456.9939 C
406.3333 451.7939 L
f
406 351.1 m
426.9367 351.1 442.3243 357.1251 471.5 379 C
471.5 389.5 L
425 389.5 L
425 380 L
468 380 L
467.1688 387.0139 L
436.003 363.5883 421.2729 357.5 406 357.5 C
406 351.1 L
f
405.6667 250.3969 m
428.5325 250.3969 443.264 255.9346 471 276.9969 C
471 289.997 L
424.3333 289.997 L
424.3333 278.3302 L
466.6666 278.3302 L
465.8125 286.8729 L
435.4884 263.7904 421.3874 257.997 405.6667 257.997 C
405.6667 250.3969 L
f
405.3333 149.7031 m
430.1281 149.7031 444.2036 154.7534 470.5 175.0031 C
470.5 190.503 L
423.6667 190.503 L
423.6667 176.6698 L
465.3334 176.6698 L
464.4563 186.741 L
434.9737 164.0016 421.5019 158.503 405.3333 158.503 C
405.3333 149.7031 L
f
U
u
480 568.3303 m
476.1543 573.7966 472.4687 578.8199 468.5 583.997 C
464.6999 581.2803 L
468.5937 576.1949 472.0819 571.4344 476.0833 565.7469 C
480 568.3303 L
f
480 468.6606 m
476.0735 474.2461 472.0625 479.7023 468 484.994 C
462.7999 481.3606 L
466.8124 476.1397 470.622 470.9469 474.6666 465.1939 C
480 468.6606 L
f
480 369 m
475.9926 374.7047 471.6562 380.5937 467.5 386 C
460.9 381.45 L
465.0312 376.0937 469.1623 370.4686 473.25 364.65 C
480 369 L
f
480 269.3303 m
475.9117 275.1543 471.25 281.4761 467 286.997 C
458.9999 281.5303 L
463.2499 276.0386 467.7025 269.9812 471.8333 264.0969 C
480 269.3303 L
f
480 169.6697 m
475.8309 175.6129 470.8438 182.3676 466.5 188.003 C
457.1001 181.6197 L
461.4688 175.9926 466.2428 169.5029 470.4167 163.5531 C
480 169.6697 L
f
U
u
494.6667 572.3303 m
490.821 577.7966 487.1354 582.8199 483.1667 587.997 C
479.3666 585.2803 L
483.2604 580.1949 486.7485 575.4344 490.75 569.7469 C
494.6667 572.3303 L
f
495.3334 472.6606 m
491.4068 478.2461 487.3958 483.7023 483.3333 488.994 C
478.1333 485.3606 L
482.1457 480.1397 485.9554 474.9469 489.9999 469.1939 C
495.3334 472.6606 L
f
496 373 m
491.9926 378.7047 487.6562 384.5937 483.5 390 C
476.9 385.45 L
481.0312 380.0937 485.1623 374.4686 489.25 368.65 C
496 373 L
f
496.6667 273.3303 m
492.5784 279.1543 487.9167 285.4761 483.6667 290.997 C
475.6666 285.5303 L
479.9166 280.0386 484.3692 273.9812 488.5 268.0969 C
496.6667 273.3303 L
f
497.3333 173.6697 m
493.1642 179.6129 488.1771 186.3676 483.8333 192.003 C
474.4334 185.6197 L
478.8021 179.9926 483.5761 173.5029 487.75 167.5531 C
497.3333 173.6697 L
f
U
u
75.3334 545.4969 m
63.1725 560.7803 59.815 569.9906 59 593.3303 C
53.4833 593.3303 L
54.326 569.1956 57.9394 558.5662 70.9166 542.2302 C
75.3334 545.4969 L
f
75.6667 445.9939 m
63.1328 461.5694 59.8011 470.7183 59 493.6606 C
50.9665 493.6606 L
51.8222 469.1567 55.6677 458.177 69.2332 441.2605 C
75.6667 445.9939 L
f
75 346.5 m
62.0932 362.3677 58.7873 371.455 58 394 C
47.45 394 L
48.3186 369.127 52.3962 357.7971 66.55 340.3 C
75 346.5 L
f
75.3334 246.9969 m
62.0536 263.1569 58.7734 272.1826 58 294.3303 C
44.9333 294.3303 L
45.8147 269.0881 50.1244 257.408 64.8666 239.3302 C
75.3334 246.9969 L
f
74.6667 147.503 m
61.0139 163.9551 57.7595 172.9194 57 194.6697 C
41.4168 194.6697 L
42.3111 169.0583 46.8529 157.028 62.1834 138.3697 C
74.6667 147.503 L
f
U
u
73.6996 516.9641 m
66.2184 515.6459 57.7723 514.8303 50.6667 514.8303 c
29.592 514.8303 19.6667 522.2577 19.6667 534.1636 c
19.6667 543.4416 27.4411 549.6636 42.5 549.6636 c
52.6354 549.6636 63.7694 546.5976 70.9166 542.2302 C
75.3334 545.4969 L
67.0567 550.9275 54.1984 554.8303 42.5 554.8303 c
24.1143 554.8303 14.1667 546.3389 14.1667 534.3303 c
14.1667 519.1218 26.3514 509.6636 50.6667 509.6636 c
58.1796 509.6636 66.817 510.462 74.5025 511.833 C
73.6996 516.9641 L
f
73.7992 418.9282 m
66.508 417.591 57.2865 416.6607 50.3333 416.6607 c
30.3418 416.6607 21.3334 423.4537 21.3334 434.3272 c
21.3334 442.6351 28.3812 448.3271 42 448.3271 c
51.7215 448.3271 62.374 445.4036 69.2332 441.2605 C
75.6667 445.9939 L
67.2328 451.5009 53.5608 455.6606 42 455.6606 c
23.7437 455.6606 13.3333 446.7274 13.3333 434.6606 c
13.3333 419.0832 25.7702 409.3272 50.3333 409.3272 c
57.8954 409.3272 67.3839 410.2364 75.0049 411.666 C
73.7992 418.9282 L
f
73.8988 320.9013 m
66.7976 319.5451 56.8008 318.5 50 318.5 c
31.0915 318.5 23 324.6587 23 334.5 c
23 341.8377 29.3213 347 41.5 347 c
50.2001 347 59.4199 344.5522 66.55 340.3 C
75 346.5 L
65.896 352.4167 51.9361 356.5 41.5 356.5 c
23.3731 356.5 12.5 347.125 12.5 335 c
12.5 319.0539 25.1891 309 50 309 c
57.6113 309 67.9508 310.0201 75.5074 311.5082 C
73.8988 320.9013 L
f
73.9983 222.8654 m
67.0872 221.4902 56.315 220.3303 49.6667 220.3303 c
31.8413 220.3303 24.6667 225.8546 24.6667 234.6636 c
24.6667 241.0312 30.2614 245.6636 41 245.6636 c
49.2942 245.6636 58.0166 243.358 64.8666 239.3302 C
75.3334 246.9969 L
65.8123 253.1567 51.5583 257.3303 41 257.3303 c
23.0026 257.3303 11.6667 247.5134 11.6667 235.3303 c
11.6667 219.0154 24.6079 208.6636 49.6667 208.6636 c
57.3271 208.6636 68.5178 209.7946 76.0098 211.3413 C
73.9983 222.8654 L
f
75.0979 124.8385 m
68.3768 123.4443 56.8293 122.1696 50.3334 122.1696 c
33.591 122.1696 27.3333 127.0596 27.3333 134.8364 c
27.3333 140.2338 32.2015 144.3364 41.5 144.3364 c
48.7532 144.3364 54.7485 142.6733 62.1834 138.3697 C
74.6667 147.503 L
64.4674 154.0725 51.1084 158.1697 41.5 158.1697 c
23.632 158.1697 11.8334 147.911 11.8334 135.6697 c
11.8334 118.986 25.0268 108.3364 50.3334 108.3364 c
58.0429 108.3364 70.0847 109.5782 77.5122 111.1834 C
75.0979 124.8385 L
f
U
117 92 m
115.7797 78.1277 115 61.5688 115 48 C
115 20.5686 127.7595 8 149 8 c
167.9313 8 180.7184 18.3651 191 46 C
174.1925 52.6253 L
165.6755 30.8753 158.7151 25 149 25 c
139.2583 25 134 30.6667 134 48 c
134 61.2007 134.8507 78.9344 136 92 C
117 92 L
f
191 75 m
186.75 81.0625 181.4375 88.25 177 94 C
165.2 86.7 L
169.6875 80.9375 174.7829 74.0155 179 68 C
191 75 L
f
171 69 m
166.75 75.0625 161.4375 82.25 157 88 C
145.2 80.7 L
149.6875 74.9375 154.7829 68.0155 159 62 C
171 69 L
f
u
256.6666 541.9969 m
256.6666 524.1634 249.2615 515.6097 229.3333 512.7637 C
230.3333 507.8303 L
252.154 510.898 262 521.2498 262 542.1636 c
262 559.6477 254.0156 568.1636 241.6667 568.1636 c
231.1162 568.1636 222.8333 559.8807 222.8333 549.6636 c
222.8333 539.4465 231.1162 531.3302 241.6667 531.3302 c
252.0298 531.3302 260.8334 540.0248 260.8334 549.6636 C
260.8334 576.9969 L
291.3334 576.9969 L
291.3334 581.997 L
260.8334 581.997 L
260.8334 595.1636 L
255.5 595.1636 L
255.5 581.997 L
206.6667 581.997 L
206.6667 576.9969 L
255.5 576.9969 L
255.5 549.6636 L
255.5 541.9187 249.2536 536.1636 241.8333 536.1636 c
234.252 536.1636 228.1667 542.1743 228.1667 549.6636 c
228.1667 557.1529 234.252 563.1635 241.8333 563.1635 c
251.2527 563.1635 256.6666 556.5761 256.6666 541.9969 c
f
255.3332 441.9939 m
255.3332 424.5034 248.9617 417.213 228.2666 414.5273 C
229.6666 407.6605 L
253.15 410.6332 263.0001 420.7459 263.0001 442.3272 c
263.0001 459.728 254.0971 468.3272 241.3333 468.3272 c
230.1734 468.3272 221.6666 459.8205 221.6666 449.3272 c
221.6666 438.8339 230.1734 430.6605 241.3333 430.6605 c
251.9225 430.6605 261.6667 440.1329 261.6667 449.3272 C
261.6667 475.9938 L
291.6667 475.9938 L
291.6667 482.994 L
261.6667 482.994 L
261.6667 495.3272 L
253.9999 495.3272 L
253.9999 482.994 L
206.3333 482.994 L
206.3333 475.9938 L
253.9999 475.9938 L
253.9999 449.3272 L
253.9999 442.4153 248.4293 437.3273 241.6667 437.3273 c
234.7751 437.3273 229.3334 442.6198 229.3334 449.3272 c
229.3334 456.0346 234.7751 461.3271 241.6667 461.3271 c
250.3888 461.3271 255.3332 455.2238 255.3332 441.9939 c
f
254 342 m
254 324.8526 248.662 318.8253 227.2 316.3 C
229 307.5 L
254.1459 310.3775 264 320.2511 264 342.5 c
264 359.8174 254.1786 368.5 241 368.5 c
229.2306 368.5 220.5 359.7694 220.5 349 c
220.5 338.2306 229.2306 330 241 330 c
251.8152 330 262.5 340.2501 262.5 349 C
262.5 375 L
292 375 L
292 384 L
262.5 384 L
262.5 395.5 L
252.5 395.5 L
252.5 384 L
206 384 L
206 375 L
252.5 375 L
252.5 349 L
252.5 342.9209 247.6051 338.5 241.5 338.5 c
235.2982 338.5 230.5 343.0743 230.5 349 c
230.5 354.9257 235.2982 359.5 241.5 359.5 c
249.5249 359.5 254 353.8808 254 342 c
f
252.6666 241.9969 m
252.6666 225.1926 248.3623 220.4286 226.1333 218.0637 C
228.3333 207.3303 L
255.1418 210.1127 265 219.7472 265 242.6636 c
265 259.8977 254.26 268.6636 240.6667 268.6636 c
228.2878 268.6636 219.3333 259.7091 219.3333 248.6636 c
219.3333 237.6181 228.2878 229.3302 240.6667 229.3302 c
251.7078 229.3302 263.3334 240.3582 263.3334 248.6636 C
263.3334 273.9969 L
292.3334 273.9969 L
292.3334 284.997 L
263.3334 284.997 L
263.3334 295.6636 L
251 295.6636 L
251 284.997 L
205.6667 284.997 L
205.6667 273.9969 L
251 273.9969 L
251 248.6636 L
251 243.4175 246.7809 239.6636 241.3333 239.6636 c
235.8212 239.6636 231.6667 243.5197 231.6667 248.6636 c
231.6667 253.8075 235.8212 257.6635 241.3333 257.6635 c
248.6609 257.6635 252.6666 252.5286 252.6666 241.9969 c
f
251.3334 142.003 m
251.3334 125.5418 248.0625 122.0409 225.0667 119.8363 C
227.6667 107.1697 L
256.1377 109.8571 266 119.2524 266 142.8364 c
266 159.9872 254.3415 168.8364 240.3334 168.8364 c
227.3451 168.8364 218.1667 159.658 218.1667 148.3364 c
218.1667 137.0147 227.3451 128.6697 240.3334 128.6697 c
251.6005 128.6697 264.1667 140.4755 264.1667 148.3364 C
264.1667 173.0031 L
292.6667 173.0031 L
292.6667 186.003 L
264.1667 186.003 L
264.1667 195.8364 L
249.5001 195.8364 L
249.5001 186.003 L
205.3334 186.003 L
205.3334 173.0031 L
249.5001 173.0031 L
249.5001 148.3364 L
249.5001 143.9231 245.9567 140.8363 241.1667 140.8363 c
236.3443 140.8363 232.8333 143.9743 232.8333 148.3364 c
232.8333 152.6985 236.3443 155.8364 241.1667 155.8364 c
247.797 155.8364 251.3334 151.1856 251.3334 142.003 c
f
U
u
298.1667 555.8302 m
294.321 561.2965 290.6354 566.3198 286.6667 571.4969 C
282.8666 568.7802 L
286.7604 563.6948 290.2485 558.9343 294.25 553.2469 C
298.1667 555.8302 L
f
298.3333 454.6605 m
294.4068 460.246 290.3958 465.7022 286.3333 470.9939 C
281.1332 467.3605 L
285.1457 462.1396 288.9553 456.9468 292.9999 451.1938 C
298.3333 454.6605 L
f
298.5 353.5 m
294.4926 359.2047 290.1563 365.0937 286 370.5 C
279.4 365.95 L
283.5313 360.5937 287.6623 354.9686 291.75 349.15 C
298.5 353.5 L
f
298.6667 252.3302 m
294.5784 258.1542 289.9167 264.4761 285.6667 269.9969 C
277.6666 264.5302 L
281.9166 259.0386 286.3691 252.9811 290.5 247.0969 C
298.6667 252.3302 L
f
298.8333 151.1697 m
294.6642 157.113 289.6771 163.8676 285.3334 169.503 C
275.9334 163.1197 L
280.3022 157.4927 285.0761 151.003 289.25 145.0531 C
298.8333 151.1697 L
f
U
u
282.8333 550.6636 m
278.9877 556.1298 275.3021 561.1532 271.3333 566.3302 C
267.5333 563.6136 L
271.427 558.5281 274.9152 553.7676 278.9166 548.0802 C
282.8333 550.6636 L
f
282.6667 449.3271 m
278.7401 454.9126 274.7291 460.3688 270.6666 465.6605 C
265.4665 462.0271 L
269.479 456.8063 273.2887 451.6134 277.3332 445.8604 C
282.6667 449.3271 L
f
282.5 348 m
278.4926 353.7047 274.1563 359.5937 270 365 C
263.4 360.45 L
267.5313 355.0937 271.6623 349.4686 275.75 343.65 C
282.5 348 L
f
282.3333 246.6636 m
278.2451 252.4876 273.5833 258.8094 269.3333 264.3302 C
261.3333 258.8636 L
265.5833 253.3719 270.0358 247.3145 274.1666 241.4302 C
282.3333 246.6636 L
f
282.1667 145.3364 m
277.9976 151.2797 273.0104 158.0343 268.6667 163.6697 C
259.2667 157.2864 L
263.6355 151.6593 268.4094 145.1696 272.5834 139.2198 C
282.1667 145.3364 L
f
U
299 50 m
294.75 56.0625 289.4375 63.25 285 69 C
274.2 61.7 L
278.6875 55.9375 283.7829 49.0155 288 43 C
299 50 L
f
282 44 m
277.75 50.0625 272.4375 57.25 268 63 C
257.2 55.7 L
261.6875 49.9375 266.7829 43.0155 271 37 C
282 44 L
f
250 42 m
250 25.8818 247.7628 23.6442 224 21.6 C
227 7 L
257.1337 9.5923 267 18.7485 267 43 c
267 60.0675 254.423 69 240 69 c
226.4023 69 217 59.5978 217 48 c
217 36.4022 226.4023 28 240 28 c
251.4932 28 265 40.5836 265 48 C
265 72 L
293 72 L
293 87 L
265 87 L
265 96 L
248 96 L
248 87 L
205 87 L
205 72 L
248 72 L
248 48 l
248 44.4197 245.1325 42 241 42 c
236.8674 42 234 44.4197 234 48 c
234 51.5803 236.8674 54 241 54 c
246.933 54 250 49.8333 250 42 c
f
u
83.1666 578.997 m
9.5 578.997 L
9.5 573.8302 L
83.1666 573.8302 L
83.1666 578.997 L
f
82.3332 479.994 m
9 479.994 L
9 472.6605 L
82.3332 472.6605 L
82.3332 479.994 L
f
74.5 381 m
8.5 381 L
8.5 371.5 L
74.5 371.5 L
74.5 381 L
f
74.6666 281.997 m
8 281.997 L
8 270.3302 L
74.6666 270.3302 L
74.6666 281.997 L
f
70.8334 184.003 m
7.5 184.003 L
7.5 170.1697 L
70.8334 170.1697 L
70.8334 184.003 L
f
U
71 84 m
7 84 L
7 68 L
71 68 L
71 84 L
f
77 48 m
62.9743 64.7443 59.7456 73.647 59 95 C
40.9 95 L
41.8072 69.0195 46.5811 56.6389 62.5 37.4 C
77 48 L
f
77 48 m
67.9375 53.8125 51.0103 59 40 59 c
22.2614 59 10 48.2995 10 36 c
10 18.9475 23.4456 8 49 8 c
56.7587 8 69.6516 9.3527 77.0147 11.0165 C
74.1975 26.8026 L
67.6664 25.3895 55.3435 24 49 24 c
33.3407 24 28 28.2556 28 35 c
28 39.4273 32.1416 43 40 43 c
48.0664 43 56.793 40.6459 62.5 37.4 C
77 48 L
f
u
94.8334 581.1636 m
90.9877 586.6298 87.3021 591.6532 83.3334 596.8303 C
79.5333 594.1136 L
83.427 589.0282 86.9152 584.2677 90.9167 578.5802 C
94.8334 581.1636 L
f
95.6666 481.294 m
91.7401 486.8795 87.7291 492.3357 83.6666 497.6273 C
78.4665 493.994 L
82.479 488.7731 86.2886 483.5803 90.3332 477.8272 C
95.6666 481.294 L
f
97.5 377.5 m
93.4926 383.2047 89.1562 389.0937 85 394.5 C
78.4 389.95 L
82.5312 384.5937 86.6623 378.9686 90.75 373.15 C
97.5 377.5 L
f
98.3334 276.6636 m
94.2451 282.4876 89.5833 288.8094 85.3334 294.3303 C
77.3333 288.8636 L
81.5833 283.3719 86.0358 277.3145 90.1667 271.4302 C
98.3334 276.6636 L
f
98.1667 175.8364 m
93.9975 181.7797 89.0104 188.5343 84.6667 194.1697 C
75.2667 187.7864 L
79.6354 182.1593 84.4094 175.6696 88.5834 169.7198 C
98.1667 175.8364 L
f
U
99 76 m
94.75 82.0625 89.4375 89.25 85 95 C
74.2 87.7 L
78.6875 81.9375 83.7829 75.0155 88 69 C
99 76 L
f
u
80.1667 577.1636 m
76.321 582.6298 72.6354 587.6532 68.6667 592.8303 C
64.8666 590.1136 L
68.7604 585.0282 72.2485 580.2677 76.25 574.5802 C
80.1667 577.1636 L
f
80.3332 477.294 m
76.4067 482.8795 72.3957 488.3357 68.3332 493.6273 C
63.1331 489.994 L
67.1456 484.7731 70.9552 479.5803 74.9998 473.8272 C
80.3332 477.294 L
f
81.5 373.5 m
77.4926 379.2047 73.1562 385.0937 69 390.5 C
62.4 385.95 L
66.5312 380.5937 70.6623 374.9686 74.75 369.15 C
81.5 373.5 L
f
82.6667 272.6636 m
78.5784 278.4876 73.9167 284.8094 69.6667 290.3303 C
61.6666 284.8636 L
65.9166 279.3719 70.3691 273.3145 74.5 267.4302 C
82.6667 272.6636 L
f
80.8333 171.8364 m
76.6642 177.7797 71.6771 184.5343 67.3334 190.1697 C
57.9334 183.7864 L
62.3021 178.1593 67.0761 171.6696 71.25 165.7198 C
80.8333 171.8364 L
f
U
81 72 m
76.75 78.0625 71.4375 85.25 67 91 C
56.2 83.7 L
60.6875 77.9375 65.7829 71.0155 70 65 C
81 72 L
f
432 633 m
432 644.3423 441.9483 653 454 653 c
489 653 L
489 656 L
407 656 L
407 653 L
446 653 L
445.7 654.6 L
434.8445 650.6132 429 642.776 429 633 c
429 619.5284 439.4906 610 457 610 c
463.7503 610 468.0316 610.533 475 612 C
474.4 615 L
467.3536 613.5166 463.2743 613 457 613 c
441.4798 613 432 621.184 432 633 c
f
407 653.2 m
422.1496 653.2 439.5053 660.6872 473 685 C
473 688 L
427 688 L
427 685 L
472 685 L
471.2377 687.4278 L
437.547 662.9728 420.9294 656 407 656 C
407 653.2 L
f
494 672 m
490.2352 677.347 486.875 681.9375 483 687 C
480.6 685.2 L
484.375 680.25 487.5417 675.9218 491.5 670.3 C
494 672 L
f
480 668 m
476.2352 673.347 472.875 677.9375 469 683 C
466.6 681.2 L
470.375 676.25 473.5417 671.9218 477.5 666.3 C
480 668 L
f
372 691 m
369 691 L
369 672 L
326 672 L
326 691 L
323 691 L
323 672 L
305 672 L
305 669 L
323 669 L
323 633.7399 L
323 613.8822 326.7756 610 353 610 c
361.9014 610 371.6346 610.6276 380 612 C
379.6 615 L
371.3057 613.6392 361.6261 613 353 613 c
328.8319 613 326 615.4673 326 633.7399 c
326 669 L
369 669 L
369 652 L
369 642.3801 368.6526 642 362 642 c
358.9839 642 352.3125 643.625 347.1 645.8 C
346 643 L
351.2264 640.7092 358.3614 639 362 639 c
370.4684 639 372 640.4164 372 652 C
372 669 L
390.5 669 L
390.5 672 L
372 672 L
372 691 L
f
399 678 m
395.2352 683.347 391.875 687.9375 388 693 C
385.6 691.2 L
389.375 686.25 392.5417 681.9218 396.5 676.3 C
399 678 L
f
388 671 m
384.2352 676.347 380.875 680.9375 377 686 C
374.6 684.2 L
378.375 679.25 381.5417 674.9218 385.5 669.3 C
388 671 L
f
498 74 m
493.75 80.0625 488.4375 87.25 484 93 C
473.2 85.7 L
477.6875 79.9375 482.7829 73.0155 487 67 C
498 74 L
f
480 70 m
475.75 76.0625 470.4375 83.25 466 89 C
455.2 81.7 L
459.6875 75.9375 464.7829 69.0155 469 63 C
480 70 L
f
463.1 86.6 m
434.4591 64.2038 421.6164 59 405 59 C
405 49 L
431.7239 49 445.1433 53.563 470 73 C
470 91 L
423 91 L
423 75 L
464 75 L
463.1 86.6 L
f
u
433.8334 532.9969 m
433.8334 543.4888 442.8397 551.3302 455.1667 551.3302 c
489.3334 551.3302 L
489.3334 556.4969 L
406.6667 556.4969 L
406.6667 551.3302 L
446.1667 551.3302 L
445.4167 554.3303 L
433.9644 550.1243 428.3333 542.5617 428.3333 532.8303 c
428.3333 519.1117 439.0848 509.4969 457 509.4969 c
463.9794 509.4969 468.7243 510.0557 475.6667 511.4969 C
474.8 516.647 L
467.8328 515.1998 463.3056 514.6636 457 514.6636 c
442.5984 514.6636 433.8334 522.1786 433.8334 532.9969 c
f
435.6668 432.9939 m
435.6668 442.6353 443.7312 449.6605 456.3334 449.6605 c
489.6667 449.6605 L
489.6667 456.9939 L
406.3333 456.9939 L
406.3333 449.6605 L
446.3333 449.6605 L
445.1333 454.0605 L
433.0842 449.6354 427.6666 442.3473 427.6666 432.6605 c
427.6666 418.695 438.6791 408.9939 457 408.9939 c
464.2085 408.9939 469.4169 409.5784 476.3334 410.9939 C
475.2 418.294 L
468.312 416.8831 463.337 416.3273 457 416.3273 c
443.717 416.3273 435.6668 423.1731 435.6668 432.9939 c
f
437.5 333 m
437.5 341.791 444.6226 348 457.5 348 c
490 348 L
490 357.5 L
406 357.5 L
406 348 L
446.5 348 L
444.85 353.8 L
432.2042 349.1557 427 342.1422 427 332.5 c
427 318.2875 438.2734 308.5 457 308.5 c
464.4376 308.5 470.1095 309.1102 477 310.5 C
475.6 319.95 L
468.7913 318.5753 463.3683 318 457 318 c
444.8355 318 437.5 324.1767 437.5 333 c
f
439.3334 232.9969 m
439.3334 240.9376 445.514 246.3302 458.6667 246.3302 c
490.3334 246.3302 L
490.3334 257.9969 L
405.6667 257.9969 L
405.6667 246.3302 L
446.6667 246.3302 L
444.5667 253.5303 L
431.3241 248.6669 426.3333 241.9279 426.3333 232.3303 c
426.3333 217.8709 437.8676 207.9969 457 207.9969 c
464.6668 207.9969 470.8022 208.6329 477.6667 209.9969 C
476 221.597 L
469.2705 220.2585 463.3997 219.6636 457 219.6636 c
445.9541 219.6636 439.3334 225.1713 439.3334 232.9969 c
f
441.1666 133.003 m
441.1666 140.0933 446.4054 144.6697 459.8333 144.6697 c
490.6667 144.6697 L
490.6667 158.503 L
405.3334 158.503 L
405.3334 144.6697 L
446.8333 144.6697 L
444.2834 153.2697 L
430.444 148.1872 425.6667 141.7227 425.6667 132.1697 c
425.6667 117.4634 437.4619 107.503 457 107.503 c
464.8959 107.503 471.4948 108.1648 478.3333 109.503 C
476.4 123.253 L
469.7497 121.9508 463.431 121.3363 457 121.3363 c
447.0726 121.3363 441.1666 126.1749 441.1666 133.003 c
f
U
457 23 m
448.1912 23 443 27.1695 443 33 c
443 39.2398 447.2968 43 461 43 c
491 43 L
491 59 L
405 59 L
405 43 L
447 43 L
444 53 L
429.5639 47.6983 425 41.5084 425 32 c
425 17.0467 437.0562 7 457 7 c
465.125 7 472.1875 7.6875 479 9 C
476.8 24.9 L
470.2289 23.634 463.4624 23 457 23 c
f
u
366.4999 591.3303 m
366.4999 570.4969 L
327.3334 570.4969 L
327.3334 591.3303 L
321.8333 591.3303 L
321.8333 570.4969 L
304.8333 570.4969 L
304.8333 565.3302 L
321.8333 565.3302 L
321.8333 533.7802 L
321.8333 514.1392 326.3534 509.6636 352.5 509.6636 c
361.5264 509.6636 371.758 510.3324 380.1667 511.6636 C
379.5667 516.8303 L
371.2339 515.4984 361.2737 514.8303 352.5 514.8303 c
330.0666 514.8303 327.3334 517.192 327.3334 533.7802 c
327.3334 565.3302 L
366.8333 565.3302 L
366.8333 551.7969 L
366.8333 543.296 366.49 542.9303 360.5666 542.9303 c
357.5615 542.9303 351.3125 544.3824 346.3 546.3303 C
345 541.4302 L
350.4525 539.2962 357.9977 537.6969 361.6667 537.6969 c
370.2906 537.6969 372.3334 539.6244 372.3334 551.0302 C
372.3334 565.3302 L
390.5833 565.3302 L
390.5833 570.4969 L
372 570.4969 L
372 591.3303 L
366.4999 591.3303 L
f
364.9998 491.6606 m
364.9998 472.9939 L
328.6667 472.9939 L
328.6667 491.6606 L
320.6666 491.6606 L
320.6666 472.9939 L
304.6667 472.9939 L
304.6667 465.6605 L
320.6666 465.6605 L
320.6666 433.8205 L
320.6666 414.3962 325.9313 409.3272 352 409.3272 c
361.1514 409.3272 371.8814 410.0373 380.3333 411.3272 C
379.5333 418.6607 L
371.1621 417.3576 360.9213 416.6607 352 416.6607 c
331.3013 416.6607 328.6667 418.9168 328.6667 433.8205 c
328.6667 465.6605 L
365.6665 465.6605 L
365.6665 451.5939 L
365.6665 444.212 365.3275 443.8606 360.1332 443.8606 c
357.1391 443.8606 351.3124 445.1398 346.5 446.8606 C
344.9999 439.8605 L
350.6786 437.8833 358.634 436.3938 362.3333 436.3938 c
371.1128 436.3938 373.6667 438.8325 373.6667 450.0605 C
373.6667 465.6605 L
379.6665 465.6605 L
379.6665 474.9939 L
373 474.9939 L
373 491.6606 L
364.9998 491.6606 L
f
362.5 392 m
362.5 373.5 L
330 373.5 L
330 392 L
319.5 392 L
319.5 373.5 L
304.5 373.5 L
304.5 364 L
319.5 364 L
319.5 333.8699 L
319.5 314.6623 325.5092 309 351.5 309 c
360.7764 309 372.0048 309.7513 380.5 311 C
379.5 320.5 L
371.0903 319.2258 360.569 318.5 351.5 318.5 c
332.5359 318.5 330 320.6505 330 333.8699 c
330 364 L
363.5 364 L
363.5 351.4 L
363.5 345.1369 363.1651 344.8 358.7 344.8 c
355.7169 344.8 350.3125 345.9062 345.7 347.4 C
344 338.3 L
349.9049 336.4796 358.2703 335.1 362 335.1 c
370.935 335.1 374 338.0498 374 349.1 C
374 364 L
381.75 364 L
381.75 374.5 L
373 374.5 L
373 392 L
362.5 392 L
f
358.9999 292.3303 m
358.9999 273.9969 L
331.3334 273.9969 L
331.3334 292.3303 L
318.3333 292.3303 L
318.3333 273.9969 L
304.3333 273.9969 L
304.3333 262.3302 L
318.3333 262.3302 L
318.3333 233.9102 L
318.3333 214.9193 325.087 208.6636 351 208.6636 c
360.4014 208.6636 372.1282 209.4561 380.6667 210.6636 C
379.4667 222.3303 L
371.0186 221.0851 360.2165 220.3303 351 220.3303 c
333.7707 220.3303 331.3334 222.3752 331.3334 233.9102 c
331.3334 262.3302 L
360.3333 262.3302 L
360.3333 251.1969 L
360.3333 246.0529 360.0026 245.7303 356.2666 245.7303 c
353.2945 245.7303 348.3125 246.6636 343.9 247.9303 C
342 236.7302 L
348.131 235.0666 356.9066 233.7969 360.6667 233.7969 c
369.7572 233.7969 373.3334 237.2578 373.3334 248.1302 C
373.3334 262.3302 L
380.8333 262.3302 L
380.8333 273.9969 L
372 273.9969 L
372 292.3303 L
358.9999 292.3303 L
f
356.5001 192.6697 m
356.5001 174.503 L
332.6666 174.503 L
332.6666 192.6697 L
317.1667 192.6697 L
317.1667 174.503 L
304.1667 174.503 L
304.1667 160.6697 L
317.1667 160.6697 L
317.1667 133.9597 L
317.1667 115.1854 324.6649 108.3364 350.5 108.3364 c
360.0264 108.3364 372.2516 109.1702 380.8333 110.3364 C
379.4333 124.1696 L
370.9468 122.9533 359.8642 122.1696 350.5 122.1696 c
335.0053 122.1696 332.6666 124.109 332.6666 133.9597 c
332.6666 160.6697 L
358.1667 160.6697 L
358.1667 151.003 L
358.1667 146.9779 357.8402 146.6697 354.8334 146.6697 c
351.8722 146.6697 347.3125 147.4301 343.1 148.4697 C
341 135.1698 L
347.3572 133.663 356.543 132.5031 360.3334 132.5031 c
369.5794 132.5031 373.6667 136.4751 373.6667 147.1697 C
373.6667 160.6697 L
380.9167 160.6697 L
380.9167 174.503 L
372 174.503 L
372 192.6697 L
356.5001 192.6697 L
f
U
354 93 m
354 75 L
334 75 L
334 93 L
316 93 L
316 75 L
304 75 L
304 59 L
316 59 L
316 34 L
316 15.4424 324.2427 8 350 8 c
359.6514 8 372.375 8.875 381 10 C
379.4 26 L
370.875 24.8125 359.5118 24 350 24 c
336.24 24 334 25.8337 334 34 c
334 59 L
356 59 L
356 50.8 L
356 47.8938 355.6777 47.6 353.4 47.6 c
350.4499 47.6 346.3125 48.1875 342.3 49 C
340 33.6 L
346.5833 32.25 356.1793 31.2 360 31.2 c
369.4016 31.2 374 35.6831 374 46.2 C
374 59 L
379 59 L
379 75 L
372 75 L
372 93 L
354 93 L
f
u
399 578.3303 m
395.1543 583.7965 391.4687 588.8199 387.5 593.997 C
383.6999 591.2803 L
387.5937 586.1949 391.0818 581.4344 395.0833 575.7469 C
399 578.3303 L
f
398 473.6606 m
394.0735 479.2461 390.0625 484.7023 386 489.994 C
380.7999 486.3606 L
384.8124 481.1397 388.622 475.9469 392.6666 470.1939 C
398 473.6606 L
f
399 376 m
394.9926 381.7047 390.6562 387.5937 386.5 393 C
379.9 388.45 L
384.0312 383.0937 388.1623 377.4687 392.25 371.65 C
399 376 L
f
399 277.3303 m
394.9117 283.1543 390.25 289.4761 386 294.997 C
377.9999 289.5303 L
382.2499 284.0386 386.7024 277.9812 390.8333 272.0969 C
399 277.3303 L
f
399 178.6697 m
394.8309 184.613 389.8438 191.3676 385.5 197.003 C
376.1 190.6197 L
380.4688 184.9926 385.2427 178.5029 389.4167 172.5531 C
399 178.6697 L
f
U
399 80 m
394.75 86.0625 389.4375 93.25 385 99 C
374.2 91.7 L
378.6875 85.9375 383.7829 79.0155 388 73 C
399 80 L
f
u
389.5 569.5469 m
385.6543 575.0131 381.9687 580.0365 378 585.2136 C
374.1999 582.4969 L
378.0937 577.4115 381.5819 572.651 385.5833 566.9635 C
389.5 569.5469 L
f
389 463.0938 m
385.0735 468.6793 381.0625 474.1355 377 479.4272 C
371.7999 475.7938 L
375.8124 470.5729 379.622 465.3801 383.6666 459.6271 C
389 463.0938 L
f
390.5 363.65 m
386.4926 369.3547 382.1562 375.2437 378 380.65 C
371.4 376.1 L
375.5312 370.7437 379.6623 365.1186 383.75 359.3 C
390.5 363.65 L
f
390 263.1969 m
385.9117 269.0209 381.25 275.3428 377 280.8636 C
369 275.3969 L
373.25 269.9052 377.7025 263.8478 381.8333 257.9635 C
390 263.1969 L
f
390.5 162.7531 m
386.3309 168.6963 381.3437 175.451 377 181.0864 C
367.6 174.7031 L
371.9688 169.076 376.7427 162.5863 380.9167 156.6365 C
390.5 162.7531 L
f
U
391 62.3 m
386.75 68.3625 381.4375 75.55 377 81.3 C
366.2 74 L
370.6875 68.2375 375.7829 61.3155 380 55.3 C
391 62.3 L
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
