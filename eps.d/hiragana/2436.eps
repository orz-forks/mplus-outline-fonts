%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (2436.eps)
%%CreationDate: (12/27/04) (5:11 PM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
500 600 m
500 700 L
400 700 L
400 600 L
500 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
400 600 m
400 700 L
300 700 L
300 600 L
400 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
500 500 m
500 600 L
400 600 L
400 500 L
500 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
400 500 m
400 600 L
300 600 L
300 500 L
400 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
0 O
0 g
1 D
87 674 m
87 677 L
9 677 L
9 674 L
87 674 L
f
73.6 615 m
65.9288 613.7008 58.2581 613 51 613 c
28.8423 613 18 621.0618 18 634 c
18 644.2482 26.501 651 43 651 c
53.5492 651 65.1647 647.7917 72.6 643.2 C
75 645 L
66.8805 650.3542 54.8361 654 43 654 c
24.4849 654 15 645.9505 15 634 c
15 619.1603 26.9326 610 51 610 c
58.4638 610 66.25 610.6875 74 612 C
73.6 615 L
f
75 645 m
63.2121 659.9911 59.8289 669.263 59 693 C
56 693 L
56.8299 669.2345 60.2112 658.9553 72.6 643.2 C
75 645 L
f
122 691 m
120.7382 677.5343 120 660.9438 120 647 C
120 619.4015 129.7595 609 150 609 c
165.2735 609 176.7103 618.0313 186 643 C
183.2 644 L
174.4709 620.538 164.2777 612 150 612 c
131.3225 612 123 621.4737 123 647 c
123 661.0985 123.7559 677.7223 125 691 C
122 691 L
f
98 685 m
94.75 690.25 91.875 694.25 88 699 C
85.6 697.2 L
89.4897 692.4319 92.2563 688.5783 95.4 683.5 C
98 685 L
f
86.6 681.7 m
83.5234 686.6148 80.703 690.4608 77 695 C
74.6 693.2 L
78.2965 688.6688 81.0445 684.8155 84 680.1 C
86.6 681.7 L
f
398 685 m
394.75 690.25 391.875 694.25 388 699 C
385.6 697.2 L
389.4897 692.4319 392.2563 688.5783 395.4 683.5 C
398 685 L
f
386.6 681.7 m
383.5234 686.6148 380.703 690.4608 377 695 C
374.6 693.2 L
378.2965 688.6688 381.0445 684.8155 384 680.1 C
386.6 681.7 L
f
182 673 m
178.5 678.375 174.875 683.25 171 688 C
168.6 686.2 L
172.6415 681.2459 176.2671 676.3648 179.5 671.4 C
182 673 L
f
169.4 668.9 m
166.0824 673.9223 162.658 678.516 159 683 C
156.6 681.2 L
160.2734 676.6971 163.69 672.1491 166.9 667.3 C
169.4 668.9 L
f
u
87 576.8348 m
8.6667 576.8348 L
8.6667 571.6682 L
87 571.6682 L
87 576.8348 L
f
87 476.6651 m
8.3333 476.6651 L
8.3333 469.3318 L
87 469.3318 L
87 476.6651 L
f
U
u
87 376.5 m
8 376.5 L
8 367 L
87 367 L
87 376.5 L
f
81.6666 280.3303 m
7.6667 280.3303 L
7.6667 268.6636 L
81.6666 268.6636 L
81.6666 280.3303 L
f
80.3334 181.1697 m
7.3334 181.1697 L
7.3334 167.3364 L
80.3334 167.3364 L
80.3334 181.1697 L
f
U
79 82 m
7 82 L
7 66 L
79 66 L
79 82 L
f
u
75 545.0015 m
63.2729 559.7573 59.659 569.5227 58.8333 593.1682 C
53.3167 593.1682 L
54.17 568.7321 58.0401 557.5389 70.5834 541.7349 C
75 545.0015 L
f
75 444.9985 m
63.3337 459.519 59.4891 469.7778 58.6667 493.3318 C
50.6333 493.3318 L
51.51 468.2251 55.8688 456.118 68.5666 440.2651 C
75 444.9985 L
f
U
u
75 345 m
63.3945 359.2852 59.3193 370.0375 58.5 393.5 C
47.95 393.5 L
48.8501 367.7228 53.6977 354.7016 66.55 338.8 C
75 345 L
f
75 246.3303 m
62.4159 261.6596 59.0777 272.3466 58.3333 293.6636 C
45.2666 293.6636 L
46.1186 269.2626 50.487 255.9002 64.5333 238.6636 C
75 246.3303 L
f
75 146.6697 m
62.2168 162.0836 58.8899 173.1243 58.1667 193.8364 C
42.5834 193.8364 L
43.441 169.2765 48.0562 155.1433 62.5167 137.5364 C
75 146.6697 L
f
U
75 47 m
62.0178 62.4985 58.7021 73.8929 58 94 C
39.9 94 L
40.7631 69.2813 45.6251 54.3772 60.5 36.4 C
75 47 L
f
u
73.6996 516.8019 m
66.2184 515.4837 57.7723 514.6681 50.6667 514.6681 c
29.592 514.6681 19.6667 522.0956 19.6667 534.0015 c
19.6667 542.9463 27.4411 549.1682 42.5 549.1682 c
52.4974 549.1682 63.2407 546.2134 70.5834 541.7349 C
75 545.0015 L
66.5501 550.5432 54.0383 554.3348 42.5 554.3348 c
24.1143 554.3348 14.1667 545.8435 14.1667 534.1682 c
14.1667 518.9597 26.3514 509.5015 50.6667 509.5015 c
58.1796 509.5015 66.8169 510.2999 74.5025 511.6709 C
73.6996 516.8019 L
f
73.7992 418.5993 m
66.508 417.2622 57.2865 416.3318 50.3333 416.3318 c
30.3418 416.3318 21.3334 423.1249 21.3334 433.9985 c
21.3334 441.6397 28.3812 447.3318 42 447.3318 c
51.4456 447.3318 61.3167 444.6304 68.5666 440.2651 C
75 444.9985 L
66.2197 450.7276 53.2406 454.6651 42 454.6651 c
23.7437 454.6651 13.3333 445.732 13.3333 434.3318 c
13.3333 418.7545 25.7702 408.9985 50.3333 408.9985 c
57.8954 408.9985 67.3839 409.9077 75.0049 411.3373 C
73.7992 418.5993 L
f
U
u
73.8988 320.4013 m
66.7976 319.0451 56.8008 318 50 318 c
31.0915 318 23 324.1587 23 334 c
23 340.3378 29.3213 345.5 41.5 345.5 c
50.3938 345.5 59.3927 343.0521 66.55 338.8 C
75 345 L
65.8893 350.9166 52.4428 355 41.5 355 c
23.3731 355 12.5 345.625 12.5 334.5 c
12.5 318.5539 25.1891 308.5 50 308.5 c
57.6112 308.5 67.9508 309.5201 75.5074 311.0082 C
73.8988 320.4013 L
f
73.9983 222.1987 m
67.0872 220.8236 56.315 219.6636 49.6667 219.6636 c
31.8412 219.6636 24.6667 225.188 24.6667 233.9969 c
24.6667 240.3645 30.2614 244.9969 41 244.9969 c
49.342 244.9969 57.4687 242.8025 64.5333 238.6636 C
75 246.3303 L
65.5589 252.4344 51.6451 256.6636 41 256.6636 c
23.0025 256.6636 11.6667 246.8468 11.6667 234.6636 c
11.6667 218.3487 24.6079 207.9969 49.6667 207.9969 c
57.3271 207.9969 68.5177 209.1279 76.0098 210.6746 C
73.9983 222.1987 L
f
74.0979 124.0052 m
67.3768 122.611 55.8293 121.3363 49.3334 121.3363 c
32.5909 121.3363 26.3333 126.2263 26.3333 134.003 c
26.3333 139.4005 31.2015 143.5031 40.5 143.5031 c
48.2903 143.5031 55.5448 141.5622 62.5167 137.5364 C
75 146.6697 L
65.2286 152.9613 50.8474 157.3363 40.5 157.3363 c
22.632 157.3363 10.8334 147.0777 10.8334 134.8364 c
10.8334 118.1527 24.0268 107.503 49.3334 107.503 c
57.0429 107.503 69.0846 108.7449 76.5122 110.3501 C
74.0979 124.0052 L
f
U
75 47 m
64.8982 53.4791 50.0496 58 40 58 c
22.2614 58 10 47.2995 10 35 c
10 17.9475 23.4456 7 49 7 c
56.7587 7 69.6516 8.3527 77.0147 10.0165 C
74.1975 25.8026 L
67.6664 24.3895 55.3435 23 49 23 c
33.3407 23 28 27.2556 28 34 c
28 38.4273 32.1416 42 40 42 c
47.2385 42 53.6208 40.3126 60.5 36.4 C
75 47 L
f
u
121.1666 591.1636 m
119.9117 577.6301 119.1666 561.0449 119.1666 547.1636 C
119.1666 519.593 129.4261 508.8303 149.8333 508.8303 c
165.7165 508.8303 177.3783 518.0839 186.8334 543.4969 C
181.6987 545.4345 L
173.0049 522.2579 163.3506 514.1637 149.8333 514.1637 c
132.6452 514.1637 124.8334 523.0028 124.8334 547.1636 c
124.8334 561.1125 125.6051 577.9213 126.8334 591.1636 C
121.1666 591.1636 L
f
120.3333 491.3272 m
119.0853 477.726 118.3333 461.146 118.3333 447.3272 C
118.3333 419.7844 129.0928 408.6605 149.6667 408.6605 c
166.1595 408.6605 178.0464 418.1365 187.6667 443.9939 C
180.1974 446.8691 L
171.539 423.9778 162.4234 416.3273 149.6667 416.3273 c
133.9678 416.3273 126.6668 424.532 126.6668 447.3272 c
126.6668 461.1264 127.4543 478.1202 128.6668 491.3272 C
120.3333 491.3272 L
f
119.5 391.5 m
118.2589 377.831 117.5 361.2563 117.5 347.5 C
117.5 319.985 128.7595 308.5 149.5 308.5 c
166.6024 308.5 178.7143 318.1982 188.5 344.5 C
178.6962 348.3126 L
170.0732 325.7066 161.4964 318.5 149.5 318.5 c
135.2904 318.5 128.5 326.0702 128.5 347.5 c
128.5 361.1496 129.3033 378.3283 130.5 391.5 C
119.5 391.5 L
f
118.6666 291.6636 m
117.4325 277.9268 116.6666 261.3574 116.6666 247.6636 C
116.6666 220.1765 128.4261 208.3303 149.3333 208.3303 c
167.0454 208.3303 179.3824 218.2508 189.3334 244.9969 C
177.1949 249.7472 L
168.6072 227.4265 160.5693 220.6637 149.3333 220.6637 c
136.613 220.6637 130.3334 227.5993 130.3334 247.6636 c
130.3334 261.1636 131.1525 278.5273 132.3334 291.6636 C
118.6666 291.6636 L
f
117.8334 191.8364 m
116.6061 178.0318 115.8334 161.4677 115.8334 147.8364 C
115.8334 120.3771 128.0928 108.1697 149.1667 108.1697 c
167.4883 108.1697 180.0503 118.3125 190.1666 145.503 C
175.6938 151.1907 L
167.1414 129.1554 159.6422 122.8363 149.1667 122.8363 c
137.9356 122.8363 132.1666 129.1375 132.1666 147.8364 c
132.1666 161.1867 133.0015 178.7354 134.1666 191.8364 C
117.8334 191.8364 L
f
U
117 92 m
115.7797 78.1277 115 61.5688 115 48 C
115 20.5686 127.7595 8 149 8 c
167.9313 8 180.7184 18.3651 191 46 C
174.1925 52.6253 L
165.6755 30.8753 158.7151 25 149 25 c
139.2583 25 134 30.6667 134 48 c
134 61.2007 134.8507 78.9344 136 92 C
117 92 L
f
466.1 85.6 m
440.8694 65.8705 424.3727 59 405 59 C
405 49 L
434.8334 49 453.701 55.563 476 73 C
476 91 L
423 91 L
423 75 L
470 75 L
466.1 85.6 L
f
u
183 572.9369 m
179.4992 578.4826 175.8975 583.548 172.0334 588.4969 C
168.1973 585.9889 L
172.1484 580.9507 175.777 575.8497 179.0446 570.6676 C
183 572.9369 L
f
184.0001 472.8739 m
180.4985 478.5903 176.9199 483.846 173.0667 488.9939 C
167.7946 485.7779 L
171.6553 480.6556 175.287 475.3345 178.5893 469.9352 C
184.0001 472.8739 L
f
185 372.82 m
181.4977 378.707 177.9423 384.1531 174.1 389.5 C
167.392 385.576 L
171.1622 380.3696 174.7969 374.8286 178.134 369.212 C
185 372.82 L
f
186 272.7569 m
182.4969 278.8147 178.9648 284.4511 175.1334 289.9969 C
166.9893 285.3649 L
170.6691 280.0744 174.3069 274.3135 177.6786 268.4796 C
186 272.7569 L
f
187 172.703 m
183.4961 178.9314 179.9872 184.7583 176.1666 190.503 C
166.5867 185.1631 L
170.176 179.7884 173.8168 173.8076 177.2233 167.7564 C
187 172.703 L
f
U
188 72.64 m
184.4954 79.0391 181.0097 85.0563 177.2 91 C
166.184 84.952 L
169.6829 79.4933 173.3268 73.2925 176.768 67.024 C
188 72.64 L
f
u
169.692 568.9335 m
166.3549 574.1639 162.9319 578.9748 159.2613 583.6823 C
155.462 581.1944 L
159.0946 576.5504 162.537 571.7476 165.7741 566.6828 C
169.692 568.9335 L
f
169.984 468.967 m
166.6274 474.4056 163.2058 479.4336 159.5227 484.3646 C
154.324 481.1889 L
157.9159 476.4038 161.384 471.3462 164.6481 466.0657 C
169.984 468.967 L
f
170.2759 369.0096 m
166.8999 374.6563 163.4797 379.9016 159.784 385.056 C
153.1861 381.1925 L
156.7373 376.2663 160.2311 370.9539 163.5223 365.4578 C
170.2759 369.0096 L
f
170.5679 269.0431 m
167.1725 274.898 163.7536 280.3604 160.0453 285.7383 C
152.0481 281.1869 L
155.5585 276.1196 159.0781 270.5524 162.3963 264.8406 C
170.5679 269.0431 L
f
170.8599 169.0858 m
167.445 175.1487 164.0275 180.8284 160.3066 186.4297 C
150.9103 181.1905 L
154.3799 175.9821 157.9252 170.1602 161.2705 164.2327 C
170.8599 169.0858 L
f
U
171.1519 69.1193 m
167.7175 75.3904 164.3014 81.2872 160.568 87.112 C
149.7723 81.185 L
153.2012 75.8355 156.7722 69.7587 160.1446 63.6156 C
171.1519 69.1193 L
f
499 70 m
495.755 75.9251 492.5275 81.4966 489 87 C
478.8 81.4 L
482.0397 76.3457 485.4137 70.6042 488.6 64.8 C
499 70 L
f
483.4 66.7401 m
480.2199 72.5467 477.0569 78.0067 473.6 83.4 C
463.604 77.9121 L
466.779 72.9588 470.0855 67.3322 473.208 61.6441 C
483.4 66.7401 L
f
258 642 m
258 623.8234 249.5612 614.0064 230.4 611 C
231 608 L
251.158 611.1628 261 621.7538 261 642 c
261 659.5674 253.9341 668 242 668 c
232.059 668 224 659.941 224 650 c
224 640.059 232.059 632 242 632 c
252.1371 632 260 639.9167 260 650 C
260 678 L
292 678 L
292 681 L
260 681 L
260 695 L
257 695 L
257 681 L
208 681 L
208 678 L
257 678 L
257 650 L
257 641.4222 250.0778 635 242 635 c
233.7289 635 227 641.7289 227 650 c
227 658.2711 233.7289 665 242 665 c
252.1167 665 258 657.9284 258 642 c
f
291 657 m
287.75 662.25 284.875 666.25 281 671 C
278.6 669.2 L
282.4897 664.4319 285.2563 660.5783 288.4 655.5 C
291 657 L
f
279.6 653.7 m
276.5234 658.6148 273.703 662.4608 270 667 C
267.6 665.2 L
271.2965 660.6688 274.0445 656.8155 277 652.1 C
279.6 653.7 L
f
u
498.1667 170.1697 m
494.9208 175.9823 491.7521 181.2919 488.1667 186.6697 C
479.2667 181.703 L
482.6147 176.6965 485.8875 171.2696 489.0667 165.5864 C
498.1667 170.1697 L
f
497.3333 270.3394 m
494.0866 276.0395 490.9766 281.0871 487.3333 286.3394 C
479.7333 282.0061 L
483.1897 277.0472 486.3612 271.935 489.5334 266.3728 C
497.3333 270.3394 L
f
496.5 370.5 m
493.2525 376.0875 490.2012 380.8733 486.5 386 C
480.2 382.3 L
483.7647 377.3888 486.835 372.5912 490 367.15 C
496.5 370.5 L
f
499 468 m
495.7516 473.475 492.7592 477.9989 489 483 C
484 479.9333 L
487.673 475.0699 490.6421 470.587 493.8 465.2667 C
499 468 L
f
U
u
496.5 569.5 m
493.2508 574.8625 490.3171 579.1244 486.5 584 C
482.8 581.5667 L
486.5814 576.7509 489.4492 572.5826 492.6 567.3833 C
496.5 569.5 L
f
U
494 671 m
490.75 676.25 487.875 680.25 484 685 C
481.6 683.2 L
485.4897 678.4319 488.2563 674.5783 491.4 669.5 C
494 671 L
f
482.6 667.7 m
479.5234 672.6148 476.703 676.4608 473 681 C
470.6 679.2 L
474.2965 674.6688 477.0445 670.8155 480 666.1 C
482.6 667.7 L
f
306 670 m
306 667 L
368 667 L
368 650 L
368 640.3801 367.6526 640 361 640 c
357.9839 640 351.3125 641.625 346.1 643.8 C
345 641 L
350.2264 638.7092 357.3614 637 361 637 c
369.4684 637 371 638.4164 371 650 C
371 667 L
390 667 L
390 670 L
371 670 L
371 690 L
368 690 L
368 670 L
306 670 L
f
u
405.2667 149.8318 m
433.5406 149.8318 449.5194 155.3879 475.1 174.9984 C
475.1 190.4985 L
423.6 190.4985 L
423.6 176.6651 L
469.9333 176.6651 L
466.5563 185.9031 L
438.4616 164.3305 424.3807 158.4985 405.2667 158.4985 C
405.2667 149.8318 L
f
405.5333 250.6682 m
432.2478 250.6682 445.3377 255.2174 474.2 277.0015 C
474.2 290.0015 L
424.2 290.0015 L
424.2 278.3349 L
469.8667 278.3349 L
467.0126 286.2108 L
436.0537 262.7951 424.3887 258.0015 405.5333 258.0015 C
405.5333 250.6682 L
f
U
u
405.8 351.5 m
430.955 351.5 441.1562 355.0423 473.3 379 C
473.3 389.5 L
424.8 389.5 L
424.8 380 L
469.8 380 L
467.4688 386.5139 L
433.6459 361.2552 424.3966 357.5 405.8 357.5 C
405.8 351.5 L
f
404.6667 452.3364 m
428.2622 452.3364 435.5745 454.8718 471 481.0031 C
471 489.003 L
424 489.003 L
424 481.6697 L
468.3333 481.6697 L
466.5251 486.8216 L
429.838 459.7198 423.0046 457.003 404.6667 457.003 C
404.6667 452.3364 L
f
U
u
405.3333 553.1682 m
427.3695 553.1682 431.7929 554.6967 470.5 583.0015 C
470.5 588.5015 L
425 588.5015 L
425 583.3349 L
468.6667 583.3349 L
467.3814 587.1247 L
427.8302 558.1798 423.4126 556.5015 405.3333 556.5015 C
405.3333 553.1682 L
f
U
406 654 m
426.4767 654 428.0114 654.5216 470 685 C
470 688 L
426 688 L
426 685 L
469 685 L
468.2377 687.4278 L
425.8224 656.6399 423.8206 656 406 656 C
406 654 L
f
323 690 m
322.3125 670.125 322 652 322 632.7399 C
322 612.8822 325.7756 609 352 609 c
360.9014 609 370.6346 609.6276 379 611 C
378.6 614 L
370.3057 612.6392 360.6261 612 352 612 c
327.8319 612 325 614.4673 325 632.7399 c
325 652 325.3125 670.125 326 690 C
323 690 L
f
476.5 615 m
469.25 613.625 463.3039 613 457 613 c
441.4798 613 432 621.184 432 633 c
432 644.3423 441.9483 653 454 653 c
488 653 L
488 656 L
406 656 L
406 653 L
446 653 L
445.7 654.4 L
434.8445 650.4132 429 642.776 429 633 c
429 619.5284 439.4906 610 457 610 c
463.7503 610 470.125 610.6875 477 612 C
476.5 615 L
f
u
256.3333 541.9969 m
256.3333 524.1634 248.9281 515.6097 229 512.7637 C
230 507.8303 L
251.8206 510.898 261.6667 521.2499 261.6667 542.1636 c
261.6667 559.6477 253.6822 568.1636 241.3333 568.1636 c
230.7828 568.1636 222.5 559.8807 222.5 549.6636 c
222.5 539.4465 230.7828 531.3302 241.3333 531.3302 c
251.6964 531.3302 260.5 540.0248 260.5 549.6636 C
260.5 576.9969 L
292.1667 576.9969 L
292.1667 581.997 L
260.5 581.997 L
260.5 595.1636 L
255.1666 595.1636 L
255.1666 581.997 L
207.5 581.997 L
207.5 576.9969 L
255.1666 576.9969 L
255.1666 549.6636 L
255.1666 541.9188 248.9202 536.1636 241.5 536.1636 c
233.9187 536.1636 227.8334 542.1743 227.8334 549.6636 c
227.8334 557.1529 233.9187 563.1635 241.5 563.1635 c
250.9194 563.1635 256.3333 556.5761 256.3333 541.9969 c
f
254.6666 441.9939 m
254.6666 424.5035 248.295 417.213 227.5999 414.5273 C
228.9999 407.6605 L
252.4833 410.6332 262.3334 420.7459 262.3334 442.3272 c
262.3334 459.728 253.4304 468.3272 240.6666 468.3272 c
229.5067 468.3272 220.9999 459.8205 220.9999 449.3272 c
220.9999 438.8339 229.5067 430.6605 240.6666 430.6605 c
251.2557 430.6605 261 440.1329 261 449.3272 C
261 475.9938 L
292.3333 475.9938 L
292.3333 482.994 L
261 482.994 L
261 495.3272 L
253.3332 495.3272 L
253.3332 482.994 L
207 482.994 L
207 475.9938 L
253.3332 475.9938 L
253.3332 449.3272 L
253.3332 442.4153 247.7626 437.3273 241 437.3273 c
234.1084 437.3273 228.6667 442.6198 228.6667 449.3272 c
228.6667 456.0346 234.1084 461.3271 241 461.3271 c
249.7221 461.3271 254.6666 455.2239 254.6666 441.9939 c
f
253 342 m
253 324.8526 247.662 318.8253 226.2 316.3 C
228 307.5 L
253.1458 310.3775 263 320.2512 263 342.5 c
263 359.8175 253.1786 368.5 240 368.5 c
228.2306 368.5 219.5 359.7694 219.5 349 c
219.5 338.2306 228.2306 330 240 330 c
250.8151 330 261.5 340.2501 261.5 349 C
261.5 375 L
292.5 375 L
292.5 384 L
261.5 384 L
261.5 395.5 L
251.5 395.5 L
251.5 384 L
206.5 384 L
206.5 375 L
251.5 375 L
251.5 349 L
251.5 342.921 246.6051 338.5 240.5 338.5 c
234.2982 338.5 229.5 343.0743 229.5 349 c
229.5 354.9257 234.2982 359.5 240.5 359.5 c
248.5249 359.5 253 353.8809 253 342 c
f
251.3333 241.9969 m
251.3333 225.1926 247.0289 220.4286 224.8 218.0637 C
227 207.3303 L
253.8085 210.1127 263.6667 219.7472 263.6667 242.6636 c
263.6667 259.8978 252.9267 268.6636 239.3333 268.6636 c
226.9545 268.6636 218 259.7091 218 248.6636 c
218 237.6181 226.9545 229.3302 239.3333 229.3302 c
250.3745 229.3302 262 240.3583 262 248.6636 C
262 273.9969 L
292.6667 273.9969 L
292.6667 284.997 L
262 284.997 L
262 295.6636 L
249.6666 295.6636 L
249.6666 284.997 L
206 284.997 L
206 273.9969 L
249.6666 273.9969 L
249.6666 248.6636 L
249.6666 243.4175 245.4476 239.6636 240 239.6636 c
234.4879 239.6636 230.3334 243.5197 230.3334 248.6636 c
230.3334 253.8075 234.4879 257.6635 240 257.6635 c
247.3275 257.6635 251.3333 252.5286 251.3333 241.9969 c
f
249.6667 142.003 m
249.6667 125.5418 246.3959 122.0409 223.4001 119.8363 C
226 107.1697 L
254.471 109.8571 264.3333 119.2525 264.3333 142.8364 c
264.3333 159.9872 252.6748 168.8364 238.6667 168.8364 c
225.6784 168.8364 216.5001 159.6581 216.5001 148.3364 c
216.5001 137.0147 225.6784 128.6697 238.6667 128.6697 c
249.9338 128.6697 262.5 140.4755 262.5 148.3364 C
262.5 173.0031 L
292.8333 173.0031 L
292.8333 186.003 L
262.5 186.003 L
262.5 195.8364 L
247.8334 195.8364 L
247.8334 186.003 L
205.5 186.003 L
205.5 173.0031 L
247.8334 173.0031 L
247.8334 148.3364 L
247.8334 143.9232 244.2901 140.8363 239.5 140.8363 c
234.6776 140.8363 231.1667 143.9743 231.1667 148.3364 c
231.1667 152.6985 234.6776 155.8364 239.5 155.8364 c
246.1303 155.8364 249.6667 151.1856 249.6667 142.003 c
f
U
248 42 m
248 25.8818 245.7628 23.6442 222 21.6 C
225 7 L
255.1337 9.5923 265 18.7485 265 43 c
265 60.0675 252.423 69 238 69 c
224.4023 69 215 59.5978 215 48 c
215 36.4022 224.4023 28 238 28 c
249.4932 28 263 40.5836 263 48 C
263 72 L
293 72 L
293 87 L
263 87 L
263 96 L
246 96 L
246 87 L
205 87 L
205 72 L
246 72 L
246 48 l
246 44.4197 243.1325 42 239 42 c
234.8674 42 232 44.4197 232 48 c
232 51.5803 234.8674 54 239 54 c
244.933 54 248 49.8333 248 42 c
f
u
292.6 556.1687 m
289.3508 561.5313 286.417 565.7932 282.6 570.6687 C
278.9 568.2354 L
282.6813 563.4196 285.5492 559.2514 288.7 554.0521 C
292.6 556.1687 L
f
294.1999 455.3375 m
290.9516 460.8125 287.9591 465.3363 284.1999 470.3374 C
279.2 467.2708 L
282.873 462.4073 285.8421 457.9244 289 452.6042 C
294.1999 455.3375 L
f
295.8 354.4985 m
292.5525 360.0861 289.5013 364.8718 285.8 369.9985 C
279.5 366.2985 L
283.0647 361.3873 286.135 356.5898 289.3 351.1485 C
295.8 354.4985 L
f
297.4 253.6672 m
294.1533 259.3673 291.0433 264.415 287.4 269.6672 C
279.8 265.3339 L
283.2564 260.375 286.4279 255.2628 289.6 249.7006 C
297.4 253.6672 L
f
U
u
299 152.836 m
295.7541 158.6486 292.5854 163.9582 289 169.336 C
280.1 164.3694 L
283.448 159.3627 286.7208 153.9359 289.9 148.2527 C
299 152.836 L
f
U
298 52 m
294.755 57.9251 291.5275 63.4966 288 69 C
277.8 63.4 L
281.0397 58.3457 284.4137 52.6042 287.6 46.8 C
298 52 L
f
u
280.5 552.8754 m
277.4061 557.9389 274.5286 562.0538 270.8667 566.7354 C
267.2007 564.3208 L
270.8103 559.7192 273.6513 555.5704 276.6347 550.6928 C
280.5 552.8754 L
f
281.4 452.0509 m
278.2889 457.2629 275.3543 461.6469 271.7333 466.4708 C
266.8014 463.4415 L
270.324 458.7696 273.2582 454.3252 276.2694 449.2855 C
281.4 452.0509 L
f
282.3 351.2186 m
279.1717 356.5793 276.18 361.2323 272.6 366.1985 C
266.402 362.5546 L
269.8377 357.8123 272.865 353.0724 275.904 347.8706 C
282.3 351.2186 L
f
283.2 250.394 m
280.0544 255.9033 277.0056 260.8253 273.4667 265.9339 C
266.0027 261.6753 L
269.3515 256.8628 272.4719 251.8273 275.5387 246.4633 C
283.2 250.394 L
f
U
u
284.1 149.5694 m
280.9372 155.2274 277.8312 160.4184 274.3333 165.6693 C
265.6034 160.7961 L
268.8653 155.9132 272.0787 150.5821 275.1734 145.0561 C
284.1 149.5694 L
f
U
282.4 48.7401 m
279.2199 54.5467 276.0569 60.0067 272.6 65.4 C
262.604 59.9121 L
265.779 54.9588 269.0855 49.3322 272.208 43.6441 C
282.4 48.7401 L
f
u
398.5 584.7266 m
395.2941 590.0102 392.4034 594.1978 388.6333 599 C
385.0693 596.6413 L
388.8075 591.8929 391.6303 587.8012 394.7386 582.6793 C
398.5 584.7266 L
f
U
u
399 484.4533 m
395.8382 489.7703 392.9318 494.1456 389.2667 499 C
384.5386 496.0826 L
388.1252 491.3539 391.0043 487.0241 394.0773 481.8586 C
399 484.4533 L
f
399 382.68 m
395.8823 388.0305 392.9601 392.5934 389.4 397.5 C
383.508 394.024 L
386.9431 389.315 389.8785 384.7471 392.916 379.5381 C
399 382.68 L
f
U
u
399 282.9082 m
395.9264 288.2922 392.9885 293.0428 389.5333 298.0015 C
382.4773 293.9669 L
385.761 289.2776 388.7526 284.4716 391.7547 279.2189 C
399 282.9082 L
f
399 183.1318 m
395.9705 188.5494 393.0169 193.4876 389.6667 198.4985 C
381.4466 193.9051 L
384.5788 189.2355 387.6266 184.1914 390.5933 178.8952 C
399 183.1318 L
f
U
399 83.36 m
396.0146 88.8111 393.0453 93.9369 389.8 99 C
380.416 93.848 L
383.3966 89.1981 386.5007 83.9159 389.432 78.5761 C
399 83.36 L
f
u
365.6666 565.3302 m
365.6666 550.1303 L
365.6666 541.6294 365.3234 541.2637 359.4 541.2637 c
356.3948 541.2637 349.9479 542.7366 344.9667 544.6636 C
343.6666 539.7636 L
349.1192 537.6296 356.831 536.0302 360.5 536.0302 c
369.1239 536.0302 371.1667 537.9578 371.1667 549.3636 C
371.1667 565.3302 L
389.6667 565.3302 L
389.6667 570.497 L
371.1667 570.497 L
371.1667 590.3303 L
365.6666 590.3303 L
365.6666 570.497 L
305 570.497 L
305 565.3302 L
365.6666 565.3302 L
f
U
u
363.3332 463.6605 m
363.3332 450.2606 L
363.3332 442.8786 362.9942 442.5273 357.7999 442.5273 c
354.8058 442.5273 348.5833 443.8481 343.8333 445.5273 C
342.3333 438.5272 L
348.012 436.55 356.3007 435.0605 360 435.0605 c
368.7795 435.0605 371.3334 437.4992 371.3334 448.7272 C
371.3334 463.6605 L
389.3333 463.6605 L
389.3333 470.9939 L
371.3334 470.9939 L
371.3334 490.6606 L
363.3332 490.6606 L
363.3332 470.9939 L
304 470.9939 L
304 463.6605 L
363.3332 463.6605 L
f
362.5 361 m
362.5 349.4 L
362.5 343.1369 362.1651 342.8 357.7 342.8 c
354.7169 342.8 348.7187 343.9687 344.2 345.4 C
342.5 336.3 L
348.4049 334.4796 357.2703 333.1 361 333.1 c
369.935 333.1 373 336.0498 373 347.1 C
373 361 L
390.5 361 L
390.5 370.5 L
373 370.5 L
373 391 L
362.5 391 L
362.5 370.5 L
304.5 370.5 L
304.5 361 L
362.5 361 L
f
U
u
359.6667 259.6659 m
359.6667 249.8659 L
359.6667 244.7218 359.336 244.3992 355.6 244.3992 c
352.6279 244.3992 346.8542 245.4159 342.5667 246.5992 C
340.6667 235.3992 L
346.7977 233.7356 356.24 232.4659 360 232.4659 c
369.0906 232.4659 372.6667 235.9268 372.6667 246.7992 C
372.6667 259.6659 L
390.1667 259.6659 L
390.1667 271.3326 L
372.6667 271.3326 L
372.6667 291.3326 L
359.6667 291.3326 L
359.6667 271.3326 L
303.5 271.3326 L
303.5 259.6659 L
359.6667 259.6659 L
f
U
u
356.8333 158.3318 m
356.8333 150.3318 L
356.8333 146.3067 356.5068 145.9985 353.5 145.9985 c
350.5389 145.9985 344.9896 146.8631 340.9333 147.7985 C
338.8333 134.4985 L
345.1905 132.9916 355.2096 131.8318 359 131.8318 c
368.2461 131.8318 372.3334 135.8038 372.3334 146.4985 C
372.3334 158.3318 L
389.8333 158.3318 L
389.8333 172.1651 L
372.3334 172.1651 L
372.3334 191.6651 L
356.8333 191.6651 L
356.8333 172.1651 L
302.5 172.1651 L
302.5 158.3318 L
356.8333 158.3318 L
f
U
357 57 m
357 50.8 L
357 47.8938 356.6777 47.6 354.4 47.6 c
351.4499 47.6 346.125 48.3125 342.3 49 C
340 33.6 L
346.5833 32.25 357.1793 31.2 361 31.2 c
370.4016 31.2 375 35.6831 375 46.2 C
375 57 L
391 57 L
391 73 L
375 73 L
375 92 L
357 92 L
357 73 L
303 73 L
303 57 L
357 57 L
f
u
321.5 590.3303 m
320.8229 570.5074 320.5 551.8719 320.5 532.7802 C
320.5 513.1392 325.0201 508.6636 351.1667 508.6636 c
360.193 508.6636 370.4247 509.3324 378.8333 510.6636 C
378.2333 515.8303 L
369.9006 514.4984 359.9404 513.8303 351.1667 513.8303 c
328.7333 513.8303 326 516.192 326 532.7802 c
326 551.8719 326.323 570.5074 327 590.3303 C
321.5 590.3303 L
f
U
u
319.9999 490.6606 m
319.3333 470.8898 318.9999 451.7439 318.9999 432.8205 C
318.9999 413.3962 324.2646 408.3272 350.3333 408.3272 c
359.4847 408.3272 370.2147 409.0373 378.6667 410.3272 C
377.8667 417.6607 L
369.4955 416.3576 359.2546 415.6607 350.3333 415.6607 c
329.6347 415.6607 327.0001 417.9168 327.0001 432.8205 c
327.0001 451.7439 327.3334 470.8898 328.0001 490.6606 C
319.9999 490.6606 L
f
320 391 m
319.3437 371.2812 319 351.625 319 332.8699 C
319 313.6623 325.0092 308 351 308 c
360.2764 308 371.5048 308.7513 380 310 C
379 319.5 L
370.5903 318.2258 360.069 317.5 351 317.5 c
332.0359 317.5 329.5 319.6505 329.5 332.8699 c
329.5 351.625 329.8437 371.2812 330.5 391 C
320 391 L
f
u
318.5 291.3348 m
317.8542 271.6682 317.5 251.5015 317.5 232.9148 C
317.5 213.9239 324.2537 207.6682 350.1667 207.6682 c
359.5681 207.6682 371.2949 208.4607 379.8333 209.6682 C
378.6333 221.3348 L
370.1852 220.0895 359.3832 219.3348 350.1667 219.3348 c
332.9373 219.3348 330.5 221.3797 330.5 232.9148 c
330.5 251.5015 330.8541 271.6682 331.5 291.3348 C
318.5 291.3348 L
f
U
317 191.6697 m
316.3646 172.0551 316 151.378 316 132.9597 C
316 114.1854 323.4982 107.3364 349.3334 107.3364 c
358.8597 107.3364 371.0849 108.1702 379.6667 109.3364 C
378.2666 123.1696 L
369.7801 121.9533 358.6975 121.1696 349.3334 121.1696 c
333.8386 121.1696 331.5 123.109 331.5 132.9597 c
331.5 151.378 331.8645 172.0551 332.5 191.6697 C
317 191.6697 L
f
U
317 92 m
316.375 72.4375 316 51.25 316 33 C
316 14.4424 324.2427 7 350 7 c
359.6514 7 372.375 7.875 381 9 C
379.4 25 L
370.875 23.8125 359.5118 23 350 23 c
336.24 23 334 24.8337 334 33 c
334 51.25 334.375 72.4375 335 92 C
317 92 L
f
u
456.5 514.6637 m
442.0984 514.6637 433.3334 522.1786 433.3334 532.9969 c
433.3334 543.4888 442.3397 551.3302 454.6667 551.3302 c
488 551.3302 L
488 556.497 L
405.3333 556.497 L
405.3333 551.3302 L
445.6667 551.3302 L
444.9167 554.1636 L
433.4644 549.9577 427.8333 542.5617 427.8333 532.8303 c
427.8333 519.1117 438.5848 509.4969 456.5 509.4969 c
463.4794 509.4969 470.4063 510.2678 477.3334 511.6636 C
476.55 516.8137 L
469.3959 515.3928 462.8303 514.6637 456.5 514.6637 c
f
U
u
456 416.3273 m
442.717 416.3273 434.6668 423.1731 434.6668 432.9939 c
434.6668 442.6353 442.7312 449.6605 455.3334 449.6605 c
488 449.6605 L
488 456.9939 L
404.6667 456.9939 L
404.6667 449.6605 L
445.3333 449.6605 L
444.1333 453.9272 L
432.0842 449.5021 426.6666 442.3473 426.6666 432.6605 c
426.6666 418.695 437.6791 408.9939 456 408.9939 c
463.2085 408.9939 470.6875 409.848 477.6667 411.3272 C
476.6 418.6273 L
469.5417 417.1607 462.3567 416.3273 456 416.3273 c
f
457.3 318 m
445.1355 318 437.8 324.1767 437.8 333 c
437.8 341.791 444.9225 348 457.8 348 c
489.8 348 L
489.8 357.5 L
405.8 357.5 L
405.8 348 L
446.8 348 L
445.15 353.7 L
432.5042 349.0558 427.3 342.1422 427.3 332.5 c
427.3 318.2875 438.5734 308.5 457.3 308.5 c
464.7376 308.5 472.7687 309.4375 479.8 311 C
478.45 320.45 L
471.4875 318.9375 463.6831 318 457.3 318 c
f
U
u
457.2 219.6681 m
446.154 219.6681 439.5333 225.1758 439.5333 233.0015 c
439.5333 240.9422 445.7139 246.3349 458.8666 246.3349 c
490.2 246.3349 L
490.2 258.0015 L
405.5333 258.0015 L
405.5333 246.3349 L
446.8667 246.3349 L
444.7667 253.4682 L
431.5241 248.6048 426.5333 241.9325 426.5333 232.3348 c
426.5333 217.8755 438.0677 208.0015 457.2 208.0015 c
464.8668 208.0015 473.45 209.0223 480.5333 210.6682 C
478.9 222.2682 L
472.0333 220.7098 463.6095 219.6681 457.2 219.6681 c
f
457.1 121.3318 m
447.1726 121.3318 441.2667 126.1704 441.2667 132.9985 c
441.2667 140.0887 446.5054 144.6651 459.9333 144.6651 c
490.6 144.6651 L
490.6 158.4985 L
405.2667 158.4985 L
405.2667 144.6651 L
446.9333 144.6651 L
444.3833 153.2318 L
430.544 148.1492 425.7667 141.7181 425.7667 132.1651 c
425.7667 117.4588 437.5619 107.4985 457.1 107.4985 c
464.9959 107.4985 474.1313 108.6026 481.2667 110.3318 C
479.35 124.0818 L
472.5792 122.4777 463.536 121.3318 457.1 121.3318 c
f
U
457 23 m
448.1912 23 443 27.1695 443 33 c
443 39.2398 447.2968 43 461 43 c
491 43 L
491 59 L
405 59 L
405 43 L
447 43 L
444 53 L
429.5639 47.6983 425 41.5084 425 32 c
425 17.0467 437.0562 7 457 7 c
465.125 7 474.8125 8.1875 482 10 C
479.8 25.9 L
473.125 24.25 463.4624 23 457 23 c
f
u
387.008 581.6435 m
383.9565 586.6295 381.1212 590.6717 377.5053 595.2813 C
373.9726 592.9398 L
377.5398 588.4043 380.3368 584.3305 383.2785 579.5287 C
387.008 581.6435 L
f
U
u
387.416 481.5869 m
384.3897 486.6441 381.5394 490.8826 378.0106 495.5627 C
373.3452 492.6797 L
376.7831 488.1399 379.6291 483.8455 382.557 478.9575 C
387.416 481.5869 L
f
385.824 380.0304 m
382.8229 385.1588 379.9577 389.5935 376.516 394.344 C
370.7179 390.9195 L
374.0266 386.3755 376.9216 381.8606 379.8357 376.8863 C
385.824 380.0304 L
f
U
u
385.232 280.4754 m
382.256 285.6751 379.3759 290.3059 376.0213 295.1268 C
369.0905 291.1609 L
372.27 286.6126 375.214 281.8772 378.1143 276.8166 C
385.232 280.4754 L
f
384.64 180.9159 m
381.6891 186.1867 378.7942 191.0138 375.5267 195.9051 C
367.4631 191.3977 L
370.5133 186.8451 373.5063 181.8891 376.3928 176.7423 C
384.64 180.9159 L
f
U
384.048 81.3609 m
381.1223 86.7029 378.2124 91.7262 375.032 96.688 C
365.8358 91.6391 L
368.7567 87.0822 371.7987 81.9057 374.6714 76.6726 C
384.048 81.3609 L
f
u
484.4 566.2067 m
481.3061 571.2701 478.4286 575.3851 474.7667 580.0666 C
471.1007 577.652 L
474.7103 573.0505 477.5514 568.9016 480.5347 564.024 C
484.4 566.2067 L
f
U
u
483.2666 166.9031 m
480.1038 172.5611 476.9979 177.7521 473.5 183.003 C
464.77 178.1298 L
468.0319 173.2469 471.2454 167.9158 474.34 162.3898 C
483.2666 166.9031 L
f
483.1333 267.0662 m
479.9877 272.5755 476.9389 277.4975 473.4 282.6061 C
465.936 278.3475 L
469.2849 273.5349 472.4052 268.4994 475.4721 263.1355 C
483.1333 267.0662 L
f
483 367.22 m
479.8717 372.5807 476.8799 377.2337 473.3 382.2 C
467.102 378.556 L
470.5377 373.8138 473.565 369.0738 476.604 363.872 C
483 367.22 L
f
486.2 464.7134 m
483.0889 469.9254 480.1543 474.3094 476.5333 479.1333 C
471.6014 476.104 L
475.124 471.4321 478.0582 466.9878 481.0694 461.9481 C
486.2 464.7134 L
f
U
u
98 584.7236 m
94.7941 590.0071 91.9034 594.1948 88.1333 598.9969 C
84.5693 596.6383 L
88.3075 591.8898 91.1303 587.7982 94.2386 582.6763 C
98 584.7236 L
f
98 484.4472 m
94.8382 489.7642 91.9318 494.1395 88.2667 498.9939 C
83.5386 496.0765 L
87.1252 491.3478 90.0043 487.018 93.0773 481.8526 C
98 484.4472 L
f
98 384.18 m
94.8823 389.5305 91.9601 394.0934 88.4 399 C
82.508 395.524 L
85.9431 390.815 88.8785 386.2471 91.916 381.0381 C
98 384.18 L
f
99 283.9066 m
95.9264 289.2907 92.9885 294.0413 89.5333 299 C
82.4773 294.9653 L
85.7609 290.276 88.7525 285.47 91.7546 280.2174 C
99 283.9066 L
f
U
u
98.5 183.6333 m
95.4705 189.0509 92.5169 193.9891 89.1667 199 C
80.9466 194.4066 L
84.0788 189.737 87.1266 184.6929 90.0933 179.3967 C
98.5 183.6333 L
f
U
98 83.36 m
95.0146 88.8111 92.0453 93.9369 88.8 99 C
79.416 93.848 L
82.3966 89.1981 85.5007 83.9159 88.432 78.5761 C
98 83.36 L
f
u
85.808 581.9783 m
82.7566 586.9643 79.9212 591.0065 76.3054 595.6162 C
72.7727 593.2747 L
76.3399 588.7392 79.1369 584.6654 82.0786 579.8636 C
85.808 581.9783 L
f
85.016 482.2521 m
81.9897 487.3093 79.1394 491.5477 75.6107 496.2278 C
70.9452 493.3448 L
74.3832 488.8051 77.2292 484.5107 80.1571 479.6227 C
85.016 482.2521 L
f
U
u
84.224 382.5304 m
81.2229 387.6588 78.3577 392.0935 74.916 396.844 C
69.1179 393.4195 L
72.4266 388.8755 75.3216 384.3606 78.2357 379.3863 C
84.224 382.5304 L
f
85.2319 281.4739 m
82.256 286.6735 79.3759 291.3044 76.0213 296.1253 C
69.0904 292.1594 L
72.2699 287.6111 75.2139 282.8756 78.1142 277.815 C
85.2319 281.4739 L
f
U
u
84.14 181.4174 m
81.1891 186.6882 78.2941 191.5153 75.0267 196.4067 C
66.9631 191.8992 L
70.0133 187.3466 73.0063 182.3907 75.8928 177.2438 C
84.14 181.4174 L
f
U
83.048 81.3609 m
80.1223 86.7029 77.2124 91.7262 74.032 96.688 C
64.8358 91.6391 L
67.7567 87.0822 70.7987 81.9057 73.6714 76.6726 C
83.048 81.3609 L
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
