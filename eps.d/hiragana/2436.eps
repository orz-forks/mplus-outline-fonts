%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (2436.eps)
%%CreationDate: (9/16/04) (3:47 PM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
500 600 m
500 700 L
400 700 L
400 600 L
500 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
400 600 m
400 700 L
300 700 L
300 600 L
400 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
500 500 m
500 600 L
400 600 L
400 500 L
500 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
400 500 m
400 600 L
300 600 L
300 500 L
400 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
0 O
0 g
1 D
259 642 m
259 623.8234 250.5612 614.0064 231.4 611 C
232 608 L
252.158 611.1628 262 621.7538 262 642 c
262 659.5674 254.9341 668 243 668 c
233.059 668 225 659.941 225 650 c
225 640.059 233.059 632 243 632 c
253.1371 632 261 639.9167 261 650 C
261 678 L
292 678 L
292 681 L
261 681 L
261 695 L
258 695 L
258 681 L
208 681 L
208 678 L
258 678 L
258 650 L
258 641.4222 251.0778 635 243 635 c
234.7289 635 228 641.7289 228 650 c
228 658.2711 234.7289 665 243 665 c
253.1167 665 259 657.9284 259 642 c
f
87 674 m
87 677 L
9 677 L
9 674 L
87 674 L
f
73.6 615 m
65.9288 613.7008 58.2581 613 51 613 c
28.8423 613 18 621.0618 18 634 c
18 644.2482 26.501 651 43 651 c
53.5492 651 65.1647 647.7917 72.6 643.2 C
75 645 L
66.8805 650.3542 54.8361 654 43 654 c
24.4849 654 15 645.9505 15 634 c
15 619.1603 26.9326 610 51 610 c
58.4638 610 66.25 610.6875 74 612 C
73.6 615 L
f
75 645 m
63.2121 659.9911 59.8289 669.263 59 693 C
56 693 L
56.8299 669.2345 60.2112 658.9553 72.6 643.2 C
75 645 L
f
325 668 m
369 668 L
369 650 L
369 640.3801 368.6526 640 362 640 c
358.9839 640 352.3125 641.625 347.1 643.8 C
346 641 L
351.2264 638.7092 358.3614 637 362 637 c
370.4684 637 372 638.4164 372 650 C
372 668 L
387.1 668 L
387.1 671 L
372 671 L
372 690 L
369 690 L
369 671 L
325 671 L
325 690 L
322 690 L
322 671 L
306 671 L
306 668 L
322 668 L
322 632.7399 L
322 612.8822 325.7756 609 352 609 c
360.9014 609 370.6346 609.6276 379 611 C
378.6 614 L
370.3057 612.6392 360.6261 612 352 612 c
327.8319 612 325 614.4673 325 632.7399 c
325 668 L
f
406 653.2 m
420.4233 653.2 434.8984 659.5208 470 685 C
470 688 L
426 688 L
426 685 L
469 685 L
468.2 687.4 L
431.8324 661.0018 418.7451 656 406 656 C
406 653.2 L
f
431 633 m
431 644.3423 440.9483 653 453 653 c
488 653 L
488 656 L
406 656 L
406 653 L
445 653 L
444.7 654.6 L
433.8445 650.6132 428 642.776 428 633 c
428 619.5284 438.4906 610 456 610 c
462.7503 610 467.0316 610.533 474 612 C
473.4 615 L
466.3536 613.5166 462.2743 613 456 613 c
440.4798 613 431 621.184 431 633 c
f
122 691 m
120.7382 677.5343 120 660.9438 120 647 C
120 619.4015 129.7595 609 150 609 c
165.2735 609 176.7103 618.0313 186 643 C
183.2 644 L
174.4709 620.538 164.2777 612 150 612 c
131.3225 612 123 621.4737 123 647 c
123 661.0985 123.7559 677.7223 125 691 C
122 691 L
f
98 685 m
94.75 690.25 91.875 694.25 88 699 C
85.6 697.2 L
89.4897 692.4319 92.2563 688.5783 95.4 683.5 C
98 685 L
f
86.6 681.7 m
83.5234 686.6148 80.703 690.4608 77 695 C
74.6 693.2 L
78.2965 688.6688 81.0445 684.8155 84 680.1 C
86.6 681.7 L
f
291 656 m
287.75 661.25 284.875 665.25 281 670 C
278.6 668.2 L
282.4897 663.4319 285.2563 659.5783 288.4 654.5 C
291 656 L
f
279.6 652.7 m
276.5234 657.6148 273.703 661.4608 270 666 C
267.6 664.2 L
271.2965 659.6688 274.0445 655.8155 277 651.1 C
279.6 652.7 L
f
398 685 m
394.75 690.25 391.875 694.25 388 699 C
385.6 697.2 L
389.4897 692.4319 392.2563 688.5783 395.4 683.5 C
398 685 L
f
386.6 681.7 m
383.5234 686.6148 380.703 690.4608 377 695 C
374.6 693.2 L
378.2965 688.6688 381.0445 684.8155 384 680.1 C
386.6 681.7 L
f
494 670 m
490.75 675.25 487.875 679.25 484 684 C
481.6 682.2 L
485.4897 677.4319 488.2563 673.5783 491.4 668.5 C
494 670 L
f
482.6 666.7 m
479.5234 671.6148 476.703 675.4608 473 680 C
470.6 678.2 L
474.2965 673.6688 477.0445 669.8155 480 665.1 C
482.6 666.7 L
f
182 673 m
178.5 678.375 174.875 683.25 171 688 C
168.6 686.2 L
172.6415 681.2459 176.2671 676.3648 179.5 671.4 C
182 673 L
f
169.4 668.9 m
166.0824 673.9223 162.658 678.516 159 683 C
156.6 681.2 L
160.2734 676.6971 163.69 672.1491 166.9 667.3 C
169.4 668.9 L
f
u
85.6666 576.3303 m
8.6667 576.3303 L
8.6667 571.1635 L
85.6666 571.1635 L
85.6666 576.3303 L
f
U
u
84.3332 475.6606 m
8.3333 475.6606 L
8.3333 468.3271 L
84.3332 468.3271 L
84.3332 475.6606 L
f
82 379.5 m
8 379.5 L
8 370 L
82 370 L
82 379.5 L
f
U
u
81 280.3348 m
7.6667 280.3348 L
7.6667 268.6682 L
81 268.6682 L
81 280.3348 L
f
80 181.1651 m
7.3333 181.1651 L
7.3333 167.3318 L
80 167.3318 L
80 181.1651 L
f
U
79 82 m
7 82 L
7 66 L
79 66 L
79 82 L
f
u
75 544.8303 m
63.2531 559.6073 59.651 569.747 58.8333 593.1636 C
53.3166 593.1636 L
54.1764 568.5416 58.0891 557.3036 70.5833 541.5635 C
75 544.8303 L
f
U
u
75 444.6606 m
63.2941 459.2235 59.4731 470.231 58.6667 493.3272 C
50.6332 493.3272 L
51.5228 467.8487 55.967 455.6519 68.5665 439.9271 C
75 444.6606 L
f
75 346 m
62.6149 361.2448 59.2655 371.5779 58.5 393.5 C
47.95 393.5 L
48.7965 369.2579 52.9181 356.6662 66.55 339.8 C
75 346 L
f
75 246.3303 m
62.4159 261.6596 59.0777 272.3466 58.3333 293.6636 C
45.2666 293.6636 L
46.1186 269.2626 50.487 255.9002 64.5332 238.6636 C
75 246.3303 L
f
75 146.6697 m
62.2168 162.0836 58.8899 173.1243 58.1667 193.8364 C
42.5834 193.8364 L
43.4409 169.2765 48.0562 155.1433 62.5167 137.5364 C
75 146.6697 L
f
U
75 47 m
62.0178 62.4985 58.7021 73.8929 58 94 C
39.9 94 L
40.7631 69.2813 45.6251 54.3772 60.5 36.4 C
75 47 L
f
u
73.6996 516.7974 m
66.2184 515.4792 57.7723 514.6636 50.6667 514.6636 c
29.842 514.6636 19.6667 521.9245 19.6667 533.4969 c
19.6667 542.7749 27.4411 548.9969 42.5 548.9969 c
52.4974 548.9969 63.2406 546.042 70.5833 541.5635 C
75 544.8303 L
66.5501 550.3719 54.0383 554.1636 42.5 554.1636 c
24.1143 554.1636 14.1666 545.6723 14.1666 533.6636 c
14.1666 518.7886 26.6014 509.4969 50.6667 509.4969 c
58.1796 509.4969 66.817 510.2953 74.5025 511.6663 C
73.6996 516.7974 L
f
U
u
73.7992 418.5949 m
66.508 417.2577 57.2865 416.3273 50.3333 416.3273 c
30.8418 416.3273 21.3334 422.7872 21.3334 432.9939 c
21.3334 441.3017 28.3812 446.9938 42 446.9938 c
51.4456 446.9938 61.3166 444.2925 68.5665 439.9271 C
75 444.6606 L
66.2197 450.3897 53.2405 454.3273 42 454.3273 c
23.7437 454.3273 13.3333 445.3941 13.3333 433.3272 c
13.3333 418.4169 26.2702 408.9938 50.3333 408.9938 c
57.8954 408.9938 67.3839 409.9031 75.0049 411.3327 C
73.7992 418.5949 L
f
73.8987 320.4013 m
66.7976 319.0451 56.8008 318 50 318 c
31.0915 318 23 324.1587 23 334 c
23 341.3377 29.3213 346.5 41.5 346.5 c
50.3938 346.5 59.3927 344.0521 66.55 339.8 C
75 346 L
65.8893 351.9166 52.4428 356 41.5 356 c
23.3731 356 12.5 346.625 12.5 334.5 c
12.5 318.5539 25.1891 308.5 50 308.5 c
57.6112 308.5 67.9508 309.5201 75.5073 311.0082 C
73.8987 320.4013 L
f
73.9983 222.1987 m
67.0872 220.8236 56.315 219.6636 49.6667 219.6636 c
31.8412 219.6636 24.6667 225.188 24.6667 233.9969 c
24.6667 240.3645 30.2614 244.9969 41 244.9969 c
49.342 244.9969 57.4687 242.8025 64.5332 238.6636 C
75 246.3303 L
65.5589 252.4344 51.6451 256.6636 41 256.6636 c
23.0025 256.6636 11.6666 246.8468 11.6666 234.6636 c
11.6666 218.3487 24.6079 207.9969 49.6667 207.9969 c
57.327 207.9969 68.5177 209.1279 76.0098 210.6746 C
73.9983 222.1987 L
f
74.0979 124.0052 m
67.3768 122.611 55.8293 121.3363 49.3333 121.3363 c
32.5909 121.3363 26.3333 126.2263 26.3333 134.003 c
26.3333 139.4005 31.2014 143.5031 40.5 143.5031 c
48.2903 143.5031 55.5448 141.5622 62.5167 137.5364 C
75 146.6697 L
65.2286 152.9613 50.8473 157.3363 40.5 157.3363 c
22.632 157.3363 10.8334 147.0777 10.8334 134.8364 c
10.8334 118.1527 24.0268 107.503 49.3333 107.503 c
57.0429 107.503 69.0846 108.7449 76.5122 110.3501 C
74.0979 124.0052 L
f
U
75 47 m
64.8982 53.4791 50.0496 58 40 58 c
22.2614 58 10 47.2995 10 35 c
10 17.9475 23.4456 7 49 7 c
56.7587 7 69.6516 8.3527 77.0147 10.0165 C
74.1975 25.8026 L
67.6664 24.3895 55.3435 23 49 23 c
33.3407 23 28 27.2556 28 34 c
28 38.4273 32.1416 42 40 42 c
47.2385 42 53.6208 40.3126 60.5 36.4 C
75 47 L
f
u
121.1666 591.1636 m
119.9117 577.6301 119.1666 561.0449 119.1666 547.1636 C
119.1666 519.593 129.4261 508.8303 149.8333 508.8303 c
165.7165 508.8303 177.3783 518.0839 186.8334 543.4969 C
181.6987 545.4345 L
173.0049 522.2579 163.3506 514.1637 149.8333 514.1637 c
132.6452 514.1637 124.8334 523.0028 124.8334 547.1636 c
124.8334 561.1125 125.6051 577.9213 126.8334 591.1636 C
121.1666 591.1636 L
f
120.3333 491.3272 m
119.0853 477.726 118.3333 461.146 118.3333 447.3272 C
118.3333 419.7844 129.0928 408.6605 149.6667 408.6605 c
166.1595 408.6605 178.0464 418.1365 187.6667 443.9939 C
180.1974 446.8691 L
171.539 423.9778 162.4234 416.3273 149.6667 416.3273 c
133.9678 416.3273 126.6668 424.532 126.6668 447.3272 c
126.6668 461.1264 127.4543 478.1202 128.6668 491.3272 C
120.3333 491.3272 L
f
119.5 391.5 m
118.2589 377.831 117.5 361.2563 117.5 347.5 C
117.5 319.985 128.7595 308.5 149.5 308.5 c
166.6024 308.5 178.7143 318.1982 188.5 344.5 C
178.6962 348.3126 L
170.0732 325.7066 161.4964 318.5 149.5 318.5 c
135.2904 318.5 128.5 326.0702 128.5 347.5 c
128.5 361.1496 129.3033 378.3283 130.5 391.5 C
119.5 391.5 L
f
118.6666 291.6636 m
117.4325 277.9268 116.6666 261.3574 116.6666 247.6636 C
116.6666 220.1765 128.4261 208.3303 149.3333 208.3303 c
167.0454 208.3303 179.3824 218.2508 189.3334 244.9969 C
177.1949 249.7472 L
168.6072 227.4265 160.5693 220.6637 149.3333 220.6637 c
136.613 220.6637 130.3334 227.5993 130.3334 247.6636 c
130.3334 261.1636 131.1525 278.5273 132.3334 291.6636 C
118.6666 291.6636 L
f
117.8334 191.8364 m
116.6061 178.0318 115.8334 161.4677 115.8334 147.8364 C
115.8334 120.3771 128.0928 108.1697 149.1667 108.1697 c
167.4883 108.1697 180.0503 118.3125 190.1666 145.503 C
175.6938 151.1907 L
167.1414 129.1554 159.6422 122.8363 149.1667 122.8363 c
137.9356 122.8363 132.1666 129.1375 132.1666 147.8364 c
132.1666 161.1867 133.0015 178.7354 134.1666 191.8364 C
117.8334 191.8364 L
f
U
117 92 m
115.7797 78.1277 115 61.5688 115 48 C
115 20.5686 127.7595 8 149 8 c
167.9313 8 180.7184 18.3651 191 46 C
174.1925 52.6253 L
165.6755 30.8753 158.7151 25 149 25 c
139.2583 25 134 30.6667 134 48 c
134 61.2007 134.8507 78.9344 136 92 C
117 92 L
f
u
257.3333 541.9969 m
257.3333 524.1634 249.9281 515.6097 229.9999 512.7637 C
231 507.8303 L
252.8206 510.898 262.6667 521.2498 262.6667 542.1636 c
262.6667 559.6477 254.6822 568.1636 242.3333 568.1636 c
231.7828 568.1636 223.5 559.8807 223.5 549.6636 c
223.5 539.4464 231.7828 531.3302 242.3333 531.3302 c
252.6964 531.3302 261.5 540.0248 261.5 549.6636 C
261.5 576.9969 L
292.3333 576.9969 L
292.3333 581.997 L
261.5 581.997 L
261.5 595.1636 L
256.1666 595.1636 L
256.1666 581.997 L
207.6667 581.997 L
207.6667 576.9969 L
256.1666 576.9969 L
256.1666 549.6636 L
256.1666 541.9187 249.9202 536.1636 242.5 536.1636 c
234.9187 536.1636 228.8334 542.1743 228.8334 549.6636 c
228.8334 557.1529 234.9187 563.1635 242.5 563.1635 c
251.9194 563.1635 257.3333 556.5761 257.3333 541.9969 c
f
255.6666 441.9939 m
255.6666 424.5034 249.295 417.213 228.5999 414.5273 C
229.9999 407.6605 L
253.4833 410.6332 263.3334 420.7459 263.3334 442.3272 c
263.3334 459.728 254.4304 468.3272 241.6666 468.3272 c
230.5067 468.3272 221.9999 459.8205 221.9999 449.3272 c
221.9999 438.8339 230.5067 430.6605 241.6666 430.6605 c
252.2557 430.6605 262 440.1329 262 449.3272 C
262 475.9938 L
292.6667 475.9938 L
292.6667 482.9939 L
262 482.9939 L
262 495.3272 L
254.3332 495.3272 L
254.3332 482.9939 L
207.3333 482.9939 L
207.3333 475.9938 L
254.3332 475.9938 L
254.3332 449.3272 L
254.3332 442.4153 248.7626 437.3273 242 437.3273 c
235.1084 437.3273 229.6667 442.6197 229.6667 449.3272 c
229.6667 456.0346 235.1084 461.3271 242 461.3271 c
250.7221 461.3271 255.6666 455.2238 255.6666 441.9939 c
f
254 342 m
254 324.8526 248.662 318.8253 227.2 316.3 C
229 307.5 L
254.1458 310.3775 264 320.2511 264 342.5 c
264 359.8174 254.1785 368.5 241 368.5 c
229.2306 368.5 220.5 359.7694 220.5 349 c
220.5 338.2306 229.2306 330 241 330 c
251.8151 330 262.5 340.2501 262.5 349 C
262.5 375 L
293 375 L
293 384 L
262.5 384 L
262.5 395.5 L
252.5 395.5 L
252.5 384 L
207 384 L
207 375 L
252.5 375 L
252.5 349 L
252.5 342.9209 247.6051 338.5 241.5 338.5 c
235.2981 338.5 230.5 343.0743 230.5 349 c
230.5 354.9257 235.2981 359.5 241.5 359.5 c
249.5248 359.5 254 353.8808 254 342 c
f
252.3333 241.9969 m
252.3333 225.1926 248.0289 220.4286 225.7999 218.0637 C
228 207.3303 L
254.8085 210.1127 264.6667 219.7472 264.6667 242.6636 c
264.6667 259.8977 253.9267 268.6636 240.3333 268.6636 c
227.9545 268.6636 219 259.7091 219 248.6636 c
219 237.6181 227.9545 229.3302 240.3333 229.3302 c
251.3745 229.3302 263 240.3582 263 248.6636 C
263 273.9969 L
293.3333 273.9969 L
293.3333 284.997 L
263 284.997 L
263 295.6636 L
250.6666 295.6636 L
250.6666 284.997 L
206.6667 284.997 L
206.6667 273.9969 L
250.6666 273.9969 L
250.6666 248.6636 L
250.6666 243.4175 246.4476 239.6636 241 239.6636 c
235.4879 239.6636 231.3334 243.5197 231.3334 248.6636 c
231.3334 253.8075 235.4879 257.6635 241 257.6635 c
248.3275 257.6635 252.3333 252.5286 252.3333 241.9969 c
f
250.6667 142.003 m
250.6667 125.5418 247.3959 122.0409 224.4 119.8363 C
227 107.1697 L
255.471 109.8571 265.3333 119.2524 265.3333 142.8364 c
265.3333 159.9872 253.6748 168.8364 239.6667 168.8364 c
226.6784 168.8364 217.5 159.658 217.5 148.3364 c
217.5 137.0147 226.6784 128.6697 239.6667 128.6697 c
250.9338 128.6697 263.5 140.4755 263.5 148.3364 C
263.5 173.0031 L
293.6667 173.0031 L
293.6667 186.003 L
263.5 186.003 L
263.5 195.8364 L
248.8334 195.8364 L
248.8334 186.003 L
206.3333 186.003 L
206.3333 173.0031 L
248.8334 173.0031 L
248.8334 148.3364 L
248.8334 143.9231 245.2901 140.8363 240.5 140.8363 c
235.6776 140.8363 232.1666 143.9743 232.1666 148.3364 c
232.1666 152.6985 235.6776 155.8364 240.5 155.8364 c
247.1303 155.8364 250.6667 151.1856 250.6667 142.003 c
f
U
249 42 m
249 25.8818 246.7628 23.6442 223 21.6 C
226 7 L
256.1337 9.5923 266 18.7485 266 43 c
266 60.0675 253.423 69 239 69 c
225.4023 69 216 59.5978 216 48 c
216 36.4022 225.4023 28 239 28 c
250.4932 28 264 40.5836 264 48 C
264 72 L
294 72 L
294 87 L
264 87 L
264 96 L
247 96 L
247 87 L
206 87 L
206 72 L
247 72 L
247 48 l
247 44.4197 244.1325 42 240 42 c
235.8674 42 233 44.4197 233 48 c
233 51.5803 235.8674 54 240 54 c
245.933 54 249 49.8333 249 42 c
f
u
365.9999 566.3302 m
365.9999 550.1303 L
365.9999 541.6294 365.6567 541.2636 359.7333 541.2636 c
356.7282 541.2636 350.2812 542.7366 345.3 544.6636 C
344 539.7636 L
349.4525 537.6296 357.1644 536.0302 360.8333 536.0302 c
369.4573 536.0302 371.5 537.9578 371.5 549.3636 C
371.5 566.3302 L
386.9167 566.3302 L
386.9167 571.4969 L
371.5 571.4969 L
371.5 590.3303 L
365.9999 590.3303 L
365.9999 571.4969 L
325.5 571.4969 L
325.5 590.3303 L
320 590.3303 L
320 571.4969 L
304.6667 571.4969 L
304.6667 566.3302 L
320 566.3302 L
320 532.7802 L
320 513.1392 324.5201 508.6636 350.6667 508.6636 c
359.6931 508.6636 369.9247 509.3324 378.3333 510.6636 C
377.7333 515.8303 L
369.4006 514.4984 359.4404 513.8303 350.6667 513.8303 c
328.2333 513.8303 325.5 516.192 325.5 532.7802 c
325.5 566.3302 L
365.9999 566.3302 L
f
364.9999 464.6604 m
364.9999 450.2606 L
364.9999 442.8786 364.6608 442.5273 359.4666 442.5273 c
356.4725 442.5273 350.2499 443.8481 345.4999 445.5273 C
343.9999 438.5271 L
349.6786 436.55 357.9673 435.0605 361.6667 435.0605 c
370.4461 435.0605 373 437.4992 373 448.7272 C
373 464.6604 L
388.7334 464.6604 L
388.7334 471.9939 L
373 471.9939 L
373 490.6606 L
364.9999 490.6606 L
364.9999 471.9939 L
328.0001 471.9939 L
328.0001 490.6606 L
319.9999 490.6606 L
319.9999 471.9939 L
305.3333 471.9939 L
305.3333 464.6604 L
319.9999 464.6604 L
319.9999 432.8205 L
319.9999 413.3962 325.2646 408.3272 351.3333 408.3272 c
360.4847 408.3272 371.2147 409.0373 379.6667 410.3272 C
378.8667 417.6607 L
370.4955 416.3576 360.2546 415.6607 351.3333 415.6607 c
330.6347 415.6607 328.0001 417.9168 328.0001 432.8205 c
328.0001 464.6604 L
364.9999 464.6604 L
f
363 363 m
363 350.4 L
363 344.1369 362.6651 343.8 358.2 343.8 c
355.2169 343.8 349.2187 344.9687 344.7 346.4 C
343 337.3 L
348.9048 335.4796 357.7703 334.1 361.5 334.1 c
370.435 334.1 373.5 337.0497 373.5 348.1 C
373.5 363 L
389.55 363 L
389.55 372.5 L
373.5 372.5 L
373.5 391 L
363 391 L
363 372.5 L
329.5 372.5 L
329.5 391 L
319 391 L
319 372.5 L
305 372.5 L
305 363 L
319 363 L
319 332.8699 L
319 313.6623 325.0091 308 351 308 c
360.2764 308 371.5048 308.7513 380 310 C
379 319.5 L
370.5903 318.2258 360.0689 317.5 351 317.5 c
332.0359 317.5 329.5 319.6505 329.5 332.8699 c
329.5 363 L
363 363 L
f
360.9999 261.3302 m
360.9999 250.5303 L
360.9999 245.3862 360.6692 245.0636 356.9333 245.0636 c
353.9612 245.0636 348.1875 246.0803 343.9 247.2636 C
342 236.0636 L
348.131 234.4 357.5733 233.1302 361.3333 233.1302 c
370.4239 233.1302 374 236.5911 374 247.4636 C
374 261.3302 L
390.3667 261.3302 L
390.3667 272.9969 L
374 272.9969 L
374 291.3303 L
360.9999 291.3303 L
360.9999 272.9969 L
331 272.9969 L
331 291.3303 L
318 291.3303 L
318 272.9969 L
304.6667 272.9969 L
304.6667 261.3302 L
318 261.3302 L
318 232.9102 L
318 213.9193 324.7536 207.6636 350.6667 207.6636 c
360.068 207.6636 371.7949 208.4561 380.3333 209.6636 C
379.1333 221.3303 L
370.6852 220.0851 359.8832 219.3303 350.6667 219.3303 c
333.4373 219.3303 331 221.3752 331 232.9102 c
331 261.3302 L
360.9999 261.3302 L
f
360.0001 159.6697 m
360.0001 150.6697 L
360.0001 146.6445 359.6735 146.3363 356.6667 146.3363 c
353.7056 146.3363 348.1563 147.2009 344.1 148.1363 C
342 134.8364 L
348.3571 133.3296 358.3763 132.1697 362.1667 132.1697 c
371.4127 132.1697 375.5 136.1417 375.5 146.8364 C
375.5 159.6697 L
392.1833 159.6697 L
392.1833 173.503 L
375.5 173.503 L
375.5 191.6697 L
360.0001 191.6697 L
360.0001 173.503 L
333.5 173.503 L
333.5 191.6697 L
318 191.6697 L
318 173.503 L
305.3333 173.503 L
305.3333 159.6697 L
318 159.6697 L
318 132.9597 L
318 114.1854 325.4982 107.3364 351.3333 107.3364 c
360.8597 107.3364 373.0849 108.1701 381.6667 109.3364 C
380.2666 123.1696 L
371.7801 121.9533 360.6975 121.1696 351.3333 121.1696 c
335.8386 121.1696 333.5 123.109 333.5 132.9597 c
333.5 159.6697 L
360.0001 159.6697 L
f
U
357 58 m
357 50.8 L
357 47.8938 356.6777 47.6 354.4 47.6 c
351.4499 47.6 346.125 48.3125 342.3 49 C
340 33.6 L
346.5833 32.25 357.1793 31.2 361 31.2 c
370.4016 31.2 375 35.6831 375 46.2 C
375 58 L
392 58 L
392 74 L
375 74 L
375 92 L
357 92 L
357 74 L
334 74 L
334 92 L
316 92 L
316 74 L
304 74 L
304 58 L
316 58 L
316 33 L
316 14.4424 324.2427 7 350 7 c
359.6514 7 372.375 7.875 381 9 C
379.4 25 L
370.875 23.8125 359.5118 23 350 23 c
336.24 23 334 24.8337 334 33 c
334 58 L
357 58 L
f
u
405.8333 552.4969 m
422.825 552.4969 438.0322 558.8581 471 582.9969 C
471 588.4969 L
425.5 588.4969 L
425.5 583.3302 L
469.1667 583.3302 L
467.85 587.0969 L
433.3386 561.8102 419.683 556.4969 405.8333 556.4969 C
405.8333 552.4969 L
f
405.6667 451.7938 m
425.2268 451.7938 441.1661 458.1954 472.0001 480.9938 C
472.0001 488.9939 L
425 488.9939 L
425 481.6604 L
469.3333 481.6604 L
467.5 486.7939 L
434.8448 462.6186 420.621 456.9939 405.6667 456.9939 C
405.6667 451.7938 L
f
405.5 351.1 m
427.6283 351.1 444.2997 357.5419 473 379 C
473 389.5 L
424.5 389.5 L
424.5 380 L
469.5 380 L
467.15 386.5 L
436.3509 363.4361 421.5589 357.5 405.5 357.5 C
405.5 351.1 L
f
405.3333 250.3969 m
430.0301 250.3969 447.4335 256.8792 474 276.9969 C
474 289.9969 L
424 289.9969 L
424 278.3302 L
469.6667 278.3302 L
466.8 286.1969 L
437.8571 264.2445 422.4968 257.9969 405.3333 257.9969 C
405.3333 250.3969 L
f
405.1667 149.7031 m
432.4316 149.7031 450.5671 156.2257 475 175.0031 C
475 190.503 L
423.5 190.503 L
423.5 176.6697 L
469.8333 176.6697 L
466.45 185.9031 L
439.3632 165.0621 423.4347 158.503 405.1667 158.503 C
405.1667 149.7031 L
f
U
466.1 85.6 m
440.8694 65.8705 424.3727 59 405 59 C
405 49 L
434.8334 49 453.701 55.563 476 73 C
476 91 L
423 91 L
423 75 L
470 75 L
466.1 85.6 L
f
u
433.0001 532.9969 m
433.0001 543.4888 442.0064 551.3302 454.3334 551.3302 c
488.5 551.3302 L
488.5 556.4969 L
405.8333 556.4969 L
405.8333 551.3302 L
445.3333 551.3302 L
444.5833 554.3303 L
433.131 550.1243 427.5 542.5617 427.5 532.8303 c
427.5 519.1117 438.2515 509.4969 456.1667 509.4969 c
463.1461 509.4969 467.8909 510.0557 474.8334 511.4969 C
473.9667 516.647 L
466.9995 515.1998 462.4723 514.6636 456.1667 514.6636 c
441.7651 514.6636 433.0001 522.1786 433.0001 532.9969 c
f
435.0001 432.9939 m
435.0001 442.6353 443.0645 449.6604 455.6667 449.6604 c
489 449.6604 L
489 456.9939 L
405.6667 456.9939 L
405.6667 449.6604 L
445.6667 449.6604 L
444.4667 454.0605 L
432.4176 449.6354 427 442.3473 427 432.6605 c
427 418.695 438.0124 408.9938 456.3333 408.9938 c
463.5419 408.9938 468.7503 409.5783 475.6667 410.9938 C
474.5334 418.294 L
467.6454 416.8831 462.6703 416.3273 456.3333 416.3273 c
443.0503 416.3273 435.0001 423.1731 435.0001 432.9939 c
f
437 333 m
437 341.791 444.1225 348 457 348 c
489.5 348 L
489.5 357.5 L
405.5 357.5 L
405.5 348 L
446 348 L
444.35 353.8 L
431.7042 349.1557 426.5 342.1422 426.5 332.5 c
426.5 318.2875 437.7734 308.5 456.5 308.5 c
463.9376 308.5 469.6095 309.1102 476.5 310.5 C
475.1 319.95 L
468.2912 318.5753 462.8683 318 456.5 318 c
444.3355 318 437 324.1767 437 333 c
f
439.0001 232.9969 m
439.0001 240.9375 445.1806 246.3302 458.3334 246.3302 c
490 246.3302 L
490 257.9969 L
405.3333 257.9969 L
405.3333 246.3302 L
446.3333 246.3302 L
444.2333 253.5303 L
430.9907 248.6669 426 241.9279 426 232.3303 c
426 217.8709 437.5343 207.9969 456.6667 207.9969 c
464.3334 207.9969 470.4689 208.6329 477.3334 209.9969 C
475.6667 221.597 L
468.9371 220.2585 463.0663 219.6636 456.6667 219.6636 c
445.6208 219.6636 439.0001 225.1713 439.0001 232.9969 c
f
440.9999 133.003 m
440.9999 140.0933 446.2387 144.6697 459.6666 144.6697 c
490.5 144.6697 L
490.5 158.503 L
405.1667 158.503 L
405.1667 144.6697 L
446.6667 144.6697 L
444.1167 153.2697 L
430.2773 148.1872 425.5 141.7227 425.5 132.1697 c
425.5 117.4634 437.2953 107.503 456.8333 107.503 c
464.7292 107.503 471.3282 108.1648 478.1666 109.503 C
476.2333 123.253 L
469.583 121.9507 463.2644 121.3363 456.8333 121.3363 c
446.9059 121.3363 440.9999 126.1749 440.9999 133.003 c
f
U
457 23 m
448.1912 23 443 27.1695 443 33 c
443 39.2398 447.2968 43 461 43 c
491 43 L
491 59 L
405 59 L
405 43 L
447 43 L
444 53 L
429.5639 47.6983 425 41.5084 425 32 c
425 17.0467 437.0562 7 457 7 c
465.125 7 472.1875 7.6875 479 9 C
476.8 24.9 L
470.2289 23.634 463.4624 23 457 23 c
f
u
183 572.9369 m
179.4992 578.4826 175.8975 583.548 172.0334 588.4969 C
168.1973 585.9889 L
172.1484 580.9507 175.777 575.8497 179.0446 570.6676 C
183 572.9369 L
f
184.0001 472.8739 m
180.4985 478.5903 176.9199 483.846 173.0667 488.9939 C
167.7946 485.7779 L
171.6553 480.6556 175.287 475.3345 178.5893 469.9352 C
184.0001 472.8739 L
f
185 372.82 m
181.4977 378.707 177.9423 384.1531 174.1 389.5 C
167.392 385.576 L
171.1622 380.3696 174.7969 374.8286 178.134 369.212 C
185 372.82 L
f
186 272.7569 m
182.4969 278.8147 178.9648 284.4511 175.1334 289.9969 C
166.9893 285.3649 L
170.6691 280.0744 174.3069 274.3135 177.6786 268.4796 C
186 272.7569 L
f
187 172.703 m
183.4961 178.9314 179.9872 184.7583 176.1666 190.503 C
166.5867 185.1631 L
170.176 179.7884 173.8168 173.8076 177.2233 167.7564 C
187 172.703 L
f
U
188 72.64 m
184.4954 79.0391 181.0097 85.0563 177.2 91 C
166.184 84.952 L
169.6829 79.4933 173.3268 73.2925 176.768 67.024 C
188 72.64 L
f
u
169.692 568.9335 m
166.3549 574.1639 162.9319 578.9748 159.2613 583.6823 C
155.462 581.1944 L
159.0946 576.5504 162.537 571.7476 165.7741 566.6828 C
169.692 568.9335 L
f
169.984 468.967 m
166.6274 474.4056 163.2058 479.4336 159.5227 484.3646 C
154.324 481.1889 L
157.9159 476.4038 161.384 471.3462 164.6481 466.0657 C
169.984 468.967 L
f
170.2759 369.0096 m
166.8999 374.6563 163.4797 379.9016 159.784 385.056 C
153.1861 381.1925 L
156.7373 376.2663 160.2311 370.9539 163.5223 365.4578 C
170.2759 369.0096 L
f
170.5679 269.0431 m
167.1725 274.898 163.7536 280.3604 160.0453 285.7383 C
152.0481 281.1869 L
155.5585 276.1196 159.0781 270.5524 162.3963 264.8406 C
170.5679 269.0431 L
f
170.8599 169.0858 m
167.445 175.1487 164.0275 180.8284 160.3066 186.4297 C
150.9103 181.1905 L
154.3799 175.9821 157.9252 170.1602 161.2705 164.2327 C
170.8599 169.0858 L
f
U
171.1519 69.1193 m
167.7175 75.3904 164.3014 81.2872 160.568 87.112 C
149.7723 81.185 L
153.2012 75.8355 156.7722 69.7587 160.1446 63.6156 C
171.1519 69.1193 L
f
u
98.1667 584.4969 m
94.9175 589.8594 91.9837 594.1213 88.1667 598.9969 C
84.4666 596.5636 L
88.248 591.7478 91.1158 587.5795 94.2666 582.3802 C
98.1667 584.4969 L
f
U
u
98.3333 483.9938 m
95.085 489.4689 92.0925 493.9927 88.3333 498.9939 C
83.3332 495.9272 L
87.0063 491.0637 89.9753 486.5807 93.1333 481.2605 C
98.3333 483.9938 L
f
98.5 383.5 m
95.2525 389.0875 92.2012 393.8733 88.5 399 C
82.2 395.3 L
85.7647 390.3888 88.835 385.5912 92 380.15 C
98.5 383.5 L
f
98.6667 282.9969 m
95.42 288.697 92.31 293.7447 88.6667 298.9969 C
81.0666 294.6636 L
84.523 289.7047 87.6945 284.5925 90.8666 279.0302 C
98.6667 282.9969 L
f
98.8333 182.503 m
95.5875 188.3156 92.4187 193.6252 88.8333 199.003 C
79.9333 194.0364 L
83.2814 189.0298 86.5541 183.6029 89.7333 177.9197 C
98.8333 182.503 L
f
U
99 82 m
95.755 87.9251 92.5275 93.4966 89 99 C
78.8 93.4 L
82.0397 88.3457 85.4137 82.6042 88.6 76.8 C
99 82 L
f
u
86.0666 581.2036 m
82.9728 586.267 80.0953 590.382 76.4333 595.0636 C
72.7673 592.6489 L
76.3769 588.0474 79.2179 583.8985 82.2013 579.0209 C
86.0666 581.2036 L
f
U
u
85.5333 480.7072 m
82.4222 485.9193 79.4876 490.3033 75.8666 495.1272 C
70.9345 492.0979 L
74.4572 487.426 77.3914 482.9815 80.4025 477.9418 C
85.5333 480.7072 L
f
85 380.22 m
81.8716 385.5807 78.8799 390.2337 75.3 395.2 C
69.102 391.556 L
72.5377 386.8138 75.565 382.0738 78.604 376.872 C
85 380.22 L
f
84.4666 279.7237 m
81.321 285.233 78.2722 290.155 74.7333 295.2636 C
67.2693 291.005 L
70.6181 286.1924 73.7384 281.1569 76.8053 275.7929 C
84.4666 279.7237 L
f
83.9333 179.2365 m
80.7705 184.8944 77.6646 190.0854 74.1667 195.3364 C
65.4367 190.4631 L
68.6986 185.5802 71.912 180.2492 75.0067 174.7232 C
83.9333 179.2365 L
f
U
83.4 78.7401 m
80.2199 84.5467 77.0569 90.0067 73.6 95.4 C
63.604 89.9121 L
66.779 84.9588 70.0855 79.3322 73.208 73.6441 C
83.4 78.7401 L
f
u
292.25 555 m
289.0008 560.3625 286.0671 564.6244 282.25 569.5 C
278.55 567.0666 L
282.3313 562.2508 285.1992 558.0826 288.35 552.8833 C
292.25 555 L
f
293.5 454 m
290.2517 459.475 287.2592 463.9988 283.5 469 C
278.5 465.9333 L
282.173 461.0698 285.1421 456.5869 288.3 451.2666 C
293.5 454 L
f
294.75 353 m
291.5025 358.5875 288.4512 363.3733 284.75 368.5 C
278.4499 364.8 L
282.0146 359.8888 285.085 355.0912 288.25 349.65 C
294.75 353 L
f
U
u
296 252 m
292.7533 257.7 289.6433 262.7477 286 268 C
278.3999 263.6666 L
281.8563 258.7077 285.0278 253.5955 288.1999 248.0333 C
296 252 L
f
296 151.0031 m
292.7541 156.8157 289.5854 162.1252 286 167.503 C
277.1 162.5364 L
280.448 157.5298 283.7208 152.103 286.9 146.4197 C
296 151.0031 L
f
U
297 50 m
293.755 55.9251 290.5275 61.4966 287 67 C
276.8 61.4 L
280.0397 56.3457 283.4137 50.6042 286.6 44.8 C
297 50 L
f
u
280.15 551.7066 m
277.0561 556.7701 274.1786 560.8851 270.5167 565.5666 C
266.8506 563.152 L
270.4602 558.5504 273.3013 554.4016 276.2846 549.524 C
280.15 551.7066 L
f
280.7 450.7133 m
277.5889 455.9254 274.6543 460.3094 271.0333 465.1333 C
266.1013 462.104 L
269.624 457.4321 272.5581 452.9877 275.5693 447.948 C
280.7 450.7133 L
f
281.25 349.72 m
278.1216 355.0807 275.1299 359.7337 271.55 364.7 C
265.3519 361.056 L
268.7877 356.3138 271.8149 351.5738 274.8539 346.372 C
281.25 349.72 L
f
U
u
281.8 248.7267 m
278.6544 254.236 275.6055 259.158 272.0666 264.2667 C
264.6026 260.008 L
267.9514 255.1954 271.0717 250.1599 274.1386 244.796 C
281.8 248.7267 L
f
281.1 147.7365 m
277.9371 153.3945 274.8312 158.5854 271.3333 163.8364 C
262.6033 158.9632 L
265.8653 154.0802 269.0787 148.7492 272.1734 143.2232 C
281.1 147.7365 L
f
U
281.4 46.7401 m
278.2199 52.5467 275.0569 58.0067 271.6 63.4 C
261.604 57.9121 L
264.779 52.9588 268.0855 47.3322 271.208 41.6441 C
281.4 46.7401 L
f
u
495.5 569 m
492.2508 574.3625 489.3171 578.6244 485.5 583.5 C
481.8 581.0666 L
485.5813 576.2508 488.4491 572.0825 491.6 566.8833 C
495.5 569 L
f
U
u
497 467.9999 m
493.7517 473.475 490.7592 477.9988 487 483 C
481.9999 479.9333 L
485.6729 475.0697 488.642 470.5868 491.7999 465.2666 C
497 467.9999 L
f
496.2 371 m
492.9525 376.5875 489.9013 381.3733 486.2 386.5 C
479.9 382.8 L
483.4647 377.8888 486.535 373.0912 489.7 367.65 C
496.2 371 L
f
U
u
497.1333 270.0015 m
493.8866 275.7016 490.7766 280.7492 487.1333 286.0015 C
479.5333 281.6682 L
482.9897 276.7093 486.1612 271.5971 489.3333 266.0348 C
497.1333 270.0015 L
f
498.0667 169.9985 m
494.8208 175.811 491.6521 181.1206 488.0667 186.4985 C
479.1666 181.5318 L
482.5147 176.5252 485.7875 171.0983 488.9666 165.4151 C
498.0667 169.9985 L
f
U
499 70 m
495.755 75.9251 492.5275 81.4966 489 87 C
478.8 81.4 L
482.0397 76.3457 485.4137 70.6042 488.6 64.8 C
499 70 L
f
u
483.4 565.7066 m
480.3061 570.7701 477.4286 574.8851 473.7666 579.5666 C
470.1006 577.152 L
473.7102 572.5504 476.5513 568.4015 479.5346 563.524 C
483.4 565.7066 L
f
U
u
484.1999 464.7133 m
481.0888 469.9254 478.1542 474.3094 474.5333 479.1333 C
469.6012 476.104 L
473.1239 471.4321 476.058 466.9876 479.0692 461.9479 C
484.1999 464.7133 L
f
482.7 367.72 m
479.5717 373.0807 476.58 377.7337 473 382.7 C
466.802 379.056 L
470.2378 374.3138 473.265 369.5738 476.304 364.372 C
482.7 367.72 L
f
U
u
482.9333 266.7282 m
479.7877 272.2376 476.7389 277.1596 473.2 282.2682 C
465.736 278.0096 L
469.0848 273.197 472.2052 268.1615 475.272 262.7976 C
482.9333 266.7282 L
f
483.1667 166.7319 m
480.0038 172.3898 476.8979 177.5809 473.4 182.8318 C
464.67 177.9585 L
467.9319 173.0756 471.1453 167.7445 474.24 162.2185 C
483.1667 166.7319 L
f
U
483.4 66.7401 m
480.2199 72.5467 477.0569 78.0067 473.6 83.4 C
463.604 77.9121 L
466.779 72.9588 470.0855 67.3322 473.208 61.6441 C
483.4 66.7401 L
f
u
399 584.7266 m
395.7941 590.0101 392.9034 594.1978 389.1333 599 C
385.5693 596.6413 L
389.3075 591.8929 392.1303 587.8012 395.2386 582.6793 C
399 584.7266 L
f
398.2427 482.7675 m
395.0809 488.0846 392.1745 492.4599 388.5094 497.3142 C
383.7813 494.3969 L
387.3679 489.6681 390.2471 485.3383 393.32 480.1729 C
398.2427 482.7675 L
f
u
398.6213 383.1116 m
395.5036 388.4621 392.5815 393.0251 389.0214 397.9316 C
383.1293 394.4556 L
386.5644 389.7466 389.4998 385.1787 392.5373 379.9696 C
398.6213 383.1116 L
f
U
399 283.4556 m
395.9264 288.8397 392.9885 293.5902 389.5333 298.549 C
382.4773 294.5143 L
385.7609 289.825 388.7525 285.019 391.7546 279.7664 C
399 283.4556 L
f
397.6071 183.0758 m
394.5776 188.4934 391.624 193.4316 388.2738 198.4425 C
380.0538 193.8492 L
383.1859 189.1796 386.2337 184.1355 389.2005 178.8393 C
397.6071 183.0758 L
f
U
398.7286 82.6874 m
395.7432 88.1385 392.7739 93.2643 389.5286 98.3274 C
380.1446 93.1754 L
383.1252 88.5255 386.2293 83.2433 389.1606 77.9035 C
398.7286 82.6874 L
f
u
387.108 581.4768 m
384.0565 586.4627 381.2212 590.505 377.6053 595.1146 C
374.0726 592.7731 L
377.6398 588.2376 380.4368 584.1638 383.3785 579.362 C
387.108 581.4768 L
f
385.8587 479.5678 m
382.8324 484.6251 379.9821 488.8635 376.4533 493.5436 C
371.7879 490.6606 L
375.2258 486.1208 378.0718 481.8264 380.9997 476.9384 C
385.8587 479.5678 L
f
u
385.7453 379.962 m
382.7442 385.0904 379.879 389.5251 376.4373 394.2756 C
370.6392 390.8511 L
373.9479 386.3071 376.8429 381.7922 379.757 376.8179 C
385.7453 379.962 L
f
U
385.632 280.3562 m
382.656 285.5558 379.7759 290.1867 376.4213 295.0076 C
369.4905 291.0417 L
372.6699 286.4934 375.6139 281.7579 378.5142 276.6973 C
385.632 280.3562 L
f
383.7471 180.0266 m
380.7963 185.2974 377.9012 190.1244 374.6338 195.0158 C
366.5703 190.5084 L
369.6205 185.9558 372.6135 180.9998 375.5 175.853 C
383.7471 180.0266 L
f
U
384.3766 79.6883 m
381.4509 85.0303 378.541 90.0536 375.3606 95.0154 C
366.1644 89.9665 L
369.0853 85.4096 372.1273 80.2331 375 75 C
384.3766 79.6883 L
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
