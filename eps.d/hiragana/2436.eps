%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (2436.eps)
%%CreationDate: (5/29/04) (10:18 AM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
1 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
500 600 m
500 700 L
400 700 L
400 600 L
500 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
400 600 m
400 700 L
300 700 L
300 600 L
400 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
500 500 m
500 600 L
400 600 L
400 500 L
500 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
400 500 m
400 600 L
300 600 L
300 500 L
400 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
0 Ap
0 O
0 g
1 D
122 691 m
120.7382 677.5343 120 660.9438 120 647 C
120 619.4015 129.7595 609 150 609 c
165.2735 609 176.7103 618.0313 186 643 C
183.2 644 L
174.4709 620.538 164.2777 612 150 612 c
131.3225 612 123 621.4737 123 647 c
123 661.0985 123.7559 677.7223 125 691 C
122 691 L
f
325 669 m
369 669 L
369 651 L
369 641.3801 368.6526 641 362 641 c
358.9839 641 352.3125 642.625 347.1 644.8 C
346 642 L
351.2264 639.7092 358.3614 638 362 638 c
370.4684 638 372 639.4164 372 651 C
372 669 L
384 669 L
384 672 L
372 672 L
372 691 L
369 691 L
369 672 L
325 672 L
325 691 L
322 691 L
322 672 L
306 672 L
306 669 L
322 669 L
322 633.7399 L
322 613.8822 325.7756 610 352 610 c
360.9014 610 370.6346 610.6276 379 612 C
378.6 615 L
370.3057 613.6392 360.6261 613 352 613 c
327.8319 613 325 615.4673 325 633.7399 c
325 669 L
f
259 642 m
259 623.8234 250.5612 614.0064 231.4 611 C
232 608 L
252.158 611.1628 262 621.7538 262 642 c
262 659.5674 254.9341 668 243 668 c
233.059 668 225 659.941 225 650 c
225 640.059 233.059 632 243 632 c
253.1371 632 261 639.9167 261 650 C
261 678 L
291 678 L
291 681 L
261 681 L
261 695 L
258 695 L
258 681 L
207 681 L
207 678 L
258 678 L
258 650 L
258 641.4222 251.0778 635 243 635 c
234.7289 635 228 641.7289 228 650 c
228 658.2711 234.7289 665 243 665 c
253.1167 665 259 657.9284 259 642 c
f
77 675 m
77 678 L
10 678 L
10 675 L
77 675 L
f
43 654 m
24.4849 654 15 645.9505 15 634 c
15 619.1603 26.9326 610 51 610 c
58.4638 610 66.25 610.6875 74 612 C
73.6 615 L
65.9288 613.7008 58.2581 613 51 613 c
28.8423 613 18 621.0618 18 634 c
18 644.2482 26.501 651 43 651 c
52.462 651 62.0852 648.4584 70.6 643.2 C
73 645 L
65.2484 650.625 54.0788 654 43 654 c
f
73 645 m
61.2121 659.9911 57.8289 669.263 57 693 C
54 693 L
54.8299 669.2345 58.2112 658.9553 70.6 643.2 C
73 645 L
f
407 653.2 m
421.4233 653.2 435.8984 659.5208 471 685 C
471 688 L
427 688 L
427 685 L
470 685 L
469.2 687.4 L
432.8324 661.0018 419.7451 656 407 656 C
407 653.2 L
f
432 633 m
432 644.3423 441.9483 653 454 653 c
489 653 L
489 656 L
407 656 L
407 653 L
446 653 L
445.7 654.6 L
434.8445 650.6132 429 642.776 429 633 c
429 619.5284 439.4906 610 457 610 c
463.7503 610 468.0316 610.533 475 612 C
474.4 615 L
467.3536 613.5166 463.2743 613 457 613 c
441.4798 613 432 621.184 432 633 c
f
182 671.2 m
178.785 677.185 175.9487 682.2073 172.5 688 C
169.9 686.5 L
173.2869 680.811 176.0736 675.8061 179.3 669.8 C
182 671.2 L
f
169.2 668.5 m
166.0841 674.3994 163.3797 679.3231 160 685 C
157.4223 683.4654 L
160.8054 677.7828 163.4187 673.0223 166.5473 667.0989 C
169.2 668.5 L
f
93 675 m
89.9719 680.7331 87.2844 685.4831 84 691 C
81.4 689.5 L
84.7848 683.8145 87.4289 679.0359 90.3 673.6 C
93 675 L
f
69.4 686.5 m
72.5265 681.2484 75.1108 676.5595 78.1 670.9 C
80.8 672.3 L
77.8325 677.9184 75.2187 682.5935 72 688 C
69.4 686.5 L
f
290.5 653 m
287.4719 658.7331 284.7844 663.4831 281.5 669 C
278.9 667.5 L
282.2848 661.8145 284.9289 657.0359 287.8 651.6 C
290.5 653 L
f
266.9 664.5 m
270.0265 659.2484 272.6108 654.5595 275.6 648.9 C
278.3 650.3 L
275.3325 655.9184 272.7187 660.5935 269.5 666 C
266.9 664.5 L
f
492 675 m
488.9719 680.7331 486.2844 685.4831 483 691 C
480.4 689.5 L
483.7848 683.8145 486.4289 679.0359 489.3 673.6 C
492 675 L
f
468.4 686.5 m
471.5265 681.2484 474.1108 676.5595 477.1 670.9 C
479.8 672.3 L
476.8325 677.9184 474.2187 682.5935 471 688 C
468.4 686.5 L
f
399 672 m
395.9719 677.7331 393.2844 682.4831 390 688 C
387.4 686.5 L
390.7848 680.8145 393.4289 676.0359 396.3 670.6 C
399 672 L
f
377.4 680.1 m
380.5265 674.8484 383.1108 670.1595 386.1 664.5 C
388.8 665.9 L
385.8325 671.5184 383.2187 676.1935 380 681.6 C
377.4 680.1 L
f
u
493 574.9969 m
489.8724 580.8579 486.8903 586.0471 483.5 591.6636 C
479.45 589.347 L
482.9119 583.6051 485.8349 578.4167 488.8167 572.8303 C
493 574.9969 L
f
494.0001 474.9939 m
490.773 480.9826 487.4961 486.611 484 492.3273 C
478.4999 489.1939 L
482.039 483.3957 485.2408 477.7974 488.3333 472.0605 C
494.0001 474.9939 L
f
495 375 m
491.6734 381.1165 488.102 387.1841 484.5 393 C
477.55 389.05 L
481.1661 383.1955 484.6468 377.1874 487.85 371.3 C
495 375 L
f
496 274.9969 m
492.574 281.2413 488.7078 287.748 485 293.6636 C
476.6 288.8969 L
480.2932 282.9861 484.0528 276.5682 487.3666 270.5303 C
496 274.9969 L
f
497 175.003 m
493.4744 181.3752 489.3136 188.3211 485.5 194.3364 C
475.65 188.753 L
479.4204 182.7859 483.4588 175.9582 486.8833 169.7697 C
497 175.003 L
f
U
474.7 88.6 m
478.5475 82.5765 482.8648 75.339 486.4 69 C
498 75 L
494.375 81.5 489.9195 88.8851 486 95 C
474.7 88.6 L
f
u
466.6499 586.197 m
469.8838 580.8368 472.7482 575.7485 475.8166 569.9969 C
479.9667 572.147 L
476.9016 577.8906 473.9891 582.9928 470.6667 588.497 C
466.6499 586.197 L
f
464.8999 485.8939 m
468.2411 480.4252 471.3856 474.9376 474.5333 469.0939 C
480.1333 471.9939 L
476.9708 477.8628 473.7595 483.3921 470.3333 488.9939 C
464.8999 485.8939 L
f
463.15 385.6 m
466.5985 380.0227 470.0232 374.1358 473.25 368.2 C
480.3 371.85 L
477.04 377.8442 473.5299 383.8004 470 389.5 C
463.15 385.6 L
f
461.4 285.2969 m
464.9558 279.6111 468.6605 273.3249 471.9666 267.2969 C
480.4667 271.6969 L
477.1091 277.8164 473.3003 284.1997 469.6667 289.997 C
461.4 285.2969 L
f
459.6501 185.003 m
463.3132 179.2086 467.2981 172.5231 470.6834 166.4031 C
480.6333 171.5531 L
477.1783 177.7978 473.0707 184.6081 469.3334 190.503 C
459.6501 185.003 L
f
U
457.9 84.7 m
461.6705 78.797 465.9355 71.7122 469.4 65.5 C
480.8 71.4 L
477.2475 77.77 472.8411 85.0074 469 91 C
457.9 84.7 L
f
u
291.9167 552.1636 m
288.7892 558.0245 285.807 563.2137 282.4167 568.8303 C
278.3667 566.5136 L
281.8286 560.7718 284.7516 555.5833 287.7334 549.9969 C
291.9167 552.1636 L
f
293.3334 451.3272 m
290.1064 457.3159 286.8295 462.9443 283.3334 468.6606 C
277.8333 465.5272 L
281.3724 459.729 284.5742 454.1307 287.6667 448.3938 C
293.3334 451.3272 L
f
296.75 350.5 m
293.4235 356.6165 289.852 362.6841 286.25 368.5 C
279.3 364.55 L
282.9162 358.6955 286.3969 352.6874 289.6 346.8 C
296.75 350.5 L
f
295.1667 249.6636 m
291.7407 255.908 287.8745 262.4147 284.1667 268.3303 C
275.7667 263.5636 L
279.4599 257.6528 283.2195 251.2348 286.5334 245.1969 C
295.1667 249.6636 L
f
296.5833 148.8364 m
293.0578 155.2086 288.897 162.1545 285.0833 168.1697 C
275.2334 162.5864 L
279.0037 156.6192 283.0422 149.7915 286.4667 143.6031 C
296.5833 148.8364 L
f
U
275.7 61.6 m
279.5475 55.5765 283.8648 48.339 287.4 42 C
299 48 L
295.375 54.5 290.9195 61.8851 287 68 C
275.7 61.6 L
f
u
265.5667 563.3636 m
268.8005 558.0034 271.6649 552.9152 274.7333 547.1636 C
278.8834 549.3136 L
275.8184 555.0573 272.9058 560.1594 269.5834 565.6636 C
265.5667 563.3636 L
f
264.2333 462.2272 m
267.5745 456.7584 270.719 451.2708 273.8666 445.4271 C
279.4667 448.3272 L
276.3042 454.1961 273.0929 459.7253 269.6667 465.3272 C
264.2333 462.2272 L
f
264.9001 361.1 m
268.3485 355.5227 271.7732 349.6358 275 343.7 C
282.05 347.35 L
278.79 353.3442 275.2799 359.3004 271.75 365 C
264.9001 361.1 L
f
260.5667 259.9636 m
264.1225 254.2777 267.8273 247.9915 271.1333 241.9636 C
279.6334 246.3636 L
276.2759 252.483 272.467 258.8664 268.8334 264.6636 C
260.5667 259.9636 L
f
259.2334 158.8364 m
262.8966 153.042 266.8815 146.3565 270.2667 140.2364 C
280.2167 145.3864 L
276.7617 151.6311 272.654 158.4415 268.9167 164.3364 C
259.2334 158.8364 L
f
U
258.9 57.7 m
262.6705 51.797 266.9355 44.7122 270.4 38.5 C
281.8 44.4 L
278.2475 50.77 273.8411 58.0074 270 64 C
258.9 57.7 L
f
u
94 575.2303 m
90.8724 581.0912 87.8903 586.2804 84.5 591.897 C
80.45 589.5803 L
83.9119 583.8385 86.8349 578.65 89.8167 573.0636 C
94 575.2303 L
f
95.0001 475.4606 m
91.773 481.4493 88.4962 487.0777 85 492.794 C
79.5 489.6606 L
83.039 483.8624 86.2408 478.2641 89.3333 472.5272 C
95.0001 475.4606 L
f
96 375.7 m
92.6735 381.8165 89.102 387.8841 85.5 393.7 C
78.55 389.75 L
82.1661 383.8955 85.6469 377.8874 88.85 372 C
96 375.7 L
f
97.0001 277.9303 m
93.574 284.1746 89.7078 290.6814 86 296.597 C
77.6 291.8303 L
81.2932 285.9194 85.0528 279.5015 88.3667 273.4636 C
97.0001 277.9303 L
f
98 176.1697 m
94.4745 182.5419 90.3136 189.4878 86.5 195.503 C
76.6501 189.9197 L
80.4204 183.9525 84.4588 177.1248 87.8834 170.9364 C
98 176.1697 L
f
U
75.7 90 m
79.5475 83.9765 83.8648 76.7389 87.4 70.4 C
99 76.4 L
95.375 82.9 90.9195 90.2851 87 96.4 C
75.7 90 L
f
u
68.15 585.5303 m
71.3838 580.1701 74.2482 575.0818 77.3166 569.3303 C
81.4667 571.4803 L
78.4017 577.2239 75.4891 582.3261 72.1667 587.8303 C
68.15 585.5303 L
f
66.8999 484.5605 m
70.2411 479.0918 73.3857 473.6042 76.5333 467.7605 C
82.1334 470.6605 L
78.9709 476.5295 75.7595 482.0587 72.3334 487.6606 C
66.8999 484.5605 L
f
65.65 383.6 m
69.0985 378.0227 72.5232 372.1358 75.75 366.2 C
82.8 369.85 L
79.54 375.8442 76.0299 381.8004 72.5 387.5 C
65.65 383.6 L
f
64.4 284.6302 m
67.9558 278.9444 71.6606 272.6582 74.9667 266.6302 C
83.4667 271.0303 L
80.1092 277.1497 76.3003 283.533 72.6667 289.3303 C
64.4 284.6302 L
f
63.1501 181.6697 m
66.8132 175.8753 70.7981 169.1898 74.1834 163.0698 C
84.1333 168.2197 L
80.6783 174.4644 76.5707 181.2748 72.8334 187.1697 C
63.1501 181.6697 L
f
U
61.9 80.7 m
65.6705 74.797 69.9355 67.7122 73.4 61.5 C
84.8 67.4 L
81.2475 73.77 76.8411 81.0074 73 87 C
61.9 80.7 L
f
u
183.1667 571.1636 m
179.8531 577.2886 176.7098 582.7662 173.15 588.6636 C
169.0058 586.2936 L
172.5015 580.4987 175.5793 575.0613 178.8867 568.9469 C
183.1667 571.1636 L
f
184.3334 471.1272 m
180.9213 477.3922 177.471 483.3252 173.8 489.3273 C
168.1116 486.0872 L
171.7162 480.1863 175.085 474.3166 178.4733 468.0938 C
184.3334 471.1272 L
f
185.5 371.1 m
181.9893 377.5049 178.2321 383.8933 174.45 390 C
167.2175 385.89 L
170.9309 379.8831 174.5908 373.581 178.06 367.25 C
185.5 371.1 L
f
186.6667 271.0636 m
183.0575 277.6086 178.9932 284.4523 175.1 290.6636 C
166.3233 285.6836 L
170.1455 279.5708 174.0965 272.8362 177.6466 266.3969 C
186.6667 271.0636 L
f
187.8333 171.0363 m
184.1255 177.7213 179.7543 185.0203 175.75 191.3364 C
165.4291 185.4864 L
169.3602 179.2676 173.6022 172.1006 177.2333 165.553 C
187.8333 171.0363 L
f
U
164.5349 85.28 m
168.5748 78.9553 173.108 71.3558 176.82 64.6999 C
189 70.9999 L
185.1937 77.8249 180.5154 85.5793 176.4 92 C
164.5349 85.28 L
f
u
169.49 568.1169 m
166.2717 574.1478 163.2469 579.5175 159.7583 585.297 C
155.6676 582.9156 L
159.1467 577.147 162.0709 571.9401 165.2844 565.9168 C
169.49 568.1169 L
f
169.78 467.7339 m
166.4594 473.8963 163.1141 479.7119 159.5166 485.5939 C
153.913 482.3658 L
157.4881 476.5113 160.7231 470.858 164.0214 464.7347 C
169.78 467.7339 L
f
170.07 367.36 m
166.647 373.6539 162.9814 379.9154 159.275 385.9 C
152.1586 381.8252 L
155.8296 375.8848 159.3754 369.785 162.7586 363.5619 C
170.07 367.36 L
f
170.36 266.9769 m
166.8346 273.4023 162.8486 280.1098 159.0333 286.1969 C
150.404 281.2754 L
154.171 275.249 158.0276 268.7028 161.4957 262.3798 C
170.36 266.9769 L
f
170.6499 166.603 m
167.0222 173.16 162.7158 180.3133 158.7916 186.503 C
148.6495 180.7348 L
152.5125 174.6225 156.68 167.6299 160.2328 161.207 C
170.6499 166.603 L
f
U
146.8949 80.185 m
150.8539 73.9868 155.3322 66.5477 158.9699 60.0249 C
170.9399 66.2199 L
167.2098 72.9084 162.583 80.5077 158.5499 86.8 C
146.8949 80.185 L
f
u
399 573.1637 m
395.9026 578.9704 392.9576 584.0981 389.6 589.6637 C
385.6441 587.4003 L
389.074 581.7087 391.961 576.5805 394.9133 571.047 C
399 573.1637 L
f
399 474.3273 m
395.8334 480.2077 392.6308 485.713 389.2 491.3273 C
383.8883 488.3006 L
387.3632 482.6029 390.4931 477.1252 393.5266 471.494 C
399 474.3273 L
f
399 275.6637 m
395.6948 281.6914 391.9772 287.9519 388.4 293.6637 C
380.3767 289.1103 L
383.9417 283.4003 387.5573 277.2236 390.7533 271.397 C
399 275.6637 L
f
399 177.8364 m
395.6255 183.9377 391.6504 190.5759 388 196.3363 C
378.621 191.0197 L
382.231 185.3035 386.0895 178.7774 389.3668 172.8531 C
399 177.8364 L
f
U
u
398 374.5 m
394.764 380.454 391.3039 386.3369 387.8 392 C
381.1325 388.21 L
384.6525 382.5061 388.0252 376.679 391.14 370.95 C
398 374.5 L
f
U
376.8651 91.92 m
380.5202 86.1977 384.6216 79.3221 387.9801 73.3001 C
399 79 L
395.5562 85.175 391.3235 92.1908 387.6 98 C
376.8651 91.92 L
f
u
375.9842 579.2828 m
379.1865 573.9718 382.0154 568.9426 385.055 563.2428 C
389.11 565.3436 L
386.0746 571.0342 383.1988 576.076 379.9084 581.5303 C
375.9842 579.2828 L
f
374.5683 478.4655 m
377.8466 473.0952 380.9201 467.7257 384.01 461.9855 C
389.42 464.7872 L
386.3167 470.55 383.1789 475.9586 379.8167 481.4606 C
374.5683 478.4655 L
f
371.7367 275.8403 m
375.1669 270.3512 378.7295 264.3012 381.92 258.4803 C
390.0401 262.6837 L
386.8009 268.5908 383.139 274.7328 379.6334 280.3303 C
371.7367 275.8403 L
f
370.321 176.0323 m
373.8271 170.4838 377.6342 164.0935 380.8751 158.2323 C
390.35 163.1364 L
387.0431 169.1157 383.119 175.6245 379.5417 181.2697 C
370.321 176.0323 L
f
U
u
372.1525 376.6575 m
375.5068 371.2278 378.8248 365.518 381.9651 359.7375 C
388.73 363.24 L
385.5588 369.0749 382.1589 374.8503 378.725 380.4 C
372.1525 376.6575 L
f
U
368.9051 75.215 m
372.4871 69.6072 376.5388 62.8766 379.8301 56.9751 C
390.66 62.5801 L
387.2852 68.6315 383.0991 75.5071 379.4501 81.2 C
368.9051 75.215 L
f
u
76.3333 578.8303 m
9.5 578.8303 L
9.5 573.6636 L
76.3333 573.6636 L
76.3333 578.8303 L
f
75.6666 479.6606 m
9 479.6606 L
9 472.3272 L
75.6666 472.3272 L
75.6666 479.6606 L
f
75 380.5 m
8.5 380.5 L
8.5 371 L
75 371 L
75 380.5 L
f
74.3333 281.3303 m
8 281.3303 L
8 269.6636 L
74.3333 269.6636 L
74.3333 281.3303 L
f
73.6667 182.1697 m
7.5 182.1697 L
7.5 168.3364 L
73.6667 168.3364 L
73.6667 182.1697 L
f
U
73 83 m
7 83 L
7 67 L
73 67 L
73 83 L
f
u
73.3334 545.497 m
61.3464 560.5726 57.9744 570.1983 57.1667 593.3303 C
51.6499 593.3303 L
52.4854 569.4059 56.1134 558.3559 68.9166 542.2303 C
73.3334 545.497 L
f
73.6667 445.9939 m
61.4807 461.1542 58.12 471.1336 57.3333 493.6606 C
49.2998 493.6606 L
50.1408 469.5774 54.0157 457.7564 67.2332 441.2605 C
73.6667 445.9939 L
f
74 346.5 m
61.615 361.7448 58.2655 372.078 57.5 394 C
46.95 394 L
47.7965 369.7579 51.9181 357.1662 65.55 340.3 C
74 346.5 L
f
74.3334 246.997 m
61.7492 262.3263 58.411 273.0133 57.6667 294.3303 C
44.5999 294.3303 L
45.452 269.9293 49.8204 256.5668 63.8666 239.3303 C
74.3334 246.997 L
f
74.6667 147.503 m
61.8835 162.917 58.5565 173.9576 57.8333 194.6697 C
42.2501 194.6697 L
43.1076 170.1099 47.7228 155.9766 62.1834 138.3697 C
74.6667 147.503 L
f
U
75 48 m
62.0178 63.4985 58.7021 74.8929 58 95 C
39.9 95 L
40.7631 70.2813 45.6251 55.3771 60.5 37.4 C
75 48 L
f
u
42.5 554.8303 m
24.1143 554.8303 14.1667 546.339 14.1667 534.3303 c
14.1667 519.1218 26.3514 509.6636 50.6667 509.6636 c
58.1796 509.6636 66.817 510.462 74.5025 511.833 C
73.6996 516.9641 L
66.2184 515.6459 57.7723 514.8303 50.6667 514.8303 c
29.592 514.8303 19.6667 522.2577 19.6667 534.1636 c
19.6667 543.4416 27.4411 549.6636 42.5 549.6636 c
51.5914 549.6636 60.6744 547.2643 68.9166 542.2303 C
73.3334 545.497 L
65.1901 551.2643 53.4072 554.8303 42.5 554.8303 c
f
42 455.6606 m
23.7437 455.6606 13.3333 446.7274 13.3333 434.6606 c
13.3333 419.0833 25.7702 409.3272 50.3333 409.3272 c
57.8954 409.3272 67.3839 410.2365 75.0049 411.6661 C
73.7992 418.9282 L
66.508 417.591 57.2865 416.6607 50.3333 416.6607 c
30.3418 416.6607 21.3334 423.4537 21.3334 434.3273 c
21.3334 442.6351 28.3812 448.3272 42 448.3272 c
50.7208 448.3272 59.2636 446.0703 67.2332 441.2605 C
73.6667 445.9939 L
65.1317 451.9037 52.7357 455.6606 42 455.6606 c
f
41.5 356.5 m
23.3731 356.5 12.5 347.125 12.5 335 c
12.5 319.0539 25.1891 309 50 309 c
57.6112 309 67.9508 310.0201 75.5074 311.5082 C
73.8988 320.9013 L
66.7976 319.5451 56.8008 318.5 50 318.5 c
31.0915 318.5 23 324.6587 23 334.5 c
23 341.8377 29.3213 347 41.5 347 c
49.8503 347 57.853 344.8855 65.55 340.3 C
74 346.5 L
65.0733 352.5521 52.0642 356.5 41.5 356.5 c
f
41 257.3303 m
23.0025 257.3303 11.6667 247.5135 11.6667 235.3303 c
11.6667 219.0154 24.6079 208.6636 49.6667 208.6636 c
57.3271 208.6636 68.5177 209.7946 76.0098 211.3413 C
73.9983 222.8654 L
67.0872 221.4903 56.315 220.3303 49.6667 220.3303 c
31.8412 220.3303 24.6667 225.8547 24.6667 234.6636 c
24.6667 241.0312 30.2614 245.6636 41 245.6636 c
48.9797 245.6636 56.4422 243.6914 63.8666 239.3303 C
74.3334 246.997 L
65.0149 253.1914 51.3927 257.3303 41 257.3303 c
f
40.5 158.1697 m
22.632 158.1697 10.8334 147.911 10.8334 135.6697 c
10.8334 118.986 24.0268 108.3364 49.3334 108.3364 c
57.0429 108.3364 69.0846 109.5782 76.5122 111.1835 C
74.0979 124.8385 L
67.3768 123.4444 55.8293 122.1697 49.3334 122.1697 c
32.5909 122.1697 26.3333 127.0597 26.3333 134.8364 c
26.3333 140.2339 31.2015 144.3364 40.5 144.3364 c
48.1091 144.3364 55.0316 142.5066 62.1834 138.3697 C
74.6667 147.503 L
64.9565 153.8398 50.7212 158.1697 40.5 158.1697 c
f
U
75 48 m
64.8982 54.4791 50.0496 59 40 59 c
22.2614 59 10 48.2995 10 36 c
10 18.9475 23.4456 8 49 8 c
56.7587 8 69.6516 9.3527 77.0147 11.0165 C
74.1975 26.8026 L
67.6664 25.3895 55.3435 24 49 24 c
33.3407 24 28 28.2556 28 35 c
28 39.4273 32.1416 43 40 43 c
47.2385 43 53.6208 41.3126 60.5 37.4 C
75 48 L
f
u
121 591.1636 m
119.7451 577.6301 119 561.0449 119 547.1636 C
119 519.593 129.2595 508.8303 149.6667 508.8303 c
165.5498 508.8303 177.2117 518.0839 186.6667 543.497 C
181.532 545.4346 L
172.8383 522.2579 163.1839 514.1637 149.6667 514.1637 c
132.4785 514.1637 124.6667 523.0029 124.6667 547.1636 c
124.6667 561.1125 125.4384 577.9213 126.6667 591.1636 C
121 591.1636 L
f
119.9999 491.3273 m
118.752 477.726 117.9999 461.146 117.9999 447.3273 C
117.9999 419.7844 128.7595 408.6606 149.3333 408.6606 c
165.8261 408.6606 177.713 418.1365 187.3334 443.9939 C
179.8641 446.8691 L
171.2057 423.9778 162.0901 416.3274 149.3333 416.3274 c
133.6345 416.3274 126.3334 424.532 126.3334 447.3273 c
126.3334 461.1265 127.1209 478.1203 128.3334 491.3273 C
119.9999 491.3273 L
f
119 391.5 m
117.7589 377.831 117 361.2563 117 347.5 C
117 319.985 128.2595 308.5 149 308.5 c
166.1024 308.5 178.2144 318.1982 188 344.5 C
178.1963 348.3126 L
169.5732 325.7066 160.9964 318.5 149 318.5 c
134.7904 318.5 128 326.0702 128 347.5 c
128 361.1496 128.8033 378.3283 130 391.5 C
119 391.5 L
f
118 291.6636 m
116.7658 277.9268 116 261.3574 116 247.6636 C
116 220.1765 127.7595 208.3303 148.6667 208.3303 c
166.3787 208.3303 178.7157 218.2508 188.6667 244.997 C
176.5283 249.7472 L
167.9406 227.4265 159.9026 220.6637 148.6667 220.6637 c
135.9464 220.6637 129.6667 227.5994 129.6667 247.6636 c
129.6667 261.1636 130.4858 278.5273 131.6667 291.6636 C
118 291.6636 L
f
117 191.8364 m
115.7728 178.0318 115 161.4677 115 147.8364 C
115 120.3771 127.2595 108.1697 148.3334 108.1697 c
166.655 108.1697 179.217 118.3125 189.3333 145.503 C
174.8605 151.1907 L
166.3081 129.1554 158.8089 122.8363 148.3334 122.8363 c
137.1023 122.8363 131.3333 129.1375 131.3333 147.8364 c
131.3333 161.1867 132.1682 178.7354 133.3333 191.8364 C
117 191.8364 L
f
U
116 92 m
114.7797 78.1277 114 61.5688 114 48 C
114 20.5686 126.7595 8 148 8 c
166.9313 8 179.7184 18.3651 190 46 C
173.1925 52.6253 L
164.6755 30.8753 157.7151 25 148 25 c
138.2583 25 133 30.6667 133 48 c
133 61.2007 133.8507 78.9344 135 92 C
116 92 L
f
u
406.6667 552.4969 m
423.1401 552.4969 437.2726 558.5248 470.6667 582.9969 C
470.6667 588.497 L
426.3333 588.497 L
426.3333 583.3302 L
468.8333 583.3302 L
468.0166 587.2636 L
432.8658 561.4769 419.9891 556.497 406.6667 556.497 C
406.6667 552.4969 L
f
406.3333 451.7939 m
424.8569 451.7939 438.6468 457.5287 470.3333 480.9938 C
470.3333 488.9939 L
425.6666 488.9939 L
425.6666 481.6605 L
467.6666 481.6605 L
466.8333 487.1272 L
432.8993 461.952 420.2331 456.9939 406.3333 456.9939 C
406.3333 451.7939 L
f
406 351.1 m
426.5736 351.1 440.0209 356.5419 470 379 C
470 389.5 L
425 389.5 L
425 380 L
466.5 380 L
465.65 387 L
432.9327 362.4362 420.4771 357.5 406 357.5 C
406 351.1 L
f
405.6667 250.3969 m
428.2904 250.3969 441.395 255.5458 469.6667 276.9969 C
469.6667 289.997 L
424.3333 289.997 L
424.3333 278.3302 L
465.3333 278.3302 L
464.4666 286.8636 L
432.9661 262.9113 420.7212 257.997 405.6667 257.997 C
405.6667 250.3969 L
f
405.3334 149.7031 m
430.0071 149.7031 442.7691 154.559 469.3334 175.0031 C
469.3334 190.503 L
423.6667 190.503 L
423.6667 176.6698 L
464.1667 176.6698 L
463.2834 186.7364 L
432.9996 163.3955 420.9652 158.503 405.3334 158.503 C
405.3334 149.7031 L
f
U
462.1 86.6 m
433.033 63.8706 421.2092 59 405 59 C
405 49 L
431.7239 49 444.1433 53.563 469 73 C
469 91 L
423 91 L
423 75 L
463 75 L
462.1 86.6 L
f
u
433.8334 532.9969 m
433.8334 543.4888 442.8397 551.3302 455.1667 551.3302 c
489.3334 551.3302 L
489.3334 556.497 L
406.6667 556.497 L
406.6667 551.3302 L
446.1667 551.3302 L
445.4167 554.3303 L
433.9644 550.1243 428.3333 542.5617 428.3333 532.8303 c
428.3333 519.1117 439.0848 509.4969 457 509.4969 c
463.9794 509.4969 468.7243 510.0557 475.6667 511.4969 C
474.8 516.647 L
467.8328 515.1998 463.3056 514.6637 457 514.6637 c
442.5984 514.6637 433.8334 522.1786 433.8334 532.9969 c
f
435.6668 432.9939 m
435.6668 442.6353 443.7312 449.6605 456.3334 449.6605 c
489.6667 449.6605 L
489.6667 456.9939 L
406.3333 456.9939 L
406.3333 449.6605 L
446.3333 449.6605 L
445.1333 454.0605 L
433.0842 449.6354 427.6666 442.3473 427.6666 432.6606 c
427.6666 418.695 438.6791 408.9939 457 408.9939 c
464.2085 408.9939 469.4169 409.5784 476.3334 410.9939 C
475.2 418.294 L
468.312 416.8831 463.337 416.3273 457 416.3273 c
443.717 416.3273 435.6668 423.1731 435.6668 432.9939 c
f
437.5 333 m
437.5 341.791 444.6226 348 457.5 348 c
490 348 L
490 357.5 L
406 357.5 L
406 348 L
446.5 348 L
444.85 353.8 L
432.2042 349.1557 427 342.1422 427 332.5 c
427 318.2875 438.2734 308.5 457 308.5 c
464.4376 308.5 470.1095 309.1102 477 310.5 C
475.6 319.95 L
468.7913 318.5753 463.3683 318 457 318 c
444.8355 318 437.5 324.1767 437.5 333 c
f
439.3334 232.9969 m
439.3334 240.9375 445.514 246.3302 458.6667 246.3302 c
490.3334 246.3302 L
490.3334 257.997 L
405.6667 257.997 L
405.6667 246.3302 L
446.6667 246.3302 L
444.5667 253.5303 L
431.3241 248.6669 426.3333 241.9279 426.3333 232.3303 c
426.3333 217.8709 437.8676 207.9969 457 207.9969 c
464.6668 207.9969 470.8022 208.6329 477.6667 209.9969 C
476 221.597 L
469.2705 220.2585 463.3997 219.6637 457 219.6637 c
445.9541 219.6637 439.3334 225.1713 439.3334 232.9969 c
f
441.1666 133.003 m
441.1666 140.0933 446.4054 144.6698 459.8333 144.6698 c
490.6667 144.6698 L
490.6667 158.503 L
405.3334 158.503 L
405.3334 144.6698 L
446.8333 144.6698 L
444.2834 153.2697 L
430.444 148.1872 425.6667 141.7227 425.6667 132.1697 c
425.6667 117.4634 437.4619 107.5031 457 107.5031 c
464.8959 107.5031 471.4948 108.1648 478.3333 109.5031 C
476.4 123.253 L
469.7497 121.9507 463.431 121.3363 457 121.3363 c
447.0726 121.3363 441.1666 126.1749 441.1666 133.003 c
f
U
457 23 m
448.1912 23 443 27.1695 443 33 c
443 39.2398 447.2968 43 461 43 c
491 43 L
491 59 L
405 59 L
405 43 L
447 43 L
444 53 L
429.5639 47.6983 425 41.5084 425 32 c
425 17.0467 437.0562 7 457 7 c
465.125 7 472.1875 7.6875 479 9 C
476.8 24.9 L
470.2289 23.634 463.4624 23 457 23 c
f
u
257.3333 541.9969 m
257.3333 524.1634 249.9281 515.6097 230 512.7637 C
231 507.8303 L
252.8206 510.898 262.6667 521.2499 262.6667 542.1636 c
262.6667 559.6477 254.6822 568.1636 242.3333 568.1636 c
231.7828 568.1636 223.5 559.8807 223.5 549.6636 c
223.5 539.4465 231.7828 531.3303 242.3333 531.3303 c
252.6964 531.3303 261.5 540.0248 261.5 549.6636 C
261.5 576.9969 L
291.3334 576.9969 L
291.3334 581.997 L
261.5 581.997 L
261.5 595.1636 L
256.1666 595.1636 L
256.1666 581.997 L
206.6667 581.997 L
206.6667 576.9969 L
256.1666 576.9969 L
256.1666 549.6636 L
256.1666 541.9188 249.9202 536.1636 242.5 536.1636 c
234.9187 536.1636 228.8334 542.1743 228.8334 549.6636 c
228.8334 557.1529 234.9187 563.1636 242.5 563.1636 c
251.9194 563.1636 257.3333 556.5761 257.3333 541.9969 c
f
255.6666 441.9939 m
255.6666 424.5035 249.295 417.213 228.5999 414.5273 C
229.9999 407.6606 L
253.4833 410.6332 263.3334 420.7459 263.3334 442.3273 c
263.3334 459.728 254.4304 468.3273 241.6666 468.3273 c
230.5067 468.3273 221.9999 459.8205 221.9999 449.3272 c
221.9999 438.8339 230.5067 430.6605 241.6666 430.6605 c
252.2557 430.6605 262 440.1329 262 449.3272 C
262 475.9938 L
291.6667 475.9938 L
291.6667 482.994 L
262 482.994 L
262 495.3273 L
254.3332 495.3273 L
254.3332 482.994 L
206.3333 482.994 L
206.3333 475.9938 L
254.3332 475.9938 L
254.3332 449.3272 L
254.3332 442.4153 248.7626 437.3273 242 437.3273 c
235.1084 437.3273 229.6667 442.6198 229.6667 449.3272 c
229.6667 456.0346 235.1084 461.3271 242 461.3271 c
250.7221 461.3271 255.6666 455.2238 255.6666 441.9939 c
f
254 342 m
254 324.8526 248.662 318.8253 227.2 316.3 C
229 307.5 L
254.1458 310.3775 264 320.2511 264 342.5 c
264 359.8174 254.1786 368.5 241 368.5 c
229.2306 368.5 220.5 359.7694 220.5 349 c
220.5 338.2306 229.2306 330 241 330 c
251.8151 330 262.5 340.2501 262.5 349 C
262.5 375 L
292 375 L
292 384 L
262.5 384 L
262.5 395.5 L
252.5 395.5 L
252.5 384 L
206 384 L
206 375 L
252.5 375 L
252.5 349 L
252.5 342.9209 247.6051 338.5 241.5 338.5 c
235.2982 338.5 230.5 343.0743 230.5 349 c
230.5 354.9257 235.2982 359.5 241.5 359.5 c
249.5249 359.5 254 353.8808 254 342 c
f
252.3333 241.9969 m
252.3333 225.1926 248.0289 220.4286 225.8 218.0637 C
228 207.3303 L
254.8085 210.1127 264.6667 219.7472 264.6667 242.6636 c
264.6667 259.8977 253.9267 268.6636 240.3333 268.6636 c
227.9545 268.6636 219 259.7091 219 248.6636 c
219 237.6181 227.9545 229.3303 240.3333 229.3303 c
251.3745 229.3303 263 240.3582 263 248.6636 C
263 273.9969 L
292.3334 273.9969 L
292.3334 284.997 L
263 284.997 L
263 295.6636 L
250.6666 295.6636 L
250.6666 284.997 L
205.6667 284.997 L
205.6667 273.9969 L
250.6666 273.9969 L
250.6666 248.6636 L
250.6666 243.4175 246.4476 239.6636 241 239.6636 c
235.4879 239.6636 231.3334 243.5197 231.3334 248.6636 c
231.3334 253.8075 235.4879 257.6636 241 257.6636 c
248.3275 257.6636 252.3333 252.5286 252.3333 241.9969 c
f
250.6667 142.003 m
250.6667 125.5418 247.3959 122.0409 224.4001 119.8363 C
227 107.1697 L
255.471 109.8571 265.3333 119.2524 265.3333 142.8364 c
265.3333 159.9872 253.6748 168.8364 239.6667 168.8364 c
226.6784 168.8364 217.5001 159.658 217.5001 148.3364 c
217.5001 137.0147 226.6784 128.6697 239.6667 128.6697 c
250.9338 128.6697 263.5 140.4755 263.5 148.3364 C
263.5 173.0031 L
292.6667 173.0031 L
292.6667 186.003 L
263.5 186.003 L
263.5 195.8364 L
248.8334 195.8364 L
248.8334 186.003 L
205.3334 186.003 L
205.3334 173.0031 L
248.8334 173.0031 L
248.8334 148.3364 L
248.8334 143.9231 245.2901 140.8363 240.5 140.8363 c
235.6776 140.8363 232.1667 143.9743 232.1667 148.3364 c
232.1667 152.6985 235.6776 155.8364 240.5 155.8364 c
247.1303 155.8364 250.6667 151.1856 250.6667 142.003 c
f
U
249 42 m
249 25.8818 246.7628 23.6442 223 21.6 C
226 7 L
256.1337 9.5923 266 18.7485 266 43 c
266 60.0675 253.423 69 239 69 c
225.4023 69 216 59.5978 216 48 c
216 36.4022 225.4023 28 239 28 c
250.4932 28 264 40.5836 264 48 C
264 72 L
293 72 L
293 87 L
264 87 L
264 96 L
247 96 L
247 87 L
205 87 L
205 72 L
247 72 L
247 48 l
247 44.4197 244.1325 42 240 42 c
235.8674 42 233 44.4197 233 48 c
233 51.5803 235.8674 54 240 54 c
245.933 54 249 49.8333 249 42 c
f
u
366.8333 567.6636 m
366.8333 551.4636 L
366.8333 542.9627 366.49 542.597 360.5666 542.597 c
357.5615 542.597 351.1145 544.0699 346.1333 545.997 C
344.8333 541.0969 L
350.2859 538.9629 357.9977 537.3636 361.6667 537.3636 c
370.2906 537.3636 372.3334 539.2911 372.3334 550.6969 C
372.3334 567.6636 L
383.3333 567.6636 L
383.3333 572.8303 L
372.1667 572.8303 L
372.1667 591.3303 L
366.6666 591.3303 L
366.6666 572.8303 L
326.3334 572.8303 L
326.3334 591.3303 L
320.8333 591.3303 L
320.8333 572.8303 L
305.5 572.8303 L
305.5 567.6636 L
320.8333 567.6636 L
320.8333 533.7802 L
320.8333 514.1392 325.3534 509.6636 351.5 509.6636 c
360.5264 509.6636 370.758 510.3324 379.1667 511.6636 C
378.5667 516.8303 L
370.2339 515.4984 360.2737 514.8303 351.5 514.8303 c
329.0666 514.8303 326.3334 517.192 326.3334 533.7802 c
326.3334 567.6636 L
366.8333 567.6636 L
f
363.6665 466.3272 m
363.6665 451.9273 L
363.6665 444.5453 363.3275 444.194 358.1332 444.194 c
355.1391 444.194 348.9166 445.5148 344.1666 447.194 C
342.6666 440.1938 L
348.3453 438.2167 356.634 436.7272 360.3333 436.7272 c
369.1128 436.7272 371.6667 439.1658 371.6667 450.3939 C
371.6667 466.3272 L
381.6666 466.3272 L
381.6666 473.6606 L
371.3333 473.6606 L
371.3333 491.6606 L
363.3332 491.6606 L
363.3332 473.6606 L
326.6667 473.6606 L
326.6667 491.6606 L
318.6666 491.6606 L
318.6666 473.6606 L
304 473.6606 L
304 466.3272 L
318.6666 466.3272 L
318.6666 433.8205 L
318.6666 414.3962 323.9313 409.3272 350 409.3272 c
359.1514 409.3272 369.8814 410.0373 378.3333 411.3272 C
377.5333 418.6607 L
369.1621 417.3576 358.9213 416.6607 350 416.6607 c
329.3013 416.6607 326.6667 418.9168 326.6667 433.8205 c
326.6667 466.3272 L
363.6665 466.3272 L
f
361.3333 263.6636 m
361.3333 252.8636 L
361.3333 247.7196 361.0026 247.397 357.2666 247.397 c
354.2945 247.397 348.5208 248.4136 344.2333 249.597 C
342.3333 238.3969 L
348.4643 236.7333 357.9066 235.4636 361.6667 235.4636 c
370.7572 235.4636 374.3334 238.9245 374.3334 249.7969 C
374.3334 263.6636 L
381.3333 263.6636 L
381.3333 275.3303 L
373.6667 275.3303 L
373.6667 292.3303 L
360.6666 292.3303 L
360.6666 275.3303 L
331.3334 275.3303 L
331.3334 292.3303 L
318.3333 292.3303 L
318.3333 275.3303 L
304 275.3303 L
304 263.6636 L
318.3333 263.6636 L
318.3333 233.9102 L
318.3333 214.9193 325.087 208.6636 351 208.6636 c
360.4014 208.6636 372.1282 209.4561 380.6667 210.6636 C
379.4667 222.3303 L
371.0186 221.0851 360.2165 220.3303 351 220.3303 c
333.7707 220.3303 331.3334 222.3752 331.3334 233.9102 c
331.3334 263.6636 L
361.3333 263.6636 L
f
358.1667 162.3364 m
358.1667 153.3363 L
358.1667 149.3112 357.8402 149.003 354.8334 149.003 c
351.8722 149.003 346.3229 149.8676 342.2667 150.803 C
340.1667 137.5031 L
346.5238 135.9963 356.543 134.8364 360.3334 134.8364 c
369.5794 134.8364 373.6667 138.8083 373.6667 149.503 C
373.6667 162.3364 L
380.6667 162.3364 L
380.6667 176.1697 L
372.8333 176.1697 L
372.8333 192.6697 L
357.3334 192.6697 L
357.3334 176.1697 L
331.6666 176.1697 L
331.6666 192.6697 L
316.1667 192.6697 L
316.1667 176.1697 L
303.5 176.1697 L
303.5 162.3364 L
316.1667 162.3364 L
316.1667 133.9597 L
316.1667 115.1854 323.6649 108.3364 349.5 108.3364 c
359.0264 108.3364 371.2516 109.1701 379.8333 110.3364 C
378.4333 124.1697 L
369.9468 122.9533 358.8642 122.1697 349.5 122.1697 c
334.0053 122.1697 331.6666 124.1089 331.6666 133.9597 c
331.6666 162.3364 L
358.1667 162.3364 L
f
U
u
363.5 365 m
363.5 352.4 L
363.5 346.1369 363.1651 345.8 358.7 345.8 c
355.7169 345.8 349.7187 346.9687 345.2 348.4 C
343.5 339.3 L
349.4049 337.4796 358.2703 336.1 362 336.1 c
370.935 336.1 374 339.0497 374 350.1 C
374 365 L
381 365 L
381 374.5 L
373.5 374.5 L
373.5 392 L
363 392 L
363 374.5 L
330 374.5 L
330 392 L
319.5 392 L
319.5 374.5 L
305.5 374.5 L
305.5 365 L
319.5 365 L
319.5 333.8699 L
319.5 314.6623 325.5092 309 351.5 309 c
360.7764 309 372.0048 309.7513 380.5 311 C
379.5 320.5 L
371.0903 319.2258 360.569 318.5 351.5 318.5 c
332.5359 318.5 330 320.6505 330 333.8699 c
330 365 L
363.5 365 L
f
U
356 61 m
356 53.8 L
356 50.8938 355.6777 50.6 353.4 50.6 c
350.4499 50.6 345.125 51.3125 341.3 52 C
339 36.6 L
345.5833 35.25 356.1793 34.2 360 34.2 c
369.4016 34.2 374 38.6831 374 49.2 C
374 61 L
380 61 L
380 77 L
373 77 L
373 93 L
355 93 L
355 77 L
333 77 L
333 93 L
315 93 L
315 77 L
303 77 L
303 61 L
315 61 L
315 34 L
315 15.4424 323.2427 8 349 8 c
358.6514 8 371.375 8.875 380 10 C
378.4 26 L
369.875 24.8125 358.5118 24 349 24 c
335.24 24 333 25.8337 333 34 c
333 61 L
356 61 L
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
