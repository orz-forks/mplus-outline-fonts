%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (245E.eps)
%%CreationDate: (2/6/04) (10:00 AM)
%%BoundingBox: 0 0 500 500
%%HiResBoundingBox: 0 0 500 500
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 256.5 244.5 256.5
%AI3_TileBox: -41.5 -119.5 534.5 642.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -139.5 520.5 1 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -119.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
1 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
*u
0 Ap
0 O
0 g
1 D
122.4 411.2 m
132.9303 411.2 139.3218 417.188 142.6013 449.5571 C
144.5803 449.715 146.6451 449.8 148.8 449.8 c
157.3136 449.8 164.3979 449.2776 170.8589 448.0878 C
169.3863 418.7383 164.344 415.2402 149.2 412 C
150.8 407.2 L
168.2916 411.8869 174.0996 416.1186 175.7859 447.022 C
181.5449 445.5774 186.9393 443.5178 192.6 440.7 C
194.8 445 L
188.5015 448.1352 182.4631 450.3793 176.0112 451.9088 C
176.2977 459.3899 176.4001 468.2512 176.4001 478.8 C
171.4001 478.8 L
171.4001 468.6295 171.3112 460.1045 171.0622 452.9302 C
164.434 454.0953 157.2336 454.6 148.8 454.6 c
146.8171 454.6 144.9064 454.5284 143.0531 454.4039 C
143.8448 463.6813 144.4208 474.8847 144.8 488.4 C
115.8 488.4 L
115.8 483.6 L
139.6448 483.6 L
139.2581 471.7917 138.7407 462.004 138.0809 453.907 C
118.0872 451.2188 107 440.962 107 429 c
107 417.6584 113.3546 411.2 122.4 411.2 c
f
0 D
137.6414 448.9742 m
134.8828 420.6597 130.0084 416 122.4 416 c
116.1444 416 111.8 420.3031 111.8 429 c
111.8 437.9181 120.9102 446.3671 137.6414 448.9742 C
f
*U
*u
1 D
54.6 460.2 m
18.2 460.2 L
18.2 455.4 L
54.6 455.4 L
54.6 438.2969 L
49.6069 439.6463 44.4131 440.4 39.2 440.4 c
26.2431 440.4 18.2 432.9787 18.2 423.4 c
18.2 413.1784 26.1879 406.2 39.2 406.2 c
52.421 406.2 59.6 413.1566 59.6 428 C
59.6 431.5847 L
68.9897 427.8507 77.1695 421.7457 82.2 414.2 C
86 417 L
80.1898 425.7153 70.6091 432.7303 59.6 436.7332 C
59.6 455.4 L
83.8 455.4 L
83.8 460.2 L
59.6 460.2 L
59.6 476.4 L
89.8 476.4 L
89.8 481.2 L
59.6 481.2 L
59.6 493.8 L
54.6 493.8 L
54.6 481.2 L
10.2 481.2 L
10.2 476.4 L
54.6 476.4 L
54.6 460.2 L
f
0 D
54.6 428 m
54.6 416.0841 50.1346 411 39.2 411 c
28.8436 411 23 415.9501 23 423.4 c
23 430.6972 29.5102 435.6 39.2 435.6 c
44.395 435.6 49.6115 434.7902 54.6 433.322 C
54.6 428 L
f
*U
*u
1 D
53.3 361 m
18.1 361 L
18.1 354.2 L
53.3 354.2 L
53.3 339.3482 L
48.5832 340.5437 43.7282 341.2 38.9 341.2 c
26.1098 341.2 17.7 333.4037 17.7 323.7 c
17.7 313.4784 25.9879 306.1 39 306.1 c
52.8043 306.1 60.6 313.5567 60.6 327.9 C
60.6 329.7811 L
68.7282 326.1202 75.8693 320.5764 80.6 313.8 C
86.1 317.9 L
80.2718 326.2247 71.0539 332.9554 60.6 337.0074 C
60.6 354.2 L
83.9 354.2 L
83.9 361 L
60.6 361 L
60.6 375.1 L
89.9 375.1 L
89.9 381.9 L
60.6 381.9 L
60.6 393.9 L
53.3 393.9 L
53.3 381.9 L
10.1 381.9 L
10.1 375.1 L
53.3 375.1 L
53.3 361 L
f
0 D
53.3 327.9 m
53.3 317.5457 48.9791 312.8 39 312.8 c
30.1239 312.8 24.9 317.2048 24.9 323.7 c
24.9 330.1296 30.5187 334.6 38.9 334.6 c
43.7233 334.6 48.5977 333.8447 53.3 332.4758 C
53.3 327.9 L
f
*U
*u
1 D
52 261.8 m
18 261.8 L
18 253 L
52 253 L
52 240.3792 L
47.5695 241.4303 43.0539 242 38.6 242 c
25.9764 242 17.2 233.8287 17.2 224 c
17.2 213.7783 25.7879 206 38.8 206 c
53.1875 206 61.6 213.9568 61.6 227.8 C
61.6 227.8493 L
68.5047 224.3346 74.633 219.3749 79 213.4 C
86.2 218.8 L
80.3772 226.737 71.5277 233.2035 61.6 237.2779 C
61.6 253 L
84 253 L
84 261.8 L
61.6 261.8 L
61.6 273.8 L
90 273.8 L
90 282.6 L
61.6 282.6 L
61.6 294 L
52 294 L
52 282.6 L
10 282.6 L
10 273.8 L
52 273.8 L
52 261.8 L
f
0 D
52 227.8 m
52 219.0072 47.8236 214.6 38.8 214.6 c
31.4042 214.6 26.8 218.4596 26.8 224 c
26.8 229.5621 31.5271 233.6 38.6 233.6 c
43.054 233.6 47.587 232.9 52 231.6308 C
52 227.8 L
f
*U
*u
1 D
50.7 162.6 m
17.9 162.6 L
17.9 151.8 L
50.7 151.8 L
50.7 141.3752 L
46.5643 142.2913 42.3899 142.7999 38.3 142.7999 c
25.8431 142.7999 16.7 134.2537 16.7 124.3 c
16.7 114.0783 25.5879 105.9 38.6 105.9 c
52.8492 105.9 61.6973 113.5716 62.519 125.8153 C
68.2752 122.5247 73.4489 118.1641 77.4 113 C
86.3 119.7 L
80.5077 127.2498 72.0225 133.4426 62.6 137.5145 C
62.6 151.8 L
84.1 151.8 L
84.1 162.6 L
62.6 162.6 L
62.6 172.5 L
90.1 172.5 L
90.1 183.3 L
62.6 183.3 L
62.6 194.1 L
50.7 194.1 L
50.7 183.3 L
9.9 183.3 L
9.9 172.5 L
50.7 172.5 L
50.7 162.6 L
f
0 D
50.7 127.7 m
50.7 120.4688 46.6682 116.4 38.6 116.4 c
32.6844 116.4 28.7 119.7143 28.7 124.3 c
28.7 128.9945 32.5355 132.6 38.3 132.6 c
42.3876 132.6 46.5799 131.9565 50.7 130.7872 C
50.7 127.7 L
f
*U
*u
1 D
63.6 94.2 m
49.4 94.2 L
49.4 84 L
9.8 84 L
9.8 71.2 L
49.4 71.2 L
49.4 63.4 L
17.8 63.4 L
17.8 50.6 L
49.4 50.6 L
49.4 42.3702 L
45.5688 43.1596 41.7338 43.5999 38 43.5999 c
25.7098 43.5999 16.2 34.6787 16.2 24.6 c
16.2 14.3783 25.3879 5.8 38.4 5.8 c
52.3373 5.8 61.5065 13.0032 63.2672 23.7384 C
67.9885 20.7408 72.2957 16.9756 75.8 12.6 C
86.4 20.6 L
80.6613 27.7655 72.5384 33.6827 63.6 37.7281 C
63.6 50.6 L
84.2 50.6 L
84.2 63.4 L
63.6 63.4 L
63.6 71.2 L
90.2 71.2 L
90.2 84 L
63.6 84 L
63.6 94.2 L
f
0 D
49.4 27.6 m
49.4 21.9304 45.5127 18.2 38.4 18.2 c
33.9647 18.2 30.6 20.9691 30.6 24.6 c
30.6 28.4269 33.5439 31.6 38 31.6 c
41.7245 31.6 45.5766 31.0145 49.4 29.9452 C
49.4 27.6 L
f
*U
433 433 m
433 413.4903 438.9207 407.8 460.8 407.8 c
482.5175 407.8 492.591 417.5222 491.58 438.6 C
486.58 438.6 L
487.4627 420.196 479.3052 412.6 460.8 412.6 c
441.6714 412.6 438.2 416.6047 438.2 433 c
438.2 438.1843 438.2692 443.5355 438.3937 449 C
472.8 449 L
472.8 453.8 L
438.516 453.8 L
438.7066 460.3805 438.9887 467.1322 439.3511 474 C
479.8 474 L
479.8 478.8 L
439.6121 478.8 L
439.8995 483.7512 440.2266 488.7538 440.6 493.8 C
435.4 493.8 L
435.0219 488.6902 434.6968 483.6985 434.4114 478.8 C
411.2 478.8 L
411.2 474 L
434.1481 474 L
433.7801 467.0501 433.498 460.3045 433.3105 453.8 C
409.2 453.8 L
409.2 449 L
433.1915 449 L
433.0676 443.5058 433 438.159 433 433 c
f
432.3 332.9 m
432.3 313.4736 438.6374 307.7 460.6 307.7 c
482.2718 307.7 492.673 317.8987 491.68 338.6 C
484.28 338.6 L
485.0977 321.5521 477.8841 314.7 460.6 314.7 c
442.9451 314.7 440 318.1154 440 332.9 c
440 337.7548 440.0582 342.7704 440.1681 347.9 C
472.9 347.9 L
472.9 354.7 L
440.3415 354.7 L
440.5183 360.5828 440.7703 366.6053 441.0811 372.7 C
479.9 372.7 L
479.9 379.5 L
441.4512 379.5 L
441.7302 384.2725 442.0432 389.0773 442.4 393.9 C
434.7 393.9 L
434.3379 389.0061 434.0267 384.2153 433.7497 379.5 C
411.1 379.5 L
411.1 372.7 L
433.3774 372.7 L
433.0616 366.5334 432.8111 360.5178 432.6373 354.7 C
409.1 354.7 L
409.1 347.9 L
432.4658 347.9 L
432.3571 342.7476 432.3 337.737 432.3 332.9 c
f
431.6 232.8 m
431.6 213.457 438.3541 207.6 460.4 207.6 c
482.0262 207.6 492.7549 218.2751 491.78 238.6 C
481.98 238.6 L
482.7327 222.9082 476.4631 216.8 460.4 216.8 c
444.2189 216.8 441.8 219.6261 441.8 232.8 c
441.8 237.3263 441.8498 242.0079 441.946 246.8 C
473 246.8 L
473 255.6 L
442.1723 255.6 L
442.3334 260.7833 442.5466 266.0648 442.8093 271.4 C
480 271.4 L
480 280.2 L
443.2856 280.2 L
443.5559 284.7902 443.8596 289.3989 444.2 294 C
434 294 L
433.6541 289.3253 433.3501 284.7258 433.0819 280.2 C
411 280.2 L
411 271.4 L
432.6033 271.4 L
432.3362 266.0029 432.1244 260.7313 431.9659 255.6 C
409 255.6 L
409 246.8 L
431.7411 246.8 L
431.6464 241.9888 431.6 237.317 431.6 232.8 c
f
430.9 132.7 m
430.9 113.4403 438.0709 107.5 460.2 107.5 c
481.7805 107.5 492.8368 118.6516 491.88 138.6 C
479.68 138.6 L
480.3676 124.2644 475.0421 118.9 460.2 118.9 c
445.4926 118.9 443.6 121.1368 443.6 132.7 c
443.6 136.8981 443.6447 141.2488 443.7281 145.7 C
473.1 145.7 L
473.1 156.5 L
444.0038 156.5 L
444.1474 160.9759 444.327 165.5192 444.5446 170.1 C
480.1 170.1 L
480.1 180.9 L
445.1229 180.9 L
445.3842 185.3062 445.6757 189.7167 446 194.1 C
433.3 194.1 L
432.97 189.6395 432.6775 185.2381 432.4183 180.9 C
410.9 180.9 L
410.9 170.1 L
431.8367 170.1 L
431.6156 165.4702 431.4365 160.935 431.2952 156.5 C
408.9 156.5 L
408.9 145.7 L
431.0233 145.7 L
430.9418 141.236 430.9 136.8933 430.9 132.7 c
f
491.98 38.6 m
477.38 38.6 L
478.0025 25.6205 473.6211 21 460 21 c
446.7664 21 445.4 22.6475 445.4 32.6 c
445.4 36.4731 445.4385 40.4896 445.5101 44.6 C
473.2 44.6 L
473.2 57.4 L
445.8352 57.4 L
445.9595 61.162 446.11 64.9693 446.2854 68.8 C
480.2 68.8 L
480.2 81.6 L
446.96 81.6 L
447.212 85.8201 447.4916 90.0317 447.8 94.2 C
432.6 94.2 L
432.2857 89.9523 432.0045 85.7489 431.7545 81.6 C
410.8 81.6 L
410.8 68.8 L
431.0748 68.8 L
430.8968 64.9342 430.7466 61.1304 430.6241 57.4 C
408.8 57.4 L
408.8 44.6 L
430.3055 44.6 L
430.2361 40.482 430.2 36.4718 430.2 32.6 c
430.2 13.4237 437.7876 7.4 460 7.4 c
481.5348 7.4 492.9188 19.0281 491.98 38.6 C
f
263.6 78.8 m
271.5977 73.8941 278.6624 68.7009 286 62.2 C
294.6 71.8 L
286.8915 78.6295 279.9625 83.825 271.2 89.2 C
263.6 78.8 L
f
*u
1 D
271.6 50.2 m
275.4124 21.639 274.2907 20.2 256 20.2 c
232.7419 20.2 241.6 20.3764 241.6 47.4 C
241.6 72.2 L
256.6 72.2 L
256.6 85 L
241.6 85 L
241.6 95.2 L
227.8 95.2 L
227.8 85 L
209.2 85 L
209.2 72.2 L
227.8 72.2 L
227.8 65.0149 L
226.0892 65.6611 224.4909 66 223.2 66 c
211.8988 66 205.2 59.5676 205.2 47.4 c
205.2 35.1216 211.8432 28.8 223.2 28.8 c
224.2994 28.8 225.7491 29.0494 227.3508 29.5623 C
225.164 11.8256 223.5903 7.4 256 7.4 c
285.2227 7.4 290.3488 13.1255 285.4 50.2 C
271.6 50.2 L
f
0 D
223.2 39.6 m
219.837 39.6 217.2 41.4683 217.2 47.4 c
217.2 53.3319 219.4667 55.2 223.2 55.2 c
226.4667 55.2 228.6 52.7493 228.6 47.4 c
228.4934 41.516 226.4258 39.6 223.2 39.6 c
f
*U
*u
1 D
324.8 411.2 m
337.8984 411.2 355.105 430.514 367.4962 470.8795 C
379.9438 466.4189 387.8 455.8304 387.8 441.8 c
387.8 424.2442 377.9763 413.7727 360 412.2 C
360.8 407.4 L
380.9245 409.1607 392.8 421.8358 392.8 441.8 c
392.8 457.9433 383.319 470.3513 368.8536 475.4561 C
370.5449 481.3551 372.1374 487.6597 373.6 494.4 C
368.8 495.4 L
367.3668 488.795 365.7993 482.6006 364.1293 476.8173 C
360.7512 477.588 357.1623 478 353.4 478 c
344.2943 478 336.0599 475.8963 329.1458 472.1837 C
327.6503 477.9583 326.2325 483.8231 324.9 489.8 C
320.2 488.6 L
321.6522 482.0862 323.2045 475.7529 324.8385 469.5436 C
313.8798 461.9279 307.2 449.776 307.2 435.6 c
307.2 420.1686 315.033 411.2 324.8 411.2 c
f
0 D
353.4 473.2 m
356.6943 473.2 359.821 472.8635 362.7535 472.228 C
356.7206 452.7576 349.5359 438.3286 342.5502 428.9653 C
338.0259 441.3597 333.992 454.1374 330.4137 467.417 C
336.7946 471.0964 344.59 473.2 353.4 473.2 c
f
326.1674 464.5811 m
329.9756 450.6994 334.2535 437.488 339.0314 424.6632 C
333.8521 418.9042 328.9146 416 324.8 416 c
317.6438 416 312.2 423.1546 312.2 435.6 c
312.2 447.5069 317.3715 457.7911 326.1674 464.5811 C
f
*U
264.8 179.3 m
272.9617 174.2936 279.8459 169.2155 287.2 162.7 C
294.5 170.8 L
286.7915 177.6295 279.9625 182.725 271.2 188.1 C
264.8 179.3 L
f
266 279.8 m
274.3256 274.693 281.0295 269.73 288.4 263.2 C
294.4 269.8 L
286.6915 276.6295 279.9625 281.625 271.2 287 C
266 279.8 L
f
267.2 380.3 m
275.6894 375.0925 282.213 370.2446 289.6 363.7 C
294.3 368.8 L
286.5915 375.6295 279.9625 380.525 271.2 385.9 C
267.2 380.3 L
f
*u
1 D
222.6 129 m
224.0318 129 225.8008 129.3384 227.6553 130.0399 C
225.4196 112.4354 223.6291 107.5 256 107.5 c
284.9806 107.5 289.755 113.328 284.9 149.7 C
273.3 149.7 L
277.2418 120.1696 275.7702 118.3 256 118.3 c
230.1089 118.3 239.9 119.4064 239.9 147.3 C
239.9 173.1 L
256.5 173.1 L
256.5 183.9 L
239.9 183.9 L
239.9 195.1 L
228.3 195.1 L
228.3 183.9 L
209.3 183.9 L
209.3 173.1 L
228.3 173.1 L
228.3 164.1509 L
226.2487 165.0974 224.2455 165.6 222.6 165.6 c
211.7182 165.6 205.3 159.3815 205.3 147.3 c
205.3 135.1354 211.6765 129 222.6 129 c
f
0 D
222.6 156.3 m
226.2234 156.3 228.9 153.2423 228.9 147.3 c
228.7791 140.6267 226.3972 138.3 222.6 138.3 c
218.3171 138.3 215.5 140.5704 215.5 147.3 c
215.5 154.0297 218.0394 156.3 222.6 156.3 c
f
*U
*u
1 D
222 229.2 m
223.8257 229.2 225.9145 229.6686 227.9727 230.6065 C
225.6843 213.0699 223.6108 207.6 256 207.6 c
284.7384 207.6 289.1612 213.5305 284.4 249.2 C
275 249.2 L
279.0712 218.7002 277.2496 216.4 256 216.4 c
227.4759 216.4 238.2 218.4364 238.2 247.2 C
238.2 274 L
256.4 274 L
256.4 282.8 L
238.2 282.8 L
238.2 295 L
228.8 295 L
228.8 282.8 L
209.4 282.8 L
209.4 274 L
228.8 274 L
228.8 263.1589 L
226.4694 264.4915 224.0537 265.2 222 265.2 c
211.5377 265.2 205.4 259.1954 205.4 247.2 c
205.4 235.1492 211.5099 229.2 222 229.2 c
f
0 D
222 257.4 m
225.9801 257.4 229.2 253.7353 229.2 247.2 c
229.0648 239.7373 226.3686 237 222 237 c
216.7971 237 213.8 239.6725 213.8 247.2 c
213.8 254.7276 216.612 257.4 222 257.4 c
f
*U
*u
1 D
221.4 329.4 m
223.7042 329.4 226.1066 330.0173 228.3048 331.2651 C
225.9618 313.7347 223.5311 307.7 256 307.7 c
284.4963 307.7 288.5675 313.733 283.9 348.7 C
276.7 348.7 L
280.9006 317.2308 278.729 314.5 256 314.5 c
224.8428 314.5 236.5 317.4664 236.5 347.1 C
236.5 374.9 L
256.3 374.9 L
256.3 381.7 L
236.5 381.7 L
236.5 394.9 L
229.3 394.9 L
229.3 381.7 L
209.5 381.7 L
209.5 374.9 L
229.3 374.9 L
229.3 361.9545 L
226.7773 363.8062 223.9437 364.8 221.4 364.8 c
211.3571 364.8 205.5 359.0093 205.5 347.1 c
205.5 335.1631 211.3432 329.4 221.4 329.4 c
f
0 D
221.4 358.5 m
225.7367 358.5 229.5 354.2283 229.5 347.1 c
229.3506 338.848 226.34 335.7 221.4 335.7 c
215.2772 335.7 212.1 338.7747 212.1 347.1 c
212.1 355.4254 215.1847 358.5 221.4 358.5 c
f
*U
294.2 467.8 m
286.4915 474.6295 279.9625 479.425 271.2 484.8 C
268.4 480.8 L
277.0534 475.492 283.3966 470.7592 290.8 464.2 C
294.2 467.8 L
f
*u
1 D
220.8 429.6 m
223.7097 429.6 226.4166 430.427 228.6642 432.1103 C
226.2661 414.4665 223.3359 407.8 256 407.8 c
284.2542 407.8 287.9737 413.9355 283.4 448.2 C
278.4 448.2 L
282.7299 415.7613 280.2084 412.6 256 412.6 c
222.2098 412.6 234.8 416.4964 234.8 447 C
234.8 475.8 L
256.2 475.8 L
256.2 480.6 L
234.8 480.6 L
234.8 494.8 L
229.8 494.8 L
229.8 480.6 L
209.6 480.6 L
209.6 475.8 L
229.8 475.8 L
229.8 460.392 L
227.2212 462.9966 223.9667 464.4 220.8 464.4 c
211.1765 464.4 205.6 458.8232 205.6 447 c
205.6 435.1769 211.1765 429.6 220.8 429.6 c
f
0 D
220.8 459.6 m
225.4934 459.6 229.8 454.7213 229.8 447 c
229.6363 437.9587 226.3114 434.4 220.8 434.4 c
213.7573 434.4 210.4 437.8768 210.4 447 c
210.4 456.1233 213.7574 459.6 220.8 459.6 c
f
*U
*u
1 D
325.3 311.1 m
339.5122 311.1 355.5967 328.5739 367.8789 369.0198 C
379.0204 364.6212 385.8 354.8968 385.8 342.2 c
385.8 325.291 376.8052 315.7052 359.6 314.2 C
360.8 307.3 L
381.1327 309.0789 393 321.8121 393 342.2 c
393 357.9351 383.8916 370.2473 369.7639 375.5533 C
371.3525 381.2888 372.8718 387.4181 374.3 394 C
367.3 395.3 L
365.9187 388.9344 364.451 383.0097 362.92 377.4846 C
359.9003 378.0797 356.7208 378.4 353.4 378.4 c
344.8617 378.4 337.0827 376.5601 330.4304 373.2927 C
329.0155 378.7975 327.6733 384.3886 326.4 390.1 C
319.7 388.5 L
321.1406 382.0378 322.671 375.7737 324.2802 369.633 C
313.4752 361.9768 306.9 349.9321 306.9 336 c
306.9 320.5547 315.0413 311.1 325.3 311.1 c
f
0 D
353.4 371.6 m
356.0693 371.6 358.6102 371.3696 361.0165 370.94 C
355.5479 352.9962 349.3857 339.949 343.282 331.311 C
339.149 342.8881 335.4828 354.5391 332.2132 366.5654 C
338.1387 369.7758 345.3074 371.6 353.4 371.6 c
f
326.204 362.4885 m
329.7783 349.6393 333.7695 337.3312 338.2663 325.147 C
333.6742 320.3771 329.2395 318.1 325.3 318.1 c
318.9453 318.1 314.1 324.3299 314.1 336 c
314.1 346.6809 318.5284 356.0471 326.204 362.4885 C
f
*U
*u
1 D
325.8 211 m
341.1038 211 356.101 226.6943 368.2472 267.1235 C
378.0594 262.8171 383.8 253.9682 383.8 242.6 c
383.8 226.3378 375.6341 217.6378 359.2 216.2 C
360.8 207.2 L
381.3409 208.9971 393.2 221.7885 393.2 242.6 c
393.2 257.9365 384.4495 270.1453 370.6603 275.6384 C
372.1566 281.2166 373.607 287.1804 375 293.6 C
365.7999 295.2 L
364.4708 289.0746 363.0967 283.4056 361.6901 278.1256 C
359.0428 278.5678 356.2743 278.8 353.4 278.8 c
345.4196 278.8 338.1023 277.1935 331.7347 274.3358 C
330.3932 279.5922 329.119 284.9318 327.9 290.4 C
319.2 288.4 L
320.6287 281.9915 322.1301 275.7888 323.714 269.7184 C
313.0655 262.0258 306.6 250.0887 306.6 236.4 c
306.6 220.9409 315.0497 211 325.8 211 c
f
0 D
353.4 270 m
355.4485 270 357.4083 269.8581 359.284 269.5975 C
354.4204 253.3422 349.22 241.6407 344.0016 233.7249 C
340.2786 244.3788 336.9895 254.8997 334.0343 265.6688 C
339.4978 268.4285 346.0273 270 353.4 270 c
f
326.2637 260.318 m
329.5875 248.5401 333.2816 237.1689 337.4675 225.7158 C
333.4576 221.9286 329.5182 220.2 325.8 220.2 c
320.2468 220.2 316 225.5052 316 236.4 c
316 245.8524 319.7109 254.2712 326.2637 260.318 C
f
*U
*u
1 D
326.3 110.9 m
342.677 110.9 356.6352 124.8311 368.6205 165.1722 C
377.0666 160.9912 381.8 153.0348 381.8 143 c
381.8 127.3847 374.4631 119.5703 358.8 118.2 C
360.8 107.1 L
381.5492 108.9154 393.4 121.7649 393.4 143 c
393.4 157.9465 384.9991 170.0511 371.5497 175.7182 C
372.9611 181.1385 374.3446 186.9537 375.7 193.2 C
364.2999 195.1 L
363.0226 189.2133 361.7355 183.7641 360.4399 178.7163 C
358.1749 179.0295 355.8282 179.2 353.4 179.2 c
345.9731 179.2 339.1162 177.8145 333.0567 175.3358 C
331.7834 180.3596 330.5684 185.4591 329.4 190.7 C
318.7 188.3 L
320.1169 181.944 321.5963 175.8118 323.1551 169.8108 C
312.6571 162.0864 306.3 150.2525 306.3 136.8 c
306.3 121.327 315.058 110.9 326.3 110.9 c
f
0 D
353.4 168.4 m
354.8352 168.4 356.2183 168.3254 357.558 168.1936 C
353.3384 153.7942 349.0389 143.4313 344.6982 136.2396 C
341.402 145.8715 338.5059 155.2467 335.8713 164.7581 C
340.8618 167.0825 346.7573 168.4 353.4 168.4 c
f
326.3596 158.0703 m
329.4175 147.3957 332.8006 136.9882 336.6462 126.3596 C
333.202 123.5139 329.747 122.3 326.3 122.3 c
321.5483 122.3 317.9 126.6806 317.9 136.8 c
317.9 145.0253 320.92 152.4734 326.3596 158.0703 C
f
*U
*u
1 D
372.4163 75.7748 m
373.7537 81.0509 375.08 86.7164 376.4 92.8 C
362.7999 95 L
361.5716 89.3393 360.3603 84.113 359.1617 79.2783 C
357.2946 79.4842 355.3761 79.6 353.4 79.6 c
346.5192 79.6 340.1182 78.4242 334.3864 76.2931 C
333.1772 81.0966 332.0204 85.9741 330.9 91 C
318.1999 88.2 L
319.6055 81.8951 321.0632 75.832 322.5973 69.8992 C
312.2498 62.147 306 50.4189 306 37.2 c
306 21.7132 315.0664 10.8 326.8 10.8 c
344.2219 10.8 357.18 23.0152 368.9753 63.1469 C
376.0254 59.1363 379.8 52.0984 379.8 43.4 c
379.8 28.4315 373.292 21.5029 358.4 20.2 C
360.8 7 L
381.7574 8.8336 393.6 21.7413 393.6 43.4 c
393.6 57.9654 385.5261 69.9468 372.4163 75.7748 C
f
0 D
319.8 37.2 m
319.8 44.188 322.1621 50.6229 326.494 55.6985 C
329.2612 46.1902 332.3124 36.8214 335.7739 27.1513 C
332.8809 25.1855 329.9082 24.4 326.8 24.4 c
322.8498 24.4 319.8 27.8559 319.8 37.2 c
f
345.3594 38.9369 m
342.5189 47.414 339.9991 55.5849 337.7015 63.8019 C
342.2141 65.7194 347.4822 66.8 353.4 66.8 c
354.2308 66.8 355.0283 66.7581 355.8227 66.7126 C
352.2895 54.3761 348.8378 45.3779 345.3594 38.9369 C
f
*U
*u
1 D
122.9 311.1 m
134.1212 311.1 140.6453 317.2863 143.9974 348.5417 C
145.5466 348.642 147.1434 348.7 148.8 348.7 c
156.8226 348.7 163.4924 348.2481 169.5297 347.2216 C
168.0825 319.8902 163.2957 316.9748 148.9 314.1 C
150.9 307.1 L
168.5006 311.3843 174.718 315.8304 176.6389 345.6653 C
181.8079 344.2718 186.6902 342.356 191.825 339.8 C
194.9 346 L
188.9037 348.9848 183.1244 351.1598 176.9976 352.682 C
177.2916 360.157 177.4001 368.9704 177.4001 379.4 C
170.1001 379.4 L
170.1001 369.4785 170.0278 361.1492 169.8129 354.1389 C
163.5175 355.1506 156.694 355.6 148.8 355.6 c
147.3845 355.6 146.007 355.5587 144.6547 355.4916 C
145.4232 364.681 145.9796 375.6967 146.35 388.9 C
115.7 388.9 L
115.7 382.1 L
138.7239 382.1 L
138.3445 371.3006 137.8677 362.2866 137.2799 354.7693 C
117.8071 351.8178 106.7 341.366 106.7 329.5 c
106.7 317.9584 113.5629 311.1 122.9 311.1 c
f
0 D
136.6447 347.6449 m
134.0696 322.3129 129.7563 318 122.9 318 c
117.3788 318 113.7 321.8161 113.7 329.5 c
113.7 337.2646 121.8664 344.9139 136.6447 347.6449 C
f
*U
*u
1 D
123.4 211 m
135.28 211 141.9483 217.3691 145.3798 247.514 C
146.4937 247.5679 147.631 247.6 148.8 247.6 c
156.3233 247.6 162.5738 247.2046 168.2021 246.3279 C
166.7839 221.0737 162.241 218.7175 148.6 216.2 C
151 207 L
168.6907 210.8924 175.304 215.5195 177.4694 244.2952 C
182.0614 242.965 186.4377 241.1959 191.05 238.9 C
195 247 L
189.3058 249.8345 183.7888 251.9341 177.9835 253.443 C
178.2847 260.9143 178.4001 269.6774 178.4001 280 C
168.8001 280 L
168.8001 270.3202 168.7421 262.1916 168.5593 255.3412 C
162.603 256.2124 156.1578 256.5999 148.8 256.5999 c
147.9401 256.5999 147.0925 256.5852 146.2548 256.5591 C
147.0008 265.6592 147.538 276.4962 147.9 289.4 C
115.6 289.4 L
115.6 280.6 L
137.7972 280.6 L
137.4302 270.791 136.9951 262.5354 136.4766 255.5985 C
117.5159 252.3776 106.4 241.7627 106.4 230 c
106.4 218.2585 113.7713 211 123.4 211 c
f
0 D
135.6464 246.2617 m
133.277 223.9422 129.5079 220 123.4 220 c
118.6133 220 115.6 223.3291 115.6 230 c
115.6 236.631 122.8013 243.4503 135.6464 246.2617 C
f
*U
*u
1 D
123.9 110.9 m
136.4064 110.9 143.2316 117.4225 146.7497 146.466 C
147.424 146.4868 148.1057 146.5 148.8 146.5 c
155.8046 146.5 161.6495 146.171 166.876 145.4333 C
165.4901 122.3022 161.181 120.4695 148.3 118.3 C
151.1 106.9 L
168.859 110.4107 175.8546 115.1855 178.2745 142.9007 C
182.3028 141.6468 186.1835 140.0367 190.275 138 C
195.1 148 L
189.7064 150.6847 184.4599 152.7153 178.9712 154.2051 C
179.2787 161.6697 179.4001 170.3837 179.4001 180.6 C
167.5001 180.6 L
167.5001 171.152 167.4558 163.2139 167.3028 156.5179 C
161.6876 157.2626 155.6329 157.5999 148.8 157.5999 c
148.48 157.5999 148.1684 157.5892 147.8514 157.5853 C
148.5767 166.5997 149.0958 177.2737 149.45 189.9 C
115.5 189.9 L
115.5 179.1 L
136.8662 179.1 L
136.5167 170.2669 136.1243 162.7697 135.6727 156.4156 C
117.2021 152.9248 106.1 142.1568 106.1 130.5 c
106.1 118.5585 113.9797 110.9 123.9 110.9 c
f
0 D
134.6465 144.8151 m
132.5059 125.5512 129.2618 122 123.9 122 c
119.8478 122 117.5 124.8421 117.5 130.5 c
117.5 136.0231 123.7118 141.9808 134.6465 144.8151 C
f
*U
*u
1 D
180.4001 81.2 m
166.2001 81.2 L
166.2001 71.9785 166.1687 64.2245 166.0437 57.6799 C
160.9578 58.2886 155.498 58.5753 149.4451 58.5943 C
150.1506 67.524 150.6532 78.0372 151 90.4 C
115.4 90.4 L
115.4 77.6 L
135.9312 77.6 L
135.6045 69.7233 135.2554 62.9836 134.8679 57.2131 C
116.8702 53.4521 105.8 42.5472 105.8 31 c
105.8 18.8586 114.188 10.8 124.4 10.8 c
137.4979 10.8 144.492 17.4452 148.1045 45.3906 C
148.3368 45.3932 148.5654 45.4 148.8 45.4 c
155.2868 45.4 160.7091 45.1159 165.5505 44.502 C
164.1971 23.5702 160.108 22.231 148 20.4 C
151.2 6.8 L
169.006 9.9398 176.3694 14.8298 179.0521 41.488 C
182.534 40.3244 185.9252 38.8795 189.5 37.1 C
195.2 49 L
190.1082 51.5346 185.1334 53.4824 179.9597 54.9468 C
180.2735 62.4069 180.4001 71.0797 180.4001 81.2 C
f
0 D
124.4 24 m
121.0822 24 119.4 26.3551 119.4 31 c
119.4 35.4485 124.5989 40.5088 133.6485 43.2895 C
131.7596 27.1259 129.0181 24 124.4 24 c
f
*U
U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
