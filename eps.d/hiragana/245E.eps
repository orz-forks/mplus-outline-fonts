%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (245E.eps)
%%CreationDate: (4/14/04) (11:04 AM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
1 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
500 600 m
500 700 L
400 700 L
400 600 L
500 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
400 600 m
400 700 L
300 700 L
300 600 L
400 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
500 500 m
500 600 L
400 600 L
400 500 L
500 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
400 500 m
400 600 L
300 600 L
300 500 L
400 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
0 Ap
0 O
0 g
59 630 m
59 615.6795 52.0702 609 39 609 c
26.4545 609 19 615.6782 19 625 c
19 634.1553 26.1212 641 39 641 c
57.4109 641 75.999 631.5014 85 618 C
82.5 616.4 L
74.1073 628.9889 56.4994 638 39 638 c
28.1963 638 22 632.8305 22 625 c
22 617.3003 28.3551 612 39 612 c
50.757 612 56 617.5514 56 630 c
56 658 L
17 658 L
17 661 L
56 661 L
56 678 L
13 678 L
13 681 L
56 681 L
56 693 L
59 693 L
59 681 L
87 681 L
87 678 L
59 678 L
59 661 L
83 661 L
83 658 L
59 658 L
59 630 l
f
*u
1 D
192.7 642.3 m
194 645 L
181.5708 651.1869 168.6414 653 149 653 c
121.9196 653 108 641.9537 108 629 c
108 619.0975 114.0051 613 123 613 c
137.1239 613 143.2109 623.2245 145 687 C
117 687 L
117 684 L
144 684 L
142 686.3 L
140.1899 623.5628 133.8227 616 123 616 c
115.3738 616 111 621.1029 111 629 c
111 640.4528 124.4166 650 149 650 c
168.2845 650 180.6411 648.3026 192.7 642.3 C
f
173 679 m
173 619.8702 169.3674 617.0359 150.2 611.9 C
151 609 L
172.7273 614.8218 176 620.0323 176 679 C
173 679 L
f
*U
u
0 D
291.1 665.7 m
283.3125 672.25 277.7183 676.2975 269.4 681.4 C
271 684 L
279.5522 678.754 285.1875 674.625 293 668 C
291.1 665.7 L
f
277 647.6 m
281.3781 614.8009 279.1096 612 254 612 c
232.1667 612 229 613.5083 229 620 c
229 625.3125 233 633.4375 233 649 c
233 659.7803 227.3956 666 220 666 c
211.487 666 207 660.7886 207 649 c
207 637.2114 211.487 632 220 632 c
228.1595 632 233 637.2882 233 649 C
233 676 L
255 676 L
255 679 L
233 679 L
233 693 L
230 693 L
230 679 L
210 679 L
210 676 L
230 676 L
230 657 L
230 649 L
230 636.4513 224.2928 635 220 635 c
215.0551 635 210 636.6633 210 649 c
210 661.3367 215.0551 663 220 663 c
226.0747 663 230 657.5047 230 649 c
230 634.25 226 625.125 226 620 c
226 611.4792 229.618 609 254 609 C
281.3449 609 284.6419 613.2245 280 648 C
277 647.6 L
f
U
*u
1 D
343.314 626.8696 m
336.1042 647.13 329.6702 669.2023 324.9 690.6 C
322 690 L
326.9164 667.9465 333.375 645.75 340.414 625.9696 C
343.314 626.8696 L
f
388 644 m
388 626.8595 378.7371 616.2492 360.5 614 C
361 611 L
380.2498 613.3741 391 624.8217 391 644 c
391 664.1731 375.545 679 353 679 c
326.7065 679 308 660.65 308 638 c
308 622.6903 314.9597 615 324 615 c
339.332 615 361.7627 642.0741 372.9 693.4 C
370 694 L
358.6197 641.5541 336.2365 618 324 618 c
316.3599 618 311 624.6433 311 638 c
311 659.33 328.7229 676 353 676 c
373.9408 676 388 662.5076 388 644 c
f
*U
*u
437 635 m
437 651.7933 437.6579 670.8875 439 693 C
436 693 L
434.6875 671.375 434 652.4721 434 635 C
434 615.4372 439.829 610 460 610 c
480.8489 610 490.9706 619.7652 490 640 C
487 640 L
487.8829 621.5927 479.3938 613 460 613 c
441.2991 613 437 617.1121 437 635 c
f
472 651 m
472 654 L
411 654 L
411 651 L
472 651 L
f
478 676 m
478 679 L
415 679 L
415 676 L
478 676 L
f
*U
u
344.4284 527.7217 m
337.1755 547.9356 330.9231 569.301 326.0834 590.8303 C
321.0333 589.8303 L
326.0212 567.6421 332.348 546.0333 339.495 526.1216 C
344.4284 527.7217 L
f
345.5427 428.5737 m
338.2468 448.7413 332.176 469.3996 327.2667 491.0606 C
320.0666 489.6606 L
325.1259 467.3378 331.3209 446.3165 338.5759 426.2736 C
345.5427 428.5737 L
f
346.657 329.4348 m
339.318 349.556 333.4288 369.5074 328.45 391.3 C
319.1 389.5 L
324.2308 367.0426 330.294 346.6089 337.657 326.4348 C
346.657 329.4348 L
f
347.7714 230.2868 m
340.3893 250.3616 334.6818 269.6061 329.6334 291.5303 C
318.1333 289.3303 L
323.3355 266.7382 329.267 246.8922 336.738 226.5868 C
347.7714 230.2868 L
f
348.8856 131.148 m
341.4606 151.1764 335.9346 169.7138 330.8166 191.7697 C
317.1667 189.1697 L
322.4403 166.443 328.24 147.1846 335.819 126.748 C
348.8856 131.148 L
f
U
u
361 510.3303 m
380.6598 512.7549 391.5 524.4562 391.5 544.3303 c
391.5 564.6509 375.7734 579.6636 353 579.6636 c
326.5208 579.6636 307.5 561.2122 307.5 538.3303 c
307.5 522.3887 314.6797 514.3303 324.1667 514.3303 c
340.1013 514.3303 362.4465 541.1382 373.75 593.2303 C
368.7 594.1636 L
357.726 543.5906 336.0959 519.6637 324.5 519.6637 c
317.6697 519.6637 312.8334 525.757 312.8334 538.3303 c
312.8334 558.3812 329.768 574.3302 353 574.3302 c
372.8891 574.3302 386 561.7992 386 544.3303 c
386 527.6008 377.5135 517.8379 359.9666 515.6137 C
361 510.3303 L
f
361 409.6605 m
381.0698 412.1358 392 424.0906 392 444.6606 c
392 465.1287 376.0019 480.3273 353 480.3273 c
326.3352 480.3273 307 461.7744 307 438.6606 c
307 422.087 314.3998 413.6605 324.3333 413.6605 c
340.8705 413.6605 363.1302 440.2022 374.6 493.0606 C
367.3999 494.3273 L
356.8324 445.627 335.9552 421.3273 325 421.3273 c
318.9795 421.3273 314.6668 426.8707 314.6668 438.6606 c
314.6668 457.4324 330.8132 472.6605 353 472.6605 c
371.8373 472.6605 383.9999 461.0909 383.9999 444.6606 c
383.9999 428.3422 376.2899 419.4267 359.4333 417.2273 C
361 409.6605 L
f
361 309 m
381.4798 311.5258 392.5 323.7343 392.5 345 c
392.5 365.6156 376.2304 381 353 381 c
326.1495 381 306.5 362.3457 306.5 339 c
306.5 321.7946 314.1199 313 324.5 313 c
341.6397 313 363.8139 339.2755 375.45 392.9 C
366.1 394.5 L
355.9388 347.6725 335.8146 323 325.5 323 c
320.2892 323 316.5 327.9934 316.5 339 c
316.5 356.4929 331.8583 371 353 371 c
370.7857 371 382 360.3917 382 345 c
382 329.0926 375.0664 321.0244 358.9 318.85 C
361 309 L
f
361 208.3303 m
381.8899 210.9066 393 223.3688 393 245.3303 c
393 266.0934 376.4588 281.6636 353 281.6636 c
325.9638 281.6636 306 262.9079 306 239.3303 c
306 221.4929 313.8399 212.3303 324.6667 212.3303 c
342.409 212.3303 364.4976 238.3395 376.3 292.7303 C
364.8 294.6636 L
355.0451 249.7089 335.6739 224.6637 326 224.6637 c
321.599 224.6637 318.3334 229.1072 318.3334 239.3303 c
318.3334 255.5441 332.9035 269.3302 353 269.3302 c
369.734 269.3302 380 259.6833 380 245.3303 c
380 229.8339 373.8428 222.6132 358.3666 220.4637 C
361 208.3303 L
f
361 107.6697 m
382.2998 110.2967 393.5 123.0124 393.5 145.6697 c
393.5 166.5803 376.6872 182.3364 353 182.3364 c
325.7782 182.3364 305.5 163.4792 305.5 139.6697 c
305.5 121.2005 313.56 111.6697 324.8333 111.6697 c
343.1782 111.6697 365.1813 137.4129 377.15 192.5697 C
363.5 194.8364 L
354.1515 151.7544 335.5333 126.3363 326.5 126.3363 c
322.9087 126.3363 320.1666 130.2299 320.1666 139.6697 c
320.1666 154.6046 333.9485 167.6698 353 167.6698 c
368.6823 167.6698 378.0001 158.9842 378.0001 145.6697 c
378.0001 130.5843 372.6194 124.2109 357.8334 122.0863 C
361 107.6697 L
f
U
*u
350 32 m
342.5319 51.982 337.1875 69.8125 332 92 C
316.2 89 L
321.5451 66.1387 327.213 47.4678 334.9 26.9 C
350 32 L
f
361 7 m
382.7099 9.6775 394 22.6469 394 46 c
394 67.0581 376.9157 83 353 83 c
325.5925 83 305 64.0414 305 40 c
305 20.8988 313.2801 11 325 11 c
343.9475 11 365.8651 36.4769 378 92.4 C
362.2 95 L
353.2579 53.7908 335.3927 28 327 28 c
324.2185 28 322 31.3436 322 40 c
322 53.6558 334.9937 66 353 66 c
367.6306 66 376 58.2758 376 46 c
376 31.3256 371.3958 25.7996 357.3 23.7 C
361 7 L
f
*U
u
0 D
290.3833 564.6969 m
282.457 571.0849 276.3428 575.3516 267.9666 580.4469 C
270.8333 584.997 L
279.5122 579.7191 285.5729 575.4345 293.5 568.997 C
290.3833 564.6969 L
f
289.6666 463.6939 m
281.6015 469.9198 274.9672 474.4057 266.5332 479.4938 C
270.6667 485.994 L
279.4723 480.6841 285.9584 476.244 294 469.994 C
289.6666 463.6939 L
f
288.95 362.7 m
280.746 368.764 273.5918 373.469 265.1 378.55 C
270.5 387 L
279.4323 381.6582 286.3437 377.0625 294.5 371 C
288.95 362.7 L
f
288.2333 261.6969 m
279.8905 267.5989 272.2162 272.523 263.6666 277.5969 C
270.3333 287.997 L
279.3924 282.6233 286.7292 277.872 295 271.997 C
288.2333 261.6969 L
f
287.5167 160.7031 m
279.035 166.4431 270.8408 171.5864 262.2334 176.6531 C
270.1667 189.003 L
279.3524 183.5975 287.1146 178.6905 295.5 173.003 C
287.5167 160.7031 L
f
U
u
54.6666 530.1636 m
54.6666 556.6636 L
16.6667 556.6636 L
16.6667 561.8303 L
54.6666 561.8303 L
54.6666 576.6636 L
12.6667 576.6636 L
12.6667 581.8303 L
54.6666 581.8303 L
54.6666 593.1636 L
60.1667 593.1636 L
60.1667 581.8303 L
87.3334 581.8303 L
87.3334 576.6636 L
60.1667 576.6636 L
60.1667 561.8303 L
83.3334 561.8303 L
83.3334 556.6636 L
60.1667 556.6636 L
60.1667 530.1636 l
60.1667 515.5616 52.8453 508.6636 39 508.6636 c
25.9061 508.6636 18.3333 515.5466 18.3333 525.3303 c
18.3333 534.9753 25.6284 541.997 39 541.997 c
57.3634 541.997 76.2053 532.488 85.5 518.997 C
81.25 515.8303 L
72.8795 528.0397 55.6293 536.8303 39 536.8303 c
29.1747 536.8303 23.8334 532.1682 23.8334 525.3303 c
23.8334 518.6015 29.307 513.8303 39 513.8303 c
49.8952 513.8303 54.6666 518.7486 54.6666 530.1636 c
f
53.3332 430.3273 m
53.3332 455.3272 L
16.3333 455.3272 L
16.3333 462.6606 L
53.3332 462.6606 L
53.3332 475.3272 L
12.3333 475.3272 L
12.3333 482.6606 L
53.3332 482.6606 L
53.3332 493.3273 L
61.3334 493.3273 L
61.3334 482.6606 L
87.6667 482.6606 L
87.6667 475.3272 L
61.3334 475.3272 L
61.3334 462.6606 L
83.6667 462.6606 L
83.6667 455.3272 L
61.3334 455.3272 L
61.3334 430.3273 l
61.3334 415.4438 53.6203 408.3272 39 408.3272 c
25.3577 408.3272 17.6666 415.4151 17.6666 425.6606 c
17.6666 435.7953 25.1355 442.994 39 442.994 c
57.316 442.994 76.4116 433.4746 86 419.994 C
79.9999 415.2605 L
71.6518 427.0906 54.7592 435.6605 39 435.6605 c
30.1531 435.6605 25.6668 431.5059 25.6668 425.6606 c
25.6668 419.9026 30.259 415.6607 39 415.6607 c
49.0333 415.6607 53.3332 419.9458 53.3332 430.3273 c
f
52 330.5 m
52 354 L
16 354 L
16 363.5 L
52 363.5 L
52 374 L
12 374 L
12 383.5 L
52 383.5 L
52 393.5 L
62.5 393.5 L
62.5 383.5 L
88 383.5 L
88 374 L
62.5 374 L
62.5 363.5 L
84 363.5 L
84 354 L
62.5 354 L
62.5 330.5 l
62.5 315.3351 54.3953 308 39 308 c
24.8094 308 17 315.2927 17 326 c
17 336.6243 24.6428 344 39 344 c
57.2686 344 76.6179 334.4703 86.5 321 C
78.75 314.7 L
70.4242 326.1506 53.8892 334.5 39 334.5 c
31.1315 334.5 27.5 330.8527 27.5 326 c
27.5 321.2128 31.2109 317.5 39 317.5 c
48.1716 317.5 52 321.1521 52 330.5 c
f
50.6666 230.6636 m
50.6666 252.6636 L
15.6667 252.6636 L
15.6667 264.3303 L
50.6666 264.3303 L
50.6666 272.6636 L
11.6667 272.6636 L
11.6667 284.3303 L
50.6666 284.3303 L
50.6666 293.6636 L
63.6667 293.6636 L
63.6667 284.3303 L
88.3334 284.3303 L
88.3334 272.6636 L
63.6667 272.6636 L
63.6667 264.3303 L
84.3334 264.3303 L
84.3334 252.6636 L
63.6667 252.6636 L
63.6667 230.6636 l
63.6667 215.2172 55.1704 207.6636 39 207.6636 c
24.261 207.6636 16.3333 215.1611 16.3333 226.3303 c
16.3333 237.4443 24.1499 244.997 39 244.997 c
57.2211 244.997 76.8242 235.4569 87 221.997 C
77.5 214.1303 L
69.1964 225.2015 53.0191 233.3303 39 233.3303 c
32.1099 233.3303 29.3334 230.1904 29.3334 226.3303 c
29.3334 222.5139 32.1629 219.3303 39 219.3303 c
47.3097 219.3303 50.6666 222.3493 50.6666 230.6636 c
f
49.3334 130.8364 m
49.3334 151.3364 L
15.3334 151.3364 L
15.3334 165.1697 L
49.3334 165.1697 L
49.3334 171.3364 L
11.3334 171.3364 L
11.3334 185.1697 L
49.3334 185.1697 L
49.3334 193.8364 L
64.8333 193.8364 L
64.8333 185.1697 L
88.6667 185.1697 L
88.6667 171.3364 L
64.8333 171.3364 L
64.8333 165.1697 L
84.6667 165.1697 L
84.6667 151.3364 L
64.8333 151.3364 L
64.8333 130.8364 l
64.8333 115.1085 55.9454 107.3364 39 107.3364 c
23.7127 107.3364 15.6667 115.0387 15.6667 126.6697 c
15.6667 138.2734 23.6571 146.003 39 146.003 c
57.1737 146.003 77.0305 136.4526 87.5 123.003 C
76.25 113.5697 L
67.9688 124.2615 52.149 132.1698 39 132.1698 c
33.0883 132.1698 31.1666 129.5373 31.1666 126.6697 c
31.1666 123.8241 33.1147 121.1697 39 121.1697 c
46.4479 121.1697 49.3334 123.5556 49.3334 130.8364 c
f
U
48 31 m
48 50 L
15 50 L
15 66 L
48 66 L
48 70 L
11 70 L
11 86 L
48 86 L
48 94 L
66 94 L
66 86 L
89 86 L
89 70 L
66 70 L
66 66 L
85 66 L
85 50 L
66 50 L
66 31 l
66 14.9906 56.7204 7 39 7 c
23.1643 7 15 14.9072 15 27 c
15 39.0933 23.1643 47 39 47 c
57.1262 47 77.2368 37.4392 88 24 C
75 13 L
66.7411 23.3124 51.279 31 39 31 c
34.0667 31 33 28.875 33 27 c
33 25.1253 34.0667 23 39 23 c
45.5861 23 48 24.7528 48 31 c
f
u
1 D
192.1394 541.2279 m
194.2228 545.9446 L
181.7986 552.0694 168.9682 553.997 149 553.997 c
121.5617 553.997 107.5 542.6705 107.5 528.997 c
107.5 518.7675 113.7654 512.4969 123 512.4969 c
138.0428 512.4969 144.6969 523.2228 146.5001 587.497 C
116.5 587.497 L
116.5 582.3302 L
144.3334 582.3302 L
140.9666 586.0803 L
139.1847 525.9365 133.0901 517.6637 123.3334 517.6637 c
116.6461 517.6637 112.8334 522.0483 112.8334 528.997 c
112.8334 539.8727 125.3914 548.8303 149 548.8303 c
168.2775 548.8303 180.2041 547.1146 192.1394 541.2279 C
f
191.5789 440.1557 m
194.4456 446.8892 L
182.0264 452.9519 169.295 454.994 149 454.994 c
121.2037 454.994 107 443.3873 107 428.9939 c
107 418.4374 113.5257 411.9939 123 411.9939 c
138.9616 411.9939 146.183 423.2212 148.0001 487.9939 C
116 487.9939 L
116 480.6605 L
144.6667 480.6605 L
139.9333 485.8605 L
138.1795 428.3101 132.3575 419.3273 123.6667 419.3273 c
117.9184 419.3273 114.6668 422.9937 114.6668 428.9939 c
114.6668 439.2925 126.3661 447.6605 149 447.6605 c
168.2706 447.6605 179.767 445.9265 191.5789 440.1557 C
f
191.0184 339.0928 m
194.6684 347.8428 L
182.2541 353.8434 169.6218 356 149 356 c
120.8458 356 106.5 344.1131 106.5 329 c
106.5 318.1165 113.286 311.5 123 311.5 c
139.8804 311.5 147.6689 323.2286 149.5 388.5 C
115.5 388.5 L
115.5 379 L
145 379 L
138.9 385.65 L
137.1744 330.6928 131.625 321 124 321 c
119.1907 321 116.5 323.9481 116.5 329 c
116.5 338.7216 127.3408 346.5 149 346.5 c
168.2637 346.5 179.33 344.7478 191.0184 339.0928 C
f
190.4579 238.0207 m
194.8912 248.7874 L
182.4819 254.7259 169.9486 256.997 149 256.997 c
120.4879 256.997 106 244.8299 106 228.997 c
106 217.7865 113.0463 210.9969 123 210.9969 c
140.7993 210.9969 149.155 223.227 151.0001 288.997 C
115 288.997 L
115 277.3302 L
145.3334 277.3302 L
137.8666 285.4303 L
136.1692 233.0664 130.8925 222.6637 124.3334 222.6637 c
120.463 222.6637 118.3334 224.8935 118.3334 228.997 c
118.3334 238.1415 128.3155 245.3303 149 245.3303 c
168.2567 245.3303 178.8929 243.5597 190.4579 238.0207 C
f
189.8974 136.9578 m
195.114 149.7411 L
182.7097 155.6175 170.2753 158.003 149 158.003 c
120.13 158.003 105.5 145.5558 105.5 129.0031 c
105.5 117.4656 112.8067 110.5031 123 110.5031 c
141.718 110.5031 150.6409 123.2345 152.5 189.503 C
114.5 189.503 L
114.5 175.6698 L
145.6667 175.6698 L
136.8334 185.2197 L
135.1641 135.449 130.16 124.3363 124.6667 124.3363 c
121.7352 124.3363 120.1666 125.848 120.1666 129.0031 c
120.1666 137.5706 129.2902 144.1698 149 144.1698 c
168.2498 144.1698 178.4559 142.381 189.8974 136.9578 C
f
U
u
171.5 579.497 m
171.5 521.0199 168.4357 518.6231 149.6794 513.5974 C
151.2961 508.514 L
173.6249 514.4969 177 519.7366 177 579.497 C
171.5 579.497 L
f
169.9999 479.9939 m
169.9999 422.1696 167.5041 420.2104 149.1588 415.2947 C
151.5922 408.0279 L
174.5225 414.1721 178.0001 419.4408 178.0001 479.9939 C
169.9999 479.9939 L
f
168.5 380.5 m
168.5 323.3283 166.5725 321.8066 148.6382 317.0011 C
151.8882 307.5511 L
175.4199 313.8564 179 319.1542 179 380.5 C
168.5 380.5 L
f
167 280.997 m
167 224.478 165.6409 223.3938 148.1176 218.6985 C
152.1843 207.0651 L
176.3175 213.5315 180 218.8585 180 280.997 C
167 280.997 L
f
165.5001 181.503 m
165.5001 125.6367 164.7093 124.9901 147.597 120.4049 C
152.4804 106.5883 L
177.215 113.2159 181 118.5719 181 181.503 C
165.5001 181.503 L
f
U
*u
164 82 m
164 26.7864 163.7777 26.5773 147.0764 22.1022 C
152.7764 6.1022 L
178.1126 12.891 182 18.2762 182 82 C
164 82 L
f
135.8 85 m
134.1589 37.8227 129.4274 26 125 26 c
123.0075 26 122 26.7934 122 29 c
122 36.9904 130.265 43 149 43 c
168.2428 43 178.0189 41.193 189.3368 35.8857 C
195.3368 50.6857 L
182.9375 56.5 170.6021 59 149 59 c
119.772 59 105 46.2726 105 29 c
105 17.1356 112.567 10 123 10 c
142.6369 10 152.127 23.2328 154 90 C
114 90 L
114 74 L
146 74 L
135.8 85 L
f
*U
u
472.3334 549.8303 m
472.3334 554.997 L
410.5 554.997 L
410.5 549.8303 L
472.3334 549.8303 L
f
472.6667 448.6605 m
472.6667 455.994 L
410 455.994 L
410 448.6605 L
472.6667 448.6605 L
f
473 347.5 m
473 357 L
409.5 357 L
409.5 347.5 L
473 347.5 L
f
473.3334 246.3303 m
473.3334 257.997 L
409 257.997 L
409 246.3303 L
473.3334 246.3303 L
f
473.6667 145.1698 m
473.6667 159.003 L
408.5 159.003 L
408.5 145.1698 L
473.6667 145.1698 L
f
U
u
438.6667 534.997 m
438.6667 551.8184 439.3304 571.1458 440.6667 593.1636 C
435.1667 593.1636 L
433.848 571.437 433.1667 552.3763 433.1667 534.997 C
433.1667 515.1619 439.1986 509.4969 460 509.4969 c
481.1735 509.4969 491.4923 519.4773 490.5 540.1636 C
485.1666 540.1636 L
486.0168 522.4375 478.341 514.6637 460 514.6637 c
442.4726 514.6637 438.6667 518.2584 438.6667 534.997 c
f
440.3334 434.9939 m
440.3334 451.8434 441.0028 471.4042 442.3334 493.3273 C
434.3333 493.3273 L
433.0084 471.499 432.3333 452.2805 432.3333 434.9939 C
432.3333 414.8866 438.5682 408.9939 460 408.9939 c
481.498 408.9939 492.0139 419.1894 491 440.3273 C
483.3332 440.3273 L
484.1508 423.2823 477.2881 416.3273 460 416.3273 c
443.6462 416.3273 440.3334 419.4046 440.3334 434.9939 c
f
442 335 m
442 351.8777 442.6752 371.6716 444 393.5 C
433.5 393.5 L
432.169 371.5702 431.5 352.1939 431.5 335 C
431.5 314.6205 437.938 308.5 460 308.5 c
481.8226 308.5 492.5356 318.9107 491.5 340.5 C
481.5 340.5 L
482.2849 324.1361 476.2354 318 460 318 c
444.8196 318 442 320.5599 442 335 c
f
443.6667 234.997 m
443.6667 251.9028 444.3476 271.9299 445.6667 293.6636 C
432.6667 293.6636 L
431.3295 271.6322 430.6667 252.0981 430.6667 234.997 C
430.6667 214.3452 437.3076 207.9969 460 207.9969 c
482.1471 207.9969 493.0572 218.6228 492 240.6636 C
479.6666 240.6636 L
480.4188 224.9809 475.1825 219.6637 460 219.6637 c
445.9932 219.6637 443.6667 221.7062 443.6667 234.997 c
f
445.3333 135.0031 m
445.3333 151.937 446.0199 172.1974 447.3333 193.8364 C
431.8334 193.8364 L
430.49 171.7033 429.8334 152.0115 429.8334 135.0031 C
429.8334 114.079 436.6773 107.5031 460 107.5031 c
482.4717 107.5031 493.5789 118.3441 492.5 140.8364 C
477.8334 140.8364 L
478.5529 125.8348 474.1298 121.3363 460 121.3363 c
447.1666 121.3363 445.3333 122.8615 445.3333 135.0031 c
f
U
u
478.5 574.6636 m
478.5 579.8303 L
414.5 579.8303 L
414.5 574.6636 L
478.5 574.6636 L
f
479 473.3271 m
479 480.6606 L
414 480.6606 L
414 473.3271 L
479 473.3271 L
f
479.5 372 m
479.5 381.5 L
413.5 381.5 L
413.5 372 L
479.5 372 L
f
480 270.6636 m
480 282.3303 L
413 282.3303 L
413 270.6636 L
480 270.6636 L
f
480.5 169.3364 m
480.5 183.1697 L
412.5 183.1697 L
412.5 169.3364 L
480.5 169.3364 L
f
U
*u
476 41 m
476.6869 26.6796 473.0769 23 460 23 c
448.3402 23 447 24.0078 447 35 c
447 51.9621 447.6924 72.4557 449 94 C
431 94 L
429.6505 71.7654 429 51.9157 429 35 c
429 13.8037 436.0469 7 460 7 c
482.7962 7 494.1005 18.0562 493 41 C
476 41 L
f
474 44 m
474 60 L
408 60 L
408 44 L
474 44 L
f
481 68 m
481 84 L
412 84 L
412 68 L
481 68 L
f
*U
u
0 D
275.8 548.247 m
279.9758 516.22 278.0431 513.8303 254.1667 513.8303 c
233.8114 513.8303 231.1667 515.0963 231.1667 520.8303 c
231.1667 525.9136 235.0001 533.299 235.0001 548.3302 c
235.0001 559.1547 228.137 565.9969 220 565.9969 c
211.122 565.9969 206.5 560.3982 206.5 548.3302 c
206.5 536.2624 211.122 530.6636 220 530.6636 c
228.904 530.6636 235.0001 536.5705 235.0001 548.3302 C
235.0001 574.9969 L
255.3333 574.9969 L
255.3333 580.1636 L
235.0001 580.1636 L
235.0001 593.3303 L
229.5 593.3303 L
229.5 580.1636 L
209.8333 580.1636 L
209.8333 574.9969 L
229.5 574.9969 L
229.5 557.1636 L
229.6667 548.3302 L
229.6667 537.051 224.7439 535.4969 220.6667 535.4969 c
216.0904 535.4969 211.6667 537.0943 211.6667 548.3302 c
211.6667 559.5662 216.0904 561.1635 220.6667 561.1635 c
226.2288 561.1635 229.6667 556.2396 229.6667 548.3302 c
229.6667 533.6949 225.3333 525.3928 225.3333 519.6636 c
225.3333 511.1448 229.007 508.6636 254.1667 508.6636 C
282.3576 508.6636 285.9325 513.1263 281.1667 548.8303 C
275.8 548.247 L
f
274.5999 448.8939 m
278.5734 417.6392 276.9767 415.6607 254.3333 415.6607 c
235.4562 415.6607 233.3335 416.6843 233.3335 421.6606 c
233.3335 426.5148 237.0001 433.1605 237.0001 447.6605 c
237.0001 458.5292 228.8785 465.9939 220 465.9939 c
210.757 465.9939 206 460.0078 206 447.6605 c
206 435.3133 210.757 429.3271 220 429.3271 c
229.6486 429.3271 237.0001 435.8528 237.0001 447.6605 C
237.0001 473.9938 L
255.6667 473.9938 L
255.6667 481.3273 L
237.0001 481.3273 L
237.0001 493.6606 L
229 493.6606 L
229 481.3273 L
209.6667 481.3273 L
209.6667 473.9938 L
229 473.9938 L
229 457.3272 L
229.3333 447.6605 L
229.3333 437.6506 225.195 435.9939 221.3334 435.9939 c
217.1258 435.9939 213.3334 437.5253 213.3334 447.6605 c
213.3334 457.7958 217.1258 459.3271 221.3334 459.3271 c
226.383 459.3271 229.3333 454.9745 229.3333 447.6605 c
229.3333 433.1397 224.6666 425.6606 224.6666 419.3272 c
224.6666 410.8105 228.3959 408.3272 254.3333 408.3272 C
283.3702 408.3272 287.2231 413.0282 282.3334 449.6606 C
274.5999 448.8939 L
f
273.4 349.55 m
277.1712 319.0674 275.9103 317.5 254.5 317.5 c
237.1008 317.5 235.5 318.2813 235.5 322.5 c
235.5 327.125 239 333.0312 239 347 c
239 357.9128 229.6198 366 220 366 c
210.392 366 205.5 359.6266 205.5 347 c
205.5 334.3735 210.392 328 220 328 c
230.393 328 239 335.1444 239 347 C
239 373 L
256 373 L
256 382.5 L
239 382.5 L
239 394 L
228.5 394 L
228.5 382.5 L
209.5 382.5 L
209.5 373 L
228.5 373 L
228.5 357.5 L
229 347 L
229 338.2594 225.6461 336.5 222 336.5 c
218.1611 336.5 215 337.9654 215 347 c
215 356.0346 218.1611 357.5 222 357.5 c
226.5371 357.5 229 353.7186 229 347 c
229 332.5937 224 325.9375 224 319 c
224 310.4853 227.785 308 254.5 308 C
284.3828 308 288.5136 312.9392 283.5 350.5 C
273.4 349.55 L
f
272.2 250.1969 m
275.7689 220.4865 274.8439 219.3303 254.6667 219.3303 c
238.7455 219.3303 237.6667 219.8693 237.6667 223.3303 c
237.6667 227.7261 241.0001 232.8928 241.0001 246.3302 c
241.0001 257.2873 230.3613 265.9969 220 265.9969 c
210.027 265.9969 205 259.2362 205 246.3302 c
205 233.4245 210.027 226.6636 220 226.6636 c
231.1376 226.6636 241.0001 234.4267 241.0001 246.3302 C
241.0001 271.9969 L
256.3333 271.9969 L
256.3333 283.6636 L
241.0001 283.6636 L
241.0001 294.3303 L
228 294.3303 L
228 283.6636 L
209.3333 283.6636 L
209.3333 271.9969 L
228 271.9969 L
228 257.6636 L
228.6667 246.3302 L
228.6667 238.8591 226.0973 236.9969 222.6667 236.9969 c
219.1964 236.9969 216.6667 238.3964 216.6667 246.3302 c
216.6667 254.2642 219.1964 255.6635 222.6667 255.6635 c
226.6912 255.6635 228.6667 252.4535 228.6667 246.3302 c
228.6667 232.0386 223.3333 226.2053 223.3333 218.6636 c
223.3333 210.1509 227.174 207.6636 254.6667 207.6636 C
285.3955 207.6636 289.8043 212.8411 284.6667 251.3303 C
272.2 250.1969 L
f
271 150.853 m
274.3666 121.9147 273.7775 121.1696 254.8333 121.1696 c
240.3901 121.1696 239.8333 121.4663 239.8333 124.1697 c
239.8333 128.3363 242.9999 132.7635 242.9999 145.6697 c
242.9999 156.6709 231.1026 166.003 220 166.003 c
209.662 166.003 204.5 158.855 204.5 145.6697 c
204.5 132.4847 209.662 125.3364 220 125.3364 c
231.882 125.3364 242.9999 133.7182 242.9999 145.6697 C
242.9999 171.0031 L
256.6667 171.0031 L
256.6667 184.8363 L
242.9999 184.8363 L
242.9999 194.6697 L
227.5 194.6697 L
227.5 184.8363 L
209.1667 184.8363 L
209.1667 171.0031 L
227.5 171.0031 L
227.5 157.8364 L
228.3333 145.6697 L
228.3333 139.4678 226.5484 137.503 223.3333 137.503 c
220.2316 137.503 218.3333 138.8366 218.3333 145.6697 c
218.3333 152.503 220.2316 153.8364 223.3333 153.8364 c
226.8453 153.8364 228.3333 151.1977 228.3333 145.6697 c
228.3333 131.4926 222.6667 126.4822 222.6667 118.3364 c
222.6667 109.8257 226.563 107.3364 254.8333 107.3364 C
286.4081 107.3364 291.0948 112.7521 285.8333 152.1697 C
271 150.853 L
f
U
u
296 74 m
287.5 79.5 279.3125 84.5625 270 90 C
260.8 75.7 L
269.4653 70.6404 278.1795 65.278 286.8 59.7 C
296 74 L
f
224 38 m
221.267 38 220 39.2676 220 45 c
220 50.7326 221.267 52 224 52 c
226.9995 52 228 49.9326 228 45 c
228 30.9375 222 26.75 222 18 c
222 9.4914 225.952 7 255 7 c
287.4208 7 292.3854 12.654 287 53 C
269.8 51.5 L
272.9643 23.3339 272.7111 23 255 23 c
242.0349 23 242 23.0543 242 25 c
242 28.9375 245 32.625 245 45 c
245 56.0454 231.8441 66 220 66 c
209.297 66 204 58.4646 204 45 c
204 31.5357 209.297 24 220 24 c
232.6266 24 245 33.0006 245 45 C
245 70 L
257 70 L
257 86 L
245 86 L
245 95 L
227 95 L
227 86 L
209 86 L
209 70 L
227 70 L
227 58 L
228 45 L
228 40.0675 226.9995 38 224 38 c
f
U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
