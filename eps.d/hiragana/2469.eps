%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (2469.eps)
%%CreationDate: (12/9/04) (1:07 PM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
500 600 m
500 700 L
400 700 L
400 600 L
500 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
400 600 m
400 700 L
300 700 L
300 600 L
400 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
500 500 m
500 600 L
400 600 L
400 500 L
500 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
400 500 m
400 600 L
300 600 L
300 500 L
400 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
0 O
0 g
1 D
330 608 m
333 608 L
333 693 L
330 693 L
330 677 L
307 677 L
307 674 L
330 674 L
330 608 L
f
u
20.7834 538.0969 m
22.7484 550.2233 24.1907 559.9622 25.8334 572.0469 C
20.3333 572.4969 L
18.7708 560.8824 17.375 551.4865 15.3333 538.9969 C
20.7834 538.0969 L
f
22.5668 437.5939 m
24.5113 449.5125 26.0027 459.4161 27.6668 471.3939 C
19.6666 471.9939 L
18.1041 460.5147 16.6875 451.1605 14.6666 438.9939 C
22.5668 437.5939 L
f
24.35 337.1 m
26.274 348.8108 27.8144 358.8792 29.5 370.75 C
19 371.5 L
17.4375 360.1562 16 350.8437 14 339 C
24.35 337.1 L
f
26.1334 236.5969 m
28.0369 248.1 29.6263 258.333 31.3334 270.0969 C
18.3333 270.9969 L
16.7708 259.7886 15.3125 250.5178 13.3333 238.9969 C
26.1334 236.5969 L
f
27.9166 136.1031 m
29.7996 147.3984 31.4381 157.7961 33.1666 169.4531 C
17.6667 170.503 L
16.1042 159.4301 14.625 150.201 12.6667 139.003 C
27.9166 136.1031 L
f
U
u
329.1667 507.8303 m
334.6667 507.8303 L
334.6667 593.1636 L
329.1667 593.1636 L
329.1667 577.6636 L
306.6667 577.6636 L
306.6667 572.4969 L
329.1667 572.4969 L
329.1667 507.8303 L
f
328.3333 407.6605 m
336.3334 407.6605 L
336.3334 493.3272 L
328.3333 493.3272 L
328.3333 478.3273 L
306.3333 478.3273 L
306.3333 470.9938 L
328.3333 470.9938 L
328.3333 407.6605 L
f
327.5 307.5 m
338 307.5 L
338 393.5 L
327.5 393.5 L
327.5 379 L
306 379 L
306 369.5 L
327.5 369.5 L
327.5 307.5 L
f
326.6667 207.3303 m
339.6667 207.3303 L
339.6667 293.6636 L
326.6667 293.6636 L
326.6667 279.6636 L
305.6667 279.6636 L
305.6667 267.9969 L
326.6667 267.9969 L
326.6667 207.3303 L
f
325.8334 107.1697 m
341.3333 107.1697 L
341.3333 193.8364 L
325.8334 193.8364 L
325.8334 180.3363 L
305.3334 180.3363 L
305.3334 166.5031 L
325.8334 166.5031 L
325.8334 107.1697 L
f
U
325 7 m
343 7 L
343 94 L
325 94 L
325 81 L
305 81 L
305 65 L
325 65 L
325 7 L
f
379.9959 48.843 m
381.5508 78.5131 377.3899 85 366 85 c
353.4313 85 334.9187 72.6451 302 34.2 C
314.913 23.1432 L
341.0887 53.7132 357.846 66.248 361 65.1 c
362.0921 64.7025 362.6355 61.4935 362.0192 49.7328 c
360.4185 19.1925 365.2767 11 376 11 c
384.7437 11 392.2698 14.0127 398 20 C
390.4 33.6 L
383.5291 28.5226 382.274 28.205 380.8 28.6 c
380.0018 28.8139 379.2411 34.4415 379.9959 48.843 c
f
274 685.6 m
253.1636 672.0103 231.3263 658.1421 212.4 646.5 C
214 644 L
233.6324 656.0764 255.75 670.125 277 684 C
277 687 L
224 687 L
224 684 L
274 684 L
274 685.6 L
f
u
274 585.8636 m
252.6197 572.4638 231.7407 559.4591 211.7333 547.4136 C
214.3 543.1802 L
234.7666 555.5189 255.8854 568.6635 277.6667 582.3302 C
277.6667 587.4969 L
223.3333 587.4969 L
223.3333 582.4969 L
274.5 582.4969 L
274 585.8636 L
f
274 486.1272 m
252.0758 472.9173 232.1551 460.7762 211.0666 448.3273 C
214.6 442.3605 L
235.9008 454.9614 256.0208 467.2021 278.3334 480.6604 C
278.3334 487.9939 L
222.6666 487.9939 L
222.6666 480.9938 L
275 480.9938 L
274 486.1272 L
f
274 386.4 m
251.532 373.3799 232.5694 362.1023 210.4 349.25 C
214.9 341.55 L
237.0349 354.4132 256.1562 365.75 279 379 C
279 388.5 L
222 388.5 L
222 379.5 L
275.5 379.5 L
274 386.4 L
f
274 286.6636 m
250.9881 273.8334 232.9838 263.4193 209.7333 250.1636 C
215.2 240.7302 L
238.1692 253.8557 256.2917 264.2886 279.6667 277.3302 C
279.6667 288.9969 L
221.3333 288.9969 L
221.3333 277.9969 L
276 277.9969 L
274 286.6636 L
f
274 186.9364 m
250.4443 174.2961 233.3981 164.7454 209.0667 151.0863 C
215.5 139.9197 L
239.3033 153.3074 256.4271 162.8364 280.3333 175.6697 C
280.3333 189.503 L
220.6667 189.503 L
220.6667 176.5031 L
276.5 176.5031 L
274 186.9364 L
f
U
274 87.2 m
249.9004 74.7496 233.8125 66.0625 208.4 52 C
215.8 39.1 L
240.4375 52.75 256.5625 61.375 281 74 C
281 90 L
220 90 L
220 75 L
277 75 L
274 87.2 L
f
29.6 685 m
45.1135 682.8489 57.3891 682 72 682 C
72 685 L
57.018 685 44.875 685.9375 30 688 C
29.6 685 L
f
19 638.6 m
20.9855 650.9342 22.3788 660.5084 24 672.7 C
21 673 L
19.4375 661.25 18.0625 651.8125 16 639 C
19 638.6 L
f
474 685.6 m
452.9167 672.25 431.1667 658 412.4 645.5 C
414 643 L
433.1875 655.8125 454.8125 669.875 477 684 C
477 687 L
425 687 L
425 684 L
474 684 L
474 685.6 L
f
482 637 m
482 623.5248 470.8644 615 448 615 c
440.1251 615 433.033 615.6934 426.5 617 C
426 614 L
432.5625 612.6875 439.6598 612 448 612 c
472.2345 612 485 621.5794 485 637 c
485 650.0476 475.4878 658 456 658 C
445.2991 658 429.0671 653.5625 412.4 645.5 C
414 643 L
429.7258 650.5369 445.7355 655 456 655 c
473.5275 655 482 648.2105 482 637 c
f
u
28.7666 583.3302 m
44.6896 581.1855 57.6154 580.3302 72.8334 580.3302 C
72.8334 585.4969 L
57.4317 585.4969 44.6597 586.431 29.3333 588.4969 C
28.7666 583.3302 L
f
27.9333 481.6604 m
44.2657 479.5222 57.8417 478.6604 73.6667 478.6604 C
73.6667 485.9939 L
57.8454 485.9939 44.4444 486.9245 28.6666 488.9939 C
27.9333 481.6604 L
f
27.1 380 m
43.8419 377.8682 58.068 377 74.5 377 C
74.5 386.5 L
58.259 386.5 44.2292 387.4271 28 389.5 C
27.1 380 L
f
26.2666 278.3302 m
43.4179 276.2049 58.2943 275.3302 75.3334 275.3302 C
75.3334 286.9969 L
58.6727 286.9969 44.0139 287.9206 27.3333 289.9969 C
26.2666 278.3302 L
f
25.4333 176.6697 m
42.9941 174.5509 58.5206 173.6697 76.1667 173.6697 C
76.1667 187.503 L
59.0863 187.503 43.7986 188.4232 26.6667 190.503 C
25.4333 176.6697 L
f
U
24.6 75 m
42.5702 72.8876 58.7469 72 77 72 C
77 88 L
59.5 88 43.5833 88.9167 26 91 C
24.6 75 L
f
29.7 35.6 m
31.5625 46.6875 33.25 57.25 35 68.8 C
17 70 L
15.4375 59.0625 13.9375 49.875 12 39 C
29.7 35.6 L
f
u
480.1666 536.9969 m
480.1666 524.6876 469.7382 516.8303 448 516.8303 c
440.358 516.8303 432.7409 517.5472 426.1167 518.8303 C
425.3333 513.5136 L
431.9792 512.2261 439.6707 511.4969 448 511.4969 c
472.4742 511.4969 485.6667 521.4465 485.6667 537.1636 c
485.6667 550.4412 476.0002 558.4969 456 558.4969 C
445.3539 558.4969 429.218 554.1184 412.2333 546.0803 C
414.3 541.8469 L
430.7918 549.6115 444.7979 553.4969 456 553.4969 c
472.3314 553.4969 480.1666 547.2303 480.1666 536.9969 c
f
478.3332 436.9939 m
478.3332 425.8506 468.612 418.6607 448 418.6607 c
440.5908 418.6607 432.4488 419.4011 425.7333 420.6607 C
424.6666 413.0272 L
431.3958 411.7647 439.6816 410.9938 448 410.9938 c
472.7138 410.9938 486.3334 421.3137 486.3334 437.3272 c
486.3334 450.8348 476.5126 458.9939 456 458.9939 C
445.4088 458.9939 429.3689 454.6744 412.0666 446.6606 C
414.6 440.6938 L
431.8578 448.6861 443.8603 451.9938 456 451.9938 c
471.1353 451.9938 478.3332 446.25 478.3332 436.9939 c
f
476.5 337 m
476.5 327.0225 467.486 320.5 448 320.5 c
440.8236 320.5 432.1568 321.2639 425.35 322.5 C
424 312.55 L
430.8125 311.3125 439.6926 310.5 448 310.5 c
472.9535 310.5 487 321.19 487 337.5 c
487 351.2375 477.025 359.5 456 359.5 C
445.4636 359.5 429.5198 355.2395 411.9 347.25 C
414.9 339.55 L
432.9238 347.77 442.9228 350.5 456 350.5 c
469.9393 350.5 476.5 345.2791 476.5 337 c
f
474.6666 236.9969 m
474.6666 228.1853 466.3598 222.3303 448 222.3303 c
441.0565 222.3303 431.8647 223.1178 424.9667 224.3303 C
423.3333 212.0636 L
430.2292 210.8511 439.7035 209.9969 448 209.9969 c
473.1931 209.9969 487.6667 221.0572 487.6667 237.6636 c
487.6667 251.6311 477.5374 259.9969 456 259.9969 C
445.5185 259.9969 429.6706 255.7955 411.7333 247.8303 C
415.2 238.3969 L
433.9898 246.8446 441.9852 248.9969 456 248.9969 c
468.7432 248.9969 474.6666 244.2989 474.6666 236.9969 c
f
472.8334 137.003 m
472.8334 129.3573 465.2337 124.1696 448 124.1696 c
441.2893 124.1696 431.5727 124.9806 424.5833 126.1696 C
422.6667 111.5864 L
429.6459 110.3989 439.7144 109.503 448 109.503 c
473.4327 109.503 488.3333 120.9335 488.3333 137.8364 c
488.3333 152.0339 478.0498 160.503 456 160.503 C
445.5733 160.503 429.8215 156.3606 411.5667 148.4197 C
415.5 137.253 L
435.0557 145.9285 441.0477 147.5031 456 147.5031 c
467.5472 147.5031 472.8334 143.3279 472.8334 137.003 c
f
U
471 37 m
471 30.5202 464.1075 26 448 26 c
441.5222 26 431.2806 26.8345 424.2 28 C
422 11.1 L
429.0625 9.9375 439.7253 9 448 9 c
473.6724 9 489 20.8007 489 38 c
489 52.4275 478.5622 61 456 61 c
445.6282 61 429.9724 56.9166 411.4 49 C
415.8 36.1 L
436.1217 45.0031 440.1101 46 456 46 c
466.3511 46 471 42.3477 471 37 c
f
u
474 585.8636 m
452.441 572.4553 431.5243 558.9553 411.7333 546.0803 C
414.3 541.8469 L
434.3334 554.8615 455.1563 568.174 477.6667 582.1635 C
477.6667 587.4969 L
424.3333 587.4969 L
424.3333 582.4969 L
474.5 582.4969 L
474 585.8636 L
f
474 486.1272 m
451.9653 472.6606 431.882 459.9106 411.0666 446.6606 C
414.6 440.6938 L
435.4792 453.9105 455.5 466.4729 478.3334 480.3271 C
478.3334 487.9939 L
423.6666 487.9939 L
423.6666 480.9938 L
475 480.9938 L
474 486.1272 L
f
474 386.4 m
451.4896 372.875 432.2396 360.875 410.4 347.25 C
414.9 339.55 L
436.625 352.9687 455.8438 364.7812 479 378.5 C
479 388.5 L
423 388.5 L
423 379.5 L
475.5 379.5 L
474 386.4 L
f
474 286.6636 m
451.0139 273.0803 432.5972 261.8303 409.7333 247.8303 C
415.2 238.3969 L
437.7709 252.0177 456.1875 263.0802 479.6667 276.6635 C
479.6667 288.9969 L
422.3333 288.9969 L
422.3333 277.9969 L
476 277.9969 L
474 286.6636 L
f
474 186.9364 m
450.5382 173.2947 432.9548 162.7947 409.0667 148.4197 C
415.5 137.253 L
438.9166 151.076 456.5312 161.3885 480.3333 174.8364 C
480.3333 189.503 L
421.6667 189.503 L
421.6667 176.5031 L
476.5 176.5031 L
474 186.9364 L
f
U
474 87.2 m
450.0625 73.5 433.3125 63.75 408.4 49 C
415.8 36.1 L
440.0625 50.125 456.875 59.6875 481 73 C
481 90 L
421 90 L
421 75 L
477 75 L
474 87.2 L
f
45 614 m
38.1975 614 31.951 614.2967 23.3 615 C
23 612 L
31.8153 611.2834 38.2261 611 45 611 c
69.9141 611 85 621.4658 85 635 c
85 647.9147 76.842 655 58 655 C
41.5929 655 26.7318 649.4332 16 639 C
19.4 638.3 L
28.776 646.8061 42.7894 652 58 652 c
75.0121 652 82 646.1312 82 635 c
82 623.469 68.2849 614 45 614 c
f
132 610 m
165.4163 612.7228 179 625.998 179 659 C
179 689 L
176 689 L
176 659 l
176 627.7819 163.6187 615.6008 131.7 613 C
132 610 L
f
142.4 664.25 m
133.2134 648.2153 126.0448 639.4 125.2 639.4 c
123.8541 639.4 122 645.9504 122 661 c
122 669.5769 122.3691 679.9146 123 689 C
120 689 L
119.375 680 119 669.7631 119 661 c
119 640.7983 121.7124 636 125 636 c
127.4375 636 132.875 641.8125 145 662.75 C
142.4 664.25 L
f
247 613 m
229.7414 613 223 617.3676 223 624 c
223 628.6963 228.4066 633 237 633 c
252.1084 633 255.5089 626.9444 249.2 612.1 C
252 611 L
259.225 628 254.2772 636 237 636 c
226.2831 636 220 630.2271 220 624 c
220 615.2478 227.9901 610 247 610 c
272.2631 610 286 620.1761 286 637 c
286 649.5477 276.1545 658 256 658 C
244.0329 658 227 653.5625 212.4 646.5 C
214 644 L
228.3347 650.8702 244.7933 655 256 655 c
274.2444 655 283 648.1075 283 637 c
283 622.2848 271.4447 613 247 613 c
f
u
391.1333 132.503 m
384.2508 126.9943 382.5561 126.3405 380.8333 126.6696 c
379.5563 126.8479 378.6247 132.2375 379.4966 148.8722 c
381.0234 178.0075 377.0066 184.503 366.1667 184.503 c
354.1804 184.503 335.7834 172.0128 302.6667 133.3363 C
313.8108 123.8057 L
341.1331 155.7149 358.0464 168.3764 362 167.4198 c
363.8472 167.0885 364.7433 163.4918 364.0161 149.6137 c
362.4156 119.0788 366.8799 111.503 376.8334 111.503 c
384.7592 111.503 391.7962 114.4533 397.8333 120.8364 C
391.1333 132.503 L
f
391.8667 231.406 m
384.9726 225.4661 382.8383 224.476 380.8666 224.7393 c
379.1109 224.8819 378.0083 230.0334 378.9972 248.9014 c
380.4961 277.502 376.6232 284.0061 366.3333 284.0061 c
354.9295 284.0061 336.6481 271.3804 303.3334 232.4727 C
312.7086 224.4683 L
341.1776 257.7166 358.2468 270.5049 363.0001 269.7396 c
365.6022 269.4746 366.8512 265.4902 366.0129 249.4946 c
364.4128 218.9651 368.4832 212.0061 377.6667 212.0061 c
384.7748 212.0061 391.3226 214.8939 397.6667 221.6728 C
391.8667 231.406 L
f
392.6 330.3 m
385.6943 323.9288 383.1204 322.6025 380.9 322.8 c
378.6654 322.9069 377.392 327.8204 378.498 348.9215 c
379.9688 376.9874 376.24 383.5 366.5 383.5 c
355.6786 383.5 337.5128 370.739 304 331.6 C
311.6065 325.1216 L
341.222 359.709 358.4472 372.624 364 372.05 c
367.3572 371.8512 368.9589 367.4791 368.0096 349.3664 c
366.4097 318.8422 370.0863 312.5 378.5 312.5 c
384.7904 312.5 390.849 315.3253 397.5 322.5 C
392.6 330.3 L
f
393.3333 429.203 m
386.416 422.4005 383.4026 420.738 380.9333 420.8696 c
378.22 420.9409 376.7756 425.6164 377.9986 448.9507 c
379.4415 476.4818 375.8566 483.003 366.6667 483.003 c
356.4277 483.003 338.3775 470.1066 304.6667 430.7363 C
310.5043 425.7841 L
341.2664 461.7107 358.6476 474.7524 365 474.3698 c
369.1122 474.2373 371.0667 469.4775 370.0065 449.2473 c
368.4069 418.7285 371.6895 413.003 379.3334 413.003 c
384.8059 413.003 390.3754 415.7659 397.3333 423.3364 C
393.3333 429.203 L
f
394.0666 528.097 m
387.1377 520.8632 383.6847 518.8645 380.9667 518.9303 c
377.7746 518.966 376.1593 523.4034 377.4993 548.9708 c
378.9141 575.9672 375.4733 582.4969 366.8333 582.4969 c
357.1768 582.4969 339.2422 569.4652 305.3333 529.8636 C
309.4022 526.4374 L
341.3109 563.7031 358.848 576.8715 366 576.6802 c
370.8671 576.6139 373.1744 571.4665 372.0031 549.1191 c
370.4039 518.6057 373.2926 513.4969 380.1667 513.4969 c
384.8215 513.4969 389.9018 516.1974 397.1667 524.1636 C
394.0666 528.097 L
f
U
394.8 627 m
387.8594 619.335 383.9669 617 381 617 c
377.3291 617 375.5429 621.1994 377 649 c
378.3868 675.4617 375.09 682 367 682 c
357.9259 682 340.1069 668.8329 306 629 C
308.3 627.1 L
341.3553 665.7048 359.0484 679 367 679 c
372.6222 679 375.2822 673.4648 374 649 c
372.401 618.492 374.8958 614 381 614 c
384.837 614 389.4282 616.638 397 625 C
394.8 627 L
f
u
21.1167 537.8469 m
31.2449 545.9707 44.3496 550.6636 58 550.6636 c
73.6766 550.6636 80 545.4087 80 535.3303 c
80 524.5165 67.1344 515.6636 45.1667 515.6636 c
38.0855 515.6636 31.6467 515.963 23.0833 516.6636 C
22.6667 511.4969 L
31.4294 510.7852 38.149 510.4969 45.1667 510.4969 c
70.6095 510.4969 85.6667 521.0174 85.6667 535.1636 c
85.6667 548.5584 77.3805 555.8303 58 555.8303 C
41.5444 555.8303 26.8218 550.1657 15.3333 538.9969 C
21.1167 537.8469 L
f
22.8334 437.3938 m
33.7139 445.1354 45.9098 449.3271 58 449.3271 c
72.341 449.3271 77.9999 444.6861 77.9999 435.6606 c
77.9999 425.5641 65.9839 417.3273 45.3334 417.3273 c
37.9736 417.3273 31.3423 417.6293 22.8666 418.3273 C
22.3333 410.9938 L
31.0435 410.2869 38.072 409.9938 45.3334 409.9938 c
71.3048 409.9938 86.3334 420.5691 86.3334 435.3272 c
86.3334 449.2021 77.9189 456.6606 58 456.6606 C
41.4959 456.6606 26.9117 450.8983 14.6666 438.9939 C
22.8334 437.3938 L
f
24.55 336.95 m
36.1826 344.3093 47.4699 348 58 348 c
71.0057 348 76 343.9728 76 336 c
76 326.6206 64.8334 319 45.5 319 c
37.8616 319 31.038 319.3046 22.65 320 C
22 310.5 L
30.6576 309.7979 37.9949 309.5 45.5 309.5 c
72.0001 309.5 87 320.1299 87 335.5 c
87 349.8548 78.4573 357.5 58 357.5 C
41.4474 357.5 27.0017 351.6399 14 339 C
24.55 336.95 L
f
26.2667 236.4969 m
38.6515 243.4739 49.0301 246.6636 58 246.6636 c
69.6701 246.6636 74 243.2503 74 236.3303 c
74 227.6682 63.6829 220.6636 45.6667 220.6636 c
37.7496 220.6636 30.7337 220.9709 22.4333 221.6636 C
21.6667 209.9969 L
30.2718 209.2997 37.9179 208.9969 45.6667 208.9969 c
72.6954 208.9969 87.6667 219.6815 87.6667 235.6636 c
87.6667 250.4985 78.9958 258.3303 58 258.3303 C
41.3989 258.3303 27.0917 252.3725 13.3333 238.9969 C
26.2667 236.4969 L
f
27.9833 136.0531 m
41.1203 142.6478 50.5902 145.3364 58 145.3364 c
68.3347 145.3364 72.0001 142.537 72.0001 136.6697 c
72.0001 128.7248 62.5325 122.3363 45.8333 122.3363 c
37.6377 122.3363 30.4293 122.6462 22.2167 123.3363 C
21.3334 109.503 L
29.8859 108.8107 37.8408 108.503 45.8333 108.503 c
73.3907 108.503 88.3333 119.2424 88.3333 135.8364 c
88.3333 151.1513 79.5342 159.1697 58 159.1697 C
41.3504 159.1697 27.1816 153.1141 12.6667 139.003 C
27.9833 136.0531 L
f
U
29.7 35.6 m
43.5892 41.8125 52.1504 44 58 44 c
66.9992 44 70 41.8145 70 37 c
70 29.7723 61.382 24 46 24 c
37.5257 24 30.125 24.3125 22 25 C
21 9 L
29.5 8.3125 37.7638 8 46 8 c
74.0861 8 89 18.794 89 36 c
89 51.795 80.0727 60 58 60 c
41.3019 60 27.2716 53.8467 12 39 C
29.7 35.6 L
f
u
123.6667 561.1636 m
123.6667 569.6342 124.0363 580.2516 124.6667 589.3303 C
119.1667 589.3303 L
118.5391 580.294 118.1667 569.9177 118.1667 561.1636 c
118.1667 540.5916 121.1854 535.4969 125.1667 535.4969 c
128.9113 535.4969 134.5736 541.0136 147.3001 561.7219 C
143.0334 564.7386 L
133.4877 549.168 127.2995 541.6303 126.4501 541.6303 c
125.2729 541.6303 123.6667 547.4307 123.6667 561.1636 c
f
125.3334 461.3272 m
125.3334 469.6914 125.7035 480.5887 126.3334 489.6606 C
118.3333 489.6606 L
117.7032 480.5881 117.3333 470.0723 117.3333 461.3272 c
117.3333 440.3849 120.6583 434.9938 125.3334 434.9938 c
130.3852 434.9938 136.2722 440.2148 149.6002 460.6938 C
143.6667 465.2272 L
133.762 450.1208 128.5542 443.8607 127.7001 443.8607 c
126.6916 443.8607 125.3334 448.911 125.3334 461.3272 c
f
127 361.5 m
127 369.7579 127.3705 380.9348 128 390 C
117.5 390 L
116.8675 380.8913 116.5 370.2361 116.5 361.5 c
116.5 340.1874 120.1313 334.5 125.5 334.5 c
131.8589 334.5 137.9706 339.4252 151.9 359.675 C
144.3 365.725 L
134.0362 351.0827 129.8088 346.1 128.95 346.1 c
128.1103 346.1 127 350.4003 127 361.5 c
f
128.6667 261.6636 m
128.6667 269.8152 129.0377 281.2719 129.6667 290.3303 C
116.6667 290.3303 L
116.0316 281.1853 115.6667 270.3907 115.6667 261.6636 c
115.6667 239.9807 119.6043 233.9969 125.6667 233.9969 c
133.3327 233.9969 139.6692 238.6263 154.2001 258.6469 C
144.9334 266.2136 L
134.3105 252.0355 131.0635 248.3303 130.2 248.3303 c
129.529 248.3303 128.6667 251.8807 128.6667 261.6636 c
f
130.3333 161.8364 m
130.3333 169.8816 130.7047 181.618 131.3333 190.6697 C
115.8334 190.6697 L
115.1958 181.4885 114.8334 170.5545 114.8334 161.8364 c
114.8334 139.7832 119.0773 133.503 125.8333 133.503 c
134.8064 133.503 141.3676 137.8367 156.4999 157.6281 C
145.5666 166.7114 L
134.5847 152.9973 132.3181 150.5696 131.4499 150.5696 c
130.9476 150.5696 130.3333 153.37 130.3333 161.8364 c
f
U
132 62 m
132 69.9389 132.3719 81.9551 133 91 C
115 91 L
114.3599 81.7826 114 70.7091 114 62 c
114 39.5765 118.5503 33 126 33 c
136.2802 33 143.0662 37.0379 158.8 56.6 C
146.2 67.2 L
134.859 53.9501 133.5728 52.8 132.7 52.8 c
132.3664 52.8 132 54.8503 132 62 c
f
u
131.8333 509.4969 m
165.5678 512.0325 180 525.9697 180 558.9969 C
180 589.3303 L
174.5 589.3303 L
174.5 558.9969 l
174.5 529.0215 162.2638 517.1369 131.1166 514.7637 C
131.8333 509.4969 L
f
131.6667 408.9938 m
165.7194 411.3423 181.0001 425.9414 181.0001 458.9939 C
181.0001 489.6606 L
172.9999 489.6606 L
172.9999 458.9939 l
172.9999 430.2612 160.909 418.6731 130.5333 416.5273 C
131.6667 408.9938 L
f
131.5 308.5 m
165.8709 310.6612 182 325.9222 182 359 C
182 390 L
171.5 390 L
171.5 359 l
171.5 331.5099 159.5542 320.2183 129.95 318.3 C
131.5 308.5 L
f
131.3333 207.9969 m
166.0224 209.971 183 225.8939 183 258.9969 C
183 290.3303 L
170 290.3303 L
170 258.9969 l
170 232.7496 158.1993 221.7545 129.3666 220.0637 C
131.3333 207.9969 L
f
131.1667 107.503 m
166.1739 109.2899 184 125.8748 184 159.003 C
184 190.6697 L
168.5001 190.6697 L
168.5001 159.003 l
168.5001 133.9983 156.8446 123.2996 128.7834 121.8363 C
131.1667 107.503 L
f
U
131 7 m
166.3255 8.5997 185 25.8465 185 59 c
185 91 L
167 91 L
167 59 l
167 35.238 155.4897 24.8358 128.2 23.6 C
131 7 L
f
u
214.3 543.1802 m
229.2521 550.2226 243.7265 553.8302 256 553.8302 c
272.9288 553.8302 281.3333 547.2277 281.3333 536.9969 c
281.3333 523.3482 270.1203 514.497 247.1667 514.497 c
230.7098 514.497 224.6667 518.3727 224.6667 524.3303 C
224.6667 528.5695 229.3927 532.3302 237.6667 532.3302 c
251.8709 532.3302 254.7855 527.1408 249.0333 513.1803 C
254.0001 511.997 L
260.7924 528.8754 255.394 537.1636 237.8334 537.1636 c
226.359 537.1636 219.5 531.0847 219.5 524.3303 c
219.5 514.859 227.5648 509.4969 247.1667 509.4969 c
272.6725 509.4969 286.6667 520.0016 286.6667 537.1636 c
286.6667 550.0746 276.467 558.6636 256 558.6636 C
243.9505 558.6636 226.8437 554.174 212.2333 547.2469 C
214.3 543.1802 L
f
214.6 442.3605 m
230.1695 449.575 242.6598 452.6605 256 452.6605 c
271.6133 452.6605 279.6666 446.348 279.6666 436.9939 c
279.6666 424.4116 268.7959 415.994 247.3334 415.994 c
231.6782 415.994 226.3334 419.3779 226.3334 424.6606 C
226.3334 428.4428 230.3788 431.6605 238.3334 431.6605 c
251.6334 431.6605 254.0622 427.3372 248.8667 414.2606 C
256.0001 412.9939 L
262.3599 429.7508 256.5108 438.3273 238.6667 438.3273 c
226.4349 438.3273 219 431.9424 219 424.6606 c
219 414.4703 227.1394 408.9938 247.3334 408.9938 c
273.0818 408.9938 287.3334 419.8272 287.3334 437.3272 c
287.3334 450.6016 276.7795 459.3273 256 459.3273 C
243.868 459.3273 226.6875 454.7856 212.0666 447.9939 C
214.6 442.3605 L
f
214.9 341.55 m
231.0868 348.9366 241.5931 351.5 256 351.5 c
270.2978 351.5 278 345.4775 278 337 c
278 325.484 267.4717 317.5 247.5 317.5 c
232.6466 317.5 228 320.3921 228 325 C
228 328.3252 231.3648 331 239 331 c
251.3959 331 253.3389 327.5427 248.7 315.35 C
258 314 L
263.9272 330.6353 257.6276 339.5 239.5 339.5 c
226.5108 339.5 218.5 332.8091 218.5 325 c
218.5 314.0907 226.7142 308.5 247.5 308.5 c
273.4911 308.5 288 319.6619 288 337.5 c
288 351.1376 277.0919 360 256 360 C
243.7856 360 226.5313 355.4062 211.9 348.75 C
214.9 341.55 L
f
215.2 240.7302 m
232.0043 248.289 240.5263 250.3302 256 250.3302 c
268.9823 250.3302 276.3333 244.5978 276.3333 236.9969 c
276.3333 226.5474 266.1473 218.997 247.6667 218.997 c
233.615 218.997 229.6667 221.3973 229.6667 225.3303 C
229.6667 228.1984 232.351 230.3302 239.6667 230.3302 c
251.1584 230.3302 252.6156 227.7391 248.5333 216.4303 C
260.0001 214.997 L
265.4946 231.5108 258.7444 240.6636 240.3334 240.6636 c
226.5866 240.6636 218 233.6667 218 225.3303 c
218 213.702 226.2888 207.9969 247.6667 207.9969 c
273.9004 207.9969 288.6667 219.4875 288.6667 237.6636 c
288.6667 251.6646 277.4044 260.6636 256 260.6636 C
243.7031 260.6636 226.375 256.0178 211.7333 249.497 C
215.2 240.7302 L
f
215.5 139.9197 m
232.9216 147.6506 239.4597 149.1697 256 149.1697 c
267.6668 149.1697 274.6667 143.7273 274.6667 137.003 c
274.6667 127.6199 264.8231 120.503 247.8333 120.503 c
234.5833 120.503 231.3333 122.4115 231.3333 125.6697 C
231.3333 128.0808 233.337 129.6697 240.3333 129.6697 c
250.9209 129.6697 251.8923 127.9446 248.3667 117.5197 C
262 116.003 L
267.0619 132.3953 259.8611 141.8363 241.1667 141.8363 c
226.6625 141.8363 217.5 134.5335 217.5 125.6697 c
217.5 113.3224 225.8635 107.503 247.8333 107.503 c
274.3097 107.503 289.3333 119.3222 289.3333 137.8364 c
289.3333 152.2006 277.7168 161.3363 256 161.3363 C
243.6206 161.3363 226.2188 156.6385 211.5667 150.253 C
215.5 139.9197 L
f
U
215.8 39.1 m
233.839 47.003 238.3929 48 256 48 c
266.3513 48 273 42.8476 273 37 c
273 28.6833 263.4987 22 248 22 c
235.5517 22 233 23.4167 233 26 C
233 27.9541 234.3231 29 241 29 c
250.6834 29 251.1689 28.141 248.2 18.6 C
264 17 L
268.6293 33.2707 260.9779 43 242 43 c
226.7384 43 217 35.3911 217 26 c
217 12.9337 225.4382 7 248 7 c
274.7191 7 290 19.1478 290 38 c
290 52.7276 278.0293 62 256 62 c
243.5382 62 226.0625 57.25 211.4 51 C
215.8 39.1 L
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
