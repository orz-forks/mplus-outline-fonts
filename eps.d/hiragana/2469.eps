%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (2469.eps)
%%CreationDate: (1/29/04) (8:14 PM)
%%BoundingBox: 0 0 500 500
%%HiResBoundingBox: 0 0 500 500
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 256.5 244.5 256.5
%AI3_TileBox: -41.5 -119.5 534.5 642.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -139.5 520.5 1 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -119.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
1 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
0 Ap
0 O
0 g
71.6 485.6 m
58.1559 488.5448 47.4049 489.6 30 489.6 C
30 484.8 L
46.8476 484.8 57.4919 483.7712 70.6 480.9 C
71.6 485.6 L
f
59 451 m
75.815 451 82 446.6054 82 434.6 c
82 421.4804 72.2217 413.2 48.8 413.2 c
40.3081 413.2 33.9363 413.7869 25.2 415.2 C
24.4 410.4 L
33.2875 408.9625 40.0491 408.4 48.8 408.4 c
74.6749 408.4 87 418.2475 87 434.6 c
87 449.0787 78.8411 455.8 59 455.8 c
44.2572 455.8 31.5245 451.6788 21.3512 444.1015 C
23.1888 453.1374 24.1371 460.3019 25 471.2 C
20 471.2 L
18.9667 458.15 17.7167 450.7333 15 438.6 C
20 437.8 L
29.9107 445.9833 43.6384 451 59 451 c
f
*u
1 D
214.6 442.9 m
227.8121 449.9417 243.2295 453.8001 257 453.8001 c
274.558 453.8001 282.8 446.7681 282.8 436.4001 c
282.8 425.2709 275.8061 417.4891 260.7594 414.5277 C
260.2029 430.5507 253.1967 436.9 238.6 436.9 c
226.4364 436.9 219.4 430.9633 219.4 423.4 c
219.4 414.6603 228.104 408.4 245.4 408.4 c
274.1642 408.4 287.8 419.191 287.8 436.4001 c
287.8 449.5231 276.9527 458.6 257 458.6 c
250.0271 458.6 241.2439 457.1004 231.9369 454.3632 C
247.6393 464.598 262.5572 473.9446 277.8 483.5 C
277.8 489.2 L
223 489.2 L
223 484.4 L
270.4283 484.4 L
250.2252 471.692 231.4626 459.6177 211.9 446.8 C
214.6 442.9 L
f
0 D
224.4 423.4 m
224.4 428.6397 229.9868 432.1 238.6 432.1 c
249.3092 432.1 255.446 429.0683 255.7837 413.7607 C
252.6148 413.3938 249.1619 413.2 245.4 413.2 c
235.1512 413.2 224.4 415.9091 224.4 423.4 c
f
*U
305.2 431.2 m
309 428.3 L
315.8247 437.353 322.1739 445.072 328 451.5538 C
328 406.2 L
333.2 406.2 L
333.2 457.1622 L
347.0341 471.5667 357.4109 478.2 363.4 478.2 c
373.1665 478.2 375.4697 474.942 373.2 449 c
370.5873 419.1376 374.5693 412.4 382.4 412.4 c
388.4059 412.4 393.2841 415.0347 398.6 421.2 C
395.2 424.4 L
389.9949 418.6517 387.0711 417.2 382.4 417.2 c
378.1249 417.2 376.0937 422.6393 378.4 449 c
380.9164 477.7632 377.3022 483 363.4 483 c
356.7711 483 346.6763 477.3218 333.2 464.0009 C
333.2 493.8 L
328 493.8 L
328 476.6 L
306.2 476.6 L
306.2 471.8 L
328 471.8 L
328 458.6489 L
321.1636 451.3644 313.5648 442.296 305.2 431.2 C
f
414.6 442.7 m
427.8121 449.7416 443.2295 453.6001 457 453.6001 c
474.7802 453.6001 482.8 447.1458 482.8 437 c
482.8 424.0578 471.3987 415 448.4 415 c
440.6077 415 433.3115 415.9768 426.4 418 C
425.2 413.4 L
432.075 411.3875 439.7123 410.2 448.4 410.2 c
474.1653 410.2 487.8 421.4575 487.8 437 c
487.8 449.7896 477.6188 458.4001 457 458.4001 c
450.0271 458.4001 441.244 456.9004 431.9371 454.1632 C
447.6393 464.3981 462.5573 473.7446 477.8 483.3 C
477.8 489 L
423 489 L
423 484.2 L
470.4322 484.2 L
450.2438 471.4886 431.5789 459.3946 411.9 446.6 C
414.6 442.7 L
f
29.5 383.1 m
46.3823 383.1 57.8829 382.0075 70.7 379.2 C
72.1 385.9 L
58.8466 388.8031 47.1049 389.9 29.5 389.9 C
29.5 383.1 L
f
29 281.4 m
45.917 281.4 58.2739 280.2438 70.8 277.5 C
72.6 286.2 L
59.5373 289.0613 46.8049 290.2 29 290.2 C
29 281.4 L
f
28.5 179.7 m
45.4516 179.7 58.6648 178.48 70.9 175.8 C
73.1 186.5 L
60.228 189.3195 46.5049 190.5 28.5 190.5 C
28.5 179.7 L
f
59 349.5 m
74.4111 349.5 80.1 345.4498 80.1 334.8 c
80.1 322.7122 70.8243 315.2 48.5 315.2 c
40.3253 315.2 33.8157 315.7741 25 317.2 C
23.9 310.3 L
32.7875 308.8625 39.7491 308.3 48.5 308.3 c
74.7915 308.3 87.5 318.4727 87.5 334.8 c
87.5 349.3204 78.7994 356.5 59 356.5 c
45.159 356.5 33.4171 353.0449 23.4772 346.2789 C
25.0097 354.319 25.9297 361.4932 26.7 371 C
19.5 371 L
18.4594 358.5656 17.1312 350.5031 14.5 338.8 C
21.65 337.5 L
30.7285 344.8569 44.0824 349.5 59 349.5 c
f
59 248 m
73.0071 248 78.2 244.2942 78.2 235 c
78.2 223.944 69.427 217.1999 48.2 217.1999 c
40.3424 217.1999 33.6951 217.7612 24.8 219.1999 C
23.4 210.2 L
32.2875 208.7625 39.4491 208.2 48.2 208.2 c
74.9081 208.2 88 218.6978 88 235 c
88 249.5621 78.7576 257.2 59 257.2 c
45.9924 257.2 35.1124 254.293 25.5387 248.2993 C
26.8403 255.5881 27.7144 262.5424 28.4 270.8 C
19 270.8 L
17.9521 258.9812 16.5458 250.2729 14 239 C
23.3 237.2 L
31.5463 243.7305 44.5264 248 59 248 c
f
59 146.5 m
71.6032 146.5 76.3 143.1387 76.3 135.2 c
76.3 125.1758 68.0297 119.2 47.9 119.2 c
40.3596 119.2 33.5745 119.7484 24.6 121.2 C
22.9 110.1 L
31.7875 108.6625 39.1491 108.1 47.9 108.1 c
75.0247 108.1 88.5 118.923 88.5 135.2 c
88.5 149.8038 78.7159 157.9 59 157.9 c
46.7853 157.9 36.6739 155.4562 27.5491 150.1978 C
28.6724 156.8754 29.491 163.4528 30.1 170.6 C
18.5 170.6 L
17.4448 159.3969 15.9604 150.0427 13.5 139.2 C
24.95 136.9 L
32.3641 142.6041 44.9704 146.5 59 146.5 c
f
28 78 m
44.9863 78 59.0558 76.7163 71 74.1 C
73.6 86.8 L
60.9187 89.5777 46.2049 90.8 28 90.8 C
28 78 L
f
59 58.6 m
47.5562 58.6 38.1455 56.5581 29.5219 51.9979 C
30.5026 58.1347 31.2601 64.2363 31.8 70.4 C
18 70.4 L
16.9375 59.8125 15.375 49.8125 13 39.4 C
26.6 36.6 L
33.1819 41.4777 45.4144 45 59 45 c
70.1992 45 74.4 41.9831 74.4 35.4 c
74.4 26.4075 66.6324 21.2 47.6 21.2 c
40.3767 21.2 33.4538 21.7356 24.4 23.2 C
22.4 10 L
31.2875 8.5625 38.8491 8 47.6 8 c
75.1413 8 89 19.1481 89 35.4 c
89 50.0454 78.6742 58.6 59 58.6 c
f
136.8 408 m
169.9729 413.0125 181.1 425.1954 181.1 457.8 C
181.1 490 L
176 490 L
176 457.8 L
176 427.6872 166.7869 417.6822 135.8 413 C
136.8 408 L
f
127 435.8 m
131.8035 435.8 138.0534 441.645 147.8 460.6 C
143.4 462.9 L
134.9906 446.5455 129.3337 440.6 127 440.6 c
125.6648 440.6 122.6 445.0344 122.6 464.6 c
122.6 471.9036 123.025 480.8125 124 490 C
118.9 490 L
117.9875 480.625 117.5 472.1096 117.5 464.6 c
117.5 440.071 122.749 435.8 127 435.8 c
f
174.1 357.7 m
174.1 328.6845 165.9162 319.8314 135.1 315.175 C
136.6 307.8 L
170.5004 312.9224 181.775 324.8994 181.775 357.7 C
181.775 390.2 L
174.1 390.2 L
174.1 357.7 L
f
172.2 257.6 m
172.2 229.6819 165.0455 221.9806 134.4 217.35 C
136.4 207.6 L
171.028 212.8323 182.45 224.6034 182.45 257.6 C
182.45 290.4 L
172.2 290.4 L
172.2 257.6 L
f
170.3 157.5 m
170.3 130.6792 164.1748 124.1298 133.7 119.525 C
136.2 107.4 L
171.5556 112.7423 183.125 124.3075 183.125 157.5 C
183.125 190.6 L
170.3 190.6 L
170.3 157.5 L
f
127.3 334.8 m
133.2693 334.8 140.0274 340.8129 150.1 361.1 C
143.8 364 L
135.6289 347.5178 130.5892 342.3 128.4 342.3 c
127.0513 342.3 124.4 346.4732 124.4 364.5 c
124.4 371.7516 124.8531 381.1406 125.8 390.2 C
118.3 390.2 L
117.3875 380.8125 116.9 372.0096 116.9 364.5 c
116.9 340.4405 122.435 334.8 127.3 334.8 c
f
127.6 233.8 m
134.735 233.8 142.0014 239.9809 152.4 261.6 C
144.2 265.1 L
136.2672 248.4901 131.8448 244 129.8 244 c
128.4378 244 126.2 247.912 126.2 264.4 c
126.2 271.5997 126.6812 281.4687 127.6 290.4 C
117.7 290.4 L
116.7875 281 116.3 271.9096 116.3 264.4 c
116.3 240.81 122.121 233.8 127.6 233.8 c
f
127.9 132.8 m
136.2008 132.8 143.9753 139.1488 154.7 162.1 C
144.6 166.2 L
136.9055 149.4625 133.1003 145.7 131.2 145.7 c
129.8243 145.7 128 149.3508 128 164.3 c
128 171.4477 128.5094 181.7969 129.4 190.6 C
117.1 190.6 L
116.1875 181.1875 115.7 171.8096 115.7 164.3 c
115.7 141.1796 121.807 132.8 127.9 132.8 c
f
168.4 57.4 m
168.4 31.6765 163.3041 26.2789 133 21.7 C
136 7.2 L
172.0831 12.6522 183.8 24.0115 183.8 57.4 C
183.8 90.8 L
168.4 90.8 L
168.4 57.4 L
f
157 62.6 m
145 67.3 L
137.5438 50.4348 134.3558 47.4 132.6 47.4 c
131.2108 47.4 129.8 50.7896 129.8 64.2 c
129.8 71.2958 130.3375 82.125 131.2 90.8 C
116.5 90.8 L
115.5875 81.375 115.1 71.7096 115.1 64.2 c
115.1 41.5491 121.493 31.8 128.2 31.8 c
137.6666 31.8 145.9493 38.3168 157 62.6 C
f
*u
1 D
257 352.7001 m
272.8781 352.7001 280.6 346.1573 280.6 336.8 c
280.6 326.783 274.6681 319.6625 261.7208 316.6313 C
260.8986 331.7631 253.4613 338.2 238.5 338.2 c
226.2948 338.2 218.7 331.5217 218.7 324 c
218.7 314.7134 227.6679 308.2 245.4 308.2 c
274.1725 308.2 288.2 319.4329 288.2 336.8 c
288.2 349.8814 277.0359 359.3001 257 359.3001 c
251.4318 359.3001 244.8338 358.4012 237.8331 356.7544 C
251.6553 365.4142 264.791 373.5009 278.4 381.925 C
278.4 389.4 L
222.9 389.4 L
222.9 382.6 L
267.4865 382.6 L
248.5454 370.8351 230.7675 359.6929 211.5 347.6 C
215 342.3 L
227.6606 349.0708 242.2439 352.7001 257 352.7001 c
f
0 D
226 324 m
226 328.6904 230.8108 331.8 238.5 331.8 c
248.603 331.8 253.9572 328.8519 254.3708 315.4318 C
251.6116 315.149 248.6282 315 245.4 315 c
235.1565 315 226 317.5943 226 324 c
f
*U
*u
1 D
257 251.6 m
271.1982 251.6 278.4 245.5465 278.4 237.2001 c
278.4 228.3064 273.4966 221.8627 262.6354 218.801 C
261.4915 233.0137 253.6551 239.5 238.4 239.5 c
226.1531 239.5 218 232.08 218 224.6 c
218 214.7665 227.2318 208 245.4 208 c
274.1807 208 288.6 219.6749 288.6 237.2001 c
288.6 250.2398 277.1191 260 257 260 c
252.8621 260 248.2147 259.5304 243.3077 258.6633 C
255.3749 265.9777 266.9182 272.9653 279 280.35 C
279 289.6 L
222.8 289.6 L
222.8 280.8 L
264.4686 280.8 L
246.7941 269.9919 229.9571 259.746 211.1 248.4 C
215.4 241.7 L
227.5092 248.2 241.2583 251.6 257 251.6 c
f
0 D
227.6 224.6 m
227.6 228.7411 231.6348 231.5 238.4 231.5 c
247.875 231.5 252.4745 228.6591 252.9554 217.1171 C
250.6107 216.9099 248.0986 216.8 245.4 216.8 c
235.1619 216.8 227.6 219.2795 227.6 224.6 c
f
*U
*u
1 D
257 150.5001 m
269.5182 150.5001 276.2 144.9356 276.2 137.6 c
276.2 129.8534 272.2995 124.1078 263.5187 121.0625 C
261.9982 134.3417 253.772 140.8 238.3 140.8 c
226.0114 140.8 217.3 132.6384 217.3 125.2 c
217.3 114.8197 226.7956 107.8 245.4 107.8 c
274.1889 107.8 289 119.9168 289 137.6 c
289 150.5982 277.2023 160.7001 257 160.7001 c
254.2945 160.7001 251.3892 160.504 248.3619 160.1474 C
258.8273 166.3179 268.9407 172.3419 279.6 178.775 C
279.6 189.8 L
222.7 189.8 L
222.7 179 L
261.352 179 L
244.9407 169.155 229.0211 159.7752 210.7 149.2 C
215.8 141.1 L
227.3577 147.3292 240.2727 150.5001 257 150.5001 c
f
0 D
229.2 125.2 m
229.2 128.7917 232.4588 131.2 238.3 131.2 c
247.1108 131.2 250.9863 128.4828 251.5259 118.8154 C
249.6056 118.6747 247.5685 118.6 245.4 118.6 c
235.1672 118.6 229.2 120.9647 229.2 125.2 c
f
*U
*u
1 D
257 61.4001 m
255.7166 61.4001 254.3835 61.3474 253.0289 61.2697 C
262.0471 66.4651 270.8671 71.6384 280.2 77.2 C
280.2 90 L
222.6 90 L
222.6 77.2 L
258.1142 77.2 L
242.9571 68.3173 227.9452 59.7775 210.3 50 C
216.2 40.5 L
227.2062 46.4584 239.2871 49.4001 257 49.4001 c
267.8383 49.4001 274 44.3248 274 38.0001 c
274 31.4424 271.0596 26.4413 264.3546 23.4754 C
262.3857 35.7754 253.7782 42.1 238.2 42.1 c
225.8698 42.1 216.6 33.1967 216.6 25.8 c
216.6 14.8728 226.3595 7.6 245.4 7.6 c
274.1972 7.6 289.4 20.1587 289.4 38.0001 c
289.4 50.9566 277.2855 61.4001 257 61.4001 c
f
0 D
230.8 25.8 m
230.8 28.8424 233.2828 30.9001 238.2 30.9001 c
246.2991 30.9001 249.5087 28.3553 250.0915 20.533 C
248.6027 20.4478 247.0452 20.4 245.4 20.4 c
235.1725 20.4 230.8 22.6499 230.8 25.8 c
f
*U
457 352.5001 m
473.0864 352.5001 480.6 346.5489 480.6 337.4 c
480.6 325.3462 469.6954 316.9 448 316.9 c
440.4006 316.9 433.1763 317.881 426.45 319.85 C
424.8 313.2 L
431.675 311.1875 439.3123 310 448 310 c
474.0319 310 488.2 321.5909 488.2 337.4 c
488.2 350.148 477.6188 359.1 457 359.1 c
451.4318 359.1 444.8337 358.2011 437.8329 356.5543 C
451.6553 365.2142 464.7909 373.3008 478.4 381.725 C
478.4 389.2 L
422.9 389.2 L
422.9 382.4 L
467.4913 382.4 L
448.5655 370.6316 430.8508 359.4765 411.5 347.4 C
415 342.1 L
427.6606 348.8708 442.2439 352.5001 457 352.5001 c
f
457 251.4001 m
471.3927 251.4001 478.4 245.9519 478.4 237.8 c
478.4 226.6346 467.9922 218.8 447.6 218.8 c
440.1936 218.8 433.0412 219.7852 426.5 221.7 C
424.4 213 L
431.275 210.9875 438.9123 209.8 447.6 209.8 c
473.8986 209.8 488.6 221.7243 488.6 237.8 c
488.6 250.5064 477.6189 259.8001 457 259.8001 c
452.8621 259.8001 448.2148 259.3305 443.3079 258.4634 C
455.3751 265.7778 466.9183 272.7654 479 280.15 C
479 289.4 L
422.8 289.4 L
422.8 280.6 L
464.474 280.6 L
446.8118 269.7891 430.0102 259.5358 411.1 248.2 C
415.4 241.5 L
427.5092 248 441.2583 251.4001 457 251.4001 c
f
457 150.3001 m
469.6989 150.3001 476.2 145.355 476.2 138.2001 c
476.2 127.923 466.289 120.7 447.2 120.7 c
439.9865 120.7 432.906 121.6894 426.55 123.55 C
424 112.8 L
430.875 110.7875 438.5123 109.6 447.2 109.6 c
473.7652 109.6 489 121.8576 489 138.2001 c
489 150.8648 477.6189 160.5001 457 160.5001 c
454.2946 160.5001 451.3892 160.3041 448.362 159.9475 C
458.8273 166.1179 468.9408 172.1418 479.6 178.575 C
479.6 189.6 L
422.7 189.6 L
422.7 178.8 L
461.3563 178.8 L
444.9517 168.9534 429.0463 159.5705 410.7 149 C
415.8 140.9 L
427.3577 147.1292 440.2727 150.3001 457 150.3001 c
f
457 61.2001 m
455.7166 61.2001 454.3835 61.1474 453.0289 61.0697 C
462.0471 66.2651 470.8671 71.4384 480.2 77 C
480.2 89.8 L
422.6 89.8 L
422.6 77 L
458.1141 77 L
442.9571 68.1173 427.9452 59.5774 410.3 49.8 C
416.2 40.3 L
427.2062 46.2584 439.2871 49.2001 457 49.2001 c
468.0051 49.2001 474 44.7581 474 38.6 c
474 29.2114 464.5857 22.6 446.8 22.6 c
439.7794 22.6 432.7709 23.5936 426.6 25.4 C
423.6 12.6 L
430.475 10.5875 438.1123 9.4 446.8 9.4 c
473.6319 9.4 489.4 21.991 489.4 38.6 c
489.4 51.2232 477.619 61.2001 457 61.2001 c
f
327.2 347.5394 m
327.2 306.1 L
334.7 306.1 L
334.7 355.7308 L
347.9276 369.4751 357.7776 375.8 363.4 375.8 c
371.4842 375.8 373.461 372.5565 371.4 349 c
368.8566 319.9293 373.525 312.3 381.8 312.3 c
388.2315 312.3 393.0811 314.7708 398.7 321.1 C
394.6 326.2 L
389.6858 320.9023 386.8592 319.5 382.7 319.5 c
378.7723 319.5 376.8614 324.556 379 349 c
381.4836 377.3882 377.585 383.1 363.4 383.1 c
357.0308 383.1 347.4225 377.8144 334.7 365.559 C
334.7 393.9 L
327.2 393.9 L
327.2 376.9 L
306.1 376.9 L
306.1 370 L
327.2 370 L
327.2 357.9009 L
320.5396 350.7381 313.1714 341.9067 305.1 331.2 C
310.6 327 L
316.5195 334.8523 322.0619 341.6735 327.2 347.5394 C
f
326.4 243.4597 m
326.4 206 L
336.2 206 L
336.2 254.3006 L
348.817 267.383 358.1413 273.4 363.4 273.4 c
369.802 273.4 371.4523 270.171 369.6 249 c
367.1258 220.721 372.4807 212.2 381.2 212.2 c
388.0571 212.2 392.8781 214.507 398.8 221 C
394 228 L
389.3768 223.1529 386.6473 221.8 383 221.8 c
379.4197 221.8 377.6291 226.4726 379.6 249 c
382.0508 277.0131 377.8677 283.2 363.4 283.2 c
357.2943 283.2 348.1766 278.3044 336.2 267.0788 C
336.2 294 L
326.4 294 L
326.4 277.2 L
306 277.2 L
306 268.2 L
326.4 268.2 L
326.4 257.1446 L
319.9183 250.1115 312.7816 241.5223 305 231.2 C
312.2 225.7 L
317.2245 232.3651 321.962 238.2654 326.4 243.4597 C
f
325.6 139.3146 m
325.6 105.9 L
337.7 105.9 L
337.7 152.8759 L
349.7039 165.297 358.5013 171 363.4 171 c
368.1197 171 369.4435 167.7856 367.8 149 c
365.395 121.5127 371.4364 112.1 380.6 112.1 c
387.8827 112.1 392.6751 114.243 398.9 120.9 C
393.4 129.8 L
389.0677 125.4036 386.4355 124.1 383.3 124.1 c
380.0672 124.1 378.3968 128.3892 380.2 149 c
382.6179 176.6381 378.1505 183.3 363.4 183.3 c
357.5618 183.3 348.9389 178.7927 337.7 168.5604 C
337.7 194.1 L
325.6 194.1 L
325.6 177.5 L
305.9 177.5 L
305.9 166.4 L
325.6 166.4 L
325.6 156.3756 L
319.2987 149.479 312.3968 141.1446 304.9 131.2 C
313.8 124.4 L
317.9407 129.8928 321.8749 134.8494 325.6 139.3146 C
f
383.6 26.4 m
380.7146 26.4 379.1645 30.3059 380.8 49 c
383.1851 76.2631 378.4333 83.4 363.4 83.4 c
357.8335 83.4 349.709 79.2775 339.2 70.0018 C
339.2 94.2 L
324.8 94.2 L
324.8 77.8 L
305.8 77.8 L
305.8 64.6 L
324.8 64.6 L
324.8 55.6069 L
318.6833 48.8556 312.013 40.7681 304.8 31.2 C
315.4 23.1 L
318.6694 27.4369 321.8014 31.4269 324.8 35.1043 C
324.8 5.8 L
339.2 5.8 L
339.2 51.4562 L
350.5879 63.2164 358.8572 68.6 363.4 68.6 c
366.4375 68.6 367.4348 65.4001 366 49 c
363.6643 22.3044 370.3921 12 380 12 c
387.7083 12 392.4721 13.9792 399 20.8 C
392.8 31.6 L
388.7587 27.6542 386.2236 26.4 383.6 26.4 c
f
U
u
U
u
U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
