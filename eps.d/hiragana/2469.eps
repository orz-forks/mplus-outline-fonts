%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (2469.eps)
%%CreationDate: (4/16/04) (10:48 PM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
1 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
500 600 m
500 700 L
400 700 L
400 600 L
500 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
400 600 m
400 700 L
300 700 L
300 600 L
400 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
500 500 m
500 600 L
400 600 L
400 500 L
500 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
400 500 m
400 600 L
300 600 L
300 500 L
400 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
*u
0 Ap
0 O
0 g
1 D
72 685 m
58.9375 686.8125 43.25 688 30 688 C
30 685 L
42.6312 685 58.1903 683.8607 71.6 682 C
72 685 L
f
19 638.6 m
20.9855 650.9342 22.3788 660.5084 24 672.7 C
21 673 L
19.4375 661.25 18.0625 651.8125 16 639 C
19 638.6 L
f
49 614 m
41.4254 614 33.2673 614.3523 25.3 615 C
25 612 L
32.6875 611.375 41.1023 611 49 611 c
72.4143 611 85 620.4656 85 635 c
85 647.9148 76.842 655 58 655 C
41.5929 655 26.7318 649.4333 16 639 C
19.4 638.3 L
28.776 646.8061 42.7894 652 58 652 c
75.0121 652 82 646.1312 82 635 c
82 622.3209 71.1384 614 49 614 c
f
*U
u
0 D
136 610 m
167.5433 614.7663 179 626.4705 179 659 C
179 689 L
176 689 L
176 659 l
176 628.7788 166.1197 617.6267 135.5 613 C
136 610 L
f
145.4 662.25 m
136.2134 646.2153 128.0449 637.4 126.2 637.4 c
124.8542 637.4 123 643.9502 123 661 c
123 669.5769 123.3691 679.9146 124 689 C
121 689 L
120.375 680 120 669.7631 120 661 c
120 638.7982 122.7124 634 126 634 c
129.0398 634 137.6875 642.75 148 660.75 C
145.4 662.25 L
f
U
*u
1 D
274 685.6 m
253.1636 672.0103 231.3263 658.1421 212.4 646.5 C
214 644 L
233.6324 656.0764 255.75 670.125 277 684 C
277 687 L
224 687 L
224 684 L
274 684 L
274 685.6 L
f
248 613 m
221 613 221 620.9915 221 624 c
221 628.7991 226.5015 633 236 633 c
251.1084 633 254.5089 626.9445 248.2 612.1 C
251 611 L
258.225 628 253.2772 636 236 636 c
224.6165 636 218 630.5605 218 624 c
218 615.2478 225.9902 610 248 610 c
273.7633 610 286 619.8426 286 637 c
286 649.5477 276.1545 658 256 658 C
244.0329 658 227 653.5625 212.4 646.5 C
214 644 L
228.3347 650.8702 244.7933 655 256 655 c
274.2444 655 283 648.1075 283 637 c
283 621.7416 272.0574 613 248 613 c
f
*U
*u
u
330 608 m
333 608 L
333 693 L
330 693 L
330 677 L
307 677 L
307 674 L
330 674 L
330 608 L
f
U
377 649 m
378.3868 675.4617 375.09 682 367 682 c
357.9259 682 340.1069 668.8329 306 629 C
308.3 627.1 L
341.3553 665.7048 359.0484 679 367 679 c
372.6222 679 375.2822 673.4648 374 649 c
372.401 618.492 374.8958 614 381 614 c
385.3657 614 388.233 615.5268 395 623 C
392.7 625 L
386.4614 618.1103 384.2704 617 381 617 c
377.3291 617 375.5429 621.1994 377 649 c
f
*U
*u
474 685.6 m
453.1636 672.0103 431.3263 658.1421 412.4 646.5 C
414 644 L
433.6324 656.0764 455.75 670.125 477 684 C
477 687 L
425 687 L
425 684 L
474 684 L
474 685.6 L
f
483 637 m
483 624.0578 471.0823 615 448 615 c
440.1251 615 433.033 615.6934 426.5 617 C
426 614 L
432.5625 612.6875 439.6598 612 448 612 c
473.068 612 486 622.246 486 637 c
486 649.5477 476.1545 658 456 658 C
444.0329 658 427 653.5625 412.4 646.5 C
414 644 L
428.3347 650.8702 444.7933 655 456 655 c
474.2444 655 483 648.1075 483 637 c
f
*U
u
72.8334 585.4969 m
59.3542 587.3199 43.0694 588.4969 29.3333 588.4969 C
29.3333 583.3302 L
42.3878 583.3302 58.5544 582.1933 72.2667 580.3469 C
72.8334 585.4969 L
f
73.6667 485.9939 m
59.7709 487.8273 42.8889 488.9939 28.6666 488.9939 C
28.6666 481.6605 L
42.1443 481.6605 58.9185 480.5259 72.9334 478.6938 C
73.6667 485.9939 L
f
74.5 386.5 m
60.1875 388.3437 42.7083 389.5 28 389.5 C
28 380 L
41.9009 380 59.2826 378.8678 73.6 377.05 C
74.5 386.5 L
f
75.3334 286.9969 m
60.6042 288.8511 42.5278 289.9969 27.3333 289.9969 C
27.3333 278.3302 L
41.6575 278.3302 59.6468 277.2005 74.2667 275.3969 C
75.3334 286.9969 L
f
76.1667 187.503 m
61.0208 189.3676 42.3472 190.503 26.6667 190.503 C
26.6667 176.6697 L
41.414 176.6697 60.0109 175.5424 74.9333 173.7531 C
76.1667 187.503 L
f
U
u
20.7834 538.0969 m
22.7484 550.2233 24.1907 559.9622 25.8334 572.0469 C
20.3333 572.4969 L
18.7708 560.8824 17.375 551.4865 15.3333 538.9969 C
20.7834 538.0969 L
f
22.5668 437.5939 m
24.5113 449.5125 26.0027 459.4161 27.6668 471.3939 C
19.6666 471.9939 L
18.1041 460.5147 16.6875 451.1605 14.6666 438.9939 C
22.5668 437.5939 L
f
24.35 337.1 m
26.274 348.8108 27.8144 358.8792 29.5 370.75 C
19 371.5 L
17.4375 360.1562 16 350.8437 14 339 C
24.35 337.1 L
f
26.1334 236.5969 m
28.0369 248.1 29.6263 258.333 31.3334 270.0969 C
18.3333 270.9969 L
16.7708 259.7886 15.3125 250.5178 13.3333 238.9969 C
26.1334 236.5969 L
f
27.9166 136.1031 m
29.7996 147.3984 31.4381 157.7961 33.1666 169.4531 C
17.6667 170.503 L
16.1042 159.4301 14.625 150.201 12.6667 139.003 C
27.9166 136.1031 L
f
U
u
49 515.6636 m
41.2754 515.6636 32.72 516.0185 24.75 516.6636 C
24.3333 511.4969 L
32.1458 510.8719 41.0459 510.4969 49 510.4969 c
73.0541 510.4969 85.6667 520.1006 85.6667 535.1636 c
85.6667 548.5585 77.3805 555.8303 58 555.8303 C
41.5444 555.8303 26.8218 550.1658 15.3333 538.9969 C
21.1167 537.8469 L
31.2449 545.9707 44.3496 550.6636 58 550.6636 c
73.7599 550.6636 80 545.4364 80 535.1636 c
80 523.4209 69.7901 515.6636 49 515.6636 c
f
49 417.3273 m
41.1255 417.3273 32.1728 417.6848 24.1999 418.3273 C
23.6666 410.9939 L
31.6041 410.3689 40.9895 409.9939 49 409.9939 c
73.6938 409.9939 86.3334 419.7356 86.3334 435.3272 c
86.3334 449.2021 77.9189 456.6606 58 456.6606 C
41.4959 456.6606 26.9117 450.8984 14.6666 438.9939 C
22.8334 437.3938 L
33.7139 445.1354 45.9098 449.3271 58 449.3271 c
72.5077 449.3271 77.9999 444.7417 77.9999 435.3272 c
77.9999 424.5209 68.4418 417.3273 49 417.3273 c
f
49 319 m
40.9756 319 31.6255 319.36 23.65 320 C
23 310.5 L
31.0625 309.875 40.933 309.5 49 309.5 c
74.3336 309.5 87 319.3797 87 335.5 c
87 349.8549 78.4573 357.5 58 357.5 C
41.4474 357.5 27.0017 351.64 14 339 C
24.55 336.95 L
36.1826 344.3093 47.4699 348 58 348 c
71.2557 348 76 344.0562 76 335.5 c
76 325.6299 67.0936 319 49 319 c
f
49 220.6636 m
40.8256 220.6636 31.0783 221.0263 23.1 221.6636 C
22.3333 209.9969 L
30.5208 209.3719 40.8766 208.9969 49 208.9969 c
74.9733 208.9969 87.6667 219.0147 87.6667 235.6636 c
87.6667 250.4986 78.9958 258.3303 58 258.3303 C
41.3989 258.3303 27.0917 252.3725 13.3333 238.9969 C
26.2667 236.4969 L
38.6515 243.4739 49.0301 246.6636 58 246.6636 c
70.0035 246.6636 74 243.3614 74 235.6636 c
74 226.7299 65.7454 220.6636 49 220.6636 c
f
49 122.3363 m
40.6756 122.3363 30.5311 122.7015 22.55 123.3363 C
21.6667 109.503 L
29.9792 108.8781 40.8202 108.503 49 108.503 c
75.613 108.503 88.3333 118.6589 88.3333 135.8364 c
88.3333 151.1513 79.5342 159.1697 58 159.1697 C
41.3504 159.1697 27.1816 153.1141 12.6667 139.003 C
27.9833 136.0531 L
41.1203 142.6478 50.5902 145.3364 58 145.3364 c
68.7515 145.3364 72.0001 142.6759 72.0001 135.8364 c
72.0001 127.8389 64.3972 122.3363 49 122.3363 c
f
U
u
0 D
136 509.4969 m
168.1136 514.3494 180 526.5301 180 558.9969 C
180 589.3303 L
174.5 589.3303 L
174.5 558.9969 l
174.5 529.9053 165.0232 519.3078 134.95 514.7637 C
136 509.4969 L
f
136 408.9939 m
168.6838 413.9325 181.0001 426.5897 181.0001 458.9939 C
181.0001 489.6606 L
172.9999 489.6606 L
172.9999 458.9939 l
172.9999 431.0318 163.9268 420.9889 134.4 416.5273 C
136 408.9939 L
f
136 308.5 m
169.2541 313.5248 182 326.6584 182 359 C
182 390 L
171.5 390 L
171.5 359 l
171.5 332.1674 162.8304 322.679 133.85 318.3 C
136 308.5 L
f
136 207.9969 m
169.8244 213.1079 183 226.718 183 258.9969 C
183 290.3303 L
170 290.3303 L
170 258.9969 l
170 233.2939 161.7339 224.3601 133.3 220.0637 C
136 207.9969 L
f
136 107.503 m
170.3946 112.7002 184 126.7867 184 159.003 C
184 190.6697 L
168.5001 190.6697 L
168.5001 159.003 l
168.5001 134.4295 160.6376 126.0502 132.75 121.8363 C
136 107.503 L
f
U
u
149.8001 559.8886 m
138.584 541.6282 130.2466 533.6636 126 533.6636 c
122.0187 533.6636 119 538.7581 119 561.1636 c
119 569.9177 119.3724 580.294 120 589.3303 C
125.5001 589.3303 L
124.8696 580.2516 124.5001 569.6342 124.5001 561.1636 c
124.5001 545.5972 126.1063 539.797 127.2834 539.797 c
128.9662 539.797 135.9877 547.3347 145.5333 562.9053 C
149.8001 559.8886 L
f
151.6001 459.0272 m
139.4804 440.5064 131.4533 433.3272 126 433.3272 c
121.325 433.3272 117.9999 438.718 117.9999 461.3272 c
117.9999 470.0723 118.3699 480.5881 118.9999 489.6606 C
127.0001 489.6606 L
126.3701 480.5887 126.0001 469.6914 126.0001 461.3272 c
126.0001 447.2442 127.3584 442.194 128.3667 442.194 c
129.8876 442.194 135.7619 448.4542 145.6667 463.5606 C
151.6001 459.0272 L
f
153.4 358.175 m
140.3768 339.3939 132.66 333 126 333 c
120.6313 333 117 338.6871 117 361.5 c
117 370.2361 117.3674 380.8913 118 390 C
128.5 390 L
127.8705 380.9348 127.5 369.7579 127.5 361.5 c
127.5 348.9002 128.6103 344.6 129.45 344.6 c
130.8088 344.6 135.5362 349.5827 145.8 364.225 C
153.4 358.175 L
f
155.2001 257.3136 m
141.2733 238.2722 133.8668 232.6636 126 232.6636 c
119.9376 232.6636 116 238.647 116 261.6636 c
116 270.3907 116.3649 281.1853 117 290.3303 C
130.0001 290.3303 L
129.371 281.2719 129.0001 269.8152 129.0001 261.6636 c
129.0001 250.5472 129.8624 246.997 130.5334 246.997 c
131.7302 246.997 135.3105 250.7021 145.9333 264.8803 C
155.2001 257.3136 L
f
156.9999 156.4614 m
142.1697 137.1596 135.0734 132.3364 126 132.3364 c
119.244 132.3364 115 138.6161 115 161.8364 c
115 170.5545 115.3624 181.4885 116 190.6697 C
131.5 190.6697 L
130.8714 181.618 130.5 169.8816 130.5 161.8364 c
130.5 152.2031 131.1144 149.4029 131.6166 149.4029 c
132.6515 149.4029 135.0847 151.8306 146.0667 165.5447 C
156.9999 156.4614 L
f
U
u
1 D
274 585.8636 m
252.6197 572.4638 231.7407 559.4591 211.7333 547.4136 C
214.3 543.1802 L
234.7666 555.5189 255.8854 568.6636 277.6667 582.3302 C
277.6667 587.4969 L
223.3333 587.4969 L
223.3333 582.4969 L
274.5 582.4969 L
274 585.8636 L
f
274 486.1272 m
252.0758 472.9173 232.1551 460.7762 211.0666 448.3273 C
214.6 442.3605 L
235.9008 454.9614 256.0208 467.2021 278.3334 480.6605 C
278.3334 487.9939 L
222.6666 487.9939 L
222.6666 480.9938 L
275 480.9938 L
274 486.1272 L
f
274 386.4 m
251.532 373.3799 232.5694 362.1023 210.4 349.25 C
214.9 341.55 L
237.0349 354.4132 256.1562 365.75 279 379 C
279 388.5 L
222 388.5 L
222 379.5 L
275.5 379.5 L
274 386.4 L
f
274 286.6636 m
250.9881 273.8334 232.9838 263.4193 209.7333 250.1636 C
215.2 240.7302 L
238.1692 253.8557 256.2917 264.2886 279.6667 277.3302 C
279.6667 288.9969 L
221.3333 288.9969 L
221.3333 277.9969 L
276 277.9969 L
274 286.6636 L
f
274 186.9364 m
250.4443 174.2961 233.3981 164.7454 209.0667 151.0863 C
215.5 139.9197 L
239.3033 153.3075 256.4271 162.8364 280.3333 175.6697 C
280.3333 189.503 L
220.6667 189.503 L
220.6667 176.5031 L
276.5 176.5031 L
274 186.9364 L
f
U
u
248 514.497 m
223.092 514.497 222.6667 521.3926 222.6667 524.3303 C
222.6667 528.6108 227.5163 532.3302 236.8334 532.3302 c
251.2647 532.3302 254.225 526.9464 248.5333 513.1803 C
253.5001 511.997 L
260.2529 528.7365 254.6836 537.1636 237 537.1636 c
224.6646 537.1636 217.5 531.3903 217.5 524.3303 c
217.5 514.859 225.5648 509.4969 248 509.4969 c
274.006 509.4969 286.6667 519.6682 286.6667 537.1636 c
286.6667 550.0746 276.467 558.6636 256 558.6636 C
243.9504 558.6636 226.8437 554.174 212.2333 547.247 C
214.3 543.1802 L
229.2521 550.2226 243.7265 553.8302 256 553.8302 c
272.9288 553.8302 281.3333 547.2278 281.3333 536.9969 c
281.3333 522.8677 270.742 514.497 248 514.497 c
f
248 415.994 m
225.184 415.994 224.3334 421.7938 224.3334 424.6606 C
224.3334 428.4224 228.531 431.6605 237.6667 431.6605 c
251.4211 431.6605 253.9412 426.9484 248.8667 414.2606 C
256.0001 412.994 L
262.2808 429.473 256.0899 438.3273 238.0001 438.3273 c
224.7127 438.3273 217 432.2202 217 424.6606 c
217 414.4702 225.1395 408.9939 248 408.9939 c
274.2487 408.9939 287.3334 419.4937 287.3334 437.3272 c
287.3334 450.6016 276.7794 459.3273 256 459.3273 C
243.868 459.3273 226.6875 454.7856 212.0666 447.9939 C
214.6 442.3605 L
230.1695 449.575 242.6598 452.6605 256 452.6605 c
271.6133 452.6605 279.6666 446.348 279.6666 436.9939 c
279.6666 423.9938 269.4267 415.994 248 415.994 c
f
248 317.5 m
227.2758 317.5 226 322.204 226 325 C
226 328.2433 229.5457 331 238.5 331 c
251.5774 331 253.6574 326.9594 249.2 315.35 C
258.5 314 L
264.3086 330.2186 257.4962 339.5 239 339.5 c
224.7608 339.5 216.5 333.0591 216.5 325 c
216.5 314.0906 224.7142 308.5 248 308.5 c
274.4914 308.5 288 319.3285 288 337.5 c
288 351.1376 277.0919 360 256 360 C
243.7855 360 226.5312 355.4062 211.9 348.75 C
214.9 341.55 L
231.0868 348.9366 241.5931 351.5 256 351.5 c
270.2978 351.5 278 345.4775 278 337 c
278 325.129 268.1114 317.5 248 317.5 c
f
248 218.997 m
229.3679 218.997 227.6667 222.6052 227.6667 225.3303 C
227.6667 228.055 230.5605 230.3302 239.3334 230.3302 c
251.7338 230.3302 253.3735 226.9614 249.5333 216.4303 C
261.0001 214.997 L
266.3365 230.9552 258.9026 240.6636 240 240.6636 c
224.8089 240.6636 216 233.889 216 225.3303 c
216 213.7018 224.2888 207.9969 248 207.9969 c
274.7341 207.9969 288.6667 219.1541 288.6667 237.6636 c
288.6667 251.6646 277.4044 260.6636 256 260.6636 C
243.7031 260.6636 226.375 256.0178 211.7333 249.497 C
215.2 240.7302 L
232.0043 248.289 240.5263 250.3302 256 250.3302 c
268.9823 250.3302 276.3333 244.5978 276.3333 236.9969 c
276.3333 226.2552 266.7961 218.997 248 218.997 c
f
248 120.503 m
231.4597 120.503 229.3333 123.0154 229.3333 125.6697 C
229.3333 127.8758 231.5751 129.6697 240.1667 129.6697 c
251.8901 129.6697 253.0897 126.9725 249.8666 117.5197 C
263.4999 116.003 L
268.3643 131.7008 260.3088 141.8363 241 141.8363 c
224.857 141.8363 215.5 134.7279 215.5 125.6697 c
215.5 113.3223 223.8634 107.503 248 107.503 c
274.9768 107.503 289.3333 118.9888 289.3333 137.8364 c
289.3333 152.2006 277.7168 161.3363 256 161.3363 C
243.6206 161.3363 226.2188 156.6385 211.5667 150.253 C
215.5 139.9197 L
232.9216 147.6506 239.4597 149.1697 256 149.1697 c
267.6668 149.1697 274.6667 143.7273 274.6667 137.003 c
274.6667 127.3904 265.4808 120.503 248 120.503 c
f
U
u
329.1667 507.8303 m
334.6667 507.8303 L
334.6667 593.1636 L
329.1667 593.1636 L
329.1667 577.6636 L
306.6667 577.6636 L
306.6667 572.4969 L
329.1667 572.4969 L
329.1667 507.8303 L
f
328.3333 407.6605 m
336.3334 407.6605 L
336.3334 493.3272 L
328.3333 493.3272 L
328.3333 478.3273 L
306.3333 478.3273 L
306.3333 470.9938 L
328.3333 470.9938 L
328.3333 407.6605 L
f
327.5 307.5 m
338 307.5 L
338 393.5 L
327.5 393.5 L
327.5 379 L
306 379 L
306 369.5 L
327.5 369.5 L
327.5 307.5 L
f
326.6667 207.3303 m
339.6667 207.3303 L
339.6667 293.6636 L
326.6667 293.6636 L
326.6667 279.6636 L
305.6667 279.6636 L
305.6667 267.9969 L
326.6667 267.9969 L
326.6667 207.3303 L
f
325.8334 107.1697 m
341.3333 107.1697 L
341.3333 193.8364 L
325.8334 193.8364 L
325.8334 180.3363 L
305.3334 180.3363 L
305.3334 166.5031 L
325.8334 166.5031 L
325.8334 107.1697 L
f
U
u
377.4993 548.9708 m
378.9141 575.9672 375.4733 582.4969 366.8333 582.4969 c
357.1768 582.4969 339.2422 569.4652 305.3333 529.8636 C
309.4022 526.4375 L
341.3108 563.7031 358.848 576.8715 366 576.6802 c
370.8671 576.6139 373.1743 571.4665 372.0031 549.1191 c
370.4039 518.6057 373.2926 513.4969 380.1667 513.4969 c
385.262 513.4969 388.9058 515.2714 395.5 522.4969 C
392.3166 526.4303 L
385.9727 519.8427 383.9376 518.8645 380.9667 518.9303 c
377.7745 518.966 376.1593 523.4034 377.4993 548.9708 c
f
377.9987 448.9416 m
379.4415 476.4727 375.8567 482.9939 366.6667 482.9939 c
356.4276 482.9939 338.3774 470.0976 304.6666 430.7273 C
310.5044 425.7749 L
341.2664 461.7014 358.6476 474.7431 364.9999 474.3604 c
369.1121 474.2279 371.0665 469.4681 370.0063 449.2382 c
368.4067 418.7194 371.6893 412.9939 379.3333 412.9939 c
385.1584 412.9939 389.5786 415.016 396 421.9939 C
391.9333 427.8606 L
385.4839 421.5751 383.6049 420.729 380.9333 420.8607 c
378.22 420.932 376.7757 425.6074 377.9987 448.9416 c
f
378.498 348.9215 m
379.9688 376.9874 376.2399 383.5 366.5 383.5 c
355.6786 383.5 337.5128 370.739 304 331.6 C
311.6065 325.1216 L
341.222 359.709 358.4472 372.624 364 372.05 c
367.3571 371.8512 368.9588 367.4791 368.0096 349.3664 c
366.4097 318.8422 370.0863 312.5 378.5 312.5 c
385.0547 312.5 390.2514 314.7697 396.5 321.5 C
391.55 329.3 L
384.9953 323.3164 383.2722 322.6025 380.9 322.8 c
378.6654 322.9069 377.392 327.8204 378.498 348.9215 c
f
378.9973 248.8923 m
380.4961 277.4929 376.6233 283.9969 366.3333 283.9969 c
354.9295 283.9969 336.6481 271.3713 303.3333 232.4636 C
312.7087 224.4591 L
341.1776 257.7073 358.2468 270.4955 363 269.7302 c
365.6021 269.4652 366.851 265.4808 366.0127 249.4855 c
364.4126 218.9559 368.483 211.9969 377.6667 211.9969 c
384.951 211.9969 390.9242 214.5143 397 220.9969 C
391.1667 230.7303 L
384.5065 225.0488 382.9394 224.467 380.8667 224.7303 c
379.1109 224.8729 378.0084 230.0245 378.9973 248.8923 c
f
379.4966 148.8722 m
381.0234 178.0075 377.0066 184.503 366.1667 184.503 c
354.1804 184.503 335.7834 172.0128 302.6667 133.3363 C
313.8108 123.8057 L
341.1331 155.7149 358.0464 168.3764 362 167.4198 c
363.8472 167.0885 364.7433 163.4918 364.0161 149.6137 c
362.4156 119.0788 366.8799 111.503 376.8334 111.503 c
384.8474 111.503 391.597 114.2681 397.5 120.503 C
390.7833 132.1697 L
384.0178 126.7902 382.6067 126.3405 380.8333 126.6696 c
379.5563 126.8479 378.6247 132.2375 379.4966 148.8722 c
f
U
u
474 585.8636 m
452.7196 572.2555 431.7407 559.1258 411.7333 547.0803 C
414.3 542.8469 L
434.777 555.1335 455.9792 568.3719 477.6667 582.1635 C
477.6667 587.4969 L
424.3333 587.4969 L
424.3333 582.4969 L
474.5 582.4969 L
474 585.8636 L
f
474 486.1272 m
452.2757 472.5008 432.1551 460.1095 411.0666 447.6606 C
414.6 441.6938 L
435.9217 454.1906 456.2084 466.6188 478.3334 480.3271 C
478.3334 487.9939 L
423.6666 487.9939 L
423.6666 480.9938 L
475 480.9938 L
474 486.1272 L
f
474 386.4 m
451.8318 372.7551 432.5694 361.1023 410.4 348.25 C
414.9 340.55 L
437.0662 353.2569 456.4375 364.875 479 378.5 C
479 388.5 L
423 388.5 L
423 379.5 L
475.5 379.5 L
474 386.4 L
f
474 286.6636 m
451.3878 273.0004 432.9838 262.086 409.7333 248.8303 C
415.2 239.3969 L
438.2108 252.314 456.6667 263.1219 479.6667 276.6635 C
479.6667 288.9969 L
422.3333 288.9969 L
422.3333 277.9969 L
476 277.9969 L
474 286.6636 L
f
474 186.9364 m
450.9439 173.2548 433.3981 163.0788 409.0667 149.4197 C
415.5 138.2531 L
439.3554 151.3804 456.8958 161.3781 480.3333 174.8364 C
480.3333 189.503 L
421.6667 189.503 L
421.6667 176.5031 L
476.5 176.5031 L
474 186.9364 L
f
U
u
481.1666 536.9969 m
481.1666 524.9929 470.0588 516.6636 448 516.6636 c
440.3579 516.6636 432.7409 517.3806 426.1166 518.6636 C
425.3333 513.5136 L
431.9791 512.2261 439.6707 511.4969 448 511.4969 c
473.2521 511.4969 486.6667 522.0576 486.6667 537.1636 c
486.6667 549.9691 476.6391 558.4969 456 558.4969 C
443.9504 558.4969 426.8437 554.0074 412.2333 547.0803 C
414.3 542.8469 L
429.2521 549.8892 443.7265 553.4969 456 553.4969 c
472.9844 553.4969 481.1666 547.1167 481.1666 536.9969 c
f
479.3332 436.9939 m
479.3332 425.928 469.0352 418.3273 448 418.3273 c
440.5908 418.3273 432.4488 419.0677 425.7333 420.3273 C
424.6666 413.0272 L
431.3958 411.7647 439.6816 410.9939 448 410.9939 c
473.4361 410.9939 487.3334 421.8692 487.3334 437.3272 c
487.3334 450.3905 477.1238 458.9939 456 458.9939 C
443.868 458.9939 426.6875 454.4523 412.0666 447.6606 C
414.6 441.6938 L
430.1695 448.9083 442.6598 451.9938 456 451.9938 c
471.7243 451.9938 479.3332 446.1258 479.3332 436.9939 c
f
477.5 337 m
477.5 326.8722 468.0118 320 448 320 c
440.8236 320 432.1568 320.7639 425.35 322 C
424 312.55 L
430.8125 311.3125 439.6925 310.5 448 310.5 c
473.6202 310.5 488 321.69 488 337.5 c
488 350.8209 477.6084 359.5 456 359.5 C
443.7855 359.5 426.5312 354.9062 411.9 348.25 C
414.9 340.55 L
431.0868 347.9366 441.5931 350.5 456 350.5 c
470.4644 350.5 477.5 345.1442 477.5 337 c
f
475.6666 236.9969 m
475.6666 227.8074 466.9883 221.6636 448 221.6636 c
441.0565 221.6636 431.8647 222.4511 424.9667 223.6636 C
423.3333 212.0636 L
430.2291 210.8511 439.7035 209.9969 448 209.9969 c
473.8043 209.9969 488.6667 221.5016 488.6667 237.6636 c
488.6667 251.2423 478.093 259.9969 456 259.9969 C
443.7031 259.9969 426.375 255.3511 411.7333 248.8303 C
415.2 239.3969 L
432.0043 246.9556 440.5263 248.9969 456 248.9969 c
469.2044 248.9969 475.6666 244.1534 475.6666 236.9969 c
f
473.8334 137.003 m
473.8334 128.7516 465.9648 123.3363 448 123.3363 c
441.2893 123.3363 431.5727 124.1473 424.5833 125.3363 C
422.6667 111.5864 L
429.6459 110.3989 439.7144 109.503 448 109.503 c
473.9883 109.503 489.3333 121.3224 489.3333 137.8364 c
489.3333 151.6728 478.5776 160.503 456 160.503 C
443.6206 160.503 426.2188 155.8051 411.5667 149.4197 C
415.5 138.2531 L
432.9216 145.9839 439.4597 147.5031 456 147.5031 c
467.9445 147.5031 473.8334 143.1718 473.8334 137.003 c
f
U
*u
26 75 m
41.1706 75 60.375 73.875 75.6 72.1 C
77 88 L
61.4375 89.875 42.1667 91 26 91 C
26 75 L
f
29.7 35.6 m
43.5892 41.8125 52.1504 44 58 44 c
67.4993 44 70 41.9812 70 36 c
70 28.9389 63.0489 24 49 24 c
40.5257 24 29.9838 24.3678 22 25 C
21 9 L
29.4375 8.375 40.7638 8 49 8 c
76.2528 8 89 18.2939 89 36 c
89 51.795 80.0727 60 58 60 c
41.3019 60 27.2716 53.8467 12 39 C
29.7 35.6 L
f
29.7 35.6 m
31.5625 46.6875 33.25 57.25 35 68.8 C
17 70 L
15.4375 59.0625 13.9375 49.875 12 39 C
29.7 35.6 L
f
*U
u
0 D
132.7 51.8 m
133.5728 51.8 134.859 52.9501 146.2 66.2 C
158.8 55.6 L
143.0662 36.0379 136.2802 32 126 32 c
118.5503 32 114 38.576 114 62 c
114 70.7091 114.3599 81.7826 115 91 C
133 91 L
132.3719 81.9551 132 69.9389 132 62 c
132 53.8501 132.3665 51.8 132.7 51.8 c
f
136 7 m
170.9649 12.2833 185 26.8463 185 59 c
185 91 L
167 91 L
167 59 l
167 35.556 159.5411 27.7313 132.2 23.6 C
136 7 L
f
U
*u
1 D
215.8 39.1 m
233.839 47.003 238.3929 48 256 48 c
266.3513 48 273 42.8476 273 37 c
273 28.5165 264.1655 22 248 22 c
233.5517 22 231 23.4166 231 26 C
231 27.6875 232.5899 29 241 29 c
252.0465 29 252.8059 26.9744 250.2 18.6 C
266 17 L
270.3922 32.4373 261.7152 43 242 43 c
224.9051 43 215 35.5578 215 26 c
215 12.9335 223.4381 7 248 7 c
275.2195 7 290 18.8144 290 38 c
290 52.7276 278.0293 62 256 62 c
243.5382 62 226.0625 57.25 211.4 51 C
215.8 39.1 L
f
274 87.2 m
249.9004 74.7496 233.8125 66.0625 208.4 52 C
215.8 39.1 L
240.4375 52.75 256.5625 61.375 281 74 C
281 90 L
220 90 L
220 75 L
277 75 L
274 87.2 L
f
*U
*u
u
325 7 m
343 7 L
343 94 L
325 94 L
325 81 L
305 81 L
305 65 L
325 65 L
325 7 L
f
U
379.9959 48.843 m
381.5508 78.5131 377.3899 85 366 85 c
353.4313 85 334.9187 72.6451 302 34.2 C
314.913 23.1432 L
341.0887 53.7132 357.846 66.248 361 65.1 c
362.0921 64.7025 362.6355 61.4935 362.0192 49.7328 c
360.4185 19.1925 365.2767 11 376 11 c
384.7437 11 392.2698 14.0127 398 20 C
390.4 33.6 L
383.5291 28.5226 382.274 28.205 380.8 28.6 c
380.0018 28.8139 379.2411 34.4415 379.9959 48.843 c
f
*U
*u
472 37 m
472 29.6867 464.9413 25 448 25 c
441.5222 25 431.2806 25.8345 424.2 27 C
422 11.1 L
429.0625 9.9375 439.7253 9 448 9 c
474.1724 9 490 21.134 490 38 c
490 52.0942 479.0623 61 456 61 c
443.5382 61 426.0625 56.25 411.4 50 C
415.8 37.1 L
433.839 45.003 438.3929 46 456 46 c
466.6845 46 472 42.181 472 37 c
f
474 87.2 m
450.5 73.5 433.8125 64.0625 408.4 50 C
415.8 37.1 L
440.5 50.4375 457.125 59.625 481 73 C
481 90 L
421 90 L
421 75 L
477 75 L
474 87.2 L
f
*U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
