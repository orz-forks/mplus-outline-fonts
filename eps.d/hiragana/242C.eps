%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (242C.eps)
%%CreationDate: (1/31/04) (1:50 PM)
%%BoundingBox: 0 0 500 500
%%HiResBoundingBox: 0 0 500 500
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 256.5 244.5 256.5
%AI3_TileBox: -41.5 -119.5 534.5 642.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -139.5 520.5 1 794 556 25 0 1 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -119.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
1 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
0 Ap
0 O
0 g
162.6 442.1915 m
155.8326 445.0159 148.6865 446.4 141.6 446.4 c
122.7386 446.4 113.4 438.8774 113.4 428.8 c
113.4 415.4355 123.7007 407.2 151.6 407.2 c
160.1234 407.2 167.6 407.95 175.2 409.4 C
174.3004 414.1149 L
166.7376 412.672 159.5243 412 151.6 412 c
126.6998 412 118.4 418.372 118.4 428.8 c
118.4 435.8149 125.4477 441.6 141.6 441.6 c
150.4393 441.6 158.7403 439.6466 168.8 433.4 C
172.8 436.6 L
167.4123 443.2609 163.235 450.8049 160.1756 459.2 C
188.6 459.2 L
188.6 464 L
158.5891 464 L
157.2581 468.389 156.1926 472.982 155.4136 477.8 C
172.4 477.8 L
172.4 482.6 L
154.7441 482.6 L
154.2654 486.5358 153.9467 490.5984 153.8 494.8 C
148.6 494.8 L
148.7483 490.552 149.0668 486.5016 149.5193 482.6 C
115 482.6 L
115 477.8 L
150.1636 477.8 L
150.91 472.9407 151.8948 468.3398 153.1373 464 C
109 464 L
109 459.2 L
154.6535 459.2 L
156.7714 453.0322 159.4221 447.385 162.6 442.1915 C
f
159.1308 343.5126 m
153.1797 345.5635 146.9116 346.6 140.7 346.6 c
121.8386 346.6 112.2 338.9774 112.2 328.9 c
112.2 315.2689 122.8007 307.1 150.7 307.1 c
159.2234 307.1 166.9 307.85 174.5 309.3 C
173.3004 315.8149 L
165.8453 314.3926 158.5146 313.7 150.7 313.7 c
126.9626 313.7 119.4 319.4035 119.4 328.9 c
119.4 335.0202 125.7836 340.1 140.7 340.1 c
149.4137 340.1 156.8117 338.3906 166.6 332.6 C
172.4 336.8 L
167.4022 342.9788 163.4319 349.9529 160.4224 357.7 C
187.9 357.7 L
187.9 364.2 L
158.1831 364.2 L
157.0119 368.0585 156.0545 372.0914 155.3096 376.3 C
171.2 376.3 L
171.2 382.8 L
154.338 382.8 L
153.8644 386.6977 153.5458 390.7253 153.4 394.9 C
146 394.9 L
146.1468 390.6962 146.4612 386.6785 146.9067 382.8 C
114.1 382.8 L
114.1 376.3 L
147.7993 376.3 L
148.5018 372.0709 149.404 368.0466 150.4912 364.2 C
108.1 364.2 L
108.1 357.7 L
152.5823 357.7 L
154.3997 352.6464 156.584 347.9291 159.1308 343.5126 C
f
155.8437 244.5455 m
150.6363 246.0253 145.1951 246.8 139.8 246.8 c
120.9386 246.8 111 239.0774 111 229 c
111 215.1022 121.9007 207 149.8 207 c
158.3234 207 166.2 207.75 173.8 209.2 C
172.3004 217.5149 L
164.953 216.1131 157.505 215.4 149.8 215.4 c
127.2253 215.4 120.4 220.435 120.4 229 c
120.4 234.2255 126.1196 238.6 139.8 238.6 c
148.388 238.6 154.8831 237.1345 164.4 231.8 C
172 237 L
167.3895 242.7 163.6304 249.1003 160.6945 256.2 C
187.2 256.2 L
187.2 264.4 L
157.7759 264.4 L
156.7639 267.7309 155.9065 271.1947 155.2113 274.8 C
170 274.8 L
170 282.0486 L
172.6186 278.5807 175.2592 275.0001 177.6 271.7 C
184 276.2 L
179.9987 281.8829 175.4933 287.9471 171.4 293.2 C
164.9 288.7 L
166.3021 286.9008 167.7832 284.9733 169.2798 283 C
153.9315 283 L
153.4631 286.8602 153.1448 290.8526 153 295 C
143.4 295 L
143.5453 290.8398 143.8553 286.8548 144.2941 283 C
113.2 283 L
113.2 274.8 L
145.4837 274.8 L
146.1284 271.1981 146.9147 267.7329 147.8448 264.4 C
107.2 264.4 L
107.2 256.2 L
150.5124 256.2 L
152.0479 252.1119 153.8206 248.2291 155.8437 244.5455 C
f
152.7407 145.3779 m
148.2214 146.4361 143.5419 147 138.9 147 c
120.0386 147 109.8 139.1774 109.8 129.1 c
109.8 114.9355 121.0007 106.9 148.9 106.9 c
157.4234 106.9 165.5 107.65 173.1 109.1 C
171.3004 119.2149 L
164.0607 117.8337 156.4954 117.1 148.9 117.1 c
127.488 117.1 121.4 121.4665 121.4 129.1 c
121.4 133.4307 126.4555 137.1 138.9 137.1 c
147.3624 137.1 152.9546 135.8785 162.2 131 C
171.6 137.2 L
167.3776 142.4202 163.8519 148.251 161.0152 154.7 C
186.5 154.7 L
186.5 164.6 L
157.3677 164.6 L
156.516 167.401 155.7671 170.2955 155.1384 173.3 C
168.8 173.3 L
168.8 179.8842 L
171.27 176.5932 173.7439 173.2294 175.9 170.2 C
183.5 175.5 L
179.3804 181.3509 174.4669 187.9527 170.3 193.3 C
162.6 188 L
163.7673 186.5019 165.0163 184.8778 166.2937 183.2 C
153.5245 183.2 L
153.0615 187.023 152.7438 190.9805 152.6 195.1 C
140.8 195.1 L
140.9437 190.9832 141.2493 187.0306 141.6813 183.2 C
112.3 183.2 L
112.3 173.3 L
143.176 173.3 L
143.7499 170.31 144.4233 167.4106 145.198 164.6 C
106.3 164.6 L
106.3 154.7 L
148.4697 154.7 L
149.7357 151.4672 151.1642 148.3662 152.7407 145.3779 C
f
155.1097 71.8 m
167.6 71.8 L
167.6 77.714 L
169.9191 74.6088 172.2181 71.4758 174.2 68.7 C
183 74.8 L
178.7622 80.8189 173.4405 87.9583 169.2 93.4 C
160.3 87.3 L
161.2438 86.0889 162.2599 84.7691 163.3058 83.4 C
153.1172 83.4 L
152.6594 87.1862 152.3429 91.1088 152.2 95.2 C
138.2 95.2 L
138.3423 91.1262 138.6432 87.2059 139.0684 83.4 C
111.4 83.4 L
111.4 71.8 L
140.8695 71.8 L
141.3598 69.407 141.9296 67.082 142.5508 64.8 C
105.4 64.8 L
105.4 53.2 L
146.4615 53.2 L
147.4575 50.7562 148.5419 48.3795 149.7182 46.0705 C
145.8686 46.8053 141.9196 47.2 138 47.2 c
119.1386 47.2 108.6 39.2774 108.6 29.2 c
108.6 14.7689 120.1007 6.8 148 6.8 c
156.5234 6.8 164.8 7.55 172.4 9 C
170.3004 20.9149 L
163.1684 19.5542 155.4857 18.8 148 18.8 c
127.7508 18.8 122.4 22.498 122.4 29.2 c
122.4 32.636 126.7914 35.6 138 35.6 c
146.3367 35.6 151.026 34.6224 160 30.2 C
171.2 37.4 L
167.3668 42.139 164.0947 47.4031 161.3843 53.2 C
185.8 53.2 L
185.8 64.8 L
156.9585 64.8 L
156.2695 67.0637 155.6539 69.3976 155.1097 71.8 C
f
449 408.8 m
458.625 408.8 476.3209 411.0313 483 413 C
481.8 417.9 L
476.0058 416.1921 458.6212 413.8 449 413.8 c
426.751 413.8 417.6 420.5134 417.6 430.4 c
417.6 435.2714 419.8917 439.7481 426.6 445.6 C
423.2 449.2 L
414.9917 442.0396 412.4 436.5297 412.4 430.4 c
412.4 417.4233 423.4669 408.8 449 408.8 c
f
465.2 486.4 m
420.4 486.4 L
420.4 481.4 L
465.2 481.4 L
465.2 486.4 L
f
419.9 380 m
463.7 380 L
463.7 387.1 L
419.9 387.1 L
419.9 380 L
f
419.4 278.6 m
462.2 278.6 L
462.2 287.8 L
419.4 287.8 L
419.4 278.6 L
f
418.9 188.5 m
418.9 177.2 L
460.7 177.2 L
460.7 187.2257 L
464.7333 182.0283 469.5653 175.5879 473.4 170.2 C
481 175.5 L
476.8805 181.3509 471.9669 187.9527 467.8 193.3 C
460.7 188.413 L
460.7 188.5 L
418.9 188.5 L
f
448.8 308.5 m
458.425 308.5 476.4209 310.7313 483.1 312.7 C
481.525 319.7 L
475.1173 317.8939 458.1923 315.65 448.8 315.65 c
427.8042 315.65 419.3 321.7188 419.3 330.8 c
419.3 335.5492 421.7604 340.2562 428 345.35 C
423.25 350.55 L
415.1771 343.9475 411.8 337.3045 411.8 330.8 c
411.8 317.0234 423.2669 308.5 448.8 308.5 c
f
448.6 208.2 m
458.225 208.2 476.5209 210.4313 483.2 212.4 C
481.25 221.5 L
474.2288 219.5957 457.7634 217.5 448.6 217.5 c
428.8574 217.5 421 222.9242 421 231.2 c
421 235.827 423.6292 240.7643 429.4 245.1 C
423.3 251.9 L
415.3625 245.8555 411.2 238.0793 411.2 231.2 c
411.2 216.6235 423.0669 208.2 448.6 208.2 c
f
448.4 107.9 m
458.025 107.9 476.6209 110.1313 483.3 112.1 C
480.975 123.3 L
473.3404 121.2975 457.3345 119.35 448.4 119.35 c
429.9107 119.35 422.7 124.1297 422.7 131.6 c
422.7 136.1048 425.4979 141.2724 430.8 144.85 C
423.35 153.25 L
415.5479 147.7634 410.6 138.8541 410.6 131.6 c
410.6 116.2237 422.8669 107.9 448.4 107.9 c
f
448.2 21.2 m
430.9639 21.2 424.4 25.3351 424.4 32 c
424.4 36.3826 427.3666 41.7805 432.2 44.6 C
423.4 54.6 L
415.7333 49.6714 410 39.6289 410 32 c
410 15.8238 422.6669 7.6 448.2 7.6 c
457.825 7.6 476.7209 9.8313 483.4 11.8 C
480.7 25.1 L
472.4519 22.9993 456.9056 21.2 448.2 21.2 c
f
418.4 89.2 m
418.4 75.8 L
459.2 75.8 L
459.2 85.6216 L
463.2082 80.4293 468.062 73.9355 471.8 68.7 C
480.6 74.8 L
476.3622 80.8189 471.0405 87.9583 466.8 93.4 C
459.2 88.191 L
459.2 89.2 L
418.4 89.2 L
f
365.6 450.2 m
365.6 424.3305 362.658 419.3484 342.7 412.8 C
344.6 408 L
366.4664 415.1746 370.8 422.1253 370.8 450.2 C
370.8 467 L
391.4 467 L
391.4 472 L
370.8 472 L
370.8 493 L
365.6 493 L
365.6 472 L
335 472 L
335 467 L
365.6 467 L
365.6 450.2 L
f
318.6 409.2 m
314.8485 423.268 313.2 436.0862 313.2 450 c
313.2 463.9138 314.8485 476.732 318.6 490.8 C
313.6 491.8 L
310 478.3 308 465.5 308 450 c
308 434.5 310 421.7 313.6 408.2 C
318.6 409.2 L
f
320 309.2 m
316.2831 323.138 314.5 336.2229 314.5 350 c
314.5 363.7771 316.2831 376.862 320 390.8 C
312.8 391.9 L
309.2 378.4 307.2 365.5 307.2 350 c
307.2 334.5 309.2 321.6 312.8 308.1 C
320 309.2 L
f
321.4 209.2 m
317.7178 223.008 315.8 236.3596 315.8 250 c
315.8 263.6404 317.7178 276.9919 321.4 290.8 C
312 292 L
308.4 278.5 306.4 265.5 306.4 250 c
306.4 234.5 308.4 221.5 312 208 C
321.4 209.2 L
f
322.8 109.2 m
319.1524 122.8781 317.1 136.4963 317.1 150 c
317.1 163.5037 319.1524 177.1219 322.8 190.8 C
311.2 192.1 L
307.6 178.6 305.6 165.5 305.6 150 c
305.6 134.5 307.6 121.4 311.2 107.9 C
322.8 109.2 L
f
363.55 350.1 m
363.55 325.1327 361.0907 321.0458 341.75 314.7 C
344.35 307.9 L
366.6497 315.2167 370.95 322.1332 370.95 350.1 C
370.95 364.4 L
391.25 364.4 L
391.25 371.4 L
370.95 371.4 L
370.95 393.1 L
363.55 393.1 L
363.55 371.4 L
334.75 371.4 L
334.75 364.4 L
363.55 364.4 L
363.55 350.1 L
f
361.5 250 m
361.5 225.9349 359.5234 222.7433 340.8 216.6 C
344.1 207.8 L
366.8329 215.2589 371.1 222.1411 371.1 250 C
371.1 261.8 L
391.1 261.8 L
391.1 270.8 L
371.1 270.8 L
371.1 289.8373 L
374.5837 285.3422 378.4935 280.1354 381.7601 275.5301 C
387.5201 279.5801 L
383.9189 284.6948 379.8641 290.1525 376.1802 294.88 C
371.1 291.363 L
371.1 293.2 L
361.5 293.2 L
361.5 270.8 L
334.5 270.8 L
334.5 261.8 L
361.5 261.8 L
361.5 250 L
f
359.45 149.9 m
359.45 126.7372 357.9561 124.4407 339.85 118.5 C
343.85 107.7 L
367.0161 115.301 371.25 122.149 371.25 149.9 C
371.25 159.2 L
390.95 159.2 L
390.95 170.2 L
371.25 170.2 L
371.25 185.9644 L
374.1535 182.1484 377.227 178.0055 379.8001 174.3901 C
386.6401 179.1602 L
382.9325 184.426 378.5104 190.3675 374.7602 195.18 C
371.25 192.7639 L
371.25 193.3 L
359.45 193.3 L
359.45 170.2 L
334.25 170.2 L
334.25 159.2 L
359.45 159.2 L
359.45 149.9 L
f
371.4 82.0319 m
373.6558 79.0202 375.9136 75.9484 377.8401 73.2502 C
385.7601 78.7401 L
381.9461 84.1571 377.1566 90.5825 373.3401 95.48 C
370.3054 93.4 L
357.4 93.4 L
357.4 69.6 L
334 69.6 L
334 56.6 L
357.4 56.6 L
357.4 49.8 L
357.4 27.5394 356.3888 26.1382 338.9 20.4 C
343.6 7.6 L
367.1994 15.3432 371.4 22.1569 371.4 49.8 C
371.4 56.6 L
390.8 56.6 L
390.8 69.6 L
371.4 69.6 L
371.4 82.0319 L
f
310.4 92.2 m
306.8 78.7 304.8 65.5 304.8 50 c
304.8 34.5 306.8 21.3 310.4 7.8 C
324.2 9.2 L
320.5871 22.7481 318.4 36.633 318.4 50 c
318.4 63.367 320.5871 77.2519 324.2 90.8 C
310.4 92.2 L
f
79.4 465.8 m
83.9467 456.0474 88.3573 445.3598 91.6 435.6 C
96.6 437.2 L
93.2294 447.3447 88.9108 457.9774 84.2 468 C
79.4 465.8 L
f
12.6 410.7 m
22.238 428.4184 28.6212 446.7624 33.065 469.4 C
44.8 469.4 L
60.8834 469.4 62.6 467.233 62.6 444.6 c
62.6 421.8336 57.6013 413.4 50.8 413.4 c
45.8141 413.4 42.1929 414.2768 36.5 417 C
34.4 412.4 L
40.5842 409.4417 44.8948 408.4 50.8 408.4 c
60.8426 408.4 67.8 417.9462 67.8 444.6 c
67.8 470.0655 64.6534 474.4 44.8 474.4 C
34.0012 474.4 L
35.1257 480.6793 36.1183 487.2847 37 494.3 C
31.8 494.8 L
30.9064 487.6901 29.8337 480.9069 28.6041 474.4 C
9.2 474.4 L
9.2 469.4 L
27.617 469.4 L
23.0558 447.3743 16.5002 428.8268 8 413.2 C
12.6 410.7 L
f
33.1407 367.6 m
44.2 367.6 L
59.0478 367.6 60.5 365.7489 60.5 344.7 c
60.5 323.0453 55.9968 315.4 49.8 315.4 c
45.2157 315.4 41.1482 316.3651 35.8 318.8 C
33.3 312.3 L
39.2069 309.4719 44.0948 308.3 50 308.3 c
60.8341 308.3 68 317.9491 68 344.7 c
68 369.9876 64.5671 374.5 44.2 374.5 C
34.4361 374.5 L
35.5424 380.7573 36.5234 387.3251 37.4 394.3 C
30.1 394.9 L
29.2046 387.7764 28.1445 381.0038 26.9333 374.5 C
8.7 374.5 L
8.7 367.6 L
25.5679 367.6 L
21.2466 347.0818 15.2025 329.4087 7.2 313 C
13.9 310.1 L
22.8177 328.2321 28.848 346.1143 33.1407 367.6 C
f
33.2126 265.8 m
43.6 265.8 L
57.2122 265.8 58.4 264.2649 58.4 244.8 c
58.4 224.2569 54.3923 217.4 48.8 217.4 c
44.6174 217.4 40.1036 218.4533 35.1 220.6 C
32.2 212.2 L
37.8296 209.5021 43.2949 208.2 49.2 208.2 c
60.8256 208.2 68.2 217.952 68.2 244.8 c
68.2 269.9096 64.4808 274.6 43.6 274.6 C
34.8653 274.6 L
35.9537 280.839 36.928 287.3617 37.8 294.3 C
28.4 295 L
27.503 287.8626 26.4578 281.1014 25.267 274.6 C
8.2 274.6 L
8.2 265.8 L
23.53 265.8 L
19.4628 246.7272 13.9028 229.8451 6.4 212.8 C
15.2 209.5 L
23.4155 227.9623 29.0842 245.4189 33.2126 265.8 C
f
33.2943 164 m
43 164 L
55.3767 164 56.3 162.7808 56.3 144.9 c
56.3 125.4686 52.7878 119.4 47.8 119.4 c
44.019 119.4 39.0589 120.5416 34.4 122.4 C
31.1 112.1 L
36.4523 109.5323 42.4949 108.1 48.4 108.1 c
60.8172 108.1 68.4 117.9549 68.4 144.9 c
68.4 169.8317 64.3944 174.7 43 174.7 C
35.3018 174.7 L
36.3709 180.9181 37.3331 187.4028 38.2 194.3 C
26.7 195.1 L
25.8013 187.9488 24.7732 181.2003 23.605 174.7 C
7.7 174.7 L
7.7 164 L
21.4989 164 L
17.6974 146.3011 12.6008 130.1244 5.6 112.6 C
16.5 108.9 L
24.0352 127.6128 29.3429 144.6649 33.2943 164 C
f
85 368 m
78.4 365.4 L
82.6038 355.5824 86.632 344.9001 89.6 335.1 C
96.5 337.1 L
93.4156 347.2383 89.4134 357.8347 85 368 C
f
77.4 265 m
81.2608 255.1174 84.9067 244.4405 87.6 234.6 C
96.4 237 L
93.6018 247.132 89.9159 257.6921 85.8 268 C
77.4 265 L
f
96.3 136.9 m
93.788 147.0256 90.4185 157.5495 86.6 168 C
76.4 164.6 L
79.9179 154.6525 83.1813 143.9808 85.6 134.1 C
96.3 136.9 L
f
75.4 64.2 m
78.575 54.1875 81.456 43.5212 83.6 33.6 C
96.2 36.8 L
93.9742 46.9193 90.921 57.4069 87.4 68 C
75.4 64.2 L
f
42.4 74.8 m
35.7394 74.8 L
36.7887 80.9977 37.7383 87.4443 38.6 94.3 C
25 95.2 L
24.0995 88.035 23.0909 81.3007 21.9479 74.8 C
7.2 74.8 L
7.2 62.2 L
19.4925 62.2 L
15.9636 45.7849 11.3003 30.2446 4.8 12.4 C
17.8 8.3 L
24.6777 27.1807 29.6237 43.8518 33.3862 62.2 C
42.4 62.2 L
53.5411 62.2 54.2 61.2968 54.2 45 c
54.2 26.6803 51.1833 21.4 46.8 21.4 c
43.4207 21.4 38.0143 22.6299 33.7 24.2 C
30 12 L
35.075 9.5625 41.6949 8 47.6 8 c
60.8087 8 68.6 17.9578 68.6 45 c
68.6 69.7538 64.3081 74.8 42.4 74.8 C
f
263 405.8 m
266.8 409.6 L
232.7622 442.3036 219.6 445.5932 219.6 452.2 c
219.6 458.8276 231.4597 462.7237 263.6 490.4 C
260 494.2 L
223.1406 462.46 214 460.5741 214 452.2 c
214 442.9001 223.8213 443.4431 263 405.8 C
f
262.3 305.6 m
267.9 310.8 L
233.7966 343.4944 221.2 346.1776 221.2 352.2 c
221.2 358.2122 233.0735 362.2245 264.4 389.2 C
259.1 394.4 L
221.3899 361.9274 213 361.281 213 352.2 c
213 341.9817 222.7988 343.553 262.3 305.6 C
f
261.6 205.4 m
269 212 L
234.8311 244.6851 222.8 246.762 222.8 252.2 c
222.8 257.5968 234.6874 261.7253 265.2 288 C
258.2 294.6 L
219.6391 261.3948 212 261.9878 212 252.2 c
212 241.0632 221.7762 243.6629 261.6 205.4 C
f
260.9 105.2 m
270.1 113.2 L
235.8656 145.8759 224.4 147.3464 224.4 152.2 c
224.4 156.9815 236.3012 161.2261 266 186.8 C
257.3 194.8 L
217.8884 160.8623 211 162.6947 211 152.2 c
211 140.1448 220.7537 143.7728 260.9 105.2 C
f
226 52.2 m
226 56.3661 237.9151 60.7269 266.8 85.6 C
256.4 95 L
216.1377 60.3297 210 63.4016 210 52.2 c
210 39.2264 219.7312 43.8827 260.2 5 C
271.2 14.4 L
236.9 47.0667 226 47.9308 226 52.2 c
f
288.8 463.2 m
285.0352 468.547 281.3462 473.536 277.4 478.6 C
273.3 475.7 L
277.233 470.653 281.1549 465.477 284.8 460.3 C
288.8 463.2 L
f
263 473.8 m
258.9 470.9 L
262.833 465.853 266.755 460.6769 270.4 455.5 C
274.4 458.4 L
270.6352 463.747 266.9462 468.736 263 473.8 C
f
95 480.4 m
91.2352 485.747 87.5462 490.736 83.6 495.8 C
79.5 492.9 L
83.433 487.853 87.3549 482.677 91 477.5 C
95 480.4 L
f
80.6 475.6 m
76.8352 480.947 73.1462 485.936 69.2 491 C
65.1 488.1 L
69.033 483.053 72.955 477.8769 76.6 472.7 C
80.6 475.6 L
f
495.4 482.4 m
491.6352 487.747 487.9462 492.736 484 497.8 C
479.9 494.9 L
483.833 489.853 487.7549 484.677 491.4 479.5 C
495.4 482.4 L
f
482.2 477.6 m
478.4352 482.947 474.7462 487.936 470.8 493 C
466.7 490.1 L
470.633 485.053 474.555 479.8769 478.2 474.7 C
482.2 477.6 L
f
399 484.7401 m
395.6117 489.5524 392.2916 494.0424 388.74 498.6 C
385.0501 495.99 L
388.5898 491.4477 392.1194 486.7894 395.4 482.1301 C
399 484.7401 L
f
389.2801 480.4201 m
385.8918 485.2324 382.5717 489.7225 379.0201 494.28 C
375.3301 491.67 L
378.8698 487.1278 382.3996 482.4694 385.6801 477.8102 C
389.2801 480.4201 L
f
198.2 482.4 m
194.4352 487.747 190.7462 492.736 186.8 497.8 C
182.7 494.9 L
186.633 489.853 190.5549 484.677 194.2 479.5 C
198.2 482.4 L
f
185 477.6 m
181.2352 482.947 177.5462 487.936 173.6 493 C
169.5 490.1 L
173.433 485.053 177.355 479.8769 181 474.7 C
185 477.6 L
f
262.8 373.4 m
257.5 369.7 L
261.5033 364.5628 265.8287 358.8358 269.6 353.5 C
274.8 357.2 L
270.9169 362.715 266.8198 368.2416 262.8 373.4 C
f
256.1 268.5 m
260.1736 263.2725 264.9025 256.9947 268.8 251.5 C
275.2 256 L
271.1987 261.6829 266.6934 267.7471 262.6 273 C
256.1 268.5 L
f
254.7 167.3 m
258.8439 161.9823 263.9763 155.1536 268 149.5 C
275.6 154.8 L
271.4804 160.6509 266.5669 167.2527 262.4 172.6 C
254.7 167.3 L
f
272.8 374.5 m
276.8033 369.3628 281.1287 363.6359 284.9 358.3 C
290.1 362 L
286.2169 367.515 282.1198 373.0416 278.1 378.2 C
272.8 374.5 L
f
272.3 273.3 m
276.3736 268.0725 281.1025 261.7947 285 256.3 C
291.4 260.8 L
287.3987 266.4829 282.8934 272.5471 278.8 277.8 C
272.3 273.3 L
f
292.7 159.6 m
288.5805 165.4509 283.6669 172.0527 279.5 177.4 C
271.8 172.1 L
275.9439 166.7823 281.0762 159.9536 285.1 154.3 C
292.7 159.6 L
f
271.3 70.9 m
275.5142 65.4921 281.05 58.1125 285.2 52.3 C
294 58.4 L
289.7622 64.4189 284.4405 71.5583 280.2 77 C
271.3 70.9 L
f
253.3 66.1 m
257.5142 60.6921 263.05 53.3125 267.2 47.5 C
276 53.6 L
271.7622 59.6189 266.4405 66.7583 262.2 72.2 C
253.3 66.1 L
f
63.1 387.4 m
67.1033 382.2628 71.4288 376.5358 75.2 371.2 C
80.4 374.9 L
76.5169 380.415 72.4198 385.9416 68.4 391.1 C
63.1 387.4 L
f
61.1 286.7 m
65.1736 281.4725 69.9025 275.1947 73.8 269.7 C
80.2 274.2 L
76.1987 279.8829 71.6933 285.9471 67.6 291.2 C
61.1 286.7 L
f
59.1 186 m
63.2439 180.6823 68.3763 173.8536 72.4 168.2 C
80 173.5 L
75.8805 179.3509 70.9669 185.9527 66.8 191.3 C
59.1 186 L
f
78.4 392.2 m
82.4033 387.0628 86.7287 381.3359 90.5 376 C
95.7 379.7 L
91.8169 385.215 87.7198 390.7416 83.7 395.9 C
78.4 392.2 L
f
83.8 296 m
77.3 291.5 L
81.3736 286.2725 86.1024 279.9947 90 274.5 C
96.4 279 L
92.3987 284.6829 87.8934 290.7471 83.8 296 C
f
83.9 196.1 m
76.2 190.8 L
80.3439 185.4823 85.4762 178.6536 89.5 173 C
97.1 178.3 L
92.9804 184.1509 88.0669 190.7527 83.9 196.1 C
f
75.1 90.1 m
79.3142 84.6921 84.85 77.3125 89 71.5 C
97.8 77.6 L
93.5622 83.6189 88.2405 90.7583 84 96.2 C
75.1 90.1 L
f
66 91.4 m
57.1 85.3 L
61.3142 79.8921 66.85 72.5125 71 66.7 C
79.8 72.8 L
75.5622 78.8189 70.2405 85.9583 66 91.4 C
f
181 394.2 m
185.0033 389.0627 189.3287 383.3359 193.1 378 C
198.3 381.7 L
194.4169 387.215 190.3198 392.7416 186.3 397.9 C
181 394.2 L
f
179.3 293.5 m
183.3736 288.2725 188.1025 281.9947 192 276.5 C
198.4 281 L
194.3987 286.6829 189.8934 292.7471 185.8 298 C
179.3 293.5 L
f
177.6 192.8 m
181.7439 187.4823 186.8762 180.6536 190.9 175 C
198.5 180.3 L
194.3804 186.1509 189.4669 192.7527 185.3 198.1 C
177.6 192.8 L
f
167.2 389.4 m
171.2033 384.2628 175.5287 378.5358 179.3 373.2 C
184.5 376.9 L
180.6169 382.415 176.5198 387.9416 172.5 393.1 C
167.2 389.4 L
f
175.9 92.1 m
180.1142 86.6921 185.65 79.3125 189.8 73.5 C
198.6 79.6 L
194.3622 85.6189 189.0405 92.7583 184.8 98.2 C
175.9 92.1 L
f
464.5 389.4 m
468.5033 384.2628 472.8288 378.5358 476.6 373.2 C
481.8 376.9 L
477.917 382.415 473.8198 387.9416 469.8 393.1 C
464.5 389.4 L
f
462.3 288.7 m
466.3736 283.4725 471.1025 277.1947 475 271.7 C
481.4 276.2 L
477.3987 281.8829 472.8934 287.9471 468.8 293.2 C
462.3 288.7 L
f
478.6 394.2 m
482.6033 389.0628 486.9287 383.3359 490.7 378 C
495.9 381.7 L
492.017 387.215 487.9198 392.7416 483.9 397.9 C
478.6 394.2 L
f
477.3 293.5 m
481.3736 288.2725 486.1025 281.9947 490 276.5 C
496.4 281 L
492.3987 286.6829 487.8934 292.7471 483.8 298 C
477.3 293.5 L
f
496.9 180.3 m
492.7805 186.1509 487.8669 192.7527 483.7 198.1 C
476 192.8 L
480.1439 187.4823 485.2762 180.6536 489.3 175 C
496.9 180.3 L
f
483.6 98.2 m
474.7 92.1 L
478.9142 86.6921 484.45 79.3125 488.6 73.5 C
497.4 79.6 L
493.1622 85.6189 487.8405 92.7583 483.6 98.2 C
f
372.8302 391.2501 m
376.4331 386.6266 380.326 381.4723 383.7201 376.6702 C
388.4001 380.0001 L
384.9053 384.9636 381.218 389.9375 377.6002 394.58 C
372.8302 391.2501 L
f
383.6301 395.57 m
387.233 390.9465 391.1259 385.7924 394.52 380.9901 C
399.2 384.3201 L
395.7053 389.2836 392.0178 394.2574 388.4001 398.9 C
383.6301 395.57 L
f
382.2101 295.15 m
385.8763 290.4454 390.1323 284.7953 393.6401 279.8501 C
399.4 283.9001 L
395.7989 289.0147 391.7441 294.4725 388.0601 299.2 C
382.2101 295.15 L
f
380.7902 194.73 m
384.5196 189.9441 389.1387 183.7983 392.7601 178.7101 C
399.6 183.4801 L
395.8925 188.7459 391.4703 194.6875 387.7201 199.5 C
380.7902 194.73 L
f
379.3701 94.3101 m
383.1629 89.443 388.1451 82.8014 391.8801 77.5701 C
399.8 83.0601 L
395.986 88.477 391.1965 94.9025 387.3801 99.8 C
379.3701 94.3101 L
f
U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
