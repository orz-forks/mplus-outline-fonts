%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (242C.eps)
%%CreationDate: (4/20/04) (4:24 PM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
1 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
500 600 m
500 700 L
400 700 L
400 600 L
500 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
400 600 m
400 700 L
300 700 L
300 600 L
400 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
500 500 m
500 600 L
400 600 L
400 500 L
500 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
400 500 m
400 600 L
300 600 L
300 500 L
400 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
*u
0 Ap
0 O
0 g
1 D
11.7 612.8 m
23.2264 637.099 31.7393 666.5683 35 693.7 C
32 694 L
28.6875 666.4375 20.224 637.6614 9 614 C
11.7 612.8 L
f
51 613 m
46.3433 613 40.7271 614.2288 33.9413 616.7748 C
32.9413 613.9748 L
39.9945 611.3285 45.928 610 51 610 c
58.9681 610 67 620.6533 67 645 c
67 669.8544 63.7096 674 47 674 C
9 674 L
9 671 L
47 671 l
61.7535 671 64 668.3798 64 645 c
64 623.8472 57.5944 613 51 613 c
f
u
91 681 m
87.2352 686.347 83.875 690.9375 80 696 C
77.6 694.2 L
81.375 689.25 84.5417 684.9218 88.5 679.3 C
91 681 L
f
76 677 m
72.2352 682.347 68.875 686.9375 65 692 C
62.6 690.2 L
66.375 685.25 69.5417 680.9218 73.5 675.3 C
76 677 L
f
U
94 636 m
90 647.5625 85.3213 659.0472 80 670 C
77.3 668.7 L
82.4051 658.1922 87.0625 646.875 91.2 635 C
94 636 L
f
*U
*u
176 678 m
176 681 L
114 681 L
114 678 L
176 678 L
f
186 660 m
186 663 L
108 663 L
108 660 L
186 660 L
f
175 637 m
166.7751 642.7307 152.8121 647 141 647 c
123.2261 647 114 639.841 114 630 c
114 616.8368 123.8831 609 150 609 c
158.1825 609 165.7039 609.608 173 611 C
172.5 614 L
165.6337 612.69 158.232 612 150 612 c
126.0874 612 117 618.4396 117 630 c
117 638.1356 125.363 644 141 644 c
151.4685 644 164.6332 640.393 172.6 635.2 C
175 637 L
f
175 637 m
162.8948 652.9311 156.809 670.8318 156 694 C
153 694 L
153.8216 670.4709 160.0431 651.7256 172.6 635.2 C
175 637 L
f
u
194 680 m
190.2352 685.347 186.875 689.9375 183 695 C
180.6 693.2 L
184.375 688.25 187.5417 683.9218 191.5 678.3 C
194 680 L
f
180 676 m
176.2352 681.347 172.875 685.9375 169 691 C
166.6 689.2 L
170.375 684.25 173.5417 679.9218 177.5 674.3 C
180 676 L
f
U
*U
u
0 D
262 693 m
223.0759 662.5294 213 660.0392 213 652 c
213 643.072 223.6268 643.1376 265 607 C
267.1 609.2 L
227.4808 643.8055 216 645.4024 216 652 c
216 657.8437 227.6128 662.2936 263.9 690.7 C
262 693 L
f
u
284.5 660.3 m
280.5417 665.9218 277.375 670.25 273.6 675.2 C
276 677 L
279.875 671.9375 283.2352 667.347 287 662 C
284.5 660.3 L
f
268.5 656.3 m
264.5417 661.9218 261.375 666.25 257.6 671.2 C
260 673 L
263.875 667.9375 267.2352 663.347 271 658 C
268.5 656.3 L
f
U
U
u
u
391 671 m
373 671 L
373 691 L
370 691 L
370 671 L
336 671 L
336 668 L
370 668 L
370 651 L
370 624.2783 366.3867 619.1609 347 612.8 C
348 610 L
369.3415 617.0024 373 623.5991 373 651 C
373 668 L
391 668 L
391 671 L
f
1 D
316.9 610.7 m
313.5065 623.6733 312 635.7997 312 650 c
312 664.2003 313.5065 676.3265 316.9 689.3 C
314 690 L
310.4733 676.5171 309 663.9841 309 650 c
309 636.0159 310.4733 623.4828 314 610 C
316.9 610.7 L
f
U
u
0 D
396.5 679.3 m
392.5417 684.9218 389.375 689.25 385.6 694.2 C
388 696 L
391.875 690.9375 395.2352 686.347 399 681 C
396.5 679.3 L
f
382.5 675.3 m
378.5417 680.9218 375.375 685.25 371.6 690.2 C
374 692 L
377.875 686.9375 381.2352 682.347 385 677 C
382.5 675.3 L
f
U
U
*u
u
1 D
426.576 652.2192 m
417.9584 645.3675 413 636.7818 413 631 c
413 618.8352 424.0797 611 449 611 c
458.0192 611 476.0497 613.2124 483 615 C
482.4 617.9 L
475.6754 616.1705 457.8851 614 449 614 c
426.1123 614 416 620.6161 416 631 c
416 635.7598 420.5268 643.6195 428.576 650.0192 C
426.576 652.2192 L
f
470 683 m
470 686 L
421 686 L
421 683 L
470 683 L
f
U
u
492 681 m
488.2352 686.347 484.875 690.9375 481 696 C
478.6 694.2 L
482.375 689.25 485.5417 684.9218 489.5 679.3 C
492 681 L
f
477 677 m
473.2352 682.347 469.875 686.9375 466 692 C
463.6 690.2 L
467.375 685.25 470.5417 680.9218 474.5 675.3 C
477 677 L
f
U
*U
u
469.1667 581.1636 m
469.1667 586.497 L
420.8333 586.497 L
420.8333 581.1636 L
469.1667 581.1636 L
f
468.3333 479.3271 m
468.3333 486.9939 L
420.6667 486.9939 L
420.6667 479.3271 L
468.3333 479.3271 L
f
467.5 377.5 m
467.5 387.5 L
420.5 387.5 L
420.5 377.5 L
467.5 377.5 L
f
466.6667 275.6636 m
466.6667 287.997 L
420.3333 287.997 L
420.3333 275.6636 L
466.6667 275.6636 L
f
465.8334 173.8364 m
465.8334 188.503 L
420.1667 188.503 L
420.1667 173.8364 L
465.8334 173.8364 L
f
U
u
426.1466 553.013 m
417.7227 546.4058 412.6667 537.5319 412.6667 531.3303 c
412.6667 518.5517 423.8762 510.4969 449.1667 510.4969 c
458.4118 510.4969 476.2819 512.7331 483.6667 514.6636 C
482.6667 519.9137 L
475.5221 518.0421 458.0025 515.8303 449.1667 515.8303 c
427.6275 515.8303 418.1667 522.0509 418.1667 531.6636 c
418.1667 536.3306 422.3812 543.6858 429.8134 549.5129 C
426.1466 553.013 L
f
425.7173 453.8067 m
417.487 447.444 412.3333 438.2819 412.3333 431.6606 c
412.3333 418.2682 423.6726 409.9939 449.3333 409.9939 c
458.8045 409.9939 476.5142 412.2539 484.3334 414.3272 C
482.9333 421.9273 L
475.3688 419.9136 458.1199 417.6607 449.3333 417.6607 c
429.1428 417.6607 420.3335 423.4857 420.3335 432.3273 c
420.3335 436.9014 424.2355 443.7522 431.0507 449.0067 C
425.7173 453.8067 L
f
425.288 354.6096 m
417.2514 348.4914 412 339.041 412 332 c
412 317.9939 423.4691 309.5 449.5 309.5 c
459.1971 309.5 476.7464 311.7838 485 314 C
483.2 323.95 L
475.2155 321.7942 458.2373 319.5 449.5 319.5 c
430.6579 319.5 422.5 324.9294 422.5 333 c
422.5 337.4813 426.0897 343.8277 432.288 348.5096 C
425.288 354.6096 L
f
424.8587 255.4034 m
417.0157 249.5297 411.6667 239.7911 411.6667 232.3303 c
411.6667 217.7104 423.2655 208.9969 449.6667 208.9969 c
459.5897 208.9969 476.9786 211.3046 485.6667 213.6636 C
483.4667 225.9637 L
475.0622 223.6658 458.3547 221.3303 449.6667 221.3303 c
432.1731 221.3303 424.6667 226.3642 424.6667 233.6636 c
424.6667 238.0521 427.9441 243.894 433.5254 248.0033 C
424.8587 255.4034 L
f
424.4293 156.2062 m
416.78 150.577 411.3334 140.5502 411.3334 132.6697 c
411.3334 117.4361 423.062 108.5031 449.8333 108.5031 c
459.9823 108.5031 477.2109 110.8345 486.3333 113.3364 C
483.7333 127.9863 L
474.9089 125.5463 458.4721 123.1697 449.8333 123.1697 c
433.6882 123.1697 426.8333 127.808 426.8333 134.3364 c
426.8333 138.632 429.7983 143.9695 434.7626 147.5063 C
424.4293 156.2062 L
f
U
u
492.6667 580.6636 m
488.821 586.1299 485.1354 591.1532 481.1667 596.3303 C
477.3666 593.6136 L
481.2604 588.5282 484.7486 583.7677 488.75 578.0802 C
492.6667 580.6636 L
f
493.3334 480.3272 m
489.4068 485.9127 485.3959 491.3689 481.3333 496.6606 C
476.1333 493.0272 L
480.1458 487.8063 483.9554 482.6135 488 476.8605 C
493.3334 480.3272 L
f
494 380 m
489.9926 385.7047 485.6562 391.5937 481.5 397 C
474.9 392.45 L
479.0312 387.0937 483.1623 381.4686 487.25 375.65 C
494 380 L
f
494.6667 279.6636 m
490.5784 285.4876 485.9167 291.8095 481.6667 297.3303 C
473.6666 291.8636 L
477.9166 286.3719 482.3692 280.3145 486.5 274.4302 C
494.6667 279.6636 L
f
495.3333 179.3364 m
491.1642 185.2796 486.1771 192.0343 481.8333 197.6697 C
472.4334 191.2864 L
476.8021 185.6593 481.5761 179.1696 485.75 173.2198 C
495.3333 179.3364 L
f
U
u
477 576.6636 m
473.1543 582.1299 469.4687 587.1532 465.5 592.3303 C
461.6999 589.6136 L
465.5937 584.5282 469.0819 579.7677 473.0833 574.0802 C
477 576.6636 L
f
477 476.3272 m
473.0735 481.9127 469.0625 487.3689 465 492.6606 C
459.7999 489.0272 L
463.8124 483.8063 467.622 478.6135 471.6666 472.8605 C
477 476.3272 L
f
477 376 m
472.9926 381.7047 468.6562 387.5937 464.5 393 C
457.9 388.45 L
462.0312 383.0937 466.1623 377.4686 470.25 371.65 C
477 376 L
f
477 275.6636 m
472.9117 281.4876 468.25 287.8095 464 293.3303 C
456 287.8636 L
460.2499 282.3719 464.7025 276.3145 468.8333 270.4302 C
477 275.6636 L
f
477 175.3364 m
472.8309 181.2796 467.8438 188.0343 463.5 193.6697 C
454.1001 187.2864 L
458.4688 181.6593 463.2428 175.1696 467.4167 169.2198 C
477 175.3364 L
f
U
*u
u
u
465 72 m
465 89 L
420 89 L
420 72 L
465 72 L
f
U
424 57 m
416.5443 51.6153 411 41.3003 411 33 c
411 17.1526 422.8585 8 450 8 c
460.375 8 477.4431 10.3553 487 13 C
484 30 L
474.7556 27.4179 458.5895 25 450 25 c
435.2035 25 429 29.2428 429 35 c
429 39.2028 431.6527 44.0359 436 47 C
424 57 L
f
U
u
496 79 m
491.75 85.0625 486.4375 92.25 482 98 C
471.2 90.7 L
475.6875 84.9375 480.7829 78.0155 485 72 C
496 79 L
f
477 75 m
472.75 81.0625 467.4375 88.25 463 94 C
452.2 86.7 L
456.6875 80.9375 461.7829 74.0155 466 68 C
477 75 L
f
U
*U
u
318.7001 510.5803 m
315.3484 523.4429 313.8334 535.7748 313.8334 549.9969 c
313.8334 564.2191 315.3484 576.5509 318.7001 589.4136 C
313.3333 590.3303 L
309.8219 576.8522 308.3333 564.2212 308.3333 549.9969 c
308.3333 535.7727 309.8219 523.1416 313.3333 509.6636 C
318.7001 510.5803 L
f
320.5001 410.4606 m
317.1903 423.2124 315.6668 435.7498 315.6668 449.9939 c
315.6668 464.2379 317.1903 476.7752 320.5001 489.5272 C
312.6666 490.6606 L
309.1705 477.1872 307.6666 464.4583 307.6666 449.9939 c
307.6666 435.5295 309.1705 422.8005 312.6666 409.3272 C
320.5001 410.4606 L
f
322.3 310.35 m
319.032 322.9911 317.5 335.7341 317.5 350 c
317.5 364.2659 319.032 377.0087 322.3 389.65 C
312 391 L
308.5192 377.5314 307 364.7045 307 350 c
307 335.2954 308.5192 322.4685 312 309 C
322.3 310.35 L
f
324.1 210.2303 m
320.8739 222.7607 319.3334 235.7092 319.3334 249.9969 c
319.3334 264.2847 320.8739 277.2331 324.1 289.7636 C
311.3333 291.3303 L
307.8679 277.8665 306.3333 264.9416 306.3333 249.9969 c
306.3333 235.0522 307.8679 222.1273 311.3333 208.6636 C
324.1 210.2303 L
f
325.8999 110.1197 m
322.7157 122.5394 321.1666 135.6934 321.1666 150.003 c
321.1666 164.3127 322.7157 177.4666 325.8999 189.8864 C
310.6667 191.6697 L
307.2165 178.2107 305.6667 165.1879 305.6667 150.003 c
305.6667 134.8182 307.2165 121.7953 310.6667 108.3364 C
325.8999 110.1197 L
f
U
u
390.8333 570.9969 m
372.6667 570.9969 L
372.6667 591.1636 L
367.1666 591.1636 L
367.1666 570.9969 L
335.5 570.9969 L
335.5 565.8302 L
367.4999 565.8302 L
367.4999 550.6636 L
367.4999 525.0699 364.457 520.6622 345.6666 514.497 C
347.5 509.4969 L
369.1621 516.6045 373 523.3795 373 550.6636 C
373 565.8302 L
390.8333 565.8302 L
390.8333 570.9969 L
f
390.6667 470.9939 m
372.3333 470.9939 L
372.3333 491.3273 L
364.3332 491.3273 L
364.3332 470.9939 L
335 470.9939 L
335 463.6604 L
364.9998 463.6604 L
364.9998 450.3272 L
364.9998 425.8614 362.5272 422.1636 344.3332 416.194 C
347 408.9939 L
368.9828 416.2066 373 423.1599 373 450.3272 C
373 463.6604 L
390.6667 463.6604 L
390.6667 470.9939 L
f
390.5 371 m
372 371 L
372 391.5 L
361.5 391.5 L
361.5 371 L
334.5 371 L
334.5 361.5 L
362.5 361.5 L
362.5 350 L
362.5 326.6621 360.5977 323.6739 343 317.9 C
346.5 308.5 L
368.8034 315.818 373 322.9495 373 350 C
373 361.5 L
390.5 361.5 L
390.5 371 L
f
390.3333 270.9969 m
371.6667 270.9969 L
371.6667 291.6636 L
358.6666 291.6636 L
358.6666 270.9969 L
334 270.9969 L
334 259.3302 L
359.9999 259.3302 L
359.9999 249.6636 L
359.9999 227.4536 358.6679 225.1753 341.6666 219.597 C
346 207.9969 L
368.6241 215.4201 373 222.7299 373 249.6636 C
373 259.3302 L
390.3333 259.3302 L
390.3333 270.9969 L
f
390.1667 171.003 m
371.3334 171.003 L
371.3334 191.8364 L
355.8334 191.8364 L
355.8334 171.003 L
333.5 171.003 L
333.5 157.1698 L
357.5001 157.1698 L
357.5001 149.3364 L
357.5001 128.2543 356.7384 126.6856 340.3334 121.303 C
345.5 107.5031 L
368.4448 115.0314 373 122.5195 373 149.3364 C
373 157.1698 L
390.1667 157.1698 L
390.1667 171.003 L
f
U
u
395.4333 578.847 m
391.5022 584.4341 388.0989 589.0793 384.28 594.0686 C
387.9 596.6636 L
391.7948 591.5824 395.3918 586.6788 399.1667 581.3136 C
395.4333 578.847 L
f
394.3666 478.3939 m
390.4627 483.9464 386.8229 488.9085 382.9599 493.9373 C
387.8 497.3273 L
391.7146 492.2273 395.5485 487.0107 399.3333 481.6273 C
394.3666 478.3939 L
f
393.3 377.95 m
389.4232 383.4678 385.5469 388.7469 381.64 393.815 C
387.7 398 L
391.6344 392.8813 395.7051 387.3516 399.5 381.95 C
393.3 377.95 L
f
392.2333 277.497 m
388.3837 282.9801 384.2708 288.5762 380.32 293.6836 C
387.6 298.6636 L
391.5541 293.5261 395.8618 287.6834 399.6667 282.2636 C
392.2333 277.497 L
f
391.1667 177.0531 m
387.3443 182.5016 382.9949 188.4146 379.0001 193.5614 C
387.5 199.3364 L
391.4739 194.1801 396.0184 188.0244 399.8333 182.5864 C
391.1667 177.0531 L
f
U
u
381.0666 574.9136 m
377.1355 580.5008 373.7323 585.1459 369.9133 590.1353 C
373.5333 592.7303 L
377.4281 587.6491 381.0252 582.7455 384.8 577.3803 C
381.0666 574.9136 L
f
379.6333 474.5272 m
375.7294 480.0797 372.0895 485.0418 368.2266 490.0706 C
373.0667 493.4606 L
376.9813 488.3606 380.8152 483.144 384.6 477.7606 C
379.6333 474.5272 L
f
378.2001 374.15 m
374.3233 379.6679 370.447 384.9469 366.5401 390.015 C
372.6001 394.2 L
376.5344 389.0813 380.6052 383.5516 384.4001 378.15 C
378.2001 374.15 L
f
376.7667 273.7636 m
372.9171 279.2468 368.8042 284.8428 364.8534 289.9503 C
372.1334 294.9303 L
376.0876 289.7928 380.3951 283.9501 384.2001 278.5303 C
376.7667 273.7636 L
f
375.3335 173.3865 m
371.511 178.835 367.1616 184.7479 363.1669 189.8948 C
371.6668 195.6697 L
375.6407 190.5135 380.1852 184.3577 384.0001 178.9197 C
375.3335 173.3865 L
f
U
*u
u
390 71 m
371 71 L
371 92 L
353 92 L
353 71 L
333 71 L
333 55 L
355 55 L
355 49 L
355 29.0458 354.8087 28.187 339 23 C
345 7 L
368.2654 14.6335 373 22.2999 373 49 C
373 55 L
390 55 L
390 71 L
f
327.7 90 m
310 92 L
306.5652 78.5458 305 65.425 305 50 c
305 34.575 306.5652 21.4542 310 8 C
327.7 10 L
324.5576 22.309 323 35.6685 323 50 c
323 64.3315 324.5576 77.691 327.7 90 C
f
U
u
399.9 82.9 m
396.075 88.3562 391.2937 94.825 387.3 100 C
377.5801 93.43 L
381.6188 88.2438 386.2047 82.0139 390.0001 76.6 C
399.9 82.9 L
f
383.7001 79.3 m
379.8751 84.7562 375.0938 91.225 371.1001 96.4 C
361.3802 89.8301 L
365.4189 84.6438 370.0049 78.414 373.8002 73.0001 C
383.7001 79.3 L
f
U
*U
u
0 D
265 506.4969 m
222.991 542.9615 212.5 541.9502 212.5 551.9969 c
212.5 561.0077 222.2487 562.4561 262.1667 593.497 C
265.7501 589.4136 L
230.1436 561.6891 218.5001 557.561 218.5001 551.9969 c
218.5001 545.7874 229.5183 544.5021 268.9167 510.3303 C
265 506.4969 L
f
265 405.9939 m
222.3552 442.7855 212 440.8285 212 451.9939 c
212 461.9762 221.4215 462.3829 262.3333 493.9939 C
267.6001 488.1272 L
232.6744 461.0847 221.0001 457.2784 221.0001 451.9939 c
221.0001 446.1724 231.5558 445.1986 270.7334 411.4606 C
265 405.9939 L
f
265 305.5 m
221.7194 342.6186 211.5 339.7159 211.5 352 c
211.5 362.9537 220.5943 362.3187 262.5 394.5 C
269.45 386.85 L
235.2049 360.4894 223.5 357.0049 223.5 352 c
223.5 346.5666 233.593 345.9043 272.55 312.6 C
265 305.5 L
f
265 204.9969 m
221.0836 242.4426 211 238.5942 211 251.9969 c
211 263.9222 219.7671 262.2455 262.6667 294.997 C
271.3001 285.5636 L
237.7357 259.885 226.0001 256.7222 226.0001 251.9969 c
226.0001 246.9516 235.6305 246.6009 274.3667 213.7303 C
265 204.9969 L
f
265 104.5031 m
220.4479 142.2757 210.5 137.4817 210.5 152.003 c
210.5 164.8998 218.94 162.1813 262.8333 195.503 C
273.1499 184.2864 L
240.2663 159.2897 228.4999 156.4487 228.4999 152.003 c
228.4999 147.3457 237.6678 147.3065 276.1833 114.8697 C
265 104.5031 L
f
U
u
284.25 558.5802 m
280.2486 564.2677 276.7604 569.0282 272.8666 574.1136 C
276.6667 576.8303 L
280.6354 571.6532 284.321 566.6298 288.1667 561.1636 C
284.25 558.5802 L
f
284 456.8605 m
279.9554 462.6135 276.1458 467.8063 272.1333 473.0272 C
277.3334 476.6606 L
281.3959 471.3689 285.4069 465.9127 289.3334 460.3272 C
284 456.8605 L
f
283.75 355.15 m
279.6623 360.9686 275.5312 366.5937 271.4 371.95 C
278 376.5 L
282.1562 371.0937 286.4926 365.2047 290.5 359.5 C
283.75 355.15 L
f
283.5 253.4302 m
279.3692 259.3145 274.9166 265.3719 270.6667 270.8636 C
278.6667 276.3303 L
282.9167 270.8094 287.5784 264.4876 291.6667 258.6636 C
283.5 253.4302 L
f
283.25 151.7198 m
279.0761 157.6696 274.3021 164.1593 269.9334 169.7864 C
279.3333 176.1697 L
283.6771 170.5343 288.6642 163.7796 292.8333 157.8364 C
283.25 151.7198 L
f
U
u
267.9167 554.0802 m
263.9152 559.7676 260.427 564.5282 256.5333 569.6136 C
260.3334 572.3303 L
264.3021 567.1532 267.9877 562.1298 271.8334 556.6636 C
267.9167 554.0802 L
f
267.3333 451.8604 m
263.2888 457.6134 259.4791 462.8063 255.4666 468.0271 C
260.6667 471.6605 L
264.7292 466.3688 268.7402 460.9127 272.6667 455.3272 C
267.3333 451.8604 L
f
266.75 349.65 m
262.6623 355.4686 258.5312 361.0937 254.4 366.45 C
261 371 L
265.1562 365.5937 269.4926 359.7047 273.5 354 C
266.75 349.65 L
f
266.1667 247.4302 m
262.0358 253.3145 257.5833 259.3719 253.3333 264.8636 C
261.3334 270.3303 L
265.5833 264.8094 270.2451 258.4876 274.3334 252.6636 C
266.1667 247.4302 L
f
265.5834 145.2198 m
261.4094 151.1696 256.6354 157.6593 252.2667 163.2864 C
261.6667 169.6697 L
266.0104 164.0343 270.9975 157.2797 275.1667 151.3364 C
265.5834 145.2198 L
f
U
u
265 4 m
219.8121 42.0997 210 36.3599 210 52 c
210 65.8683 218.1128 62.1081 263 96 C
275 83 L
242.7971 58.6853 231 56.1661 231 52 c
231 47.7308 239.7053 48.0031 278 16 C
265 4 L
f
u
283 50 m
278.7829 56.0155 273.6875 62.9375 269.2 68.7 C
280 76 L
284.4375 70.25 289.75 63.0625 294 57 C
283 50 L
f
265 43 m
260.7829 49.0155 255.6875 55.9375 251.2 61.7 C
262 69 L
266.4375 63.25 271.75 56.0625 276 50 C
265 43 L
f
U
U
u
1 D
175.5 576.9969 m
175.5 581.997 L
113.6667 581.997 L
113.6667 576.9969 L
175.5 576.9969 L
f
175 475.9938 m
175 482.994 L
113.3333 482.994 L
113.3333 475.9938 L
175 475.9938 L
f
174.5 375 m
174.5 384 L
113 384 L
113 375 L
174.5 375 L
f
174 273.9969 m
174 284.997 L
112.6667 284.997 L
112.6667 273.9969 L
174 273.9969 L
f
173.5 173.0031 m
173.5 186.003 L
112.3334 186.003 L
112.3334 173.0031 L
173.5 173.0031 L
f
U
u
186.3334 558.8302 m
186.3334 563.8303 L
107.6667 563.8303 L
107.6667 558.8302 L
186.3334 558.8302 L
f
186.6667 457.6605 m
186.6667 464.6606 L
107.3333 464.6606 L
107.3333 457.6605 L
186.6667 457.6605 L
f
187 356.5 m
187 365.5 L
107 365.5 L
107 356.5 L
187 356.5 L
f
187.3334 255.3302 m
187.3334 266.3303 L
106.6667 266.3303 L
106.6667 255.3302 L
187.3334 255.3302 L
f
187.6667 154.1697 m
187.6667 167.1697 L
106.3334 167.1697 L
106.3334 154.1697 L
187.6667 154.1697 L
f
U
u
174.8333 537.3303 m
162.6013 553.6184 156.4531 571.6417 155.6667 594.1636 C
150.1666 594.1636 L
150.9859 570.7003 157.4689 551.4635 170.3333 534.4969 C
174.8333 537.3303 L
f
174.6667 437.6606 m
162.3079 454.3058 156.0971 472.4516 155.3333 494.3273 C
147.3332 494.3273 L
148.1502 470.9296 154.8946 451.2013 168.0665 433.7939 C
174.6667 437.6606 L
f
174.5 338 m
162.0145 355.0022 155.7412 373.2706 155 394.5 C
144.5 394.5 L
145.3147 371.1681 152.3206 350.9483 165.8 333.1 C
174.5 338 L
f
174.3333 238.3303 m
161.721 255.6896 155.3853 274.0806 154.6667 294.6636 C
141.6666 294.6636 L
142.479 271.3975 149.7464 250.6862 163.5333 232.3969 C
174.3333 238.3303 L
f
174.1667 138.6697 m
161.4276 156.386 155.0294 174.8996 154.3334 194.8364 C
138.8334 194.8364 L
139.6436 171.636 147.1723 150.4333 161.2667 131.7031 C
174.1667 138.6697 L
f
U
u
174.8333 537.3303 m
166.6344 543.0429 152.289 547.497 141 547.497 c
122.6171 547.497 113.3333 540.194 113.3333 529.9969 c
113.3333 516.7336 123.3916 508.8303 150 508.8303 c
158.2393 508.8303 166.106 509.4712 173.5 510.8303 C
172.7833 515.9303 L
165.7144 514.6494 157.968 513.9303 150 513.9303 c
127.2343 513.9303 119.0001 519.6707 119.0001 529.9969 c
119.0001 537.2725 126.46 542.4969 141 542.4969 c
150.9476 542.4969 162.3296 539.4112 170.3333 534.4969 C
174.8333 537.3303 L
f
174.6667 437.6606 m
166.4936 443.3551 151.766 447.9939 141 447.9939 c
122.0081 447.9939 112.6666 440.547 112.6666 429.9939 c
112.6666 416.6304 122.9001 408.6606 150 408.6606 c
158.2961 408.6606 166.5081 409.3344 174 410.6606 C
173.0667 417.8607 L
165.795 416.6087 157.704 415.8607 150 415.8607 c
128.3812 415.8607 121.0001 420.9017 121.0001 429.9939 c
121.0001 436.4093 127.557 440.9938 141 440.9938 c
150.4266 440.9938 160.026 438.4294 168.0665 433.7939 C
174.6667 437.6606 L
f
174.5 338 m
166.353 343.6765 151.243 348.5 141 348.5 c
121.3992 348.5 112 340.9091 112 330 c
112 316.5364 122.4086 308.5 150 308.5 c
158.3529 308.5 166.9101 309.2067 174.5 310.5 C
173.35 319.8 L
165.8757 318.5771 157.4401 317.8 150 317.8 c
129.528 317.8 123 322.1418 123 330 c
123 335.5554 128.6539 339.5 141 339.5 c
149.9058 339.5 157.7226 337.4569 165.8 333.1 C
174.5 338 L
f
174.3333 238.3303 m
166.2122 243.9887 150.72 248.997 141 248.997 c
120.7903 248.997 111.3333 241.2621 111.3333 229.9969 c
111.3333 216.4332 121.9171 208.3303 150 208.3303 c
158.4098 208.3303 167.3122 209.0699 175 210.3303 C
173.6333 221.7303 L
165.9563 220.5365 157.1761 219.7303 150 219.7303 c
130.6749 219.7303 125.0001 223.3728 125.0001 229.9969 c
125.0001 234.6923 129.7508 237.9969 141 237.9969 c
149.3848 237.9969 155.419 236.4751 163.5333 232.3969 C
174.3333 238.3303 L
f
174.1667 138.6697 m
166.0715 144.3101 150.1969 149.503 141 149.503 c
120.1813 149.503 110.6667 141.6242 110.6667 130.003 c
110.6667 116.3392 121.4257 108.1697 150 108.1697 c
158.4666 108.1697 167.7143 108.9423 175.5 110.1697 C
173.9167 123.6696 L
166.0369 122.5048 156.9122 121.6696 150 121.6696 c
131.8217 121.6696 127 124.6129 127 130.003 c
127 133.8384 130.8477 136.5031 141 136.5031 c
148.8639 136.5031 153.1156 135.5026 161.2667 131.7031 C
174.1667 138.6697 L
f
U
u
195 580.1636 m
191.1544 585.6299 187.4688 590.6532 183.5 595.8303 C
179.7 593.1136 L
183.5937 588.0282 187.0819 583.2677 191.0833 577.5803 C
195 580.1636 L
f
196.0001 480.3273 m
192.0735 485.9127 188.0625 491.3689 184 496.6606 C
178.7999 493.0272 L
182.8125 487.8064 186.6221 482.6135 190.6666 476.8605 C
196.0001 480.3273 L
f
197 380.5 m
192.9926 386.2047 188.6562 392.0937 184.5 397.5 C
177.9 392.95 L
182.0312 387.5937 186.1623 381.9686 190.25 376.15 C
197 380.5 L
f
198 280.6636 m
193.9118 286.4876 189.25 292.8095 185 298.3303 C
177 292.8636 L
181.25 287.3719 185.7025 281.3145 189.8333 275.4302 C
198 280.6636 L
f
199 180.8364 m
194.8308 186.7796 189.8437 193.5343 185.5 199.1697 C
176.1 192.7864 L
180.4688 187.1593 185.2427 180.6696 189.4167 174.7197 C
199 180.8364 L
f
U
u
180.3334 576.1636 m
176.4877 581.6299 172.8021 586.6532 168.8333 591.8303 C
165.0333 589.1136 L
168.927 584.0282 172.4152 579.2677 176.4166 573.5803 C
180.3334 576.1636 L
f
180.6667 476.3273 m
176.7402 481.9127 172.7292 487.3689 168.6667 492.6606 C
163.4666 489.0272 L
167.4791 483.8064 171.2887 478.6135 175.3333 472.8605 C
180.6667 476.3273 L
f
181 376.5 m
176.9926 382.2047 172.6562 388.0937 168.5 393.5 C
161.9 388.95 L
166.0312 383.5937 170.1623 377.9686 174.25 372.15 C
181 376.5 L
f
181.3334 276.6636 m
177.2451 282.4876 172.5833 288.8095 168.3333 294.3303 C
160.3333 288.8636 L
164.5833 283.3719 169.0358 277.3145 173.1666 271.4302 C
181.3334 276.6636 L
f
181.6667 176.8364 m
177.4975 182.7796 172.5104 189.5343 168.1667 195.1697 C
158.7667 188.7864 L
163.1355 183.1593 167.9094 176.6696 172.0834 170.7197 C
181.6667 176.8364 L
f
U
*u
u
199.9 81 m
195.65 87.0625 190.3375 94.25 185.9 100 C
175.1 92.7 L
179.5875 86.9375 184.6829 80.0155 188.9 74 C
199.9 81 L
f
181.9 77 m
177.65 83.0625 172.3375 90.25 167.9 96 C
157.1 88.7 L
161.5875 82.9375 166.6829 76.0155 170.9 70 C
181.9 77 L
f
U
173 72 m
173 87 L
112 87 L
112 72 L
173 72 L
f
188 53 m
188 68 L
106 68 L
106 53 L
188 53 L
f
174 39 m
161.1342 57.0733 154.6735 75.7095 154 95 C
136 95 L
136.8078 71.8654 144.5981 50.1711 159 31 C
174 39 L
f
174 39 m
165.9308 44.6223 149.6739 50 141 50 c
119.5724 50 110 41.9772 110 30 c
110 16.236 120.9342 8 150 8 c
158.5234 8 168.1164 8.8055 176 10 C
174.2 25.6 L
166.1176 24.4642 156.6482 23.6 150 23.6 c
132.9686 23.6 129 25.844 129 30 c
129 32.9753 131.9447 35 141 35 c
148.343 35 150.812 34.5208 159 31 C
174 39 L
f
*U
u
13.0834 512.4969 m
24.5616 537.8479 32.5753 566.0998 36 593.7136 C
30.6666 594.1636 L
27.1354 566.1115 19.2179 538.6732 8.1667 514.3303 C
13.0834 512.4969 L
f
14.4667 412.1939 m
25.8968 438.5967 33.4113 465.6314 37.0001 493.7272 C
29.3332 494.3273 L
25.5832 465.7855 18.2118 439.6849 7.3333 414.6606 C
14.4667 412.1939 L
f
15.85 311.9 m
27.2319 339.3546 34.2471 365.1721 38 393.75 C
28 394.5 L
24.0312 365.4687 17.2057 340.7057 6.5 315 C
15.85 311.9 L
f
17.2334 211.5969 m
28.5671 240.1035 35.0831 264.7036 39 293.7636 C
26.6666 294.6636 L
22.4791 265.1428 16.1996 241.7174 5.6667 215.3303 C
17.2334 211.5969 L
f
18.6166 111.3031 m
29.9022 140.8614 35.919 164.2444 40 193.7864 C
25.3334 194.8364 L
20.9271 164.826 15.1936 142.7382 4.8334 115.6697 C
18.6166 111.3031 L
f
U
u
32.1177 513.6426 m
38.9165 511.0717 45.1389 509.6636 50.5 509.6636 c
59.0016 509.6636 67 520.1303 67 544.9969 c
67 570.5426 63.5993 574.6636 46 574.6636 C
8.6667 574.6636 L
8.6667 569.4969 L
45.5 569.4969 l
59.6154 569.4969 61.4999 567.2915 61.4999 544.9969 c
61.4999 524.6939 55.7282 514.8303 49.6666 514.8303 c
45.311 514.8303 40.0214 516.0228 33.5677 518.3927 C
32.1177 513.6426 L
f
31.2941 413.3104 m
37.8384 410.8148 44.3499 409.3272 50 409.3272 c
59.0352 409.3272 67 419.6072 67 444.9939 c
67 471.2309 63.489 475.3273 44.9999 475.3273 C
8.3333 475.3273 L
8.3333 467.9938 L
43.9999 467.9938 l
57.4774 467.9938 58.9998 466.2033 58.9998 444.9939 c
58.9998 425.5406 53.8619 416.6607 48.3332 416.6607 c
44.2787 416.6607 39.3158 417.8167 33.1942 420.0105 C
31.2941 413.3104 L
f
30.4707 312.9874 m
36.7605 310.5672 43.5609 309 49.5 309 c
59.0688 309 67 319.0934 67 345 c
67 371.9282 63.3787 376 44 376 C
8 376 L
8 366.5 L
42.5 366.5 l
55.3395 366.5 56.5 365.1243 56.5 345 c
56.5 326.3964 51.9959 318.5 47 318.5 c
43.2466 318.5 38.6103 319.6197 32.8207 321.6374 C
30.4707 312.9874 L
f
29.6471 212.6552 m
35.6824 210.3104 42.7718 208.6636 49 208.6636 c
59.1023 208.6636 67 218.5704 67 244.9969 c
67 272.6164 63.2684 276.6636 43 276.6636 C
7.6667 276.6636 L
7.6667 264.9969 L
41 264.9969 l
53.2015 264.9969 53.9999 264.036 53.9999 244.9969 c
53.9999 227.2431 50.1297 220.3303 45.6666 220.3303 c
42.2143 220.3303 37.9046 221.4137 32.4471 223.2552 C
29.6471 212.6552 L
f
28.8236 112.3322 m
34.6045 110.0627 41.9828 108.3364 48.5 108.3364 c
59.1358 108.3364 67 118.0565 67 145.003 c
67 173.3137 63.1581 177.3364 42 177.3364 C
7.3334 177.3364 L
7.3334 163.5031 L
39.5001 163.5031 l
51.0636 163.5031 51.5001 162.957 51.5001 145.003 c
51.5001 128.0989 48.2636 122.1697 44.3334 122.1697 c
41.1821 122.1697 37.199 123.2166 32.0735 124.8821 C
28.8236 112.3322 L
f
U
u
92.1667 580.6636 m
88.321 586.1299 84.6354 591.1532 80.6667 596.3303 C
76.8666 593.6136 L
80.7604 588.5282 84.2486 583.7677 88.25 578.0802 C
92.1667 580.6636 L
f
93.3334 480.3272 m
89.4069 485.9127 85.3959 491.3689 81.3334 496.6606 C
76.1333 493.0272 L
80.1458 487.8063 83.9554 482.6135 88 476.8605 C
93.3334 480.3272 L
f
94.5 380 m
90.4926 385.7047 86.1562 391.5937 82 397 C
75.4 392.45 L
79.5312 387.0937 83.6623 381.4686 87.75 375.65 C
94.5 380 L
f
95.6667 279.6636 m
91.5784 285.4876 86.9167 291.8095 82.6667 297.3303 C
74.6667 291.8636 L
78.9166 286.3719 83.3692 280.3145 87.5 274.4302 C
95.6667 279.6636 L
f
96.8333 179.3364 m
92.6642 185.2796 87.6771 192.0343 83.3333 197.6697 C
73.9334 191.2864 L
78.3021 185.6593 83.0761 179.1696 87.25 173.2198 C
96.8333 179.3364 L
f
U
u
76.6667 576.6636 m
72.821 582.1299 69.1354 587.1532 65.1667 592.3303 C
61.3666 589.6136 L
65.2604 584.5282 68.7486 579.7677 72.75 574.0802 C
76.6667 576.6636 L
f
77.3334 476.3272 m
73.4068 481.9127 69.3959 487.3689 65.3333 492.6606 C
60.1333 489.0272 L
64.1458 483.8063 67.9554 478.6135 72 472.8605 C
77.3334 476.3272 L
f
78 376 m
73.9926 381.7047 69.6562 387.5937 65.5 393 C
58.9 388.45 L
63.0312 383.0937 67.1623 377.4686 71.25 371.65 C
78 376 L
f
78.6667 275.6636 m
74.5784 281.4876 69.9167 287.8095 65.6667 293.3303 C
57.6666 287.8636 L
61.9166 282.3719 66.3692 276.3145 70.5 270.4302 C
78.6667 275.6636 L
f
79.3333 175.3364 m
75.1642 181.2796 70.1771 188.0343 65.8333 193.6697 C
56.4334 187.2864 L
60.8021 181.6593 65.5761 175.1696 69.75 169.2198 C
79.3333 175.3364 L
f
U
u
94.6667 535.1636 m
90.8334 546.9761 86.4032 558.4634 81.3334 569.6636 C
76.25 567.8803 L
81.1303 557.0813 85.552 545.6948 89.5 533.6969 C
94.6667 535.1636 L
f
95.3334 434.3272 m
91.6667 446.3897 87.4851 457.8795 82.6667 469.3272 C
75.1999 467.0605 L
79.8555 455.9703 84.0416 444.5147 87.7999 432.3938 C
95.3334 434.3272 L
f
96 333.5 m
92.5 345.8125 88.5669 357.3048 84 369 C
74.15 366.25 L
78.5808 354.8686 82.5312 343.3437 86.1 331.1 C
96 333.5 L
f
96.6667 232.6636 m
93.3334 245.2261 89.6488 256.721 85.3334 268.6636 C
73.1 265.4303 L
77.306 253.7577 81.0208 242.1636 84.4 229.7969 C
96.6667 232.6636 L
f
97.3333 131.8364 m
94.1667 144.6489 90.7306 156.1463 86.6666 168.3364 C
72.05 164.6197 L
76.0313 152.656 79.5105 140.9927 82.7001 128.5031 C
97.3333 131.8364 L
f
U
*u
20 11 m
31.2374 41.6103 36.755 63.7759 41 93.8 C
24 95 L
19.375 64.5 14.1875 43.75 4 16 C
20 11 L
f
28 12 m
33.5265 9.8059 41.1938 8 48 8 c
59.1694 8 67 17.5335 67 45 c
67 74.002 63.0478 78 41 78 c
7 78 L
7 62 L
38 62 l
48.9256 62 49 61.8688 49 45 c
49 28.9456 46.3974 24 43 24 c
40.1499 24 36.4934 25.0106 31.7 26.5 C
28 12 L
f
u
98 79 m
93.75 85.0625 88.4375 92.25 84 98 C
73.2 90.7 L
77.6875 84.9375 82.7829 78.0155 87 72 C
98 79 L
f
80 75 m
75.75 81.0625 70.4375 88.25 66 94 C
55.2 86.7 L
59.6875 80.9375 64.7829 74.0155 69 68 C
80 75 L
f
U
98 31 m
95 44.0625 91.8125 55.5625 88 68 C
71 63.8 L
74.7565 51.545 78 39.8125 81 27.2 C
98 31 L
f
*U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
