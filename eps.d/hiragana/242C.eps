%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (242C.eps)
%%CreationDate: (12/15/04) (1:28 PM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
500 600 m
500 700 L
400 700 L
400 600 L
500 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
400 600 m
400 700 L
300 700 L
300 600 L
400 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
500 500 m
500 600 L
400 600 L
400 500 L
500 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
400 500 m
400 600 L
300 600 L
300 500 L
400 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
0 O
0 g
1 D
425.576 652.2192 m
416.9584 645.3675 412 636.7818 412 631 c
412 618.8352 423.0797 611 448 611 c
457.0192 611 475.0497 613.2124 482 615 C
481.4 617.9 L
474.6754 616.1705 456.8851 614 448 614 c
425.1123 614 415 620.6161 415 631 c
415 635.7598 419.5268 643.6195 427.576 650.0192 C
425.576 652.2192 L
f
474 683 m
474 686 L
420 686 L
420 683 L
474 683 L
f
187 660 m
187 663 L
109 663 L
109 660 L
187 660 L
f
175 637 m
166.0574 643.2307 153.6962 647 143 647 c
125.2261 647 116 639.841 116 630 c
116 616.8368 125.8831 609 152 609 c
160.1825 609 167.7039 609.608 175 611 C
174.5 614 L
167.6337 612.69 160.232 612 152 612 c
128.0874 612 119 618.4396 119 630 c
119 638.1356 127.363 644 143 644 c
153.1464 644 164.1218 640.7263 172.6 635.2 C
175 637 L
f
175 637 m
162.8948 652.9311 156.809 670.8318 156 694 C
153 694 L
153.8216 670.4709 160.0431 651.7256 172.6 635.2 C
175 637 L
f
11.7 612.7 m
24.2304 636.0435 34.1724 665.4237 39 693.5 C
36 694 L
31.25 666.375 21.3125 636.9375 9 614 C
11.7 612.7 L
f
175 678 m
175 681 L
115 681 L
115 678 L
175 678 L
f
263 693 m
224.0759 662.5294 214 660.0392 214 652 c
214 643.072 224.6268 643.1376 266 607 C
268.1 609.2 L
228.4808 643.8055 217 645.4024 217 652 c
217 657.8437 228.6128 662.2936 264.9 690.7 C
263 693 L
f
317.9 610.7 m
314.5065 623.6733 313 635.7997 313 650 c
313 664.2003 314.5065 676.3265 317.9 689.3 C
315 690 L
311.4733 676.5171 310 663.9841 310 650 c
310 636.0159 311.4733 623.4828 315 610 C
317.9 610.7 L
f
94 636 m
90 647.5625 85.3213 659.0472 80 670 C
77.3 668.7 L
82.4051 658.1922 87.0625 646.875 91.2 635 C
94 636 L
f
92 681 m
88.75 686.25 85.875 690.25 82 695 C
79.6 693.2 L
83.4897 688.4319 86.2563 684.5783 89.4 679.5 C
92 681 L
f
80.6 677.7 m
77.5234 682.6148 74.703 686.4608 71 691 C
68.6 689.2 L
72.2965 684.6688 75.0445 680.8155 78 676.1 C
80.6 677.7 L
f
197 683 m
193.75 688.25 190.875 692.25 187 697 C
184.6 695.2 L
188.4897 690.4319 191.2563 686.5783 194.4 681.5 C
197 683 L
f
185.6 679.7 m
182.5234 684.6148 179.703 688.4608 176 693 C
173.6 691.2 L
177.2965 686.6688 180.0445 682.8155 183 678.1 C
185.6 679.7 L
f
399 685 m
395.75 690.25 392.875 694.25 389 699 C
386.6 697.2 L
390.4897 692.4319 393.2563 688.5783 396.4 683.5 C
399 685 L
f
388.6 681.7 m
385.5234 686.6148 382.703 690.4608 379 695 C
376.6 693.2 L
380.2965 688.6688 383.0445 684.8155 386 680.1 C
388.6 681.7 L
f
285 660 m
281.5 665.375 277.875 670.25 274 675 C
271.6 673.2 L
275.6415 668.2459 279.2671 663.3648 282.5 658.4 C
285 660 L
f
272.4 655.9 m
269.0824 660.9223 265.658 665.516 262 670 C
259.6 668.2 L
263.2734 663.6971 266.69 659.1491 269.9 654.3 C
272.4 655.9 L
f
493 662 m
489.5 667.375 485.875 672.25 482 677 C
479.6 675.2 L
483.6415 670.2459 487.2671 665.3648 490.5 660.4 C
493 662 L
f
480.4 657.9 m
477.0824 662.9223 473.658 667.516 470 672 C
467.6 670.2 L
471.2734 665.6971 474.69 661.1491 477.9 656.3 C
480.4 657.9 L
f
u
262.8333 593.4969 m
222.9153 562.4561 213.1666 561.0077 213.1666 551.9969 c
213.1666 541.9502 223.6576 542.9615 265.6667 506.4969 C
269.5834 510.3303 L
230.1849 544.502 219.1667 545.7874 219.1667 551.9969 c
219.1667 557.561 230.8102 561.6891 266.4167 589.4136 C
262.8333 593.4969 L
f
262.6666 493.9939 m
221.7548 462.3828 212.3333 461.9762 212.3333 451.9939 c
212.3333 440.8284 222.6885 442.7855 265.3333 405.9938 C
271.0667 411.4606 L
231.889 445.1986 221.3334 446.1724 221.3334 451.9939 c
221.3334 457.2783 233.0077 461.0847 267.9334 488.1271 C
262.6666 493.9939 L
f
262.5 394.5 m
220.5944 362.3187 211.5 362.9537 211.5 352 c
211.5 339.7159 221.7194 342.6186 265 305.5 C
272.55 312.6 L
233.593 345.9043 223.5 346.5666 223.5 352 c
223.5 357.0049 235.205 360.4894 269.45 386.85 C
262.5 394.5 L
f
262.3333 294.9969 m
219.4338 262.2455 210.6666 263.9222 210.6666 251.9969 c
210.6666 238.5942 220.7503 242.4426 264.6667 204.9969 C
274.0334 213.7303 L
235.2972 246.6008 225.6667 246.9516 225.6667 251.9969 c
225.6667 256.7222 237.4024 259.885 270.9667 285.5636 C
262.3333 294.9969 L
f
262.1667 195.503 m
218.2733 162.1813 209.8334 164.8998 209.8334 152.003 c
209.8334 137.4817 219.7812 142.2757 264.3333 104.503 C
275.5166 114.8697 L
237.0012 147.3065 227.8333 147.3457 227.8333 152.003 c
227.8333 156.4487 239.5997 159.2897 272.4833 184.2864 C
262.1667 195.503 L
f
U
277 16 m
238.7053 48.0031 230 47.7308 230 52 c
230 56.1661 241.7971 58.6853 274 83 C
262 96 L
217.1128 62.1081 209 65.8683 209 52 c
209 36.3599 218.8121 42.0997 264 4 C
277 16 L
f
u
187.1667 558.3349 m
187.1667 563.3348 L
108.3334 563.3348 L
108.3334 558.3349 L
187.1667 558.3349 L
f
187.3333 456.6651 m
187.3333 463.6651 L
107.6667 463.6651 L
107.6667 456.6651 L
187.3333 456.6651 L
f
U
u
187.5 355 m
187.5 364 L
107 364 L
107 355 L
187.5 355 L
f
189 253.3302 m
189 264.3303 L
107.6667 264.3303 L
107.6667 253.3302 L
189 253.3302 L
f
189.5 151.6697 m
189.5 164.6697 L
107.3334 164.6697 L
107.3334 151.6697 L
189.5 151.6697 L
f
U
190 50 m
190 65 L
107 65 L
107 50 L
190 50 L
f
u
174.5 537.1682 m
162.5446 553.0677 156.6487 570.4793 155.8333 594.0015 C
150.3334 594.0015 L
151.1778 569.6522 157.3883 550.9651 170 534.3349 C
174.5 537.1682 L
f
174 437.3318 m
162.1945 453.1998 156.4884 470.1222 155.6667 493.9985 C
147.6666 493.9985 L
148.5339 468.8289 154.7334 450.1999 167.3999 433.4651 C
174 437.3318 L
f
U
u
173.5 337.5 m
161.8443 353.3365 156.328 369.7697 155.5 394 C
145 394 L
145.8901 368.0103 152.0785 349.4394 164.8 332.6 C
173.5 337.5 L
f
174.3333 237.6636 m
162.8274 253.4686 157.5011 269.4126 156.6667 293.9969 C
143.6666 293.9969 L
144.5796 267.187 150.757 248.6743 163.5333 231.7302 C
174.3333 237.6636 L
f
174.1667 137.8364 m
162.8106 153.6098 157.6741 169.0647 156.8333 194.003 C
141.3334 194.003 L
142.2693 166.373 148.4356 147.9183 161.2667 130.8697 C
174.1667 137.8364 L
f
U
174 38 m
162.7938 53.7419 157.8471 68.7076 157 94 C
139 94 L
139.9587 65.5497 146.114 47.1532 159 30 C
174 38 L
f
u
474.5 581.3302 m
474.5 586.6636 L
419.8333 586.6636 L
419.8333 581.3302 L
474.5 581.3302 L
f
475 479.6604 m
475 487.3273 L
419.6666 487.3273 L
419.6666 479.6604 L
475 479.6604 L
f
475.5 378 m
475.5 388 L
419.5 388 L
419.5 378 L
475.5 378 L
f
476 276.3302 m
476 288.6636 L
419.3333 288.6636 L
419.3333 276.3302 L
476 276.3302 L
f
476.5 174.6697 m
476.5 189.3363 L
419.1667 189.3363 L
419.1667 174.6697 L
476.5 174.6697 L
f
U
477 73 m
477 90 L
419 90 L
419 73 L
477 73 L
f
u
425.1466 553.0129 m
416.7227 546.4058 411.6667 537.5318 411.6667 531.3303 c
411.6667 518.5517 422.8761 510.4969 448.1667 510.4969 c
457.4118 510.4969 475.2819 512.7331 482.6667 514.6636 C
481.6667 519.9136 L
474.5221 518.042 457.0025 515.8303 448.1667 515.8303 c
426.6275 515.8303 417.1667 522.0508 417.1667 531.6636 c
417.1667 536.3306 421.3811 543.6858 428.8134 549.5129 C
425.1466 553.0129 L
f
424.7173 453.8067 m
416.487 447.444 411.3333 438.2819 411.3333 431.6606 c
411.3333 418.2682 422.6726 409.9938 448.3333 409.9938 c
457.8045 409.9938 475.5142 412.2539 483.3334 414.3272 C
481.9333 421.9273 L
474.3688 419.9136 457.1199 417.6607 448.3333 417.6607 c
428.1428 417.6607 419.3334 423.4856 419.3334 432.3273 c
419.3334 436.9014 423.2355 443.7522 430.0507 449.0066 C
424.7173 453.8067 L
f
424.288 354.6096 m
416.2513 348.4914 411 339.041 411 332 c
411 317.9939 422.4691 309.5 448.5 309.5 c
458.1971 309.5 475.7464 311.7838 484 314 C
482.2 323.95 L
474.2155 321.7942 457.2373 319.5 448.5 319.5 c
429.6579 319.5 421.5 324.9294 421.5 333 c
421.5 337.4813 425.0897 343.8277 431.288 348.5096 C
424.288 354.6096 L
f
423.8587 255.4033 m
416.0157 249.5297 410.6667 239.7911 410.6667 232.3303 c
410.6667 217.7104 422.2655 208.9969 448.6667 208.9969 c
458.5897 208.9969 475.9786 211.3046 484.6667 213.6636 C
482.4667 225.9637 L
474.0622 223.6657 457.3547 221.3303 448.6667 221.3303 c
431.1731 221.3303 423.6667 226.3642 423.6667 233.6636 c
423.6667 238.0521 426.9441 243.894 432.5254 248.0033 C
423.8587 255.4033 L
f
423.4293 156.2062 m
415.78 150.577 410.3333 140.5502 410.3333 132.6697 c
410.3333 117.4361 422.062 108.503 448.8333 108.503 c
458.9824 108.503 476.2109 110.8345 485.3333 113.3364 C
482.7333 127.9863 L
473.9089 125.5463 457.4721 123.1696 448.8333 123.1696 c
432.6883 123.1696 425.8333 127.808 425.8333 134.3363 c
425.8333 138.632 428.7983 143.9695 433.7626 147.5063 C
423.4293 156.2062 L
f
U
423 57 m
415.5443 51.6153 410 41.3003 410 33 c
410 17.1526 421.8585 8 449 8 c
459.375 8 476.4431 10.3553 486 13 C
483 30 L
473.7556 27.4179 457.5895 25 449 25 c
434.2035 25 428 29.2428 428 35 c
428 39.2028 430.6527 44.0359 435 47 C
423 57 L
f
u
94.5 535.1636 m
90.6667 546.9761 86.2365 558.4633 81.1667 569.6636 C
76.1499 567.6802 L
81.0047 556.9526 85.4015 545.6267 89.3333 533.6969 C
94.5 535.1636 L
f
95 434.3272 m
91.3334 446.3897 87.1517 457.8795 82.3334 469.3272 C
74.9999 466.6605 L
79.6043 455.713 83.7406 444.3785 87.4665 432.3938 C
95 434.3272 L
f
95.5 333.5 m
92 345.8125 88.0669 357.3048 83.5 369 C
73.85 365.65 L
78.2041 354.4827 82.0798 343.1395 85.6 331.1 C
95.5 333.5 L
f
96 232.6636 m
92.6667 245.2261 88.9821 256.721 84.6667 268.6636 C
72.6999 264.6302 L
76.8036 253.2431 80.4188 241.8913 83.7333 229.7969 C
96 232.6636 L
f
96.5 131.8364 m
93.3333 144.6489 89.8973 156.1463 85.8333 168.3364 C
71.55 163.6197 L
75.4034 152.0128 78.7581 140.6523 81.8667 128.5031 C
96.5 131.8364 L
f
U
70.4 62.6 m
74.003 50.7732 77.0971 39.4041 80 27.2 C
97 31 L
94 44.0625 90.8125 55.5625 87 68 C
70.4 62.6 L
f
u
13.0834 512.4136 m
25.3983 536.9683 34.6028 565.146 39.3333 593.5469 C
33.9999 594.1636 L
29.2708 566.0594 20.125 538.0699 8.1666 514.3303 C
13.0834 512.4136 L
f
14.4667 412.1272 m
26.5661 437.893 35.0333 464.8683 39.6667 493.5939 C
31.9999 494.3272 L
27.2915 465.7439 18.9374 439.2023 7.3333 414.6606 C
14.4667 412.1272 L
f
15.85 311.85 m
27.7339 338.8269 35.4637 364.5998 40 393.65 C
30 394.5 L
25.3125 365.4375 17.75 340.3437 6.5 315 C
15.85 311.85 L
f
17.2334 211.5636 m
28.9018 239.7516 35.8941 264.3221 40.3333 293.6969 C
27.9999 294.6636 L
23.3333 265.1219 16.5625 241.4761 5.6666 215.3303 C
17.2334 211.5636 L
f
18.6166 111.2864 m
30.0695 140.6855 36.3246 164.0536 40.6667 193.753 C
26.0001 194.8364 L
21.3542 164.8155 15.375 142.6176 4.8334 115.6697 C
18.6166 111.2864 L
f
U
20 11 m
31.2374 41.6103 36.755 63.7759 41 93.8 C
24 95 L
19.375 64.5 14.1875 43.75 4 16 C
20 11 L
f
u
286.3334 558.7702 m
282.8326 564.3159 279.2308 569.3813 275.3667 574.3302 C
271.5306 571.8222 L
275.4817 566.784 279.1103 561.6829 282.378 556.5009 C
286.3334 558.7702 L
f
287.6667 457.5405 m
284.1652 463.2568 280.5866 468.5126 276.7334 473.6605 C
271.4613 470.4445 L
275.3219 465.3222 278.9536 460.0011 282.256 454.6018 C
287.6667 457.5405 L
f
289 356.32 m
285.4977 362.207 281.9423 367.6531 278.1 373 C
271.392 369.076 L
275.1622 363.8696 278.7969 358.3286 282.134 352.712 C
289 356.32 L
f
290.3334 255.0902 m
286.8303 261.148 283.2982 266.7844 279.4667 272.3302 C
271.3227 267.6982 L
275.0024 262.4077 278.6402 256.6468 282.012 250.8129 C
290.3334 255.0902 L
f
291.6666 153.8697 m
288.1628 160.0981 284.6539 165.925 280.8333 171.6697 C
271.2533 166.3297 L
274.8427 160.9551 278.4835 154.9743 281.89 148.9231 C
291.6666 153.8697 L
f
U
293 52.64 m
289.4954 59.0391 286.0097 65.0563 282.2 71 C
271.184 64.952 L
274.6829 59.4933 278.3268 53.2925 281.768 47.024 C
293 52.64 L
f
u
273.0253 554.7668 m
269.6883 559.9972 266.2652 564.8081 262.5947 569.5156 C
258.7953 567.0277 L
262.428 562.3837 265.8703 557.5809 269.1074 552.5161 C
273.0253 554.7668 L
f
273.6506 453.6336 m
270.2941 459.0721 266.8725 464.1002 263.1894 469.0312 C
257.9907 465.8555 L
261.5826 461.0704 265.0507 456.0127 268.3148 450.7323 C
273.6506 453.6336 L
f
274.276 352.5096 m
270.9 358.1563 267.4797 363.4016 263.784 368.556 C
257.1861 364.6925 L
260.7373 359.7663 264.2311 354.4539 267.5223 348.9578 C
274.276 352.5096 L
f
274.9013 251.3764 m
271.5058 257.2313 268.0869 262.6937 264.3787 268.0716 C
256.3815 263.5202 L
259.8919 258.4529 263.4114 252.8857 266.7297 247.1739 C
274.9013 251.3764 L
f
275.5265 150.2525 m
272.1116 156.3154 268.6941 161.9951 264.9733 167.5964 C
255.5769 162.3572 L
259.0466 157.1488 262.5919 151.3268 265.9372 145.3994 C
275.5265 150.2525 L
f
U
276.1519 49.1193 m
272.7175 55.3904 269.3014 61.2872 265.568 67.112 C
254.7723 61.185 L
258.2012 55.8355 261.7722 49.7587 265.1446 43.6156 C
276.1519 49.1193 L
f
u
493.8334 560.6036 m
490.3326 566.1492 486.7308 571.2146 482.8667 576.1636 C
479.0306 573.6555 L
482.9817 568.6173 486.6103 563.5163 489.878 558.3342 C
493.8334 560.6036 L
f
494.6667 459.2071 m
491.1652 464.9235 487.5866 470.1792 483.7334 475.3272 C
478.4613 472.1111 L
482.3219 466.9888 485.9536 461.6678 489.2559 456.2684 C
494.6667 459.2071 L
f
495.5 357.82 m
491.9977 363.707 488.4423 369.1531 484.6 374.5 C
477.892 370.576 L
481.6622 365.3696 485.2969 359.8286 488.634 354.212 C
495.5 357.82 L
f
496.3334 256.4235 m
492.8303 262.4813 489.2982 268.1177 485.4667 273.6636 C
477.3226 269.0315 L
481.0024 263.741 484.6402 257.9801 488.012 252.1462 C
496.3334 256.4235 L
f
497.1666 155.0364 m
493.6628 161.2648 490.1539 167.0916 486.3333 172.8364 C
476.7534 167.4964 L
480.3427 162.1218 483.9835 156.141 487.39 150.0897 C
497.1666 155.0364 L
f
U
498 53.64 m
494.4954 60.0391 491.0097 66.0563 487.2 72 C
476.184 65.952 L
479.6829 60.4933 483.3268 54.2925 486.768 48.024 C
498 53.64 L
f
u
480.5253 556.6001 m
477.1882 561.8305 473.7652 566.6414 470.0947 571.3489 C
466.2953 568.861 L
469.928 564.217 473.3703 559.4142 476.6074 554.3495 C
480.5253 556.6001 L
f
480.6506 455.3002 m
477.2941 460.7388 473.8725 465.7669 470.1893 470.6978 C
464.9907 467.5221 L
468.5826 462.737 472.0506 457.6794 475.3148 452.399 C
480.6506 455.3002 L
f
480.776 354.0096 m
477.4 359.6563 473.9797 364.9016 470.284 370.056 C
463.6861 366.1925 L
467.2373 361.2663 470.7311 355.9539 474.0223 350.4578 C
480.776 354.0096 L
f
480.9013 252.7098 m
477.5058 258.5646 474.0869 264.027 470.3787 269.4049 C
462.3815 264.8536 L
465.8919 259.7862 469.4114 254.219 472.7297 248.5072 C
480.9013 252.7098 L
f
481.0266 151.4192 m
477.6116 157.4821 474.1942 163.1617 470.4733 168.763 C
461.077 163.5239 L
464.5466 158.3155 468.0919 152.4935 471.4372 146.5661 C
481.0266 151.4192 L
f
U
481.1519 50.1193 m
477.7175 56.3904 474.3014 62.2872 470.568 68.112 C
459.7723 62.185 L
463.2012 56.8355 466.7722 50.7587 470.1446 44.6156 C
481.1519 50.1193 L
f
u
92.6667 580.3302 m
89.4175 585.6928 86.4838 589.9547 82.6667 594.8303 C
78.9666 592.3969 L
82.748 587.5811 85.6158 583.4128 88.7666 578.2136 C
92.6667 580.3302 L
f
93.3334 479.6605 m
90.085 485.1355 87.0925 489.6594 83.3334 494.6605 C
78.3333 491.5938 L
82.0063 486.7303 84.9754 482.2474 88.1333 476.9271 C
93.3334 479.6605 L
f
94 379 m
90.7525 384.5875 87.7013 389.3733 84 394.5 C
77.7 390.8 L
81.2647 385.8888 84.335 381.0912 87.5 375.65 C
94 379 L
f
94.6667 278.3302 m
91.42 284.0303 88.31 289.078 84.6667 294.3303 C
77.0666 289.9969 L
80.523 285.038 83.6945 279.9258 86.8666 274.3636 C
94.6667 278.3302 L
f
95.3333 177.6697 m
92.0875 183.4823 88.9187 188.7919 85.3333 194.1697 C
76.4333 189.2031 L
79.7814 184.1965 83.0542 178.7696 86.2333 173.0864 C
95.3333 177.6697 L
f
U
96 77 m
92.755 82.9251 89.5275 88.4966 86 94 C
75.8 88.4 L
79.0397 83.3457 82.4137 77.6042 85.6 71.8 C
96 77 L
f
u
80.5666 577.0369 m
77.4728 582.1004 74.5953 586.2154 70.9333 590.8969 C
67.2673 588.4822 L
70.8769 583.8807 73.718 579.7318 76.7013 574.8542 C
80.5666 577.0369 L
f
80.5333 476.3739 m
77.4222 481.5859 74.4876 485.97 70.8666 490.7939 C
65.9346 487.7645 L
69.4572 483.0926 72.3914 478.6482 75.4026 473.6085 C
80.5333 476.3739 L
f
80.5 375.72 m
77.3716 381.0807 74.3799 385.7337 70.8 390.7 C
64.602 387.056 L
68.0377 382.3138 71.065 377.5738 74.104 372.372 C
80.5 375.72 L
f
80.4667 275.057 m
77.3211 280.5663 74.2723 285.4883 70.7333 290.5969 C
63.2693 286.3383 L
66.6181 281.5257 69.7385 276.4902 72.8053 271.1263 C
80.4667 275.057 L
f
80.4333 174.4031 m
77.2705 180.0611 74.1646 185.2521 70.6667 190.503 C
61.9367 185.6298 L
65.1986 180.7469 68.412 175.4158 71.5067 169.8898 C
80.4333 174.4031 L
f
U
80.4 73.7401 m
77.2199 79.5467 74.0569 85.0067 70.6 90.4 C
60.604 84.9121 L
63.779 79.9588 67.0855 74.3322 70.208 68.6441 C
80.4 73.7401 L
f
u
197.6667 583.1682 m
194.4175 588.5307 191.4837 592.7926 187.6667 597.6682 C
183.9667 595.2349 L
187.748 590.419 190.6159 586.2508 193.7667 581.0515 C
197.6667 583.1682 L
f
198.3334 483.3318 m
195.085 488.8068 192.0925 493.3307 188.3334 498.3318 C
183.3333 495.2651 L
187.0063 490.4016 189.9754 485.9187 193.1333 480.5985 C
198.3334 483.3318 L
f
U
u
199 383.5 m
195.7525 389.0875 192.7012 393.8733 189 399 C
182.7 395.3 L
186.2647 390.3888 189.335 385.5912 192.5 380.15 C
199 383.5 L
f
U
u
199 283.0015 m
195.7533 288.7016 192.6433 293.7492 189 299.0015 C
181.4 294.6682 L
184.8564 289.7093 188.0279 284.5971 191.2 279.0349 C
199 283.0015 L
f
199 182.4985 m
195.7542 188.311 192.5854 193.6206 189 198.9985 C
180.1 194.0318 L
183.448 189.0252 186.7208 183.5983 189.9 177.9151 C
199 182.4985 L
f
U
199 82 m
195.755 87.9251 192.5275 93.4966 189 99 C
178.8 93.4 L
182.0397 88.3457 185.4137 82.6042 188.6 76.8 C
199 82 L
f
u
174.5 537.1682 m
165.5591 543.2564 153.1377 547.0015 142.6667 547.0015 c
124.3671 547.0015 115 539.7541 115 529.8348 c
115 516.5715 125.0583 508.6682 151.6667 508.6682 c
159.906 508.6682 167.5657 509.2894 175 510.6682 C
174.2833 515.7682 L
167.2156 514.4723 159.6347 513.7682 151.6667 513.7682 c
128.9009 513.7682 120.6667 519.4652 120.6667 529.7515 c
120.6667 536.9282 128.2099 542.1682 142.6667 542.1682 c
152.0959 542.1682 161.9196 539.3238 170 534.3349 C
174.5 537.1682 L
f
174 437.3318 m
165.0608 443.2776 152.5792 446.9985 142.3333 446.9985 c
123.5081 446.9985 114 439.6626 114 429.6651 c
114 416.3017 124.2335 408.3318 151.3333 408.3318 c
159.6295 408.3318 167.4276 408.9663 175 410.3318 C
174.0667 417.5318 L
166.7975 416.2501 159.0374 415.5318 151.3333 415.5318 c
129.7145 415.5318 122.3334 420.4862 122.3334 429.4985 c
122.3334 435.7162 129.0569 440.3318 142.3333 440.3318 c
151.0454 440.3318 159.7172 437.9167 167.3999 433.4651 C
174 437.3318 L
f
U
u
173.5 337.5 m
164.5626 343.3033 152.0207 347 142 347 c
122.6492 347 113 339.5757 113 329.5 c
113 316.0364 123.4086 308 151 308 c
159.3529 308 167.2894 308.6477 175 310 C
173.85 319.3 L
166.3793 318.0325 158.4401 317.3 151 317.3 c
130.528 317.3 124 321.5118 124 329.25 c
124 334.5088 129.9038 338.5 142 338.5 c
149.995 338.5 157.5149 336.5142 164.8 332.6 C
173.5 337.5 L
f
174.3333 237.6636 m
165.3977 243.3245 152.7956 246.9969 143 246.9969 c
123.1235 246.9969 113.3333 239.4843 113.3333 229.3303 c
113.3333 215.7665 123.9171 207.6636 152 207.6636 c
160.4098 207.6636 168.4846 208.3246 176.3334 209.6636 C
174.9667 221.0637 L
167.2946 219.8103 159.1761 219.0637 152 219.0637 c
132.6749 219.0637 127.0001 222.5329 127.0001 228.9969 c
127.0001 233.2967 132.0841 236.6635 143 236.6635 c
150.2778 236.6635 156.6459 235.1071 163.5333 231.7302 C
174.3333 237.6636 L
f
174.1667 137.8364 m
165.2327 143.3548 152.5704 147.003 143 147.003 c
122.5979 147.003 112.6667 139.402 112.6667 129.1697 c
112.6667 115.5059 123.4257 107.3364 152 107.3364 c
160.4666 107.3364 168.6798 108.0106 176.6667 109.3364 C
175.0833 122.8363 L
167.2098 121.5971 158.9122 120.8363 152 120.8363 c
133.8217 120.8363 129 123.563 129 128.753 c
129 132.094 133.2643 134.8364 143 134.8364 c
149.5608 134.8364 154.7771 133.7092 161.2667 130.8697 C
174.1667 137.8364 L
f
U
174 38 m
165.0678 43.376 152.3453 47 143 47 c
122.0723 47 112 39.3105 112 29 c
112 15.236 122.9342 7 152 7 c
160.5234 7 168.875 7.6875 177 9 C
175.2 24.6 L
167.125 23.375 158.6482 22.6 152 22.6 c
134.9686 22.6 131 24.5841 131 28.5 c
131 30.882 134.4446 33 143 33 c
148.8436 33 152.9081 32.3021 159 30 C
174 38 L
f
41 78 m
7 78 L
7 62 L
42 62 L
48.9254 62 49 61.8689 49 49 c
49 27.4465 46.7303 24.4 42 24.4 c
39.1551 24.4 35.2858 25.1324 31.6 26.3 C
27.8 11.3 L
33.7133 9.2145 40.5349 8 46 8 c
58.5023 8 67 18.0335 67 45 c
67 74.002 63.0478 78 41 78 C
f
390.1 672 m
373 672 L
373 690 L
370 690 L
370 672 L
334 672 L
334 669 L
370 669 L
370 651 L
370 624.2783 366.3867 619.1609 347 612.8 C
348 610 L
369.3415 617.0024 373 623.5991 373 651 C
373 669 L
390.1 669 L
390.1 672 L
f
u
43.1667 122.503 m
40.0198 122.503 35.8594 123.3181 31.6569 124.7155 C
28.3235 111.7489 L
34.4268 109.5699 41.1004 108.3364 46.5 108.3364 c
58.3577 108.3364 66.8333 118.6399 66.8333 145.003 c
66.8333 173.6193 63.1858 177.3363 41.8334 177.3363 C
7.5 177.3363 L
7.5 163.5031 L
42.6667 163.5031 L
51.0864 163.5031 51.3334 163.2271 51.3334 148.3363 c
51.3334 126.9293 48.2959 122.503 43.1667 122.503 c
f
44.3334 220.606 m
40.8845 220.606 36.4329 221.5038 31.7138 223.1309 C
28.8471 212.1977 L
35.1404 209.9253 41.666 208.6728 47 208.6728 c
58.2131 208.6728 66.6667 219.2463 66.6667 245.0061 c
66.6667 273.2366 63.3239 276.6727 42.6667 276.6727 C
8 276.6727 L
8 265.0062 L
43.3334 265.0062 L
53.2474 265.0062 53.6668 264.5854 53.6668 247.6727 c
53.6668 226.4121 49.8615 220.606 44.3334 220.606 c
f
45.5 318.7 m
41.7492 318.7 37.0065 319.6806 31.7707 321.5374 C
29.3706 312.6374 L
35.8539 310.2715 42.2315 309 47.5 309 c
58.0685 309 66.5 319.8434 66.5 345 c
66.5 372.8448 63.4619 376 43.5 376 C
8.5 376 L
8.5 366.5 L
44 366.5 L
55.4083 366.5 56 365.9343 56 347 c
56 325.8858 51.427 318.7 45.5 318.7 c
f
46.6667 416.803 m
42.6139 416.803 37.58 417.8663 31.8275 419.9529 C
29.8942 413.0863 L
36.5674 410.6269 42.797 409.3364 48 409.3364 c
57.9239 409.3364 66.3333 420.4498 66.3333 445.003 c
66.3333 472.4622 63.6 475.3363 44.3334 475.3363 C
9 475.3363 L
9 468.0031 L
44.6667 468.0031 L
57.5693 468.0031 58.3334 467.2926 58.3334 446.3363 c
58.3334 425.3686 52.9926 416.803 46.6667 416.803 c
f
47.8333 514.897 m
43.4786 514.897 38.1535 516.0431 31.8844 518.3593 C
30.4177 513.5259 L
37.2809 510.9731 43.3625 509.6636 48.5 509.6636 c
57.7793 509.6636 66.1667 521.047 66.1667 544.9969 c
66.1667 572.0704 63.738 574.6636 45.1667 574.6636 C
9.5 574.6636 L
9.5 569.4969 L
45.3333 569.4969 L
59.7301 569.4969 60.6666 568.6415 60.6666 545.6636 c
60.6666 524.8423 54.5581 514.897 47.8333 514.897 c
f
U
49 613 m
44.3433 613 38.7271 614.2288 31.9413 616.7748 C
30.9413 613.9748 L
37.9945 611.3285 43.928 610 49 610 c
57.6347 610 66 621.6534 66 645 c
66 671.6877 63.8761 674 46 674 C
10 674 L
10 671 L
46 671 l
61.8911 671 63 669.9998 63 645 c
63 624.3251 56.1237 613 49 613 c
f
u
389.4167 571.6636 m
371.8833 571.6636 L
371.8833 589.9969 L
366.3833 589.9969 L
366.3833 571.6636 L
333.1667 571.6636 L
333.1667 566.4969 L
366.6666 566.4969 L
366.6666 550.3303 L
366.6666 524.6818 363.6237 520.3836 344.6666 514.1636 C
346.5 509.1636 L
368.3288 516.3259 372.1667 522.9914 372.1667 550.3303 C
372.1667 566.4969 L
389.4167 566.4969 L
389.4167 571.6636 L
f
U
u
388.7333 471.3272 m
370.7667 471.3272 L
370.7667 489.9939 L
362.7665 489.9939 L
362.7665 471.3272 L
332.3333 471.3272 L
332.3333 463.9937 L
363.3332 463.9937 L
363.3332 449.6605 L
363.3332 425.0853 360.8606 421.6063 342.3333 415.5273 C
345 408.3272 L
367.3162 415.6493 371.3334 422.3838 371.3334 449.6605 C
371.3334 463.9937 L
388.7333 463.9937 L
388.7333 471.3272 L
f
391.05 369 m
373.15 369 L
373.15 390.5 L
362.65 390.5 L
362.65 369 L
334.5 369 L
334.5 359.5 L
363.5 359.5 L
363.5 349 L
363.5 325.4979 361.5977 322.838 343.5 316.9 C
347 307.5 L
369.8035 314.982 374 321.7853 374 349 C
374 359.5 L
391.05 359.5 L
391.05 369 L
f
U
u
391.3667 269.3326 m
373.3667 269.3326 L
373.3667 290.3326 L
360.3666 290.3326 L
360.3666 269.3326 L
334.6667 269.3326 L
334.6667 257.6659 L
361.5 257.6659 L
361.5 248.3325 L
361.5 225.9037 360.168 224.0629 342.5 218.2659 C
346.8333 206.6659 L
370.1242 214.3078 374.5 221.18 374.5 248.3325 C
374.5 257.6659 L
391.3667 257.6659 L
391.3667 269.3326 L
f
U
u
391.6833 169.6651 m
373.5833 169.6651 L
373.5833 190.1651 L
358.0833 190.1651 L
358.0833 169.6651 L
334.8333 169.6651 L
334.8333 155.8318 L
359.5 155.8318 L
359.5 147.6651 L
359.5 126.3094 358.7383 125.2879 341.5 119.6318 C
346.6667 105.8318 L
370.4448 113.6336 375 120.5746 375 147.6651 C
375 155.8318 L
391.6833 155.8318 L
391.6833 169.6651 L
f
U
392 70 m
375.3 70 L
375.3 90 L
357.3 90 L
357.3 70 L
335 70 L
335 54 L
359 54 L
359 47 L
359 26.7175 358.8087 26.5151 342 21 C
348 5 L
372.2655 12.9617 377 19.9716 377 47 C
377 54 L
392 54 L
392 70 L
f
u
319.2001 589.0803 m
313.8333 589.9969 L
310.3219 576.5188 308.8333 563.8878 308.8333 549.6636 c
308.8333 535.4393 310.3219 522.8083 313.8333 509.3303 C
319.2001 510.2469 L
315.8484 523.1095 314.3334 535.4414 314.3334 549.6636 c
314.3334 563.8858 315.8484 576.2175 319.2001 589.0803 C
f
U
u
320.5001 488.8605 m
312.6666 489.9939 L
309.1705 476.5205 307.6666 463.7916 307.6666 449.3272 c
307.6666 434.8628 309.1705 422.1338 312.6666 408.6605 C
320.5001 409.7939 L
317.1903 422.5457 315.6668 435.0832 315.6668 449.3272 c
315.6668 463.5712 317.1903 476.1085 320.5001 488.8605 C
f
323.3 388.65 m
313 390 L
309.5192 376.5314 308 363.7045 308 349 c
308 334.2954 309.5192 321.4685 313 308 C
323.3 309.35 L
320.032 321.9911 318.5 334.7341 318.5 349 c
318.5 363.2659 320.032 376.0087 323.3 388.65 C
f
325.1 288.4303 m
312.3333 289.9969 L
308.8679 276.5332 307.3333 263.6083 307.3333 248.6636 c
307.3333 233.7189 308.8679 220.794 312.3333 207.3302 C
325.1 208.8969 L
321.8739 221.4274 320.3334 234.3758 320.3334 248.6636 c
320.3334 262.9514 321.8739 275.8998 325.1 288.4303 C
f
326.8999 188.2197 m
311.6667 190.003 L
308.2165 176.5441 306.6667 163.5212 306.6667 148.3364 c
306.6667 133.1515 308.2165 120.1287 311.6667 106.6697 C
326.8999 108.4531 L
323.7157 120.8728 322.1666 134.0268 322.1666 148.3364 c
322.1666 162.646 323.7157 175.8 326.8999 188.2197 C
f
U
328.7 88 m
311 90 L
307.5652 76.5458 306 63.425 306 48 c
306 32.575 307.5652 19.4542 311 6 C
328.7 8 L
325.5576 20.309 324 33.6685 324 48 c
324 62.3315 325.5576 75.691 328.7 88 C
f
u
399 584.7266 m
395.7941 590.0102 392.9034 594.1978 389.1333 599 C
385.5693 596.6413 L
389.3075 591.8929 392.1303 587.8012 395.2386 582.6793 C
399 584.7266 L
f
U
u
399 484.4533 m
395.8382 489.7703 392.9318 494.1456 389.2667 499 C
384.5386 496.0826 L
388.1252 491.3539 391.0043 487.0241 394.0773 481.8587 C
399 484.4533 L
f
399 382.7604 m
395.8823 388.111 392.9601 392.6739 389.4 397.5804 C
383.508 394.1044 L
386.9431 389.3954 389.8785 384.8275 392.916 379.6185 C
399 382.7604 L
f
U
u
399 282.7488 m
395.9264 288.1329 392.9885 292.8834 389.5333 297.8421 C
382.4773 293.8075 L
385.761 289.1182 388.7526 284.3122 391.7547 279.0595 C
399 282.7488 L
f
399 182.7326 m
395.9705 188.1501 393.0169 193.0883 389.6667 198.0992 C
381.4466 193.5059 L
384.5788 188.8363 387.6266 183.7922 390.5933 178.496 C
399 182.7326 L
f
U
399 82.7209 m
396.0146 88.172 393.0453 93.2978 389.8 98.3609 C
380.416 93.2089 L
383.3966 88.559 386.5007 83.2768 389.432 77.937 C
399 82.7209 L
f
u
388.108 581.4768 m
385.0565 586.4628 382.2212 590.505 378.6053 595.1147 C
375.0726 592.7732 L
378.6398 588.2377 381.4368 584.1638 384.3785 579.3621 C
388.108 581.4768 L
f
U
u
387.616 481.2536 m
384.5897 486.3108 381.7394 490.5493 378.2106 495.2293 C
373.5452 492.3463 L
376.9831 487.8066 379.8291 483.5122 382.757 478.6242 C
387.616 481.2536 L
f
386.124 379.6109 m
383.1228 384.7393 380.2577 389.1739 376.816 393.9244 C
371.0179 390.5 L
374.3266 385.9559 377.2216 381.441 380.1357 376.4667 C
386.124 379.6109 L
f
U
u
385.632 279.6494 m
382.656 284.849 379.7759 289.4799 376.4213 294.3008 C
369.4906 290.3348 L
372.67 285.7865 375.614 281.0511 378.5143 275.9905 C
385.632 279.6494 L
f
385.14 179.6833 m
382.1891 184.9541 379.2942 189.7812 376.0267 194.6726 C
367.9631 190.1651 L
371.0133 185.6125 374.0063 180.6565 376.8928 175.5097 C
385.14 179.6833 L
f
U
384.648 79.7218 m
381.7223 85.0638 378.8124 90.0871 375.632 95.0489 C
366.4358 90 L
369.3567 85.4431 372.3987 80.2666 375.2714 75.0335 C
384.648 79.7218 L
f
u
174.6333 576.5015 m
174.6333 581.5015 L
114.3334 581.5015 L
114.3334 576.5015 L
174.6333 576.5015 L
f
174.2667 474.9984 m
174.2667 481.9985 L
113.6667 481.9985 L
113.6667 474.9984 L
174.2667 474.9984 L
f
U
u
173.9 373.5 m
173.9 382.5 L
113 382.5 L
113 373.5 L
173.9 373.5 L
f
179.2 271.9969 m
179.2 282.9969 L
113.6667 282.9969 L
113.6667 271.9969 L
179.2 271.9969 L
f
U
u
178 170.4984 m
178 183.4985 L
113.3333 183.4985 L
113.3333 170.4984 L
178 170.4984 L
f
U
176.8 69 m
176.8 84 L
113 84 L
113 69 L
176.8 69 L
f
u
185.3667 580.2082 m
182.2728 585.2716 179.3953 589.3866 175.7333 594.0682 C
172.0673 591.6535 L
175.6769 587.052 178.518 582.9031 181.5014 578.0255 C
185.3667 580.2082 L
f
185.1333 480.7118 m
182.0222 485.9239 179.0876 490.3079 175.4667 495.1318 C
170.5346 492.1025 L
174.0573 487.4306 176.9915 482.9862 180.0027 477.9465 C
185.1333 480.7118 L
f
U
u
184.9 381.22 m
181.7716 386.5807 178.7799 391.2337 175.2 396.2 C
169.002 392.556 L
172.4378 387.8138 175.465 383.0738 178.504 377.872 C
184.9 381.22 L
f
U
u
184 281.0616 m
180.8544 286.5709 177.8056 291.4929 174.2667 296.6015 C
166.8027 292.3429 L
170.1515 287.5303 173.2719 282.4948 176.3387 277.1309 C
184 281.0616 L
f
183.1 180.8985 m
179.9371 186.5565 176.8312 191.7475 173.3333 196.9985 C
164.6033 192.1252 L
167.8652 187.2423 171.0786 181.9112 174.1733 176.3852 C
183.1 180.8985 L
f
U
182.2 80.7401 m
179.0199 86.5467 175.8569 92.0067 172.4 97.4 C
162.404 91.9121 L
165.579 86.9588 168.8855 81.3322 172.008 75.6441 C
182.2 80.7401 L
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
