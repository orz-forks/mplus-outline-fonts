%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (242C.eps)
%%CreationDate: (7/30/04) (9:38 AM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
1 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
500 600 m
500 700 L
400 700 L
400 600 L
500 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
400 600 m
400 700 L
300 700 L
300 600 L
400 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
500 500 m
500 600 L
400 600 L
400 500 L
500 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
400 500 m
400 600 L
300 600 L
300 500 L
400 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
0 Ap
0 O
0 g
1 D
427.576 652.2192 m
418.9584 645.3675 414 636.7818 414 631 c
414 618.8352 425.0797 611 450 611 c
459.0192 611 477.0497 613.2124 484 615 C
483.4 617.9 L
476.6754 616.1705 458.8851 614 450 614 c
427.1123 614 417 620.6161 417 631 c
417 635.7598 421.5268 643.6195 429.576 650.0192 C
427.576 652.2192 L
f
471 681 m
471 684 L
422 684 L
422 681 L
471 681 L
f
176 678 m
176 681 L
116 681 L
116 678 L
176 678 L
f
188 660 m
188 663 L
110 663 L
110 660 L
188 660 L
f
178 637 m
169.7751 642.7307 155.8121 647 144 647 c
126.2261 647 117 639.841 117 630 c
117 616.8368 126.8831 609 153 609 c
161.1825 609 168.7039 609.608 176 611 C
175.5 614 L
168.6337 612.69 161.232 612 153 612 c
129.0874 612 120 618.4396 120 630 c
120 638.1356 128.363 644 144 644 c
154.4685 644 167.6332 640.393 175.6 635.2 C
178 637 L
f
178 637 m
165.8948 652.9311 159.809 670.8318 159 694 C
156 694 L
156.8216 670.4709 163.0431 651.7256 175.6 635.2 C
178 637 L
f
284 659.2 m
280.785 665.185 277.9486 670.2073 274.5 676 C
271.9 674.5 L
275.2869 668.811 278.0736 663.8061 281.3 657.8 C
284 659.2 L
f
271.2 656.5 m
268.0841 662.3994 265.3797 667.3231 262 673 C
259.4222 671.4654 L
262.8053 665.7828 265.4187 661.0223 268.5473 655.0989 C
271.2 656.5 L
f
89 679 m
85.9719 684.7331 83.2844 689.4831 80 695 C
77.4 693.5 L
80.7848 687.8145 83.4289 683.0359 86.3 677.6 C
89 679 L
f
65.4 690.5 m
68.5265 685.2484 71.1108 680.5595 74.1 674.9 C
76.8 676.3 L
73.8325 681.9184 71.2187 686.5935 68 692 C
65.4 690.5 L
f
193 677 m
189.9719 682.7331 187.2844 687.4831 184 693 C
181.4 691.5 L
184.7848 685.8145 187.4289 681.0359 190.3 675.6 C
193 677 L
f
169.4 688.5 m
172.5265 683.2484 175.1108 678.5595 178.1 672.9 C
180.8 674.3 L
177.8325 679.9184 175.2187 684.5935 172 690 C
169.4 688.5 L
f
489 677 m
485.9719 682.7331 483.2844 687.4831 480 693 C
477.4 691.5 L
480.7848 685.8145 483.4289 681.0359 486.3 675.6 C
489 677 L
f
465.4 688.5 m
468.5265 683.2484 471.1108 678.5595 474.1 672.9 C
476.8 674.3 L
473.8325 679.9184 471.2187 684.5935 468 690 C
465.4 688.5 L
f
12.7 612.8 m
24.2264 637.099 32.7393 666.5683 36 693.7 C
33 694 L
29.6875 666.4375 21.224 637.6614 10 614 C
12.7 612.8 L
f
52 613 m
47.3433 613 41.7271 614.2288 34.9413 616.7748 C
33.9413 613.9748 L
40.9945 611.3285 46.928 610 52 610 c
59.9681 610 68 620.6533 68 645 c
68 669.8544 64.7096 674 48 674 C
10 674 L
10 671 L
48 671 l
62.7535 671 65 668.3798 65 645 c
65 623.8472 58.5944 613 52 613 c
f
94 636 m
90 647.5625 85.3213 659.0472 80 670 C
77.3 668.7 L
82.4051 658.1922 87.0625 646.875 91.2 635 C
94 636 L
f
263 693 m
224.0759 662.5294 214 660.0392 214 652 c
214 643.072 224.6268 643.1376 266 607 C
268.1 609.2 L
228.4808 643.8055 217 645.4024 217 652 c
217 657.8437 228.6128 662.2936 264.9 690.7 C
263 693 L
f
u
262.8333 593.497 m
222.9153 562.4561 213.1666 561.0077 213.1666 551.9969 c
213.1666 541.9502 223.6576 542.9615 265.6666 506.4969 C
269.5833 510.3303 L
230.1849 544.5021 219.1667 545.7874 219.1667 551.9969 c
219.1667 557.561 230.8102 561.6891 266.4167 589.4136 C
262.8333 593.497 L
f
262.6666 493.9939 m
221.7548 462.3829 212.3333 461.9762 212.3333 451.9939 c
212.3333 440.8285 222.6885 442.7855 265.3333 405.9939 C
271.0667 411.4606 L
231.889 445.1986 221.3334 446.1724 221.3334 451.9939 c
221.3334 457.2784 233.0077 461.0847 267.9334 488.1272 C
262.6666 493.9939 L
f
262.5 394.5 m
220.5943 362.3187 211.5 362.9537 211.5 352 c
211.5 339.7159 221.7194 342.6186 265 305.5 C
272.55 312.6 L
233.593 345.9043 223.5 346.5666 223.5 352 c
223.5 357.0049 235.2049 360.4894 269.45 386.85 C
262.5 394.5 L
f
262.3333 294.997 m
219.4338 262.2455 210.6666 263.9222 210.6666 251.9969 c
210.6666 238.5942 220.7503 242.4426 264.6666 204.9969 C
274.0334 213.7303 L
235.2972 246.6009 225.6667 246.9516 225.6667 251.9969 c
225.6667 256.7222 237.4024 259.885 270.9667 285.5636 C
262.3333 294.997 L
f
262.1667 195.503 m
218.2733 162.1813 209.8333 164.8998 209.8333 152.003 c
209.8333 137.4817 219.7812 142.2757 264.3333 104.5031 C
275.5166 114.8697 L
237.0011 147.3065 227.8332 147.3457 227.8332 152.003 c
227.8332 156.4487 239.5996 159.2897 272.4833 184.2864 C
262.1667 195.503 L
f
U
277 16 m
238.7053 48.0031 230 47.7308 230 52 c
230 56.1661 241.7971 58.6853 274 83 C
262 96 L
217.1128 62.1081 209 65.8683 209 52 c
209 36.3599 218.8121 42.0997 264 4 C
277 16 L
f
380 73 m
373 73 L
373 92 L
355 92 L
355 73 L
331 73 L
331 57 L
356 57 L
356 49 L
356 28.7175 355.8087 28.5151 339 23 C
345 7 L
369.2655 14.9617 374 21.9716 374 49 C
374 57 L
380 57 L
380 73 L
f
u
324.1 289.7682 m
311.3334 291.3348 L
307.8679 277.871 306.3334 264.9462 306.3334 250.0015 c
306.3334 235.0568 307.8679 222.1319 311.3334 208.6682 C
324.1 210.2348 L
320.8738 222.7652 319.3333 235.7137 319.3333 250.0015 c
319.3333 264.2893 320.8738 277.2377 324.1 289.7682 C
f
325.4 189.8818 m
310.1667 191.6651 L
306.7165 178.2061 305.1667 165.1833 305.1667 149.9985 c
305.1667 134.8136 306.7165 121.7908 310.1667 108.3318 C
325.4 110.1151 L
322.2157 122.5348 320.6667 135.6888 320.6667 149.9985 c
320.6667 164.3081 322.2157 177.462 325.4 189.8818 C
f
U
326.7 90 m
309 92 L
305.5652 78.5458 304 65.425 304 50 c
304 34.575 305.5652 21.4542 309 8 C
326.7 10 L
323.5576 22.309 322 35.6685 322 50 c
322 64.3315 323.5576 77.691 326.7 90 C
f
u
470.1667 579.4969 m
470.1667 584.8303 L
421.6667 584.8303 L
421.6667 579.4969 L
470.1667 579.4969 L
f
469.3333 477.9938 m
469.3333 485.6606 L
421.3333 485.6606 L
421.3333 477.9938 L
469.3333 477.9938 L
f
467.5 376.5 m
467.5 386.5 L
421 386.5 L
421 376.5 L
467.5 376.5 L
f
467.6667 274.9969 m
467.6667 287.3303 L
420.6667 287.3303 L
420.6667 274.9969 L
467.6667 274.9969 L
f
466.8334 173.5031 m
466.8334 188.1697 L
420.3334 188.1697 L
420.3334 173.5031 L
466.8334 173.5031 L
f
U
466 72 m
466 89 L
420 89 L
420 72 L
466 72 L
f
u
426.9799 553.013 m
418.556 546.4058 413.5 537.5319 413.5 531.3303 c
413.5 518.5517 424.7095 510.4969 450 510.4969 c
459.2451 510.4969 477.1152 512.7331 484.5 514.6636 C
483.5 519.9137 L
476.3554 518.0421 458.8358 515.8303 450 515.8303 c
428.4608 515.8303 419 522.0509 419 531.6636 c
419 536.3306 423.2145 543.6858 430.6467 549.5129 C
426.9799 553.013 L
f
426.3839 453.8067 m
418.1536 447.444 413 438.2819 413 431.6606 c
413 418.2682 424.3392 409.9939 450 409.9939 c
459.4711 409.9939 477.1808 412.2539 485 414.3272 C
483.6 421.9273 L
476.0354 419.9136 458.7865 417.6607 450 417.6607 c
429.8094 417.6607 421.0001 423.4857 421.0001 432.3273 c
421.0001 436.9014 424.9022 443.7522 431.7174 449.0067 C
426.3839 453.8067 L
f
425.788 354.6096 m
417.7513 348.4914 412.5 339.041 412.5 332 c
412.5 317.9939 423.9691 309.5 450 309.5 c
459.6971 309.5 477.2464 311.7838 485.5 314 C
483.7 323.95 L
475.7155 321.7942 458.7373 319.5 450 319.5 c
431.1579 319.5 423 324.9294 423 333 c
423 337.4813 426.5897 343.8277 432.788 348.5096 C
425.788 354.6096 L
f
425.192 255.4034 m
417.349 249.5297 412 239.7911 412 232.3303 c
412 217.7104 423.5989 208.9969 450 208.9969 c
459.923 208.9969 477.3119 211.3046 486 213.6636 C
483.8 225.9637 L
475.3955 223.6658 458.688 221.3303 450 221.3303 c
432.5065 221.3303 425 226.3642 425 233.6636 c
425 238.0521 428.2774 243.894 433.8587 248.0033 C
425.192 255.4034 L
f
424.596 156.2062 m
416.9466 150.577 411.5 140.5502 411.5 132.6697 c
411.5 117.4361 423.2287 108.5031 450 108.5031 c
460.149 108.5031 477.3775 110.8345 486.5 113.3364 C
483.9 127.9863 L
475.0756 125.5463 458.6387 123.1697 450 123.1697 c
433.8549 123.1697 426.9999 127.808 426.9999 134.3364 c
426.9999 138.632 429.965 143.9695 434.9293 147.5063 C
424.596 156.2062 L
f
U
424 57 m
416.5443 51.6153 411 41.3003 411 33 c
411 17.1526 422.8585 8 450 8 c
460.375 8 477.4431 10.3553 487 13 C
484 30 L
474.7556 27.4179 458.5895 25 450 25 c
435.2035 25 429 29.2428 429 35 c
429 39.2028 431.6527 44.0359 436 47 C
424 57 L
f
u
175.3 576.6636 m
175.3 581.6636 L
115.5 581.6636 L
115.5 576.6636 L
175.3 576.6636 L
f
174.5999 475.3272 m
174.5999 482.3273 L
115 482.3273 L
115 475.3272 L
174.5999 475.3272 L
f
173.9 374 m
173.9 383 L
114.5 383 L
114.5 374 L
173.9 374 L
f
173.1999 272.6636 m
173.1999 283.6636 L
114 283.6636 L
114 272.6636 L
173.1999 272.6636 L
f
172.9 171.3364 m
172.9 184.3364 L
113.5 184.3364 L
113.5 171.3364 L
172.9 171.3364 L
f
U
171.8 70 m
171.8 85 L
113 85 L
113 70 L
171.8 70 L
f
u
188.3333 558.4969 m
188.3333 563.497 L
109.5 563.497 L
109.5 558.4969 L
188.3333 558.4969 L
f
188.6667 456.9938 m
188.6667 463.9939 L
109 463.9939 L
109 456.9938 L
188.6667 456.9938 L
f
189 355.5 m
189 364.5 L
108.5 364.5 L
108.5 355.5 L
189 355.5 L
f
189.3333 253.9969 m
189.3333 264.997 L
108 264.997 L
108 253.9969 L
189.3333 253.9969 L
f
189.6666 152.5031 m
189.6666 165.503 L
107.5 165.503 L
107.5 152.5031 L
189.6666 152.5031 L
f
U
190 51 m
190 66 L
107 66 L
107 51 L
190 51 L
f
u
177.3333 537.1636 m
165.3265 553.1355 159.4779 570.7635 158.6666 594.1636 C
153.1666 594.1636 L
154.012 569.7852 160.2205 550.9618 172.8332 534.3303 C
177.3333 537.1636 L
f
176.6666 437.3273 m
164.7582 453.3398 159.1468 470.6953 158.3333 494.3273 C
150.3331 494.3273 L
151.2024 469.0995 157.3979 450.1979 170.0665 433.4605 C
176.6666 437.3273 L
f
176 337.5 m
164.1899 353.5533 158.8157 370.6362 158 394.5 C
147.5 394.5 L
148.3931 368.423 154.5756 349.4433 167.3 332.6 C
176 337.5 L
f
175.3333 237.6636 m
163.6216 253.7577 158.4847 270.5679 157.6666 294.6636 C
144.6666 294.6636 L
145.5835 267.7372 151.753 248.6795 164.5332 231.7303 C
175.3333 237.6636 L
f
174.6667 137.8364 m
163.0534 153.9712 158.1536 170.5088 157.3333 194.8364 C
141.8334 194.8364 L
142.7742 167.0607 148.9307 147.9249 161.7667 130.8697 C
174.6667 137.8364 L
f
U
174 38 m
162.4851 54.1756 157.8225 70.4406 157 95 C
139 95 L
139.9646 66.375 146.1081 47.1611 159 30 C
174 38 L
f
u
177.3333 537.1636 m
169.0546 542.9318 155.1743 547.1636 143.6666 547.1636 c
125.4505 547.1636 116.1666 539.8606 116.1666 529.8303 c
116.1666 516.7337 126.2249 508.8303 152.6666 508.8303 c
160.9059 508.8303 168.7726 509.4712 176.1667 510.8303 C
175.45 515.9303 L
168.381 514.6494 160.6347 513.9303 152.6666 513.9303 c
130.0676 513.9303 121.8334 519.6707 121.8334 529.8303 c
121.8334 536.9391 129.2933 542.1636 143.6666 542.1636 c
153.6352 542.1636 164.9793 539.0917 172.8332 534.3303 C
177.3333 537.1636 L
f
176.6666 437.3273 m
168.3341 443.1329 154.5364 447.3273 143.3333 447.3273 c
124.6748 447.3273 115.3333 439.8803 115.3333 429.6606 c
115.3333 416.6305 125.5668 408.6606 152.3333 408.6606 c
160.6294 408.6606 168.8414 409.3344 176.3333 410.6606 C
175.4 417.8607 L
168.1283 416.6087 160.0373 415.8607 152.3333 415.8607 c
131.0478 415.8607 123.6668 420.9017 123.6668 429.6606 c
123.6668 435.7427 130.2236 440.3271 143.3333 440.3271 c
152.802 440.3271 162.3254 437.7903 170.0665 433.4605 C
176.6666 437.3273 L
f
176 337.5 m
167.6137 343.3432 153.8987 347.5 143 347.5 c
123.8993 347.5 114.5 339.9091 114.5 329.5 c
114.5 316.5365 124.9087 308.5 152 308.5 c
160.3529 308.5 168.9101 309.2067 176.5 310.5 C
175.35 319.8 L
167.8756 318.5771 159.4401 317.8 152 317.8 c
132.028 317.8 125.5 322.1419 125.5 329.5 c
125.5 334.5555 131.1538 338.5 143 338.5 c
151.9689 338.5 159.6717 336.4982 167.3 332.6 C
176 337.5 L
f
175.3333 237.6636 m
166.8932 243.5443 153.2609 247.6636 142.6666 247.6636 c
123.1237 247.6636 113.6666 239.9287 113.6666 229.3303 c
113.6666 216.4334 124.2505 208.3303 151.6666 208.3303 c
160.0764 208.3303 168.9789 209.0699 176.6667 210.3303 C
175.3 221.7303 L
167.6229 220.5365 158.8428 219.7303 151.6666 219.7303 c
133.0082 219.7303 127.3334 223.3729 127.3334 229.3303 c
127.3334 233.359 132.0841 236.6636 142.6666 236.6636 c
151.1356 236.6636 157.0178 235.1968 164.5332 231.7303 C
175.3333 237.6636 L
f
174.6667 137.8364 m
166.1728 143.7546 152.6231 147.8364 142.3333 147.8364 c
122.3482 147.8364 112.8333 139.9575 112.8333 129.1697 c
112.8333 116.3394 123.5924 108.1697 151.3333 108.1697 c
159.7999 108.1697 169.0476 108.9423 176.8333 110.1697 C
175.25 123.6696 L
167.3703 122.5048 158.2455 121.6696 151.3333 121.6696 c
133.9884 121.6696 129.1666 124.613 129.1666 129.1697 c
129.1666 132.1718 133.0143 134.8364 142.3333 134.8364 c
150.3025 134.8364 154.3641 133.9048 161.7667 130.8697 C
174.6667 137.8364 L
f
U
174 38 m
165.4523 43.9557 151.9853 48 142 48 c
121.5725 48 112 39.9771 112 29 c
112 16.2363 122.9343 8 151 8 c
159.5234 8 169.1164 8.8055 177 10 C
175.2 25.6 L
167.1176 24.4642 157.6482 23.6 151 23.6 c
134.9686 23.6 131 25.8441 131 29 c
131 30.9753 133.9446 33 142 33 c
149.4693 33 151.7102 32.6034 159 30 C
174 38 L
f
u
14.0834 512.4969 m
25.5616 537.8479 33.5752 566.0998 37 593.7136 C
31.6666 594.1636 L
28.1353 566.1115 20.2179 538.6732 9.1666 514.3303 C
14.0834 512.4969 L
f
15.4667 412.1939 m
26.8968 438.5967 34.4112 465.6314 38 493.7272 C
30.3332 494.3273 L
26.5832 465.7855 19.2118 439.6849 8.3333 414.6606 C
15.4667 412.1939 L
f
16.85 311.9 m
28.2319 339.3546 35.2471 365.1721 39 393.75 C
29 394.5 L
25.0312 365.4687 18.2057 340.7057 7.5 315 C
16.85 311.9 L
f
18.2334 211.5969 m
29.5671 240.1035 36.0831 264.7036 40 293.7636 C
27.6666 294.6636 L
23.4791 265.1428 17.1996 241.7174 6.6666 215.3303 C
18.2334 211.5969 L
f
19.6166 111.3031 m
30.9022 140.8614 36.919 164.2444 41 193.7864 C
26.3334 194.8364 L
21.9271 164.826 16.1936 142.7382 5.8333 115.6697 C
19.6166 111.3031 L
f
U
u
489.8334 577.9969 m
486.7058 583.8579 483.7236 589.0471 480.3334 594.6636 C
476.2833 592.3469 L
479.7452 586.6051 482.6682 581.4167 485.65 575.8302 C
489.8334 577.9969 L
f
490.6667 477.9939 m
487.4396 483.9826 484.1628 489.611 480.6667 495.3273 C
475.1666 492.1939 L
478.7056 486.3957 481.9075 480.7975 484.9999 475.0605 C
490.6667 477.9939 L
f
491.5 375.9 m
488.1735 382.0166 484.602 388.0841 481 393.9 C
474.05 389.95 L
477.6661 384.0955 481.1469 378.0874 484.35 372.2 C
491.5 375.9 L
f
492.3334 276.9969 m
488.9073 283.2413 485.0411 289.7481 481.3334 295.6636 C
472.9333 290.8969 L
476.6266 284.9861 480.3861 278.5682 483.7 272.5302 C
492.3334 276.9969 L
f
493.1667 177.003 m
489.6411 183.3752 485.4803 190.3211 481.6667 196.3363 C
471.8167 190.753 L
475.5871 184.7859 479.6255 177.9582 483.05 171.7697 C
493.1667 177.003 L
f
U
470.7 90.6 m
474.5475 84.5765 478.8648 77.339 482.4 71 C
494 77 L
490.375 83.5 485.9195 90.8851 482 97 C
470.7 90.6 L
f
u
463.4833 589.1969 m
466.7171 583.8368 469.5815 578.7485 472.6499 572.9969 C
476.8 575.1469 L
473.735 580.8906 470.8224 585.9928 467.5 591.4969 C
463.4833 589.1969 L
f
461.5665 488.8939 m
464.9077 483.4251 468.0523 477.9376 471.1999 472.0938 C
476.8 474.9939 L
473.6375 480.8628 470.4261 486.392 467 491.9939 C
461.5665 488.8939 L
f
459.65 386.5 m
463.0985 380.9227 466.5232 375.0358 469.75 369.1 C
476.8 372.75 L
473.54 378.7442 470.0299 384.7004 466.5 390.4 C
459.65 386.5 L
f
457.7333 287.2969 m
461.2891 281.6111 464.9939 275.3249 468.3 269.2969 C
476.8 273.6969 L
473.4425 279.8164 469.6336 286.1997 466 291.9969 C
457.7333 287.2969 L
f
455.8167 187.003 m
459.4799 181.2086 463.4647 174.5231 466.85 168.4031 C
476.8 173.553 L
473.345 179.7978 469.2374 186.6081 465.5 192.503 C
455.8167 187.003 L
f
U
453.9 86.7 m
457.6705 80.797 461.9355 73.7122 465.4 67.5 C
476.8 73.4 L
473.2475 79.77 468.8411 87.0074 465 93 C
453.9 86.7 L
f
u
285.5 557.9969 m
282.1865 564.1219 279.0431 569.5995 275.4834 575.4969 C
271.3392 573.1269 L
274.8349 567.332 277.9127 561.8946 281.22 555.7802 C
285.5 557.9969 L
f
287.0001 456.7938 m
283.5879 463.0588 280.1376 468.9918 276.4667 474.9939 C
270.7783 471.7538 L
274.3828 465.8529 277.7517 459.9832 281.14 453.7604 C
287.0001 456.7938 L
f
288.5 355.6 m
284.9893 362.0049 281.232 368.3933 277.45 374.5 C
270.2175 370.39 L
273.9309 364.3831 277.5908 358.081 281.06 351.75 C
288.5 355.6 L
f
290 254.3969 m
286.3908 260.9419 282.3265 267.7855 278.4333 273.9969 C
269.6566 269.0169 L
273.4788 262.9041 277.4298 256.1695 280.98 249.7302 C
290 254.3969 L
f
291.5 153.203 m
287.7922 159.888 283.4209 167.187 279.4166 173.5031 C
269.0958 167.6531 L
273.0268 161.4343 277.2689 154.2673 280.9 147.7197 C
291.5 153.203 L
f
U
268.5349 66.28 m
272.5748 59.9553 277.1079 52.3558 280.8199 45.6999 C
293 51.9999 L
289.1937 58.8249 284.5154 66.5793 280.3999 73 C
268.5349 66.28 L
f
u
271.8233 554.9502 m
268.6051 560.9811 265.5802 566.3508 262.0917 572.1303 C
258.001 569.7489 L
261.4801 563.9803 264.4042 558.7734 267.6177 552.7501 C
271.8233 554.9502 L
f
272.4467 453.4004 m
269.126 459.5629 265.7808 465.3785 262.1833 471.2605 C
256.5797 468.0324 L
260.1548 462.1779 263.3898 456.5245 266.6881 450.4013 C
272.4467 453.4004 L
f
273.07 351.86 m
269.647 358.1539 265.9813 364.4154 262.275 370.4 C
255.1585 366.3252 L
258.8296 360.3848 262.3754 354.285 265.7586 348.0619 C
273.07 351.86 L
f
273.6933 250.3102 m
270.1679 256.7356 266.1819 263.4431 262.3666 269.5302 C
253.7373 264.6087 L
257.5043 258.5823 261.361 252.0361 264.829 245.7131 C
273.6933 250.3102 L
f
274.3166 148.7697 m
270.6888 155.3267 266.3825 162.48 262.4582 168.6697 C
252.3161 162.9015 L
256.1792 156.7892 260.3466 149.7966 263.8995 143.3737 C
274.3166 148.7697 L
f
U
250.8949 61.185 m
254.8539 54.9868 259.3321 47.5477 262.9699 41.0249 C
274.9399 47.2199 L
271.2098 53.9084 266.583 61.5077 262.5499 67.8 C
250.8949 61.185 L
f
u
90.5001 578.6636 m
87.3725 584.5245 84.3903 589.7137 81 595.3303 C
76.95 593.0136 L
80.4119 587.2718 83.3349 582.0833 86.3167 576.4969 C
90.5001 578.6636 L
f
92.0001 478.3272 m
88.773 484.316 85.4962 489.9443 82.0001 495.6606 C
76.5 492.5272 L
80.039 486.729 83.2409 481.1307 86.3334 475.3938 C
92.0001 478.3272 L
f
93.5 378 m
90.1735 384.1165 86.602 390.1841 83 396 C
76.05 392.05 L
79.6662 386.1955 83.1469 380.1874 86.35 374.3 C
93.5 378 L
f
95.0001 277.6636 m
91.574 283.908 87.7078 290.4147 84 296.3303 C
75.6 291.5636 L
79.2933 285.6528 83.0528 279.2348 86.3667 273.1969 C
95.0001 277.6636 L
f
96.5 177.3364 m
92.9744 183.7086 88.8136 190.6545 85 196.6697 C
75.15 191.0864 L
78.9204 185.1192 82.9588 178.2915 86.3834 172.1031 C
96.5 177.3364 L
f
U
74.7 90.6 m
78.5475 84.5765 82.8648 77.339 86.4 71 C
98 77 L
94.375 83.5 89.9195 90.8851 86 97 C
74.7 90.6 L
f
u
64.15 589.8636 m
67.3838 584.5034 70.2482 579.4152 73.3166 573.6636 C
77.4667 575.8136 L
74.4017 581.5573 71.4891 586.6594 68.1667 592.1636 C
64.15 589.8636 L
f
62.8999 489.2272 m
66.2411 483.7585 69.3856 478.2709 72.5333 472.4272 C
78.1334 475.3272 L
74.9709 481.1962 71.7595 486.7254 68.3334 492.3273 C
62.8999 489.2272 L
f
61.65 388.6 m
65.0985 383.0227 68.5232 377.1358 71.75 371.2 C
78.8 374.85 L
75.54 380.8442 72.0299 386.8004 68.5 392.5 C
61.65 388.6 L
f
60.4 287.9636 m
63.9558 282.2777 67.6606 275.9915 70.9667 269.9636 C
79.4667 274.3636 L
76.1092 280.4831 72.3003 286.8664 68.6667 292.6636 C
60.4 287.9636 L
f
59.1501 187.3364 m
62.8132 181.542 66.7981 174.8565 70.1834 168.7364 C
80.1333 173.8864 L
76.6783 180.1311 72.5707 186.9415 68.8333 192.8364 C
59.1501 187.3364 L
f
U
57.9 86.7 m
61.6705 80.797 65.9355 73.7122 69.4 67.5 C
80.8 73.4 L
77.2475 79.77 72.8411 87.0074 69 93 C
57.9 86.7 L
f
376.8651 87.92 m
380.5202 82.1977 384.6216 75.3221 387.98 69.3001 C
399 75 L
395.5562 81.175 391.3235 88.1908 387.6 94 C
376.8651 87.92 L
f
368.9051 71.215 m
372.4871 65.6072 376.5388 58.8766 379.8301 52.9751 C
390.66 58.5801 L
387.2852 64.6315 383.0991 71.5071 379.4501 77.2 C
368.9051 71.215 L
f
u
193.995 577.3345 m
190.8976 583.1412 187.9526 588.2689 184.595 593.8345 C
180.6391 591.5711 L
184.069 585.8795 186.956 580.7513 189.9083 575.2178 C
193.995 577.3345 L
f
194.99 477.6689 m
191.8233 483.5493 188.6208 489.0546 185.19 494.6689 C
179.8783 491.6422 L
183.3531 485.9444 186.483 480.4668 189.5166 474.8355 C
194.99 477.6689 L
f
195.9849 378.0125 m
192.749 383.9665 189.2889 389.8494 185.785 395.5124 C
179.1175 391.7225 L
182.6374 386.0186 186.0102 380.1914 189.125 374.4625 C
195.9849 378.0125 L
f
196.9799 277.3469 m
193.6747 283.3746 189.9571 289.6352 186.3799 295.3469 C
178.3566 290.7936 L
181.9216 285.0835 185.5373 278.9069 188.7333 273.0803 C
196.9799 277.3469 L
f
U
176.8349 91.9449 m
180.49 86.2226 184.5915 79.347 187.9499 73.325 C
198.9699 79.0249 L
195.5261 85.1999 191.2934 92.2157 187.5699 98.0249 C
176.8349 91.9449 L
f
167.9791 588.4536 m
171.1815 583.1427 174.0104 578.1134 177.0499 572.4136 C
181.105 574.5145 L
178.0696 580.2051 175.1938 585.2469 171.9033 590.7011 C
167.9791 588.4536 L
f
166.5582 488.4072 m
169.8366 483.0369 172.91 477.6674 175.9999 471.9272 C
181.41 474.7289 L
178.3067 480.4917 175.1688 485.9002 171.8066 491.4022 C
166.5582 488.4072 L
f
165.1375 388.37 m
168.4917 382.9402 171.8097 377.2305 174.95 371.45 C
181.7149 374.9525 L
178.5437 380.7874 175.1438 386.5627 171.71 392.1124 C
165.1375 388.37 L
f
163.7166 287.3236 m
167.1468 281.8345 170.7093 275.7845 173.8999 269.9636 C
182.0199 274.1669 L
178.7808 280.074 175.1189 286.2161 171.6133 291.8136 C
163.7166 287.3236 L
f
198.0248 179.5405 m
194.6503 185.6419 190.6752 192.28 187.0249 198.0405 C
177.6458 192.7238 L
181.2558 187.0077 185.1143 180.4815 188.3916 174.5572 C
198.0248 179.5405 L
f
162.3459 189.1364 m
165.8519 183.5879 169.6591 177.1976 172.9 171.3364 C
182.3749 176.2406 L
179.0679 182.2198 175.1439 188.7286 171.5666 194.3738 C
162.3459 189.1364 L
f
160.875 88.2399 m
164.457 82.6321 168.5087 75.9015 171.8 70 C
182.6299 75.605 L
179.255 81.6564 175.069 88.532 171.4199 94.2249 C
160.875 88.2399 L
f
u
94.6667 535.1636 m
90.8333 546.9761 86.4032 558.4634 81.3334 569.6636 C
76.3166 567.6802 L
81.1714 556.9526 85.5682 545.6268 89.4999 533.6969 C
94.6667 535.1636 L
f
95.3334 434.3272 m
91.6667 446.3897 87.4851 457.8795 82.6667 469.3272 C
75.3332 466.6605 L
79.9376 455.713 84.0739 444.3785 87.7999 432.3938 C
95.3334 434.3272 L
f
96 333.5 m
92.5 345.8125 88.5669 357.3048 84 369 C
74.35 365.65 L
78.704 354.4827 82.5798 343.1395 86.1 331.1 C
96 333.5 L
f
96.6667 232.6636 m
93.3333 245.2261 89.6488 256.721 85.3334 268.6636 C
73.3666 264.6302 L
77.4703 253.2431 81.0855 241.8913 84.3999 229.7969 C
96.6667 232.6636 L
f
97.3333 131.8364 m
94.1666 144.6489 90.7306 156.1463 86.6666 168.3364 C
72.3833 163.6197 L
76.2367 152.0128 79.5914 140.6523 82.7 128.5031 C
97.3333 131.8364 L
f
U
71.4 62.6 m
75.003 50.7732 78.0971 39.4041 81 27.2 C
98 31 L
95 44.0625 91.8125 55.5625 88 68 C
71.4 62.6 L
f
21 11 m
32.2374 41.6103 37.755 63.7759 42 93.8 C
25 95 L
20.375 64.5 15.1875 43.75 5 16 C
21 11 L
f
u
33.1177 513.6426 m
39.9164 511.0717 46.1389 509.6636 51.5 509.6636 c
60.0016 509.6636 68 520.1303 68 544.9969 c
68 570.5426 64.5993 574.6636 47 574.6636 C
9.6666 574.6636 L
9.6666 569.4969 L
47.1666 569.4969 l
60.6154 569.4969 62.4999 567.2916 62.4999 545.6636 c
62.4999 524.6107 56.7837 514.8303 50.6666 514.8303 c
46.311 514.8303 41.0214 516.0228 34.5677 518.3927 C
33.1177 513.6426 L
f
32.2941 413.3104 m
38.8384 410.8148 45.3498 409.3272 51 409.3272 c
60.0352 409.3272 68 419.6072 68 444.9939 c
68 471.2309 64.489 475.3273 45.9999 475.3273 C
9.3333 475.3273 L
9.3333 467.9938 L
46.3333 467.9938 l
58.4773 467.9938 59.9998 466.2033 59.9998 446.3273 c
59.9998 425.3742 54.973 416.6607 49.3332 416.6607 c
45.2787 416.6607 40.3158 417.8167 34.1942 420.0105 C
32.2941 413.3104 L
f
31.4706 312.9874 m
37.7605 310.5672 44.5609 309 50.5 309 c
60.0687 309 68 319.0934 68 345 c
68 371.9282 64.3787 376 45 376 C
9 376 L
9 366.5 L
45.5 366.5 l
56.3394 366.5 57.5 365.1243 57.5 347 c
57.5 326.1467 53.1625 318.5 48 318.5 c
44.2466 318.5 39.6102 319.6197 33.8206 321.6374 C
31.4706 312.9874 L
f
30.6471 212.6552 m
36.6824 210.3104 43.7718 208.6636 50 208.6636 c
60.1023 208.6636 68 218.5704 68 244.9969 c
68 272.6164 64.2684 276.6636 44 276.6636 C
8.6666 276.6636 L
8.6666 264.9969 L
44.6666 264.9969 l
54.2014 264.9969 54.9999 264.0361 54.9999 247.6636 c
54.9999 226.9102 51.3518 220.3303 46.6666 220.3303 c
43.2143 220.3303 38.9046 221.4137 33.4471 223.2552 C
30.6471 212.6552 L
f
29.8236 112.3322 m
35.6045 110.0627 42.9828 108.3364 49.5 108.3364 c
60.1358 108.3364 68 118.0565 68 145.003 c
68 173.3137 64.1581 177.3364 43 177.3364 C
8.3333 177.3364 L
8.3333 163.5031 L
43.8333 163.5031 l
52.0635 163.5031 52.5001 162.9571 52.5001 148.3364 c
52.5001 127.6828 49.5412 122.1697 45.3334 122.1697 c
42.1821 122.1697 38.199 123.2166 33.0735 124.8821 C
29.8236 112.3322 L
f
U
29 12 m
34.5265 9.8059 42.1938 8 49 8 c
60.1694 8 68 17.5335 68 45 c
68 74.002 64.0478 78 42 78 c
8 78 L
8 62 L
43 62 l
49.9254 62 50 61.8688 50 49 c
50 28.4463 47.7305 24 44 24 c
41.1499 24 37.4934 25.0106 32.7 26.5 C
29 12 L
f
u
380.2527 172.8341 m
372.4167 172.8341 L
372.4167 191.8341 L
356.9167 191.8341 L
356.9167 172.8341 L
331.1667 172.8341 L
331.1667 159.0008 L
357.75 159.0008 L
357.75 149.3341 L
357.75 127.9784 356.9884 126.9568 339.75 121.3007 C
344.9167 107.5007 L
368.6948 115.3026 373.25 122.2436 373.25 149.3341 C
373.25 159.0008 L
380.2527 159.0008 L
380.2527 172.8341 L
f
380.5054 272.6682 m
371.8333 272.6682 L
371.8333 291.6682 L
358.8333 291.6682 L
358.8333 272.6682 L
331.3333 272.6682 L
331.3333 261.0015 L
359.5 261.0015 L
359.5 249.6682 L
359.5 227.2392 358.168 225.3985 340.5 219.6015 C
344.8333 208.0015 L
368.1241 215.6434 372.5 222.5156 372.5 249.6682 C
372.5 261.0015 L
380.5054 261.0015 L
380.5054 272.6682 L
f
380.758 372.5023 m
371.25 372.5023 L
371.25 391.5023 L
360.75 391.5023 L
360.75 372.5023 L
331.5 372.5023 L
331.5 363.0023 L
361.2501 363.0023 L
361.2501 350.0023 L
361.2501 326.5001 359.3477 323.8402 341.25 317.9022 C
344.75 308.5022 L
367.5535 315.9843 371.75 322.7876 371.75 350.0023 C
371.75 363.0023 L
380.758 363.0023 L
380.758 372.5023 L
f
U
u
381.0107 472.3364 m
370.6667 472.3364 L
370.6667 491.3364 L
362.6667 491.3364 L
362.6667 472.3364 L
331.6667 472.3364 L
331.6667 465.0031 L
363.0001 465.0031 L
363.0001 450.3364 L
363.0001 425.761 360.5274 422.2819 342 416.203 C
344.6667 409.003 L
366.9828 416.3252 371 423.0596 371 450.3364 C
371 465.0031 L
381.0107 465.0031 L
381.0107 472.3364 L
f
385.0553 572.1636 m
371.3334 572.1636 L
371.3334 591.1636 L
365.8333 591.1636 L
365.8333 572.1636 L
331.8333 572.1636 L
331.8333 566.9969 L
366 566.9969 L
366 550.6636 L
366 525.0151 362.957 520.7169 344 514.497 C
345.8333 509.4969 L
367.6622 516.6592 371.5 523.3248 371.5 550.6636 C
371.5 566.9969 L
385.0553 566.9969 L
385.0553 572.1636 L
f
U
386.1 672 m
371 672 L
371 691 L
368 691 L
368 672 L
332 672 L
332 669 L
368 669 L
368 651 L
368 624.2783 364.3867 619.1609 345 612.8 C
346 610 L
367.3415 617.0024 371 623.5991 371 651 C
371 669 L
386.1 669 L
386.1 672 L
f
u
320.8 389.65 m
310.5 391 L
307.0193 377.5314 305.5 364.7045 305.5 350 c
305.5 335.2954 307.0193 322.4685 310.5 309 C
320.8 310.35 L
317.532 322.9911 316 335.7341 316 350 c
316 364.2659 317.532 377.0087 320.8 389.65 C
f
320.1666 489.5364 m
312.3334 490.6697 L
308.8373 477.1963 307.3334 464.4674 307.3334 450.003 c
307.3334 435.5386 308.8373 422.8096 312.3334 409.3364 C
320.1666 410.4697 L
316.8568 423.2216 315.3333 435.759 315.3333 450.003 c
315.3333 464.2471 316.8568 476.7844 320.1666 489.5364 C
f
318.5334 589.4136 m
313.1667 590.3303 L
309.6553 576.8521 308.1667 564.2212 308.1667 549.9969 c
308.1667 535.7727 309.6553 523.1416 313.1667 509.6636 C
318.5334 510.5803 L
315.1817 523.4428 313.6667 535.7748 313.6667 549.9969 c
313.6667 564.2191 315.1817 576.5508 318.5334 589.4136 C
f
U
316.9 610.7 m
313.5065 623.6733 312 635.7997 312 650 c
312 664.2003 313.5065 676.3265 316.9 689.3 C
314 690 L
310.4733 676.5171 309 663.9841 309 650 c
309 636.0159 310.4733 623.4828 314 610 C
316.9 610.7 L
f
u
399.0001 173.2995 m
395.6256 179.4008 391.6504 186.039 388.0001 191.7995 C
378.621 186.4828 L
382.231 180.7667 386.0896 174.2406 389.3668 168.3163 C
399.0001 173.2995 L
f
399.0002 271.599 m
395.695 277.6267 391.9773 283.8872 388.4002 289.599 C
380.377 285.0457 L
383.9419 279.3356 387.5576 273.159 390.7536 267.3324 C
399.0002 271.599 L
f
399.0003 369.8985 m
395.7643 375.8525 392.3042 381.7355 388.8002 387.3985 C
382.1329 383.6085 L
385.6528 377.9046 389.0255 372.0775 392.1403 366.3486 C
399.0003 369.8985 L
f
U
u
399.0004 468.198 m
395.8337 474.0784 392.6311 479.5837 389.2003 485.198 C
383.8888 482.1714 L
387.3636 476.4736 390.4935 470.996 393.5271 465.3648 C
399.0004 468.198 L
f
399.0003 576.9178 m
395.9029 582.7245 392.9579 587.8522 389.6003 593.4178 C
385.6445 591.1544 L
389.0743 585.4628 391.9613 580.3347 394.9136 574.8011 C
399.0003 576.9178 L
f
U
399 676.5 m
395.9719 682.2331 393.2844 686.9831 390 692.5 C
387.4 691 L
390.7848 685.3145 393.4289 680.5359 396.3 675.1 C
399 676.5 L
f
u
370.321 171.4953 m
373.8271 165.9469 377.6342 159.5566 380.8752 153.6954 C
390.3501 158.5996 L
387.0431 164.5788 383.1191 171.0877 379.5418 176.7328 C
370.321 171.4953 L
f
371.7369 271.7757 m
375.1671 266.2866 378.7297 260.2366 381.9203 254.4158 C
390.0402 258.6191 L
386.8011 264.5261 383.1392 270.6682 379.6336 276.2657 C
371.7369 271.7757 L
f
373.1528 372.056 m
376.5071 366.6264 379.8251 360.9166 382.9653 355.1361 C
389.7302 358.6386 L
386.5591 364.4735 383.1592 370.2488 379.7253 375.7985 C
373.1528 372.056 L
f
U
u
374.5687 472.3364 m
377.8471 466.9661 380.9205 461.5966 384.0104 455.8565 C
389.4203 458.6581 L
386.317 464.4208 383.1792 469.8294 379.817 475.3314 C
374.5687 472.3364 L
f
375.9845 583.0369 m
379.1869 577.7259 382.0158 572.6967 385.0553 566.9969 C
389.1103 569.0977 L
386.0749 574.7883 383.1991 579.8302 379.9087 585.2844 C
375.9845 583.0369 L
f
U
377.4 684.6 m
380.5265 679.3484 383.1108 674.6595 386.1 669 C
388.8 670.4 L
385.8325 676.0184 383.2187 680.6935 380 686.1 C
377.4 684.6 L
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
