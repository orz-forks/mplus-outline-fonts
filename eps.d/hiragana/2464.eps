%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (2464.eps)
%%CreationDate: (3/4/05) (12:56 PM)
%%BoundingBox: 0 0 300 700
%%HiResBoundingBox: 0 0 300 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
0 O
0 g
1 D
116 682 m
113 682 L
112.3125 672.375 112 662.9658 112 654 c
112 645.0342 112.3125 635.625 113 626 C
116 626 L
115.3415 635.2189 115 644.7813 115 654 c
115 663.2187 115.3415 672.7811 116 682 C
f
116 626 m
116.4413 658.6134 134.5186 678 160 678 c
178.6067 678 188 669.1696 188 654 c
188 638.1839 179.1743 630 160 630 c
148.9591 630 140.5317 634.6519 134.6 644.6 C
132 643 L
138.5352 632.0399 147.8483 627 160 627 c
180.1844 627 191 636.0448 191 654 c
191 670.8497 180.4577 681 160 681 c
133.0234 681 113.4654 660.3952 113 626 C
116 626 L
f
158 643 m
158 622.2277 153.2851 615.2782 137 609.8 C
138 607 L
155.3454 612.8349 161 620.8202 161 643 c
161 656.1954 160.5625 677.6875 160 693 C
157 693 L
157.5689 677.5122 158 655.9541 158 643 c
f
u
117.5001 582.3303 m
112.3333 582.3303 L
111.6562 572.7053 111.3333 563.0286 111.3333 553.997 c
111.3333 544.9653 111.6562 535.2886 112.3333 525.6636 C
117.3334 525.6636 L
116.7429 534.9398 116.4688 544.8147 116.5001 553.997 c
116.531 563.1669 116.8491 573.075 117.5001 582.3303 C
f
119.0001 482.6606 m
111.6666 482.6606 L
111 473.0356 110.6666 463.0913 110.6666 453.9939 c
110.6666 444.8965 111 434.9522 111.6666 425.3272 C
118.6667 425.3272 L
118.1444 434.6607 117.9376 444.8481 118.0001 453.9939 c
118.0621 463.1151 118.3568 473.3689 119.0001 482.6606 C
f
120.5 383 m
111 383 L
110.3437 373.375 110 363.1632 110 354 c
110 344.8368 110.3437 334.625 111 325 C
120 325 L
119.5457 334.3907 119.4062 344.8907 119.5 354 c
119.593 363.0724 119.8643 373.6719 120.5 383 C
f
122.0001 283.3303 m
110.3333 283.3303 L
109.6875 273.7053 109.3333 263.226 109.3333 253.997 c
109.3333 244.7679 109.6875 234.2886 110.3333 224.6636 C
121.3334 224.6636 L
120.9472 234.1116 120.875 244.9241 121.0001 253.997 c
121.124 263.0206 121.372 273.9658 122.0001 283.3303 C
f
123.5 183.6697 m
109.6667 183.6697 L
109.0313 174.0447 108.6667 163.2979 108.6667 154.0031 c
108.6667 144.7082 109.0313 133.9614 109.6667 124.3364 C
122.6666 124.3364 L
122.3485 133.8416 122.3437 144.9666 122.5 154.0031 c
122.6549 162.978 122.8795 174.2688 123.5 183.6697 C
f
U
u
117.3334 525.6636 m
117.7675 557.7461 135.1724 576.6636 159.5 576.6636 c
177.4632 576.6636 186.1666 568.5471 186.1666 554.1636 c
186.1666 539.216 178.0403 531.6637 159.8333 531.6637 c
149.2862 531.6637 141.6676 535.9169 135.6929 545.2625 C
131.7596 542.0624 L
138.5767 531.3608 147.6596 526.4969 159.8333 526.4969 c
180.5722 526.4969 191.6667 535.8897 191.6667 554.1636 c
191.6667 571.468 180.744 581.8303 159.8333 581.8303 c
132.5461 581.8303 113.1469 561.1526 112.6667 525.6636 C
117.3334 525.6636 L
f
118.6667 425.3272 m
119.0937 456.8788 135.8262 475.3272 159 475.3272 c
176.3198 475.3272 184.3332 467.9247 184.3332 454.3273 c
184.3332 440.248 176.9063 433.3273 159.6667 433.3273 c
149.6133 433.3273 142.8034 437.1819 136.7859 445.9249 C
131.5191 441.1249 L
138.6182 430.6818 147.4709 425.9939 159.6667 425.9939 c
180.96 425.9939 192.3334 435.7347 192.3334 454.3273 c
192.3334 472.0862 181.0302 482.6606 159.6667 482.6606 c
132.0687 482.6606 112.8283 461.9101 112.3333 425.3272 C
118.6667 425.3272 L
f
120 325 m
120.4198 356.0206 136.4799 374 158.5 374 c
175.1765 374 182.5 367.3115 182.5 354.5 c
182.5 341.2892 175.7723 335 159.5 335 c
149.9404 335 143.9391 338.4559 137.8787 346.5965 C
131.2787 340.1965 L
138.6597 330.0119 147.2823 325.5 159.5 325.5 c
181.3477 325.5 193 335.5888 193 354.5 c
193 372.7136 181.3164 383.5 159.5 383.5 c
131.5914 383.5 112.5098 362.6766 112 325 C
120 325 L
f
121.3334 224.6636 m
121.746 255.1533 137.1337 272.6636 158 272.6636 c
174.0331 272.6636 180.6666 266.689 180.6666 254.6636 c
180.6666 242.3212 174.6383 236.6637 159.3333 236.6637 c
150.2675 236.6637 145.075 239.7209 138.9716 247.259 C
131.0382 239.2589 L
138.7012 229.3329 147.0936 224.9969 159.3333 224.9969 c
181.7355 224.9969 193.6667 235.4338 193.6667 254.6636 c
193.6667 273.3319 181.6026 284.3303 159.3333 284.3303 c
131.1141 284.3303 112.1913 263.4341 111.6667 224.6636 C
121.3334 224.6636 L
f
122.6666 124.3364 m
123.072 154.2952 137.7875 171.3364 157.5 171.3364 c
172.8898 171.3364 178.8334 166.0758 178.8334 154.8364 c
178.8334 143.3624 173.5044 138.3363 159.1667 138.3363 c
150.5945 138.3363 146.2107 140.9949 140.0644 147.9305 C
130.7978 138.3306 L
138.7427 128.663 146.9049 124.5031 159.1667 124.5031 c
182.1232 124.5031 194.3333 135.2879 194.3333 154.8364 c
194.3333 173.9593 181.8887 185.1697 159.1667 185.1697 c
130.6367 185.1697 111.8728 164.2007 111.3334 124.3364 C
122.6666 124.3364 L
f
U
u
138.6 506.6636 m
156.0449 512.532 161.8334 520.6557 161.8334 542.997 c
161.8334 556.1609 161.3972 577.9799 160.8334 593.3303 C
155.3333 593.3303 L
155.8967 577.9927 156.3333 556.0023 156.3333 542.997 c
156.3333 523.0648 151.9373 516.6831 136.5667 511.497 C
138.6 506.6636 L
f
139.2 406.3272 m
156.7444 412.229 162.6667 420.4913 162.6667 442.9939 c
162.6667 456.1263 162.232 478.2722 161.6667 493.6606 C
153.6666 493.6606 L
154.2245 478.4731 154.6666 456.0505 154.6666 442.9939 c
154.6666 423.9019 150.5895 418.0881 136.1333 413.194 C
139.2 406.3272 L
f
139.8 306 m
157.4439 311.9353 163.5 320.3359 163.5 343 c
163.5 356.1009 163.0667 378.5737 162.5 394 C
152 394 L
152.5524 378.9626 153 356.1079 153 343 c
153 324.7481 149.2418 319.502 135.7 314.9 C
139.8 306 L
f
140.4 205.6636 m
158.1434 211.6324 164.3334 220.1715 164.3334 242.997 c
164.3334 256.0664 163.9014 278.8661 163.3334 294.3303 C
150.3333 294.3303 L
150.8802 279.4431 151.3333 256.1561 151.3333 242.997 c
151.3333 225.5852 147.894 220.9069 135.2667 216.597 C
140.4 205.6636 L
f
141 105.3364 m
158.8429 111.3386 165.1667 120.0162 165.1667 143.0031 c
165.1667 156.041 164.7361 179.1676 164.1667 194.6697 C
148.6667 194.6697 L
149.2081 179.9326 149.6667 156.2135 149.6667 143.0031 c
149.6667 126.4314 146.5463 122.3209 134.8333 118.303 C
141 105.3364 L
f
U
125 84 m
109 84 L
108.375 74.375 108 63.3607 108 54 c
108 44.6393 108.375 33.625 109 24 C
124 24 L
123.75 33.5625 123.8125 45 124 54 c
124.1859 62.9262 124.3872 74.5627 125 84 C
f
130.5574 37.393 m
138.7842 27.984 146.7163 24 159 24 c
182.511 24 195 35.1329 195 55 c
195 74.5775 182.175 86 159 86 c
130.1594 86 111.5542 64.9581 111 24 C
124 24 L
124.3982 53.4279 138.4413 70 157 70 c
171.7464 70 177 65.4534 177 55 c
177 44.3945 172.3703 40 159 40 c
150.9216 40 147.3466 42.2599 141.1574 48.593 C
130.5574 37.393 L
f
141.6 5 m
159.5424 11.0357 166 19.8517 166 43 c
166 56.0064 165.5709 79.4599 165 95 C
147 95 L
147.5359 80.4131 148 56.2617 148 43 c
148 27.2685 145.1985 23.7258 134.4 20 C
141.6 5 L
f
47.9 609.7 m
41.5141 635.1629 33.9353 660.8248 24.8 688 C
22 687 L
30.8061 660.8039 38.3519 635.5082 45 609 C
47.9 609.7 L
f
63.2 659.1 m
60.0293 669.5378 56.6425 680.1644 53 691 C
50.2 690 L
53.7011 679.5851 57.0507 668.8967 60.3 658.2 C
63.2 659.1 L
f
62.1119 638.9837 m
79.549 637.1611 91 645.4898 91 658.4 c
91 668.8933 82.4933 677.4 72 677.4 c
61.8732 677.4 38.4638 669.5133 6 653 C
7.4 650.3 L
39.3267 666.6042 62.4081 674.4 72 674.4 c
80.8224 674.4 88 667.2224 88 658.4 c
88 647.5973 78.2552 640.3172 62.3119 641.9837 C
62.1119 638.9837 L
f
u
20.8333 586.8303 m
29.5988 560.6044 37.1852 535.0051 43.8333 508.4969 C
49.1667 509.7469 L
42.7126 535.4818 35.1113 561.389 26.05 588.4969 C
20.8333 586.8303 L
f
19.6666 486.6605 m
28.3915 460.4048 36.0185 434.5021 42.6666 407.9939 C
50.4334 409.7939 L
43.9111 435.8008 36.2874 461.9532 27.3001 488.9939 C
19.6666 486.6605 L
f
18.5 386.5 m
27.1843 360.2144 34.8519 334.0082 41.5 307.5 C
51.7 309.85 L
45.1094 336.1289 37.4633 362.5265 28.55 389.5 C
18.5 386.5 L
f
17.3333 286.3303 m
25.977 260.0149 33.6852 233.5051 40.3333 206.9969 C
52.9667 209.8969 L
46.3079 236.4479 38.6393 263.0907 29.8 289.9969 C
17.3333 286.3303 L
f
16.1667 186.1697 m
24.7698 159.8245 32.5186 133.0113 39.1667 106.503 C
54.2333 109.953 L
47.5063 136.7759 39.8153 163.664 31.05 190.503 C
16.1667 186.1697 L
f
U
15 86 m
23.5625 59.625 31.3519 32.5082 38 6 C
55.5 10 L
48.7048 37.0949 40.9913 64.2282 32.3 91 C
15 86 L
f
u
64.4667 558.5136 m
61.2536 569.2576 57.8271 580.2277 54.1667 591.3303 C
48.95 589.6636 L
52.5395 578.9147 55.9671 567.9453 59.2833 556.9302 C
64.4667 558.5136 L
f
65.7334 457.9272 m
62.4779 468.9774 59.0117 480.291 55.3334 491.6606 C
47.6999 489.3272 L
51.3779 478.2443 54.8836 466.9939 58.2666 455.6605 C
65.7334 457.9272 L
f
67 357.35 m
63.7021 368.7064 60.1962 380.3634 56.5 392 C
46.45 389 L
50.2164 377.5831 53.8001 366.0517 57.25 354.4 C
67 357.35 L
f
68.2667 256.7636 m
64.9265 268.4262 61.3809 280.4268 57.6667 292.3303 C
45.1999 288.6636 L
49.0548 276.9127 52.7165 265.1003 56.2333 253.1302 C
68.2667 256.7636 L
f
69.5333 156.1864 m
66.1507 168.1552 62.5654 180.4992 58.8333 192.6697 C
43.95 188.3364 L
47.8933 176.2516 51.6331 164.1582 55.2167 151.8697 C
69.5333 156.1864 L
f
U
70.8 55.6 m
67.375 67.875 63.75 80.5625 60 93 C
42.7 88 L
46.7317 75.5812 50.5495 63.2068 54.2 50.6 C
70.8 55.6 L
f
u
62.4266 537.3167 m
80.1693 536.0591 91.8334 544.8942 91.8334 558.1636 c
91.8334 569.2091 82.8789 578.1636 71.8333 578.1636 c
61.1246 578.1636 38.3764 570.4808 5.5 553.4969 C
7.9667 548.6636 L
40.123 565.2261 62.2291 572.8302 71.1667 572.8302 c
79.8033 572.8302 86.3333 566.4072 86.3333 558.1636 c
86.3333 548.0065 77.5113 541.3479 62.0932 542.4834 C
62.4266 537.3167 L
f
62.7413 435.6496 m
80.7896 434.9571 92.6667 444.2986 92.6667 457.9272 c
92.6667 469.5251 83.2645 478.9273 71.6667 478.9273 c
60.376 478.9273 38.2891 471.4483 5 453.9939 C
8.5334 447.0271 L
40.9192 463.848 62.05 471.2605 70.3333 471.2605 c
78.7841 471.2605 84.6666 465.592 84.6666 457.9272 c
84.6666 448.4157 76.7673 442.3787 61.8746 442.9831 C
62.7413 435.6496 L
f
63.0559 333.9919 m
81.4099 333.8644 93.5 343.7122 93.5 357.7 c
93.5 369.8501 83.6501 379.7 71.5 379.7 c
59.6275 379.7 38.2017 372.4248 4.5 354.5 C
9.1 345.4 L
41.7153 362.4792 61.871 369.7 69.5 369.7 c
77.7651 369.7 83 364.786 83 357.7 c
83 348.834 76.0234 343.4185 61.6559 343.4919 C
63.0559 333.9919 L
f
63.3706 232.3248 m
82.0302 232.7625 94.3334 243.1166 94.3334 257.4636 c
94.3334 270.166 84.0357 280.4636 71.3333 280.4636 c
58.879 280.4636 38.1144 273.3923 4 254.9969 C
9.6667 243.7636 L
42.5115 261.101 61.6919 268.1302 68.6667 268.1302 c
76.746 268.1302 81.3333 263.9708 81.3333 257.4636 c
81.3333 249.2433 75.2794 244.4492 61.4373 243.9915 C
63.3706 232.3248 L
f
63.6853 130.667 m
82.6505 131.6697 95.1667 142.5302 95.1667 157.2364 c
95.1667 170.491 84.4213 181.2364 71.1667 181.2364 c
58.1304 181.2364 38.027 174.3688 3.5 155.503 C
10.2333 142.1364 L
43.3077 159.7322 61.5129 166.5698 67.8334 166.5698 c
75.7269 166.5698 79.6667 163.1648 79.6667 157.2364 c
79.6667 149.6616 74.5355 145.489 61.2187 144.5003 C
63.6853 130.667 L
f
U
3 56 m
10.8 40.5 L
44.1039 58.3541 61.3338 65 67 65 c
74.7078 65 78 62.3496 78 57 c
78 50.0708 73.7916 46.5198 61 45 C
64 29 L
83.2708 30.5678 96 41.9346 96 57 c
96 70.8069 84.8069 82 71 82 c
57.3819 82 37.9397 75.3363 3 56 C
f
250 631 m
250 618.3661 244.9392 613 235 613 c
223.3957 613 217 618.567 217 627 c
217 635.5639 223.5919 641 236 641 c
247.6967 641 260.6672 635.2428 284.1 615.7 C
286 618 L
262.3189 637.7498 248.7027 644 236 644 c
221.4878 644 214 636.9221 214 627 c
214 616.5781 221.9878 610 235 610 c
246.5352 610 253 616.6299 253 631 C
253 671 L
284 671 L
284 674 L
253 674 L
253 692 L
250 692 L
250 631 l
f
u
248.6666 530.9969 m
248.6666 519.4168 244.1992 514.6636 235.1667 514.6636 c
224.4353 514.6636 218.6667 519.6233 218.6667 527.3303 c
218.6667 535.0873 224.5988 539.9969 236 539.9969 c
247.7138 539.9969 259.4859 534.7933 283.35 514.9969 C
286.8334 519.0803 L
262.6555 539.1357 249.413 545.1636 236 545.1636 c
220.9807 545.1636 213.1667 537.8182 213.1667 527.3303 c
213.1667 516.3982 221.4529 509.4969 235.1667 509.4969 c
247.5715 509.4969 254.3334 516.2967 254.3334 530.9969 C
254.3334 569.8302 L
284.3334 569.8302 L
284.3334 574.997 L
254.3334 574.997 L
254.3334 592.3303 L
248.6666 592.3303 L
248.6666 530.9969 L
f
247.3332 430.9939 m
247.3332 420.4675 243.4593 416.3273 235.3333 416.3273 c
225.475 416.3273 220.3334 420.6795 220.3334 427.6606 c
220.3334 434.6107 225.6058 438.9938 236 438.9938 c
247.731 438.9938 258.3045 434.3438 282.6 414.2938 C
287.6667 420.1606 L
262.9921 440.5215 250.1233 446.3273 236 446.3273 c
220.4737 446.3273 212.3333 438.7142 212.3333 427.6606 c
212.3333 416.2183 220.918 408.9939 235.3333 408.9939 c
248.6078 408.9939 255.6667 415.9636 255.6667 430.9939 C
255.6667 468.6605 L
284.6667 468.6605 L
284.6667 475.994 L
255.6667 475.994 L
255.6667 492.6606 L
247.3332 492.6606 L
247.3332 430.9939 L
f
246 331 m
246 321.5273 242.7194 318 235.5 318 c
226.5145 318 222 321.7449 222 328 c
222 334.1433 226.6126 338 236 338 c
247.7481 338 257.1233 333.9035 281.85 313.6 C
288.5 321.25 L
263.3287 341.9165 250.8336 347.5 236 347.5 c
219.9667 347.5 211.5 339.6194 211.5 328 c
211.5 316.0476 220.3832 308.5 235.5 308.5 c
249.644 308.5 257 315.6396 257 331 C
257 367.5 L
285 367.5 L
285 377 L
257 377 L
257 393 L
246 393 L
246 331 L
f
244.6666 230.9969 m
244.6666 222.5781 241.9794 219.6636 235.6667 219.6636 c
227.5541 219.6636 223.6667 222.8012 223.6667 228.3303 c
223.6667 233.6667 227.6195 236.9969 236 236.9969 c
247.7653 236.9969 255.9419 233.4541 281.1 212.8969 C
289.3334 222.3303 L
263.6653 243.3023 251.5438 248.6636 236 248.6636 c
219.4596 248.6636 210.6667 240.5155 210.6667 228.3303 c
210.6667 215.8677 219.8483 207.9969 235.6667 207.9969 c
250.6803 207.9969 258.3334 215.3064 258.3334 230.9969 C
258.3334 266.3302 L
285.3334 266.3302 L
285.3334 277.997 L
258.3334 277.997 L
258.3334 293.3303 L
244.6666 293.3303 L
244.6666 230.9969 L
f
243.3334 131.003 m
243.3334 123.6379 241.2395 121.3363 235.8333 121.3363 c
228.5937 121.3363 225.3333 123.8665 225.3333 128.6697 c
225.3333 133.1993 228.6264 136.0031 236 136.0031 c
247.7824 136.0031 254.7607 133.0138 280.35 112.2031 C
290.1667 123.4197 L
264.0019 144.6972 252.2541 149.8363 236 149.8363 c
218.9526 149.8363 209.8334 141.4206 209.8334 128.6697 c
209.8334 115.697 219.3135 107.503 235.8333 107.503 c
251.7165 107.503 259.6666 114.9824 259.6666 131.003 C
259.6666 165.1697 L
285.6667 165.1697 L
285.6667 179.003 L
259.6666 179.003 L
259.6666 193.6697 L
243.3334 193.6697 L
243.3334 131.003 L
f
U
279.6 11.5 m
291 24.5 L
264.3385 46.0831 252.9644 51 236 51 c
218.4456 51 209 42.3167 209 29 c
209 15.5171 218.7786 7 236 7 c
252.7528 7 261 14.6493 261 31 C
261 64 L
286 64 L
286 80 L
261 80 L
261 94 L
242 94 L
242 31 L
242 24.6886 240.4996 23 236 23 c
229.6333 23 227 24.9228 227 29 c
227 32.7227 229.6333 35 236 35 c
247.7996 35 253.5794 32.5643 279.6 11.5 C
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
