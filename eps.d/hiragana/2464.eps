%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (2464.eps)
%%CreationDate: (4/9/04) (8:27 PM)
%%BoundingBox: 0 0 300 700
%%HiResBoundingBox: 0 0 300 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
1 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
*u
0 Ap
0 O
0 g
1 D
62 637 m
82.9481 638.8328 91 646.1911 91 660 c
91 670.1701 84.1491 676 70 676 c
58.667 676 38.1703 669.3468 8 654 C
9.3 651.3 L
38.4148 666.1099 58.9009 673 70 673 c
82.5 673 88 668.5486 88 660 c
88 647.7733 81.1791 641.713 61.6 640 C
62 637 L
f
47.9 609.7 m
41.5141 635.1629 33.9353 660.8248 24.8 688 C
22 687 L
30.8061 660.8039 38.3519 635.5082 45 609 C
47.9 609.7 L
f
60 673 m
58.25 678.9375 56 685.625 54 691 C
51.2 690 L
53.2697 684.4377 55.454 677.7847 57.1 672.2 C
60 673 L
f
*U
*u
117 682 m
114 682 L
113.3125 672.375 113 662.9658 113 654 c
113 645.0342 113.3125 635.625 114 626 C
117 626 L
116.3415 635.2189 116 644.7813 116 654 c
116 663.2187 116.3415 672.7811 117 682 C
f
117 626 m
117.4267 657.5326 134.5518 676 160 676 c
177.9839 676 187 668.0164 187 654 c
187 639.5298 178.668 632 160 632 c
148.7251 632 140.4324 636.7185 134.6 646.5 C
132 645 L
138.5352 634.0399 147.8483 629 160 629 c
179.8514 629 190 637.7113 190 654 c
190 669.5162 179.7913 679 160 679 c
133.037 679 114.4519 659.3954 114 626 C
117 626 L
f
158 643 m
158 622.2277 153.2851 615.2782 137 609.8 C
138 607 L
155.3454 612.8349 161 620.8202 161 643 c
161 656.1954 160.5625 677.6875 160 693 C
157 693 L
157.5689 677.5122 158 655.9541 158 643 c
f
*U
0 D
250 692 m
253 692 L
253 674 L
282 674 L
282 671 L
253 671 L
253 631 L
253 617.463 245.2023 610 234 610 c
220.8211 610 214 617.078 214 627 c
214 636.9221 220.8211 644 234 644 c
254.8271 644 274.3015 635.1148 286 621 C
283.7 619.1 L
272.4652 632.6554 253.9364 641 234 641 c
223.0296 641 217 635.7304 217 627 c
217 618.2695 223.0296 613 234 613 c
243.852 613 250 619.3956 250 631 C
250 692 L
f
u
1 D
49.3334 509.7469 m
42.8793 535.4818 35.278 561.389 26.2167 588.4969 C
21 586.8303 L
29.7655 560.6043 37.3519 535.0051 44 508.4969 C
49.3334 509.7469 L
f
50.7667 409.7939 m
44.2444 435.8008 36.6207 461.9532 27.6334 488.9939 C
19.9999 486.6605 L
28.7248 460.4048 36.3518 434.502 42.9999 407.9938 C
50.7667 409.7939 L
f
52.2 309.85 m
45.6094 336.1289 37.9633 362.5265 29.05 389.5 C
19 386.5 L
27.6843 360.2144 35.3519 334.0082 42 307.5 C
52.2 309.85 L
f
53.6334 209.8969 m
46.9746 236.4478 39.306 263.0907 30.4667 289.9969 C
18 286.3303 L
26.6437 260.0149 34.3519 233.5051 41 206.9969 C
53.6334 209.8969 L
f
55.0666 109.953 m
48.3396 136.7759 40.6486 163.664 31.8833 190.503 C
17 186.1697 L
25.6031 159.8245 33.3519 133.0112 40 106.503 C
55.0666 109.953 L
f
U
u
50.6166 589.6636 m
52.6935 583.981 54.8496 577.4025 56.55 571.7136 C
61.8334 573.2803 L
60.3751 578.2281 57.5001 586.8511 55.8334 591.3303 C
50.6166 589.6636 L
f
50.0333 489.3272 m
52.1173 483.5242 54.2451 477.0203 56 471.2272 C
63.6668 473.5606 L
62.5001 477.5188 59.0001 488.0773 57.6668 491.6606 C
50.0333 489.3272 L
f
49.45 389 m
51.5411 383.0767 53.6408 376.6473 55.45 370.75 C
65.5 373.85 L
64.625 376.8187 60.5 389.3125 59.5 392 C
49.45 389 L
f
48.8666 288.6636 m
50.9649 282.6199 53.0363 276.2651 54.9 270.2636 C
67.3334 274.1303 L
66.7501 276.1094 62.0001 290.5386 61.3334 292.3303 C
48.8666 288.6636 L
f
48.2834 188.3364 m
50.3888 182.1724 52.4319 175.8921 54.35 169.7864 C
69.1666 174.4197 L
68.8749 175.4093 63.5 191.7738 63.1666 192.6697 C
48.2834 188.3364 L
f
U
u
62 535.8302 m
83.115 537.6776 91.5 545.3418 91.5 559.6636 c
91.5 570.4269 84.3823 576.6636 70 576.6636 c
58.433 576.6636 37.4275 569.7202 7.5 554.4969 C
9.7167 549.6635 L
38.5691 564.34 59.234 571.3302 69.6667 571.3302 c
80.9791 571.3302 86 567.2623 86 559.4969 c
86 548.1647 79.737 542.5913 61.1333 540.9636 C
62 535.8302 L
f
62 434.6605 m
83.282 436.5225 92 444.4926 92 459.3272 c
92 470.6837 84.6155 477.3273 70 477.3273 c
58.199 477.3273 36.6847 470.0937 7 454.9939 C
10.1333 448.0271 L
38.7233 462.57 59.5671 469.6604 69.3333 469.6604 c
79.4582 469.6604 83.9999 465.9761 83.9999 458.9938 c
83.9999 448.5562 78.2949 443.4696 60.6666 441.9273 C
62 434.6605 L
f
62 333.5 m
83.4489 335.3766 92.5 343.6526 92.5 359 c
92.5 370.9496 84.8487 378 70 378 c
57.965 378 35.942 370.4763 6.5 355.5 C
10.55 346.4 L
38.8776 360.8094 59.9002 368 69 368 c
77.9375 368 82 364.6991 82 358.5 c
82 348.9568 76.853 344.357 60.2 342.9 C
62 333.5 L
f
62 232.3302 m
83.6158 234.2214 93 242.8034 93 258.6636 c
93 271.2064 85.0819 278.6636 70 278.6636 c
57.731 278.6636 35.1992 270.8498 6 255.9969 C
10.9667 244.7635 L
39.0319 259.0395 60.2333 266.3302 68.6667 266.3302 c
76.4166 266.3302 80 263.4128 80 257.9969 c
80 249.3482 75.4109 245.2353 59.7333 243.8636 C
62 232.3302 L
f
62 131.1697 m
83.7828 133.0756 93.5 141.9634 93.5 158.3364 c
93.5 171.4724 85.3152 179.3363 70 179.3363 c
57.4971 179.3363 34.4564 171.2323 5.5 156.503 C
11.3833 143.1364 L
39.1861 157.2789 60.5664 164.6697 68.3334 164.6697 c
74.8958 164.6697 78.0001 162.1359 78.0001 157.503 c
78.0001 149.7488 73.969 146.1226 59.2667 144.8363 C
62 131.1697 L
f
U
*u
62 30 m
83.9497 31.9204 94 41.1142 94 58 c
94 71.7292 85.5484 80 70 80 c
57.2631 80 33.7136 71.6058 5 57 C
11.8 41.5 L
39.3404 55.509 60.8995 63 68 63 c
73.375 63 76 60.8496 76 57 c
76 50.1403 72.5269 47.0009 58.8 45.8 C
62 30 L
f
16 86 m
24.5625 59.625 32.3519 32.5082 39 6 C
56.5 10 L
49.7048 37.0949 41.9913 64.2282 33.3 91 C
16 86 L
f
47.7 88 m
49.8126 81.7156 51.8275 75.5099 53.8 69.3 C
71 74.7 L
65 93 L
47.7 88 L
f
*U
u
118.5001 582.3303 m
113.3333 582.3303 L
112.6562 572.7053 112.3333 563.0285 112.3333 553.9969 c
112.3333 544.9653 112.6562 535.2886 113.3333 525.6636 C
118.3334 525.6636 L
117.7429 534.9398 117.4688 544.8147 117.5001 553.9969 c
117.531 563.1669 117.8491 573.075 118.5001 582.3303 C
f
120.0001 482.6606 m
112.6666 482.6606 L
112 473.0356 111.6666 463.0913 111.6666 453.9939 c
111.6666 444.8964 112 434.9522 112.6666 425.3272 C
119.6667 425.3272 L
119.1444 434.6606 118.9376 444.8481 119.0001 453.9939 c
119.0621 463.1151 119.3568 473.3689 120.0001 482.6606 C
f
121.5 383 m
112 383 L
111.3437 373.375 111 363.1632 111 354 c
111 344.8367 111.3437 334.625 112 325 C
121 325 L
120.5457 334.3907 120.4062 344.8906 120.5 354 c
120.593 363.0724 120.8643 373.6719 121.5 383 C
f
123.0001 283.3303 m
111.3333 283.3303 L
110.6875 273.7053 110.3333 263.226 110.3333 253.9969 c
110.3333 244.7678 110.6875 234.2886 111.3333 224.6636 C
122.3334 224.6636 L
121.9472 234.1116 121.875 244.924 122.0001 253.9969 c
122.124 263.0206 122.372 273.9658 123.0001 283.3303 C
f
124.5 183.6697 m
110.6667 183.6697 L
110.0313 174.0447 109.6667 163.2979 109.6667 154.003 c
109.6667 144.7081 110.0313 133.9614 110.6667 124.3364 C
123.6666 124.3364 L
123.3485 133.8416 123.3437 144.9666 123.5 154.003 c
123.6549 162.9779 123.8795 174.2688 124.5 183.6697 C
f
U
u
138.4333 506.6636 m
155.8783 512.532 161.6667 520.6557 161.6667 542.9969 c
161.6667 556.1608 161.2306 577.9798 160.6667 593.3303 C
155.1666 593.3303 L
155.73 577.9926 156.1666 556.0023 156.1666 542.9969 c
156.1666 523.0648 151.7706 516.6831 136.4 511.497 C
138.4333 506.6636 L
f
138.8667 406.3272 m
156.4111 412.229 162.3334 420.4912 162.3334 442.9939 c
162.3334 456.1263 161.8987 478.2722 161.3334 493.6606 C
153.3332 493.6606 L
153.8911 478.4731 154.3332 456.0505 154.3332 442.9939 c
154.3332 423.9019 150.2561 418.088 135.8 413.194 C
138.8667 406.3272 L
f
139.3 306 m
156.9439 311.9353 163 320.3359 163 343 c
163 356.1009 162.5667 378.5736 162 394 C
151.5 394 L
152.0524 378.9626 152.5 356.1079 152.5 343 c
152.5 324.7481 148.7418 319.502 135.2 314.9 C
139.3 306 L
f
139.7333 205.6636 m
157.4768 211.6324 163.6667 220.1715 163.6667 242.9969 c
163.6667 256.0663 163.2348 278.866 162.6667 294.3303 C
149.6666 294.3303 L
150.2135 279.4431 150.6666 256.1561 150.6666 242.9969 c
150.6666 225.5852 147.2273 220.9069 134.6 216.597 C
139.7333 205.6636 L
f
140.1667 105.3364 m
158.0096 111.3386 164.3333 120.0162 164.3333 143.003 c
164.3333 156.0409 163.9028 179.1675 163.3333 194.6697 C
147.8334 194.6697 L
148.3748 179.9326 148.8334 156.2135 148.8334 143.003 c
148.8334 126.4314 145.7129 122.3208 134 118.303 C
140.1667 105.3364 L
f
U
u
118.3334 525.6636 m
118.7531 556.6787 135.369 574.8302 159.5 574.8302 c
176.7776 574.8302 185.1666 567.4195 185.1666 554.1636 c
185.1666 540.4486 177.3962 533.497 159.8333 533.497 c
149.2541 533.497 141.4219 537.8057 135.6929 546.8458 C
131.7596 543.7291 L
138.431 533.1941 147.8054 528.3302 159.8333 528.3302 c
180.128 528.3302 190.6667 537.4451 190.6667 554.1636 c
190.6667 570.1901 180.0219 579.997 159.8333 579.997 c
132.7263 579.997 114.1334 560.1528 113.6667 525.6636 C
118.3334 525.6636 L
f
119.6667 425.3272 m
120.0794 455.8249 136.1862 473.6605 159 473.6605 c
175.5713 473.6605 183.3332 466.8225 183.3332 454.3272 c
183.3332 441.3675 176.1244 434.994 159.6667 434.994 c
149.7831 434.994 142.4115 438.8929 136.7859 447.1916 C
131.5191 442.4581 L
138.3267 432.3484 147.7624 427.6605 159.6667 427.6605 c
180.4046 427.6605 191.3334 437.179 191.3334 454.3272 c
191.3334 470.864 180.2526 480.9939 159.6667 480.9939 c
132.4156 480.9939 113.8148 460.9103 113.3333 425.3272 C
119.6667 425.3272 L
f
121 325 m
121.4057 354.9803 137.0033 372.5 158.5 372.5 c
174.3652 372.5 181.5 366.2348 181.5 354.5 c
181.5 342.2954 174.8527 336.5 159.5 336.5 c
150.312 336.5 143.4009 339.9891 137.8787 347.5465 C
131.2787 341.1965 L
138.2225 331.5119 147.7195 327 159.5 327 c
180.6813 327 192 336.922 192 354.5 c
192 371.5469 180.4832 382 159.5 382 c
132.105 382 113.4963 361.6768 113 325 C
121 325 L
f
122.3334 224.6636 m
122.7321 254.1264 137.8205 271.3302 158 271.3302 c
173.1589 271.3302 179.6666 265.6379 179.6666 254.6636 c
179.6666 243.2142 173.5809 237.997 159.3333 237.997 c
150.841 237.997 144.3905 241.0763 138.9716 247.8923 C
131.0383 239.9256 L
138.1183 230.6661 147.6765 226.3302 159.3333 226.3302 c
180.9579 226.3302 192.6667 236.6558 192.6667 254.6636 c
192.6667 272.2208 180.7138 282.997 159.3333 282.997 c
131.7943 282.997 113.1778 262.4342 112.6667 224.6636 C
122.3334 224.6636 L
f
123.6666 124.3364 m
124.0583 153.2818 138.6376 170.1697 157.5 170.1697 c
171.9528 170.1697 177.8334 165.0502 177.8334 154.8364 c
177.8334 144.1422 172.3092 139.503 159.1667 139.503 c
151.3699 139.503 145.3799 142.1726 140.0645 148.2472 C
130.7979 138.6639 L
138.0141 129.8296 147.6336 125.6697 159.1667 125.6697 c
181.2345 125.6697 193.3333 136.3988 193.3333 154.8364 c
193.3333 172.9038 180.9444 184.003 159.1667 184.003 c
131.4837 184.003 112.8592 163.2007 112.3334 124.3364 C
123.6666 124.3364 L
f
U
*u
126 84 m
110 84 L
109.375 74.375 109 63.3607 109 54 c
109 44.6393 109.375 33.625 110 24 C
125 24 L
124.75 33.5625 124.8125 45 125 54 c
125.1859 62.9261 125.3872 74.5627 126 84 C
f
130.5574 37.393 m
137.9099 28.9839 147.5906 25 159 25 c
181.5111 25 194 36.1327 194 55 c
194 73.5777 181.1751 85 159 85 c
131.173 85 112.5407 63.9582 112 24 C
125 24 L
125.3847 52.428 139.4548 69 157 69 c
170.7465 69 176 64.4533 176 55 c
176 45.061 171.0374 41 159 41 c
151.8989 41 146.3694 43.2598 141.1574 48.593 C
130.5574 37.393 L
f
140.6 5 m
158.5424 11.0357 165 19.8517 165 43 c
165 56.0064 164.5709 79.4598 164 95 C
146 95 L
146.5359 80.4131 147 56.2617 147 43 c
147 27.2685 144.1985 23.7258 133.4 20 C
140.6 5 L
f
*U
u
0 D
248.8333 592.1636 m
254.5001 592.1636 L
254.5001 574.997 L
282.6667 574.997 L
282.6667 569.8302 L
254.5001 569.8302 L
254.5001 531.1636 L
254.5001 517.2132 246.5164 509.6636 234.3334 509.6636 c
220.4807 509.6636 213.1667 516.9815 213.1667 527.4969 c
213.1667 537.9848 220.4252 545.3303 234.3334 545.3303 c
255.3925 545.3303 275.1288 536.3692 286.8334 522.247 C
282.95 518.6969 L
271.6278 532.0975 253.644 540.1636 234.3334 540.1636 c
224.0469 540.1636 218.6667 535.4205 218.6667 527.4969 c
218.6667 519.542 224.1302 514.8303 234.3334 514.8303 c
243.4878 514.8303 248.8333 520.358 248.8333 531.1636 C
248.8333 592.1636 L
f
247.6666 492.3272 m
256.0001 492.3272 L
256.0001 475.9939 L
283.3334 475.9939 L
283.3334 468.6605 L
256.0001 468.6605 L
256.0001 431.3272 L
256.0001 416.9633 247.8304 409.3272 234.6667 409.3272 c
220.1403 409.3272 212.3333 416.8849 212.3333 427.9939 c
212.3333 439.0476 220.0292 446.6606 234.6667 446.6606 c
255.9579 446.6606 275.956 437.6236 287.6667 423.494 C
282.2 418.2939 L
270.7903 431.5397 253.3516 439.3272 234.6667 439.3272 c
225.0642 439.3272 220.3334 435.1106 220.3334 427.9939 c
220.3334 420.8146 225.2309 416.6607 234.6667 416.6607 c
243.1235 416.6607 247.6666 421.3204 247.6666 431.3272 C
247.6666 492.3272 L
f
246.5 392.5 m
257.5 392.5 L
257.5 377 L
284 377 L
284 367.5 L
257.5 367.5 L
257.5 331.5 L
257.5 316.7227 249.1443 309 235 309 c
219.7999 309 211.5 316.7975 211.5 328.5 c
211.5 340.1194 219.6334 348 235 348 c
256.5232 348 276.7832 338.8869 288.5 324.75 C
281.45 317.9 L
269.9529 330.991 253.0593 338.5 235 338.5 c
226.0814 338.5 222 334.8099 222 328.5 c
222 322.0961 226.3314 318.5 235 318.5 c
242.7593 318.5 246.5 322.2919 246.5 331.5 C
246.5 392.5 L
f
245.3333 292.6636 m
259.0001 292.6636 L
259.0001 277.997 L
284.6667 277.997 L
284.6667 266.3302 L
259.0001 266.3302 L
259.0001 231.6636 L
259.0001 216.4729 250.4583 208.6636 235.3334 208.6636 c
219.4594 208.6636 210.6667 216.701 210.6667 228.9969 c
210.6667 241.1821 219.2374 249.3303 235.3334 249.3303 c
257.0886 249.3303 277.6105 240.1413 289.3334 225.997 C
280.7 217.4969 L
269.1155 230.4332 252.7669 237.6636 235.3334 237.6636 c
227.0988 237.6636 223.6667 234.5 223.6667 228.9969 c
223.6667 223.3687 227.4321 220.3303 235.3334 220.3303 c
242.3951 220.3303 245.3333 223.2543 245.3333 231.6636 C
245.3333 292.6636 L
f
244.1667 192.8364 m
260.5 192.8364 L
260.5 179.003 L
285.3333 179.003 L
285.3333 165.1697 L
260.5 165.1697 L
260.5 131.8364 L
260.5 116.2322 251.7722 108.3364 235.6667 108.3364 c
219.119 108.3364 209.8334 116.6136 209.8334 129.503 c
209.8334 142.2539 218.8415 150.6697 235.6667 150.6697 c
257.654 150.6697 278.4376 141.4047 290.1667 127.253 C
279.95 117.1031 L
268.2781 129.8845 252.4746 136.8364 235.6667 136.8364 c
228.116 136.8364 225.3333 134.1993 225.3333 129.503 c
225.3333 124.6502 228.5326 122.1696 235.6667 122.1696 c
242.0308 122.1696 244.1667 124.2258 244.1667 131.8364 C
244.1667 192.8364 L
f
U
243 93 m
262 93 L
262 80 L
286 80 L
286 64 L
262 64 L
262 32 L
262 15.9824 253.0863 8 236 8 c
218.7786 8 209 16.5171 209 30 c
209 43.3167 218.4456 52 236 52 c
258.2194 52 279.2649 42.6591 291 28.5 C
279.2 16.7 L
267.4406 29.3267 252.1822 36 236 36 c
229.1333 36 227 33.8894 227 30 c
227 25.9228 229.6333 24 236 24 c
241.6666 24 243 25.1882 243 32 C
243 93 L
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
