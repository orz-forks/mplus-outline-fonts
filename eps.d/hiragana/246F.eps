%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (246F.eps)
%%CreationDate: (4/22/04) (11:30 PM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
1 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
500 600 m
500 700 L
400 700 L
400 600 L
500 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
400 600 m
400 700 L
300 700 L
300 600 L
400 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
500 500 m
500 600 L
400 600 L
400 500 L
500 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
400 500 m
400 600 L
300 600 L
300 500 L
400 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
*u
u
0 Ap
0 O
0 g
1 D
30 609 m
33 609 L
33 692 L
30 692 L
30 675 L
9 675 L
9 672 L
30 672 L
30 609 L
f
U
88 645 m
88 626.3042 79.3655 616.6417 60.6 615 c
61 612 L
80.6307 613.7174 91 624.2921 91 645 c
91 670.3972 83.0656 680 66 680 c
49.6586 680 35.1799 669.8167 8 631 C
10.5 629.3 L
36.9297 667.0453 50.8359 677 66 677 c
81.3717 677 88 668.7247 88 645 c
f
*U
0 D
189 625.6 m
182.5672 634.4402 177.6765 637 168 637 c
159.1825 637 153 631.2651 153 623 c
153 614.7348 159.1825 609 168 609 c
182.1507 609 191 618.4041 191 639 c
191 657.9795 176.2495 671 153 671 c
126.4358 671 109 655.335 109 633 c
109 619.6057 116.9673 611 125 611 c
136.3169 611 146.684 626.6523 156 689 C
120 689 L
120 686 L
154 686 L
152.8 688 L
144.0563 630.4087 134.5833 614 125 614 c
118.248 614 112 621.9309 112 633 c
112 653.4346 127.9767 668 153 668 c
174.9284 668 188 656.1168 188 639 c
188 620.4176 180.7709 612 168 612 c
160.8224 612 156 616.4205 156 623 c
156 629.5794 160.8224 634 168 634 c
176.7294 634 180.6718 631.9468 186.6 623.8 C
189 625.6 L
f
*u
1 D
281 689 m
220 689 L
220 686 L
280 686 L
280 688 L
211 664 L
212.1 661.2 L
281 685.2 L
281 689 L
f
252 651 m
252 653.4053 250.3435 659 235 659 c
223.7964 659 218 655.1935 218 651 c
218 644.5696 223.7759 641 246 641 c
274.012 641 288 649.1754 288 659 c
288 666.8803 280.1743 672 257 672 c
241.3891 672 228.9013 669.991 211 664 C
212.1 661.2 L
229.1877 666.9187 241.249 669 257 669 c
277.8334 669 285 664.9733 285 659 c
285 651.2003 272.2741 644 246 644 c
226.5 644 221 646.7279 221 651 c
221 653.0164 225.4495 656 235 656 c
245.0618 656 249 653.3872 249 651 c
249 644.0625 228.2481 642.1001 207 611.7 C
209.5 610 L
231.64 641.6763 252 640.875 252 651 c
f
293 612 m
289.2256 621.5842 284.5 630.8125 279 639 C
276.5 637.4 L
281.7793 629.541 286.3893 620.6763 290.2 611 C
293 612 L
f
277.1 619.3 m
272.8223 615.4562 266.2051 613 260 613 c
246.375 613 244.6875 627 231 627 c
222.6479 627 216.2962 623.375 207 611.7 C
209.5 610 L
217.1922 620.548 223.0402 624 231 624 c
243.1021 624 244.8139 610 260 610 c
266.9698 610 274.1311 612.625 279 617 C
277.1 619.3 L
f
*U
*u
311 682 m
311 679 L
386 679 L
386 682 L
311 682 L
f
383.2653 614.924 m
375.259 613.6203 368.0269 613 360 613 c
336.3957 613 329 617.7265 329 627 c
329 638.6186 345.4595 649.1074 385.4 653 C
385 656 L
342.6953 651.877 326 640.0946 326 627 c
326 615.7087 334.2838 610 360 610 c
368.3891 610 375.6875 610.625 383.6653 611.924 C
383.2653 614.924 L
f
313.5 639.4 m
326.5258 657.6879 333.3676 672.2393 338.9 693.3 C
336 694 L
330.5 673.0625 323.7105 658.8452 311 641 C
313.5 639.4 L
f
313.5 639.4 m
327.8183 657.4566 336.3851 663 345 663 c
355.6162 663 360 656.2508 360 627 C
363 627 L
363 658.103 357.9241 666 345 666 C
335.3084 666 326.1423 660.1563 311 641 C
313.5 639.4 L
f
*U
*u
441 691 m
430.3125 665.75 419.0625 637.8125 409 611 C
411.8 610 L
421.3114 635.344 432.4069 662.983 443.8 689.9 C
441 691 L
f
411.8 610 m
423.7492 640.7913 431.786 648 442 648 c
448.7682 648 452.5804 644.2086 456 631 c
460.1689 614.8968 464.3423 611 472 611 c
481.5119 611 488.3394 617.6713 492 637 C
489 637.6 L
485.7083 620.2194 480.0324 614 472 614 c
465.8741 614 462.6525 617.2736 458.9042 631.7518 c
455.0942 646.4684 450.327 651 442 651 c
430.2333 651 421.2771 642.6362 409 611 C
411.8 610 L
f
*U
u
28.8333 508.6636 m
34.1667 508.6636 L
34.1667 592.3303 L
28.8333 592.3303 L
28.8333 575.997 L
8.6667 575.997 L
8.6667 570.9969 L
28.8333 570.9969 L
28.8333 508.6636 L
f
27.6666 408.3272 m
35.3334 408.3272 L
35.3334 492.6606 L
27.6666 492.6606 L
27.6666 476.9939 L
8.3333 476.9939 L
8.3333 469.9938 L
27.6666 469.9938 L
27.6666 408.3272 L
f
26.5 308 m
36.5 308 L
36.5 393 L
26.5 393 L
26.5 378 L
8 378 L
8 369 L
26.5 369 L
26.5 308 L
f
25.3333 207.6636 m
37.6667 207.6636 L
37.6667 293.3303 L
25.3333 293.3303 L
25.3333 278.997 L
7.6667 278.997 L
7.6667 267.9969 L
25.3333 267.9969 L
25.3333 207.6636 L
f
24.1667 107.3364 m
38.8333 107.3364 L
38.8333 193.6697 L
24.1667 193.6697 L
24.1667 180.003 L
7.3334 180.003 L
7.3334 167.0031 L
24.1667 167.0031 L
24.1667 107.3364 L
f
U
u
86 544.9969 m
86 527.1999 78.0824 518.3494 60 516.7303 C
61 511.4969 L
80.9517 513.2424 91.5 523.9963 91.5 544.9969 c
91.5 570.8578 83.4495 580.4969 65.6667 580.4969 c
49.5714 580.4969 34.5532 570.0049 7.5 531.6636 C
11.5834 528.4136 L
37.2835 564.9124 51.6018 575.1635 65.6667 575.1635 c
79.9809 575.1635 86 567.684 86 544.9969 c
f
83.9999 444.9939 m
83.9999 428.0956 76.7992 420.0571 59.4 418.4606 C
61 410.9938 L
81.2727 412.7675 92 423.7005 92 444.9939 c
92 471.3184 83.8335 480.9939 65.3333 480.9939 c
49.4842 480.9939 33.9265 470.1931 7 432.3273 C
12.6667 427.5272 L
37.6372 462.7795 52.3677 473.3271 65.3333 473.3271 c
78.5901 473.3271 83.9999 466.6434 83.9999 444.9939 c
f
82 345 m
82 329.0004 75.5161 321.7738 58.8 320.2 C
61 310.5 L
81.5937 312.3017 92.5 323.4139 92.5 345 c
92.5 371.7881 84.2174 381.5 65 381.5 c
49.397 381.5 33.2999 370.3905 6.5 333 C
13.75 326.65 L
37.991 360.656 53.1335 371.5 65 371.5 c
77.1995 371.5 82 365.612 82 345 c
f
80 244.9969 m
80 229.8961 74.233 223.4815 58.2 221.9303 C
61 209.9969 L
81.9147 211.8267 93 223.1181 93 244.9969 c
93 272.2487 84.6013 281.9969 64.6667 281.9969 c
49.3098 281.9969 32.6732 270.5787 6 233.6636 C
14.8334 225.7636 L
38.3448 258.5231 53.8994 269.6635 64.6667 269.6635 c
75.8087 269.6635 80 264.5714 80 244.9969 c
f
78.0001 145.003 m
78.0001 130.8008 72.9499 125.1982 57.6 123.6696 C
61 109.503 L
82.2356 111.3609 93.5 122.8315 93.5 145.003 c
93.5 172.7185 84.9852 182.503 64.3334 182.503 c
49.2226 182.503 32.0466 170.7761 5.5 134.3363 C
15.9166 124.8864 L
38.6985 156.3996 54.6652 167.8364 64.3334 167.8364 c
74.418 167.8364 78.0001 163.54 78.0001 145.003 c
f
U
u
0 D
154 584.4969 m
119.5 584.4969 L
119.5 589.4969 L
157.3334 589.4969 L
148.0496 527.3655 136.8445 510.4969 125 510.4969 c
116.4995 510.4969 108.3333 519.338 108.3333 532.9969 c
108.3333 555.4327 126.001 571.3303 153 571.3303 c
176.684 571.3303 191.6667 558.1023 191.6667 538.9969 c
191.6667 518.1316 182.6328 508.4969 168.1667 508.4969 c
159.0527 508.4969 152.5 514.662 152.5 523.3303 c
152.5 531.9708 159.0249 538.1636 168.1667 538.1636 c
177.4855 538.1636 182.6864 535.4024 189.1667 526.497 C
185.3333 523.5969 L
179.801 531.1997 176.1161 533.1636 168.5 533.1636 c
161.9654 533.1636 157.6667 529.1874 157.6667 523.3303 c
157.6667 517.4608 161.9777 513.497 168.5 513.497 c
179.9313 513.497 186.3333 521.2617 186.3333 538.9969 c
186.3333 555.0548 173.9012 566.1635 153 566.1635 c
128.9908 566.1635 113.6667 552.3291 113.6667 532.9969 c
113.6667 522.9406 119.1563 515.8303 124.9667 515.8303 C
133.6916 515.8303 143.158 532.7349 151.6166 587.4636 C
154 584.4969 L
f
154 482.9938 m
119 482.9938 L
119 489.9939 L
158.6667 489.9939 L
149.4153 428.0786 137.3721 409.9938 125 409.9938 c
116.0317 409.9938 107.6666 419.0703 107.6666 432.9939 c
107.6666 455.5305 125.5662 471.6606 153 471.6606 c
177.1185 471.6606 192.3334 458.225 192.3334 438.9939 c
192.3334 417.8591 183.1149 407.9938 168.3333 407.9938 c
158.9228 407.9938 152 414.5892 152 423.6606 c
152 432.6764 158.8673 439.3273 168.3333 439.3273 c
177.2946 439.3273 182.8057 436.3646 189.3333 427.3939 C
184.0666 423.3939 L
178.9302 430.4525 175.5029 432.3272 169 432.3272 c
163.1084 432.3272 159.3334 428.7954 159.3334 423.6606 c
159.3334 418.5011 163.1331 414.994 169 414.994 c
179.0917 414.994 184.6666 422.1058 184.6666 438.9939 c
184.6666 453.9927 172.874 464.3271 153 464.3271 c
130.0049 464.3271 115.3334 451.2236 115.3334 432.9939 c
115.3334 423.9504 120.0646 417.6607 124.9333 417.6607 C
132.7999 417.6607 142.2598 435.0611 150.4333 486.9272 C
154 482.9938 L
f
154 381.5 m
118.5 381.5 L
118.5 390.5 L
160 390.5 L
150.7809 328.8009 137.8997 309.5 125 309.5 c
115.5639 309.5 107 318.8118 107 333 c
107 355.6374 125.1315 372 153 372 c
177.553 372 193 358.3569 193 339 c
193 317.5957 183.597 307.5 168.5 307.5 c
158.793 307.5 151.5 314.5256 151.5 324 c
151.5 333.3911 158.7097 340.5 168.5 340.5 c
177.1036 340.5 182.9249 337.3358 189.5 328.3 C
182.8 323.2 L
178.0595 329.7146 174.8897 331.5 169.5 331.5 c
164.2513 331.5 161 328.4126 161 324 c
161 319.5505 164.2883 316.5 169.5 316.5 c
178.2523 316.5 183 322.959 183 339 c
183 352.9399 171.8469 362.5 153 362.5 c
131.0189 362.5 117 350.1274 117 333 c
117 324.9692 120.9728 319.5 124.9 319.5 C
131.9083 319.5 141.3616 337.3962 149.25 386.4 C
154 381.5 L
f
154 279.9969 m
118 279.9969 L
118 290.9969 L
161.3334 290.9969 L
152.1465 229.514 138.4273 208.9969 125 208.9969 c
115.0961 208.9969 106.3333 218.5441 106.3333 232.9969 c
106.3333 255.7351 124.6967 272.3303 153 272.3303 c
177.9875 272.3303 193.6667 258.4796 193.6667 238.9969 c
193.6667 217.3232 184.0791 206.9969 168.6667 206.9969 c
158.6632 206.9969 151 214.4528 151 224.3303 c
151 234.0968 158.5521 241.6636 168.6667 241.6636 c
176.9126 241.6636 183.0441 238.298 189.6667 229.197 C
181.5333 222.9969 L
177.1887 228.9675 174.2764 230.6636 170 230.6636 c
165.3943 230.6636 162.6667 228.0206 162.6667 224.3303 c
162.6667 220.5908 165.4436 217.997 170 217.997 c
177.4127 217.997 181.3333 223.8031 181.3333 238.9969 c
181.3333 251.8779 170.8197 260.6635 153 260.6635 c
132.033 260.6635 118.6667 249.0219 118.6667 232.9969 c
118.6667 225.979 121.8811 221.3303 124.8667 221.3303 C
131.0166 221.3303 140.4633 239.7224 148.0666 285.8636 C
154 279.9969 L
f
154 178.5031 m
117.5 178.5031 L
117.5 191.503 L
162.6666 191.503 L
153.5121 130.2362 138.9549 108.503 125 108.503 c
114.6283 108.503 105.6667 118.2855 105.6667 133.003 c
105.6667 155.842 124.2619 172.6697 153 172.6697 c
178.422 172.6697 194.3333 158.6115 194.3333 139.003 c
194.3333 117.0599 184.5612 106.503 168.8333 106.503 c
158.5334 106.503 150.5 114.3891 150.5 124.6697 c
150.5 134.8115 158.3945 142.8363 168.8333 142.8363 c
176.7217 142.8363 183.1633 139.2692 189.8333 130.103 C
180.2667 122.8031 L
176.318 128.2295 173.6632 129.8364 170.5 129.8364 c
166.5372 129.8364 164.3333 127.6378 164.3333 124.6697 c
164.3333 121.6402 166.5989 119.503 170.5 119.503 c
176.5732 119.503 179.6667 124.6563 179.6667 139.003 c
179.6667 150.8251 169.7926 158.8364 153 158.8364 c
133.0469 158.8364 120.3333 147.9256 120.3333 133.003 c
120.3333 126.9979 122.7893 123.1696 124.8334 123.1696 C
130.1249 123.1696 139.5651 142.0576 146.8834 185.3364 C
154 178.5031 L
f
U
u
1 D
281.5 589.4969 m
219.5 589.4969 L
219.5 584.6636 L
279.5 584.6636 L
279.5 587.7969 L
210.5 564.997 L
211.95 560.7136 L
281.5 583.9969 L
281.5 589.4969 L
f
282 489.9939 m
219 489.9939 L
219 483.3271 L
279 483.3271 L
279 487.5939 L
210 465.9939 L
211.8 460.2272 L
282 482.7938 L
282 489.9939 L
f
282.5 390.5 m
218.5 390.5 L
218.5 382 L
278.5 382 L
278.5 387.4 L
209.5 367 L
211.65 359.75 L
282.5 381.6 L
282.5 390.5 L
f
283 290.9969 m
218 290.9969 L
218 280.6636 L
278 280.6636 L
278 287.1969 L
209 267.997 L
211.5 259.2636 L
283 280.3969 L
283 290.9969 L
f
283.5 191.503 m
217.5 191.503 L
217.5 179.3364 L
277.5 179.3364 L
277.5 187.003 L
208.5 169.003 L
211.35 158.7864 L
283.5 179.2031 L
283.5 191.503 L
f
U
u
211.95 560.7136 m
229.9516 566.4067 240.1803 568.1636 256 568.1636 C
276.1136 568.1636 283 564.2628 283 558.4969 c
283 551.0949 271.0401 544.3303 246 544.3303 c
227.0195 544.3303 222.1667 546.7599 222.1667 550.6303 c
222.1667 552.5103 226.1437 555.1636 235.1667 555.1636 c
244.7569 555.1636 248.3333 552.8378 248.3333 550.6303 c
248.3333 544.1657 228.2068 542.6221 206.6667 512.2469 C
211.1667 509.4969 L
233.7584 541.8195 253.5001 540.0677 253.5001 550.6636 c
253.5001 553.7089 250.5373 559.3303 235.1667 559.3303 c
223.3142 559.3303 217 555.1508 217 550.6636 c
217 543.8854 223.5213 539.8302 246 539.8302 c
274.6474 539.8302 288.5 548.0221 288.5 558.3302 c
288.5 567.1264 280.2907 572.4969 256 572.4969 c
241.0841 572.4969 228.1604 570.5469 210.5 564.997 C
211.95 560.7136 L
f
211.8 460.2272 m
230.7155 465.8946 239.1115 467.3272 254.9999 467.3272 C
274.3937 467.3272 280.9999 463.5524 280.9999 457.9938 c
280.9999 450.9894 269.806 444.6606 246 444.6606 c
227.5389 444.6606 223.3334 446.7918 223.3334 450.2605 c
223.3334 452.0043 226.838 454.3272 235.3333 454.3272 c
244.452 454.3272 247.6666 452.2884 247.6666 450.2605 c
247.6666 444.2689 228.1654 443.144 206.3333 412.7939 C
212.8334 408.9938 L
235.8769 441.9626 255.0001 439.2605 255.0001 450.3272 c
255.0001 454.0124 250.7312 459.6606 235.3333 459.6606 c
222.832 459.6606 215.9999 455.1081 215.9999 450.3272 c
215.9999 443.2013 223.2668 438.6605 246 438.6605 c
275.2829 438.6605 289 446.8689 289 457.6605 c
289 467.3725 280.4071 472.9939 254.9999 472.9939 c
240.7792 472.9939 227.4195 471.1028 210 465.9939 C
211.8 460.2272 L
f
211.65 359.75 m
231.4794 365.3918 238.0429 366.5 254 366.5 C
272.6741 366.5 279 362.8511 279 357.5 c
279 350.8931 268.5721 345 246 345 c
228.0583 345 224.5 346.8329 224.5 349.9 c
224.5 351.5074 227.5322 353.5 235.5 353.5 c
244.1472 353.5 247 351.7482 247 349.9 c
247 344.3812 228.1241 343.675 206 313.35 C
214.5 308.5 L
237.9951 342.1149 256.5 338.4625 256.5 350 c
256.5 354.3251 250.925 360 235.5 360 c
222.3498 360 215 355.0746 215 350 c
215 342.5263 223.0123 337.5 246 337.5 c
275.9183 337.5 289.5 345.7248 289.5 357 c
289.5 367.6277 280.5234 373.5 254 373.5 c
240.4743 373.5 226.6787 371.6678 209.5 367 C
211.65 359.75 L
f
211.5 259.2636 m
232.2433 264.8798 236.9741 265.6636 253 265.6636 C
270.9543 265.6636 277 262.1407 277 256.9969 c
277 250.7877 267.338 245.3303 246 245.3303 c
228.5777 245.3303 225.6667 246.8649 225.6667 249.5303 c
225.6667 251.0013 228.2264 252.6636 235.6667 252.6636 c
243.8423 252.6636 246.3333 251.1988 246.3333 249.5303 c
246.3333 244.4844 228.0827 244.197 205.6667 213.897 C
216.1667 207.9969 L
240.1135 242.2581 258.0001 237.6553 258.0001 249.6636 c
258.0001 254.6286 251.1189 260.3303 235.6667 260.3303 c
221.8676 260.3303 214 255.032 214 249.6636 c
214 241.8422 222.7577 236.3302 246 236.3302 c
276.5537 236.3302 290 244.5716 290 256.3302 c
290 267.8738 280.6398 273.9969 253 273.9969 c
240.1694 273.9969 225.9378 272.2237 209 267.997 C
211.5 259.2636 L
f
211.35 158.7864 m
233.0072 164.3769 235.9054 164.8364 252 164.8364 C
269.2346 164.8364 275.0001 161.4394 275.0001 156.503 c
275.0001 150.6914 266.1041 145.6697 246 145.6697 c
229.0971 145.6697 226.8333 146.906 226.8333 149.1697 c
226.8333 150.5044 228.9206 151.8364 235.8333 151.8364 c
243.5375 151.8364 245.6667 150.6587 245.6667 149.1697 c
245.6667 144.5968 228.0413 144.728 205.3334 114.453 C
217.8333 107.503 L
242.2317 142.4104 259.5 136.8572 259.5 149.3364 c
259.5 154.9412 251.3127 160.6697 235.8333 160.6697 c
221.3854 160.6697 213 154.9985 213 149.3364 c
213 141.1672 222.5032 135.1697 246 135.1697 c
277.1891 135.1697 290.5 143.4276 290.5 155.6697 c
290.5 168.129 280.7561 174.503 252 174.503 c
239.8645 174.503 225.197 172.7887 208.5 169.003 C
211.35 158.7864 L
f
U
u
274.9499 520.3136 m
270.7481 516.5404 264.957 514.397 259.3333 514.397 c
246.8905 514.397 245.8519 527.5636 232 527.5636 c
223.3826 527.5636 217.0579 523.9864 207.5 512.0803 C
211.1667 509.4969 L
218.6584 519.773 223.8482 522.8302 231.5 522.8302 c
243.3285 522.8302 244.2612 509.4969 259.3333 509.4969 c
266.1588 509.4969 273.0675 512.0699 277.8333 516.4969 C
274.9499 520.3136 L
f
272.7999 421.3273 m
268.674 417.6245 263.7088 415.794 258.6666 415.794 c
247.406 415.794 247.0164 428.1272 233.0001 428.1272 c
224.1173 428.1272 217.8195 424.5979 208 412.4606 C
212.8334 408.9938 L
220.1247 418.9981 224.6562 421.6605 232 421.6605 c
243.5549 421.6605 243.7086 408.9938 258.6666 408.9938 c
265.3477 408.9938 272.004 411.5147 276.6666 415.9938 C
272.7999 421.3273 L
f
270.65 322.35 m
266.6 318.7177 262.4608 317.2 258 317.2 c
247.9215 317.2 248.1807 328.7 234 328.7 c
224.852 328.7 218.5811 325.2185 208.5 312.85 C
214.5 308.5 L
221.5908 318.2323 225.4642 320.5 232.5 320.5 c
243.7814 320.5 243.156 308.5 258 308.5 c
264.5368 308.5 270.9405 310.9687 275.5 315.5 C
270.65 322.35 L
f
268.5 223.3636 m
264.5258 219.8019 261.2126 218.597 257.3333 218.597 c
248.437 218.597 249.3452 229.2636 235 229.2636 c
225.5867 229.2636 219.3427 225.83 209 213.2303 C
216.1667 207.9969 L
223.057 217.4573 226.2722 219.3302 233 219.3302 c
244.0078 219.3302 242.6033 207.9969 257.3333 207.9969 c
263.7258 207.9969 269.877 210.4136 274.3333 214.9969 C
268.5 223.3636 L
f
266.3501 124.3863 m
262.4518 120.8951 259.9646 120.003 256.6667 120.003 c
248.9525 120.003 250.5095 129.8363 236 129.8363 c
226.3213 129.8363 220.1043 126.4506 209.5 113.6197 C
217.8333 107.503 L
224.5231 116.6915 227.0802 118.1697 233.5 118.1697 c
244.2342 118.1697 242.0507 107.503 256.6667 107.503 c
262.9148 107.503 268.8135 109.8676 273.1667 114.503 C
266.3501 124.3863 L
f
U
u
293.3334 511.9969 m
289.3859 521.8379 285.0937 530.2339 279.6667 538.4636 C
275.0833 536.2969 L
280.2014 528.479 284.5327 520.1022 288.3666 510.4969 C
293.3334 511.9969 L
f
293.6667 411.9939 m
289.5462 422.0917 285.6874 429.6553 280.3334 437.9272 C
273.6666 435.1938 L
278.6236 427.417 282.6761 419.5281 286.5332 409.9938 C
293.6667 411.9939 L
f
294 312 m
289.7066 322.3546 286.281 329.0859 281 337.4 C
272.25 334.1 L
277.0459 326.3643 280.8197 318.9631 284.7 309.5 C
294 312 L
f
294.3334 211.9969 m
289.8669 222.6083 286.8747 228.5073 281.6667 236.8636 C
270.8333 232.9969 L
275.4681 225.3023 278.9631 218.389 282.8666 208.9969 C
294.3334 211.9969 L
f
294.6667 112.003 m
290.0272 122.8712 287.4683 127.9379 282.3333 136.3364 C
269.4167 131.9031 L
273.8904 124.2495 277.1066 117.8241 281.0334 108.503 C
294.6667 112.003 L
f
U
u
386.5 577.6636 m
386.5 582.6636 L
310.5 582.6636 L
310.5 577.6636 L
386.5 577.6636 L
f
387 476.3271 m
387 483.3273 L
310 483.3273 L
310 476.3271 L
387 476.3271 L
f
387.5 375 m
387.5 384 L
309.5 384 L
309.5 375 L
387.5 375 L
f
388 273.6636 m
388 284.6636 L
309 284.6636 L
309 273.6636 L
388 273.6636 L
f
388.5 172.3364 m
388.5 185.3363 L
308.5 185.3363 L
308.5 172.3364 L
388.5 172.3364 L
f
U
u
314.8167 538.9636 m
327.9558 557.4604 334.7335 571.6755 340.7167 593.1803 C
335.6667 594.3303 L
329.9375 573.3094 323.2691 559.4721 310.5 541.4969 C
314.8167 538.9636 L
f
316.1334 438.5272 m
329.3858 457.233 336.0993 471.1117 342.5334 493.0605 C
335.3333 494.6606 L
329.375 473.5564 322.8278 460.0991 310 441.9939 C
316.1334 438.5272 L
f
317.45 338.1 m
330.8156 357.0146 337.4651 370.5571 344.35 392.95 C
335 395 L
328.8125 373.8125 322.3865 360.7351 309.5 342.5 C
317.45 338.1 L
f
318.7667 237.6636 m
332.2456 256.7872 338.8309 269.9933 346.1667 292.8303 C
334.6667 295.3303 L
328.25 274.0594 321.9452 261.362 309 242.9969 C
318.7667 237.6636 L
f
320.0833 137.2364 m
333.6754 156.5689 340.1967 169.4388 347.9833 192.7197 C
334.3334 195.6697 L
327.6875 174.3155 321.5039 161.9981 308.5 143.503 C
320.0833 137.2364 L
f
U
u
314.8167 538.9636 m
328.3898 556.2809 336.4141 561.4969 344.8333 561.4969 c
355.0074 561.4969 359.1667 555.0891 359.1667 527.4969 C
364.5001 527.4969 L
364.5001 558.1284 358.7978 566.3303 344.8333 566.3303 C
335.1296 566.3303 325.7302 560.3713 311.2 541.7636 C
314.8167 538.9636 L
f
316.1334 438.5272 m
328.9613 455.1052 336.443 459.9938 344.6667 459.9938 c
354.3987 459.9938 358.3333 453.9273 358.3333 427.9939 C
366.0001 427.9939 L
366.0001 458.1537 359.6715 466.6606 344.6667 466.6606 C
334.9508 466.6606 325.318 460.5863 311.4 442.5272 C
316.1334 438.5272 L
f
317.45 338.1 m
329.5327 353.9387 336.4719 358.5 344.5 358.5 c
353.79 358.5 357.5 352.7749 357.5 328.5 C
367.5 328.5 L
367.5 358.1881 360.5451 367 344.5 367 C
334.772 367 324.9059 360.8105 311.6 343.3 C
317.45 338.1 L
f
318.7667 237.6636 m
330.1042 252.763 336.5008 256.9969 344.3333 256.9969 c
353.1812 256.9969 356.6667 251.6131 356.6667 228.9969 C
369.0001 228.9969 L
369.0001 258.2135 361.4188 267.3303 344.3333 267.3303 C
334.5932 267.3303 324.4937 261.0256 311.8 244.0636 C
318.7667 237.6636 L
f
320.0833 137.2364 m
330.6756 151.5965 336.5297 155.5031 344.1667 155.5031 c
352.5725 155.5031 355.8334 150.4606 355.8334 129.503 C
370.5 129.503 L
370.5 158.2479 362.2924 167.6697 344.1667 167.6697 C
334.4144 167.6697 324.0815 161.2497 312 144.8363 C
320.0833 137.2364 L
f
U
u
383.6211 516.6337 m
375.5936 515.3468 368.0381 514.697 360 514.697 c
337.6412 514.697 331.0001 518.8758 331.0001 527.1636 c
331.0001 537.7227 346.8076 547.6536 385.9 551.4636 C
385.3 556.4969 L
342.222 552.2986 325.5 540.3493 325.5 526.9969 c
325.5 515.4436 333.8224 509.6636 360 509.6636 c
368.4683 509.6636 376.0938 510.299 384.2211 511.6003 C
383.6211 516.6337 L
f
383.9769 418.3433 m
375.9282 417.0733 368.0494 416.394 360 416.394 c
338.8867 416.394 333.0001 420.0251 333.0001 427.3272 c
333.0001 436.8269 348.1557 446.1998 386.4 449.9271 C
385.6 456.9939 L
341.7487 452.7202 325 440.604 325 426.9939 c
325 415.1785 333.3609 409.3272 360 409.3272 c
368.5476 409.3272 376.5 409.973 384.7769 411.2765 C
383.9769 418.3433 L
f
384.3327 320.062 m
376.2628 318.8087 368.0607 318.1 360 318.1 c
340.1321 318.1 335 321.1834 335 327.5 c
335 335.9403 349.5037 344.7554 386.9 348.4 C
385.9 357.5 L
341.2755 353.1509 324.5 340.8678 324.5 327 c
324.5 314.9225 332.8995 309 360 309 c
368.6268 309 376.9063 309.6562 385.3327 310.962 C
384.3327 320.062 L
f
384.6885 221.7716 m
376.5974 220.5352 368.072 219.797 360 219.797 c
341.3776 219.797 337.0001 222.3327 337.0001 227.6636 c
337.0001 235.0444 350.8518 243.3016 387.4 246.8636 C
386.2 257.9969 L
340.8022 253.5726 324 241.1225 324 226.9969 c
324 214.6574 332.438 208.6636 360 208.6636 c
368.706 208.6636 377.3125 209.3302 385.8885 210.6383 C
384.6885 221.7716 L
f
385.0442 123.4903 m
376.932 122.2707 368.0832 121.503 360 121.503 c
342.623 121.503 339 123.491 339 127.8363 c
339 134.1578 352.1997 141.8571 387.9 145.3364 C
386.5 158.503 L
340.329 154.0033 323.5 141.3863 323.5 127.003 c
323.5 114.4014 331.9766 108.3364 360 108.3364 c
368.7853 108.3364 377.7187 109.0135 386.4442 110.3237 C
385.0442 123.4903 L
f
U
u
413.7334 509.4969 m
423.331 534.9721 434.6505 563.1418 445.8834 589.6803 C
440.6667 591.4969 L
429.9437 566.1632 418.5833 537.9449 408.5 511.1636 C
413.7334 509.4969 L
f
415.6668 408.9938 m
425.3507 434.6002 436.8941 463.3006 447.9668 489.4605 C
440.3333 491.9939 L
429.5749 466.5765 418.1041 438.0772 408 411.3272 C
415.6668 408.9938 L
f
417.6 308.5 m
427.3701 334.2374 439.1375 363.4686 450.05 389.25 C
440 392.5 L
429.2062 366.9989 417.625 338.2187 407.5 311.5 C
417.6 308.5 L
f
419.5334 207.9969 m
429.3898 233.8655 441.3811 263.6274 452.1334 289.0303 C
439.6667 292.9969 L
428.8374 267.4122 417.1458 238.3511 407 211.6636 C
419.5334 207.9969 L
f
421.4666 107.503 m
431.4092 133.5027 443.6245 163.7953 454.2166 188.8197 C
439.3334 193.503 L
428.4686 167.8346 416.6667 138.4926 406.5 111.8364 C
421.4666 107.503 L
f
U
u
413.7334 509.4969 m
425.5127 539.8785 432.8123 546.6636 441.9667 546.6636 c
448.1645 546.6636 451.7189 543.0681 455 530.4969 c
459.154 514.6123 463.6711 510.4969 471.8333 510.4969 c
481.9516 510.4969 488.7378 517.1863 492.5 537.4969 C
487.3833 538.4469 L
484.2263 521.5181 479.1169 515.8303 472 515.8303 c
466.5779 515.8303 463.5717 518.9547 460.0702 532.3902 c
456.1565 547.3323 451.2262 551.997 442.6667 551.997 c
430.3985 551.997 421.4698 543.7233 408.9 511.2969 C
413.7334 509.4969 L
f
415.6668 408.9938 m
427.2762 438.9657 433.8386 445.3271 441.9333 445.3271 c
447.5607 445.3271 450.8574 441.9277 453.9999 429.9938 c
458.1392 414.3277 463 409.9938 471.6667 409.9938 c
482.3912 409.9938 489.1363 416.7012 493 437.9939 C
485.7666 439.2939 L
482.7442 422.8169 478.2015 417.6607 472 417.6607 c
467.2817 417.6607 464.4909 420.6359 461.2362 433.0285 c
457.2188 448.1961 452.1254 452.9939 443.3334 452.9939 c
430.5637 452.9939 421.6625 444.8105 408.8 411.5939 C
415.6668 408.9938 L
f
417.6 308.5 m
429.0396 338.0622 434.8649 344 441.9 344 c
446.957 344 449.996 340.7964 453 329.5 c
457.1244 314.0523 462.3288 309.5 471.5 309.5 c
482.8309 309.5 489.5347 316.2254 493.5 338.5 C
484.15 340.15 L
481.2623 324.1247 477.2862 319.5 472 319.5 c
467.9854 319.5 465.4101 322.326 462.4021 333.6759 c
458.2809 349.069 453.0245 354 444 354 c
430.7289 354 421.8551 345.9066 408.7 311.9 C
417.6 308.5 L
f
419.5334 207.9969 m
430.8032 237.1494 435.8912 242.6636 441.8667 242.6636 c
446.3533 242.6636 449.1345 239.6559 452 228.9969 c
456.1096 213.7678 461.6576 208.9969 471.3333 208.9969 c
483.2705 208.9969 489.9331 215.7404 494 238.9969 C
482.5333 240.9969 L
479.7803 225.4234 476.3707 221.3303 472 221.3303 c
468.6893 221.3303 466.3293 224.0071 463.5681 234.3143 c
459.3432 249.9329 453.9237 254.997 444.6667 254.997 c
430.8941 254.997 422.0478 246.9937 408.6 212.1969 C
419.5334 207.9969 L
f
421.4666 107.503 m
432.5665 136.2459 436.9175 141.3364 441.8334 141.3364 c
445.7496 141.3364 448.2731 138.5247 451 128.503 c
455.0948 113.4924 460.9866 108.503 471.1667 108.503 c
483.7102 108.503 490.3316 115.2646 494.5 139.503 C
480.9167 141.853 L
478.2983 126.7312 475.4554 123.1696 472 123.1696 c
469.393 123.1696 467.2485 125.6973 464.734 134.9617 c
460.4053 150.8058 454.8228 156.003 445.3333 156.003 c
431.0593 156.003 422.2405 148.0899 408.5 112.503 C
421.4666 107.503 L
f
U
*u
23 7 m
40 7 L
40 94 L
23 94 L
23 81 L
7 81 L
7 66 L
23 66 L
23 7 L
f
64 83 m
49.1354 83 31.4199 70.9643 5 35 C
17 24 L
39.0523 54.2667 55.4311 66 64 66 c
73.0272 66 76 62.4994 76 45 c
76 31.6965 71.6667 26.9059 57 25.4 C
61 9 L
82.5566 10.8859 94 22.5356 94 45 c
94 73.1791 85.3691 83 64 83 c
f
*U
0 D
154 77 m
117 77 L
117 92 L
164 92 L
154.8778 30.9494 139.4825 8 125 8 c
114.1605 8 105 18.0178 105 33 c
105 55.9398 123.8271 73 153 73 c
178.8565 73 195 58.7342 195 39 c
195 16.7874 185.0433 6 169 6 c
158.4035 6 150 14.3163 150 25 c
150 35.5172 158.2369 44 169 44 c
176.5307 44 183.2826 40.2314 190 31 C
179 22.6 L
175.4472 27.4824 173.05 29 171 29 c
167.6802 29 166 27.2458 166 25 c
166 22.6805 167.7542 21 171 21 c
175.7337 21 178 25.5005 178 39 c
178 49.7631 168.7655 57 153 57 c
134.061 57 122 46.8201 122 33 c
122 28.0077 123.6976 25 124.8 25 C
129.2332 25 138.6668 44.3838 145.7 84.8 C
154 77 L
f
*u
1 D
211.2 58.3 m
284 78 L
284 92 L
217 92 L
217 78 L
277 78 L
277 86.8 L
208 70 L
211.2 58.3 L
f
211.2 58.3 m
233.7711 63.8649 234.8367 64 251 64 C
267.5148 64 273 60.7289 273 56 c
273 50.586 264.8701 46 246 46 c
229.6165 46 228 46.938 228 48.8 c
228 49.9984 229.6149 51 236 51 c
243.2326 51 245 50.1093 245 48.8 c
245 44.7 228 45.25 205 15 C
219.5 7 L
244.3501 42.5536 261 36.05 261 49 c
261 55.2448 251.5065 61 236 61 c
220.9031 61 212 54.9558 212 49 c
212 40.4831 222.2486 34 246 34 c
277.8245 34 291 42.2743 291 55 c
291 68.3751 280.8725 75 251 75 c
239.5595 75 224.4561 73.3446 208 70 C
211.2 58.3 L
f
268 30.8 m
272.3125 23.1875 275.25 17.25 279.2 8 C
295 12 L
290.1875 23.125 288.062 27.3593 283 35.8 C
268 30.8 L
f
219.5 7 m
225.9893 15.9165 227.8882 17 234 17 c
244.4606 17 241.498 7 256 7 c
262.1038 7 267.75 9.3125 272 14 C
264.2 25.4 L
260.3776 21.9792 258.7165 21.4 256 21.4 c
249.468 21.4 251.674 30.4 237 30.4 c
227.056 30.4 220.8659 27.0621 210 14 C
219.5 7 L
f
*U
*u
389 71 m
389 86 L
308 86 L
308 71 L
389 71 L
f
385.4 25.2 m
377.2666 23.9971 368.0945 23.2 360 23.2 c
343.8685 23.2 341 24.6403 341 28 c
341 33.262 353.5478 40.4033 388.4 43.8 C
386.8 59 L
339.8557 54.4249 323 41.641 323 27 c
323 14.1363 331.5152 8 360 8 c
368.8645 8 378.125 8.6875 387 10 C
385.4 25.2 L
f
334 96 m
327.125 74.5625 321.0625 62.625 308 44 C
321.4 36.8 L
335.1054 56.3414 341.5625 68.875 349.8 92.6 C
334 96 L
f
321.4 36.8 m
331.2471 50.4208 336.5586 54 344 54 c
351.9637 54 355 49.2989 355 30 C
372 30 L
372 58.2733 363.1661 68 344 68 c
334.2356 68 323.6694 61.4648 312.2 45.6 C
321.4 36.8 L
f
*U
*u
423.4 7 m
433.4289 33.1308 445.8681 63.9542 456.3 88.6 C
439 94 L
428.0998 68.2478 416.1875 38.625 406 12 C
423.4 7 L
f
u
423.4 7 m
434.33 35.3331 437.9438 40 441.8 40 c
445.1459 40 447.4116 37.3842 450 28 c
454.08 13.2078 460.3154 8 471 8 c
484.1498 8 490.73 14.7796 495 40 C
479.3 42.7 L
476.8163 28.03 474.54 25 472 25 c
470.0968 25 468.1677 27.3784 465.9 35.6 c
461.4676 51.6697 455.722 57 446 57 c
431.2245 57 422.4331 49.177 408.4 12.8 C
423.4 7 L
f
U
*U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
