%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (2450.eps)
%%CreationDate: (7/30/04) (10:48 AM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
1 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
500 600 m
500 700 L
400 700 L
400 600 L
500 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
400 600 m
400 700 L
300 700 L
300 600 L
400 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
500 500 m
500 600 L
400 600 L
400 500 L
500 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
400 500 m
400 600 L
300 600 L
300 500 L
400 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
0 Ap
0 O
0 g
1 D
268 688 m
227 688 L
227 685 L
264 685 L
264 686.7 L
249.7963 683.6932 241 675.2272 241 667 c
241 649.4375 265 644.1875 265 628 c
265 619.782 257.165 613 246 613 c
240.8957 613 234.8125 614.625 231.3 616.7 C
230 614 L
233.9375 611.625 240.3 610 246 610 c
258.5789 610 268 617.8826 268 628 c
268 645.775 244 651.275 244 667 c
244 674.4593 253.9981 682.7681 269.4859 684.7404 C
268 688 L
f
208.7 621.6 m
213.9283 631.0111 218.9465 643.5514 221.9 655.3 C
219 656 L
216.1875 644.8125 211.3058 632.5505 206 623 C
208.7 621.6 L
f
294 623 m
290.75 633.125 284.4235 646.3132 278 656 C
275.5 654.4 L
281.6316 645.1533 287.8746 632.1484 291.1 622.1 C
294 623 L
f
417.9 610.7 m
414.5065 623.6733 413 635.7997 413 650 c
413 664.2003 414.5065 676.3265 417.9 689.3 C
415 690 L
411.4733 676.5171 410 663.9841 410 650 c
410 636.0159 411.4733 623.4828 415 610 C
417.9 610.7 L
f
453 613 m
443.2185 613 438 617.875 438 625 c
438 632.2363 443.1629 637 453 637 c
464.787 637 477.6307 629.5528 485.5 617.3 c
488 619 L
479.6057 632.0702 465.8034 640 453 640 c
441.4589 640 435 633.903 435 625 c
435 616.0971 441.4589 610 453 610 c
464.2543 610 471 617.0976 471 631 C
471 659 L
488 659 L
488 662 L
471 662 L
471 683 L
478 683 L
478 686 L
436 686 L
436 683 L
468 683 L
468 662 L
436 662 L
436 659 L
468 659 L
468 631 l
468 618.7229 462.7865 613 453 613 c
f
116 639 m
116 655.8582 126.9107 673.3055 144 682.8 C
144 686 L
110 686 L
110 683 L
142 683 L
142 685 L
124.41 675.2273 113 656.6088 113 639 c
113 621.7909 125.5489 610 143 610 c
164.4432 610 176 621.1274 176 642 c
176 652.8515 173.1753 665.109 166 681 C
163.3 679.8 L
170.2744 664.3541 173 652.6288 173 642 c
173 622.757 162.9065 613 143 613 c
127.1028 613 116 623.6916 116 639 c
f
163.3 679.8 m
170.9589 669.0741 181.3209 658.1819 191.1 650.7 C
193 653 L
183.6875 660.125 173.5593 670.4135 166 681 C
163.3 679.8 L
f
395 624 m
354.087 661.4722 351.1794 668 340 668 c
330.6875 668 328.4303 661.3786 305 633 C
307.4 631.2 L
331.2722 660.1139 332.5735 665 340 665 c
349.4729 665 351.036 660.1433 392.9 621.8 C
395 624 L
f
386 666.2 m
382.785 672.185 379.9487 677.2073 376.5 683 C
373.9 681.5 L
377.2869 675.811 380.0736 670.8061 383.3 664.8 C
386 666.2 L
f
373.2 663.5 m
370.0841 669.3994 367.3797 674.3231 364 680 C
361.4223 678.4654 L
364.8054 672.7828 367.4187 668.0223 370.5473 662.0989 C
373.2 663.5 L
f
195 678 m
191.9719 683.7331 189.2844 688.4831 186 694 C
183.4 692.5 L
186.7848 686.8145 189.4289 682.0359 192.3 676.6 C
195 678 L
f
171.4 689.5 m
174.5265 684.2484 177.1108 679.5595 180.1 673.9 C
182.8 675.3 L
179.8325 680.9184 177.2187 685.5935 174 691 C
171.4 689.5 L
f
497 679 m
493.9719 684.7331 491.2844 689.4831 488 695 C
485.4 693.5 L
488.7848 687.8145 491.4289 683.0359 494.3 677.6 C
497 679 L
f
473.4 690.5 m
476.5265 685.2484 479.1108 680.5595 482.1 674.9 C
484.8 676.3 L
481.8325 681.9184 479.2187 686.5935 476 692 C
473.4 690.5 L
f
289 675 m
285.9719 680.7331 283.2844 685.4831 280 691 C
277.4 689.5 L
280.7848 683.8145 283.4289 679.0359 286.3 673.6 C
289 675 L
f
265.4 686.5 m
268.5265 681.2484 271.1108 676.5595 274.1 670.9 C
276.8 672.3 L
273.8325 677.9184 271.2187 682.5935 268 688 C
265.4 686.5 L
f
u
267.6667 588.6636 m
226.1667 588.6636 L
226.1667 583.4969 L
261.8333 583.4969 L
261.6666 585.9136 L
247.9989 582.2225 239.8333 573.8624 239.8333 565.8302 c
239.8333 548.8824 262.4999 543.6115 262.4999 528.3303 c
262.4999 520.8281 255.6034 514.8303 245.6667 514.8303 c
240.7784 514.8303 234.9588 516.3664 231.2833 518.4637 C
229.1667 513.6636 L
233.2377 511.208 239.8653 509.4969 245.6667 509.4969 c
258.8021 509.4969 268.3334 517.4872 268.3334 528.3303 c
268.3334 545.7053 245.6667 551.5178 245.6667 566.1636 c
245.6667 573.2624 255.4962 581.4029 270.4049 583.2806 C
267.6667 588.6636 L
f
267.3333 489.3273 m
225.3333 489.3273 L
225.3333 481.9938 L
259.6665 481.9938 L
259.3332 485.1272 L
246.2015 480.7519 238.6666 472.4976 238.6666 464.6605 c
238.6666 448.3272 259.9998 443.0355 259.9998 428.6606 c
259.9998 421.8742 254.0418 416.6607 245.3333 416.6607 c
240.6611 416.6607 235.1051 418.1079 231.2666 420.2273 C
228.3333 413.3272 L
232.5379 410.7911 239.4307 408.9939 245.3333 408.9939 c
259.0253 408.9939 268.6667 417.0918 268.6667 428.6606 c
268.6667 445.6356 247.3334 451.7606 247.3334 465.3272 c
247.3334 472.0654 256.9943 480.0378 271.324 481.8207 C
267.3333 489.3273 L
f
267 390 m
224.5 390 L
224.5 380.5 L
257.5 380.5 L
257 384.35 L
244.4042 379.2905 237.5 371.1421 237.5 363.5 c
237.5 347.7812 257.5 342.4687 257.5 329 c
257.5 322.9294 252.4803 318.5 245 318.5 c
240.5438 318.5 235.2514 319.8583 231.25 322 C
227.5 313 L
231.8383 310.3833 238.9961 308.5 245 308.5 c
259.2485 308.5 269 316.7055 269 329 c
269 345.575 249 352.0125 249 364.5 c
249 370.8777 258.4922 378.6819 272.2429 380.3702 C
267 390 L
f
266.6667 290.6636 m
223.6667 290.6636 L
223.6667 278.9969 L
255.3333 278.9969 L
254.6666 283.5636 L
242.6068 277.8198 236.3333 269.7773 236.3333 262.3302 c
236.3333 247.2261 254.9999 241.8928 254.9999 229.3303 c
254.9999 223.9756 250.9187 220.3303 244.6667 220.3303 c
240.4265 220.3303 235.3977 221.5997 231.2333 223.7637 C
226.6667 212.6636 L
231.1385 209.9663 238.5614 207.9969 244.6667 207.9969 c
259.4717 207.9969 269.3334 216.3101 269.3334 229.3303 c
269.3334 245.5053 250.6667 252.2553 250.6667 263.6636 c
250.6667 269.6808 259.9903 277.3168 273.162 278.9104 C
266.6667 290.6636 L
f
266.3334 191.3364 m
222.8334 191.3364 L
222.8334 177.5031 L
253.1667 177.5031 L
252.3334 182.7864 L
240.8096 176.3584 235.1667 168.4218 235.1667 161.1697 c
235.1667 146.6801 252.5001 141.326 252.5001 129.6697 c
252.5001 125.0307 249.3573 122.1697 244.3334 122.1697 c
240.3092 122.1697 235.544 123.3502 231.2167 125.5363 C
225.8334 112.3364 L
230.4388 109.5585 238.1268 107.5031 244.3334 107.5031 c
259.6949 107.5031 269.6667 115.9239 269.6667 129.6697 c
269.6667 145.4447 252.3333 152.5072 252.3333 162.8364 c
252.3333 168.4931 261.4882 175.9609 274.0809 177.4598 C
266.3334 191.3364 L
f
U
250 82 m
239.0122 74.8878 234 67.057 234 60 c
234 46.125 250 40.75 250 30 c
250 26.0769 247.7957 24 244 24 c
240.1919 24 235.6903 25.0916 231.2 27.3 C
225 12 L
229.739 9.1416 237.6922 7 244 7 c
259.9181 7 270 15.5285 270 30 c
270 45.375 254 52.75 254 62 c
254 67.2962 262.9863 74.5958 275 76 C
266 92 L
222 92 L
222 76 L
251 76 L
250 82 L
f
u
210.0834 521.0303 m
215.4305 530.818 220.4216 543.4321 223.3834 555.2136 C
218.1667 556.3303 L
215.3695 545.204 210.4631 532.8411 205.1667 523.1636 C
210.0834 521.0303 L
f
211.4667 420.4605 m
216.9328 430.6249 221.8967 443.3128 224.8668 455.1272 C
217.3333 456.6606 L
214.5515 445.5955 209.6205 433.1318 204.3333 423.3273 C
211.4667 420.4605 L
f
212.85 319.9 m
218.4349 330.441 223.3717 343.2026 226.35 355.05 C
216.5 357 L
213.7336 345.9961 208.7779 333.4315 203.5 323.5 C
212.85 319.9 L
f
214.2334 219.3303 m
219.9371 230.2479 224.8467 243.0833 227.8334 254.9636 C
215.6667 257.3303 L
212.9157 246.3876 207.9352 233.7221 202.6667 223.6636 C
214.2334 219.3303 L
f
215.6166 118.7697 m
221.4392 130.064 226.3217 142.9731 229.3166 154.8863 C
214.8334 157.6697 L
212.0978 146.7883 207.0927 134.0219 201.8334 123.8364 C
215.6166 118.7697 L
f
U
217 18.2 m
222.9414 29.8709 227.7968 42.8538 230.8 54.8 C
214 58 L
211.2798 47.1798 206.25 34.3125 201 24 C
217 18.2 L
f
u
294.5 523.497 m
291.2083 533.7261 284.8842 546.9663 278.5 556.6636 C
273.8499 554.1636 L
279.8168 545.1073 286.1347 531.9362 289.4166 521.7803 C
294.5 523.497 L
f
295 423.9939 m
291.6667 434.3273 285.3448 447.6194 279 457.3273 C
272.1999 453.9272 L
278.0021 445.0612 284.3948 431.724 287.7332 421.4605 C
295 423.9939 L
f
295.5 324.5 m
292.125 334.9375 285.8055 348.2816 279.5 358 C
270.55 353.7 L
276.1875 345.0243 282.655 331.521 286.05 321.15 C
295.5 324.5 L
f
296 224.997 m
292.5833 235.5386 286.2662 248.9347 280 258.6636 C
268.8999 253.4636 L
274.3727 244.9783 280.9151 231.3088 284.3666 220.8303 C
296 224.997 L
f
296.5 125.503 m
293.0417 136.1488 286.7268 149.5969 280.5 159.3364 C
267.25 153.2364 L
272.5581 144.9414 279.1754 131.1059 282.6834 120.5197 C
296.5 125.503 L
f
U
297 26 m
293.5 36.75 287.1875 50.25 281 60 C
265.6 53 L
270.7434 44.8954 277.4355 30.8937 281 20.2 C
297 26 L
f
27.7 90 m
10 92 L
6.5652 78.5458 5 65.425 5 50 c
5 34.575 6.5652 21.4542 10 8 C
27.7 10 L
24.5576 22.309 23 35.6685 23 50 c
23 64.3315 24.5576 77.691 27.7 90 C
f
89 23 m
77.0487 41.6086 65.0044 49 52 49 c
36.8311 49 28 40.7977 28 28 c
28 14.7583 37.1643 7 52 7 c
63.8429 7 74 15.7128 74 28 C
74 61 L
80 61 L
80 77 L
73 77 L
73 92 L
55 92 L
55 77 L
30 77 L
30 61 L
56 61 L
56 29 L
56 25.1878 53.6667 23 51 23 c
47.0307 23 45 24.6228 45 28 c
45 31.2107 46.8639 33 51 33 c
60.0059 33 67.2295 28.2358 77.4 12.4 C
89 23 L
f
u
387.5001 566.997 m
384.1865 573.1219 381.0432 578.5996 377.4834 584.497 C
373.3392 582.127 L
376.8349 576.332 379.9127 570.8947 383.22 564.7803 C
387.5001 566.997 L
f
389.0001 467.7939 m
385.588 474.0589 382.1376 479.9919 378.4667 485.994 C
372.7783 482.7539 L
376.3829 476.853 379.7517 470.9833 383.14 464.7605 C
389.0001 467.7939 L
f
390.5 368.6 m
386.9893 375.0049 383.2321 381.3933 379.45 387.5 C
372.2175 383.39 L
375.9309 377.3831 379.5908 371.081 383.06 364.75 C
390.5 368.6 L
f
392.0001 269.3969 m
388.3908 275.9419 384.3265 282.7856 380.4333 288.997 C
371.6566 284.0169 L
375.4788 277.9041 379.4298 271.1696 382.98 264.7302 C
392.0001 269.3969 L
f
393.5 170.203 m
389.7922 176.888 385.4209 184.187 381.4166 190.503 C
371.0958 184.653 L
375.0268 178.4343 379.2689 171.2673 382.9 164.7196 C
393.5 170.203 L
f
U
370.5349 85.28 m
374.5748 78.9553 379.108 71.3558 382.82 64.6999 C
395 70.9999 L
391.1937 77.8249 386.5154 85.5793 382.4 92 C
370.5349 85.28 L
f
u
373.8234 563.9503 m
370.6051 569.9812 367.5802 575.3509 364.0917 581.1303 C
360.001 578.7489 L
363.4801 572.9804 366.4042 567.7735 369.6177 561.7502 C
373.8234 563.9503 L
f
374.4467 464.4006 m
371.126 470.563 367.7808 476.3786 364.1833 482.2606 C
358.5797 479.0325 L
362.1548 473.178 365.3898 467.5247 368.6881 461.4015 C
374.4467 464.4006 L
f
375.07 364.86 m
371.647 371.1539 367.9814 377.4154 364.275 383.4 C
357.1586 379.3252 L
360.8296 373.3848 364.3754 367.285 367.7586 361.0619 C
375.07 364.86 L
f
375.6933 265.3102 m
372.1679 271.7357 368.1819 278.4432 364.3666 284.5303 C
355.7373 279.6087 L
359.5044 273.5824 363.361 267.0362 366.829 260.7132 C
375.6933 265.3102 L
f
376.3166 165.7696 m
372.6888 172.3266 368.3825 179.48 364.4583 185.6697 C
354.3162 179.9014 L
358.1792 173.7892 362.3466 166.7966 365.8995 160.3736 C
376.3166 165.7696 L
f
U
352.8949 80.185 m
356.8539 73.9868 361.3322 66.5477 364.9699 60.0249 C
376.9399 66.2199 L
373.2098 72.9084 368.583 80.5077 364.5499 86.8 C
352.8949 80.185 L
f
u
195.1667 577.6636 m
192.0391 583.5245 189.0569 588.7137 185.6667 594.3303 C
181.6166 592.0136 L
185.0785 586.2718 188.0015 581.0833 190.9833 575.4969 C
195.1667 577.6636 L
f
196.3334 478.3272 m
193.1063 484.316 189.8294 489.9443 186.3333 495.6606 C
180.8332 492.5272 L
184.3722 486.729 187.5741 481.1307 190.6666 475.3938 C
196.3334 478.3272 L
f
192.5 378 m
189.1735 384.1165 185.602 390.1841 182 396 C
175.05 392.05 L
178.6661 386.1955 182.1469 380.1874 185.35 374.3 C
192.5 378 L
f
193.6667 276.6636 m
190.2406 282.908 186.3745 289.4147 182.6667 295.3303 C
174.2666 290.5636 L
177.9599 284.6528 181.7195 278.2348 185.0333 272.1969 C
193.6667 276.6636 L
f
195.8334 175.3364 m
192.3078 181.7086 188.147 188.6545 184.3334 194.6697 C
174.4834 189.0864 L
178.2538 183.1192 182.2922 176.2915 185.7167 170.1031 C
195.8334 175.3364 L
f
U
172.7 89.6 m
176.5475 83.5765 180.8648 76.339 184.4 70 C
196 76 L
192.375 82.5 187.9195 89.8851 184 96 C
172.7 89.6 L
f
u
168.8166 588.8636 m
172.0504 583.5034 174.9148 578.4152 177.9833 572.6636 C
182.1333 574.8136 L
179.0683 580.5573 176.1557 585.6594 172.8333 591.1636 C
168.8166 588.8636 L
f
167.2332 489.2272 m
170.5744 483.7585 173.7189 478.2709 176.8665 472.4272 C
182.4666 475.3272 L
179.3041 481.1962 176.0928 486.7254 172.6666 492.3273 C
167.2332 489.2272 L
f
160.65 388.6 m
164.0985 383.0227 167.5232 377.1358 170.75 371.2 C
177.8 374.85 L
174.54 380.8442 171.0299 386.8004 167.5 392.5 C
160.65 388.6 L
f
159.0666 286.9636 m
162.6224 281.2777 166.3272 274.9915 169.6333 268.9636 C
178.1333 273.3636 L
174.7758 279.4831 170.9669 285.8664 167.3333 291.6636 C
159.0666 286.9636 L
f
158.4834 185.3364 m
162.1466 179.542 166.1315 172.8565 169.5168 166.7364 C
179.4667 171.8864 L
176.0117 178.1311 171.9041 184.9415 168.1667 190.8364 C
158.4834 185.3364 L
f
U
155.9 85.7 m
159.6705 79.797 163.9355 72.7122 167.4 66.5 C
178.8 72.4 L
175.2475 78.77 170.8411 86.0074 167 92 C
155.9 85.7 L
f
u
290 575.1636 m
286.8724 581.0246 283.8903 586.2137 280.5 591.8303 C
276.45 589.5136 L
279.9119 583.7718 282.8349 578.5833 285.8167 572.9969 C
290 575.1636 L
f
291.0001 475.3273 m
287.773 481.316 284.4962 486.9444 281 492.6606 C
275.5 489.5272 L
279.039 483.7291 282.2408 478.1308 285.3333 472.3939 C
291.0001 475.3273 L
f
292 375.5 m
288.6735 381.6165 285.102 387.6841 281.5 393.5 C
274.55 389.55 L
278.1661 383.6955 281.6469 377.6874 284.85 371.8 C
292 375.5 L
f
293.0001 275.6636 m
289.574 281.908 285.7078 288.4147 282 294.3303 C
273.6 289.5636 L
277.2932 283.6528 281.0528 277.2349 284.3667 271.1969 C
293.0001 275.6636 L
f
294 175.8364 m
290.4745 182.2085 286.3136 189.1544 282.5 195.1697 C
272.6501 189.5864 L
276.4204 183.6192 280.4588 176.7915 283.8834 170.6031 C
294 175.8364 L
f
U
271.7 89.6 m
275.5475 83.5765 279.8648 76.339 283.4 70 C
295 76 L
291.375 82.5 286.9195 89.8851 283 96 C
271.7 89.6 L
f
u
263.65 586.3636 m
266.8838 581.0035 269.7482 575.9152 272.8166 570.1636 C
276.9667 572.3136 L
273.9016 578.0573 270.9891 583.1594 267.6667 588.6636 C
263.65 586.3636 L
f
261.8999 486.2272 m
265.2411 480.7585 268.3856 475.2709 271.5333 469.4272 C
277.1333 472.3272 L
273.9708 478.1962 270.7595 483.7254 267.3333 489.3273 C
261.8999 486.2272 L
f
260.15 386.1 m
263.5985 380.5227 267.0232 374.6358 270.25 368.7 C
277.3 372.35 L
274.04 378.3442 270.5299 384.3004 267 390 C
260.15 386.1 L
f
258.4 285.9636 m
261.9558 280.2777 265.6606 273.9915 268.9667 267.9636 C
277.4667 272.3636 L
274.1092 278.4831 270.3003 284.8664 266.6667 290.6636 C
258.4 285.9636 L
f
256.6501 185.8364 m
260.3132 180.042 264.2981 173.3565 267.6834 167.2364 C
277.6333 172.3864 L
274.1783 178.6311 270.0707 185.4414 266.3334 191.3364 C
256.6501 185.8364 L
f
U
254.9 85.7 m
258.6705 79.797 262.9355 72.7122 266.4 66.5 C
277.8 72.4 L
274.2475 78.77 269.8411 86.0074 266 92 C
254.9 85.7 L
f
u
497.3334 578.6636 m
494.236 584.4704 491.2909 589.598 487.9333 595.1636 C
483.9775 592.9003 L
487.4073 587.2086 490.2943 582.0805 493.2467 576.5469 C
497.3334 578.6636 L
f
U
u
497.6667 478.3324 m
494.5 484.2128 491.2974 489.7181 487.8666 495.3324 C
482.555 492.3058 L
486.0299 486.608 489.1598 481.1304 492.1934 475.4991 C
497.6667 478.3324 L
f
498 378.0012 m
494.7641 383.9553 491.3039 389.8382 487.8 395.5012 C
481.1326 391.7113 L
484.6525 386.0073 488.0252 380.1802 491.1401 374.4513 C
498 378.0012 L
f
498.0004 277.6624 m
494.6951 283.6901 490.9774 289.9506 487.4003 295.6624 C
479.377 291.109 L
482.942 285.399 486.5576 279.2224 489.7537 273.3957 C
498.0004 277.6624 L
f
U
u
498.5002 177.3312 m
495.1257 183.4325 491.1505 190.0707 487.5002 195.8312 C
478.1211 190.5145 L
481.7311 184.7983 485.5896 178.2722 488.8669 172.3479 C
498.5002 177.3312 L
f
U
476.8651 89.92 m
480.5202 84.1977 484.6216 77.3221 487.9801 71.3001 C
499 77 L
495.5562 83.175 491.3235 90.1908 487.6 96 C
476.8651 89.92 L
f
u
473.167 586.497 m
476.3694 581.186 479.1982 576.1568 482.2378 570.457 C
486.2928 572.5578 L
483.2574 578.2484 480.3816 583.2902 477.0912 588.7445 C
473.167 586.497 L
f
U
u
470.7147 486.4421 m
473.993 481.0718 477.0663 475.7023 480.1563 469.9622 C
485.5662 472.7638 L
482.463 478.5265 479.3251 483.9351 475.963 489.4371 C
470.7147 486.4421 L
f
468.2623 386.3872 m
471.6166 380.9575 474.9345 375.2478 478.0748 369.4673 C
484.8397 372.9698 L
481.6685 378.8047 478.2686 384.58 474.8348 390.1297 C
468.2623 386.3872 L
f
464.5004 287.9958 m
467.9305 282.5067 471.4931 276.4566 474.6837 270.6358 C
482.8037 274.8392 L
479.5646 280.7462 475.9026 286.8883 472.3971 292.4858 C
464.5004 287.9958 L
f
U
u
462.7027 187.1054 m
466.2088 181.5569 470.0159 175.1666 473.2569 169.3055 C
482.7318 174.2096 L
479.4249 180.1889 475.5009 186.6977 471.9236 192.3429 C
462.7027 187.1054 L
f
U
460.9051 86.215 m
464.4871 80.6072 468.5388 73.8766 471.8301 67.9751 C
482.66 73.5801 L
479.2852 79.6315 475.0991 86.5071 471.4501 92.2 C
460.9051 86.215 L
f
76.8651 91.92 m
80.5202 86.1977 84.6216 79.3221 87.9801 73.3001 C
99 79 L
95.5562 85.175 91.3235 92.1908 87.6 98 C
76.8651 91.92 L
f
68.9051 75.215 m
72.4871 69.6072 76.5388 62.8766 79.8301 56.9751 C
90.66 62.5801 L
87.2852 68.6315 83.0991 75.5071 79.4501 81.2 C
68.9051 75.215 L
f
u
144.1667 581.0469 m
144.1667 586.497 L
109.5 586.497 L
109.5 581.3302 L
141.6667 581.3302 L
141.6667 585.1636 L
123.6537 575.1559 112.3333 556.6906 112.3333 539.3303 c
112.3333 521.614 124.9839 509.6636 143.1667 509.6636 c
164.6631 509.6636 176.5 520.76 176.5 540.8302 c
176.5 551.4047 173.7294 563.3169 166.5 579.3302 C
161.5833 577.9969 L
168.423 563.027 171 552.0924 171 541.4969 c
171 523.8677 161.6093 514.8303 143.1667 514.8303 c
128.1578 514.8303 117.8334 524.7705 117.8334 539.3303 c
117.8334 555.1225 128.1262 571.889 144.1667 581.0469 C
f
143.3333 479.2938 m
143.3333 486.9939 L
108 486.9939 L
108 479.6605 L
140.3333 479.6605 L
140.3333 485.3273 L
121.8973 475.0846 110.6666 456.7725 110.6666 439.6606 c
110.6666 421.4371 123.4188 409.3272 142.3333 409.3272 c
163.883 409.3272 176 420.3925 176 439.6605 c
176 449.9579 173.2836 461.5248 166 477.6605 C
158.8665 476.1938 L
165.5716 461.7 167.9999 451.5561 167.9999 440.9939 c
167.9999 424.9784 159.3121 416.6607 142.3333 416.6607 c
128.2127 416.6607 118.6668 425.8494 118.6668 439.6606 c
118.6668 454.3867 128.3417 470.4725 143.3333 479.2938 C
f
144.5 377.55 m
144.5 387.5 L
108.5 387.5 L
108.5 378 L
141 378 L
141 385.5 L
122.1411 375.0223 111 356.8634 111 340 c
111 321.2694 123.8539 309 143.5 309 c
165.1029 309 177.5 320.0342 177.5 338.5 c
177.5 348.5204 174.8376 359.742 167.5 376 C
158.15 374.4 L
164.7204 360.3822 167 351.0289 167 340.5 c
167 326.0981 159.015 318.5 143.5 318.5 c
130.2676 318.5 121.5 326.9373 121.5 340 c
121.5 353.6602 130.5572 369.0653 144.5 377.55 C
f
144.6667 275.7969 m
144.6667 287.997 L
108 287.997 L
108 276.3302 L
140.6667 276.3302 L
140.6667 285.6636 L
121.3848 274.951 110.3333 256.9453 110.3333 240.3303 c
110.3333 221.0925 123.2889 208.6636 143.6667 208.6636 c
165.3229 208.6636 178 219.6668 178 237.3302 c
178 247.0737 175.3918 257.9499 168 274.3302 C
156.4333 272.5969 L
162.869 259.0551 165 250.4925 165 239.9969 c
165 227.2088 157.7178 220.3303 143.6667 220.3303 c
131.3226 220.3303 123.3334 228.0162 123.3334 240.3303 c
123.3334 252.9245 131.7727 267.6488 144.6667 275.7969 C
f
144.8333 174.0531 m
144.8333 188.503 L
107.5 188.503 L
107.5 174.6698 L
140.3334 174.6698 L
140.3334 185.8364 L
120.6285 174.8888 109.6667 157.0363 109.6667 140.6697 c
109.6667 120.9248 122.7239 108.3364 143.8333 108.3364 c
165.5428 108.3364 178.5 119.3085 178.5 136.1697 c
178.5 145.6362 175.9459 156.1671 168.5 172.6698 C
154.7167 170.8031 L
161.0178 157.7373 163.0001 149.9654 163.0001 139.5031 c
163.0001 128.3285 156.4207 122.1697 143.8333 122.1697 c
132.3774 122.1697 125.1666 129.1041 125.1666 140.6697 c
125.1666 152.198 132.9881 166.2416 144.8333 174.0531 C
f
U
145 72.3 m
145 89 L
107 89 L
107 73 L
140 73 L
140 86 L
119.8722 74.8174 109 57.1181 109 41 c
109 20.7479 122.1589 8 144 8 c
165.7627 8 179 18.9411 179 35 c
179 44.1894 176.5 54.375 169 71 C
153 69 L
159.1664 56.4102 161 49.429 161 39 c
161 29.4392 155.1235 24 144 24 c
133.4324 24 127 30.183 127 41 c
127 51.4623 134.2036 64.8251 145 72.3 C
f
u
161.5833 577.9969 m
169.674 567.267 180.4166 556.3302 190.4166 548.6636 C
193.5 552.8303 L
184.0833 560.049 173.914 570.1645 166 580.6636 C
161.5833 577.9969 L
f
158.8665 476.1938 m
167.3892 465.4599 178.5124 454.4785 188.7333 446.6271 C
193 452.6606 L
183.4792 459.9731 173.2687 469.9154 165 480.3272 C
158.8665 476.1938 L
f
158.15 374.4 m
167.1044 363.662 178.6082 352.6361 189.05 344.6 C
194.5 352.5 L
184.875 359.9062 174.6234 369.6755 166 380 C
158.15 374.4 L
f
156.4333 272.5969 m
165.8196 261.8549 177.704 250.7844 188.3666 242.5635 C
195 252.3303 L
185.2708 259.8303 174.9781 269.4264 166 279.6636 C
156.4333 272.5969 L
f
154.7167 170.8031 m
164.5348 160.0571 176.7998 148.942 187.6834 140.5364 C
195.5 152.1697 L
185.6667 159.7635 175.3328 169.1865 166 179.3364 C
154.7167 170.8031 L
f
U
153 69 m
163.25 58.25 175.8956 47.0903 187 38.5 C
196 52 L
186.0625 59.6875 175.6875 68.9375 166 79 C
153 69 L
f
u
395.5 524.1636 m
354.5154 561.7014 351.3363 568.3303 340 568.3303 c
330.5729 568.3303 327.9974 561.6236 304.5 533.1636 C
308.6667 529.4969 L
331.9206 557.7481 333.2487 562.4969 340 562.4969 c
348.7213 562.4969 350.2736 557.8185 391.75 519.8302 C
395.5 524.1636 L
f
396 424.3273 m
354.9438 461.9306 351.4932 468.6606 340 468.6606 c
330.4583 468.6606 327.5646 461.8686 304 433.3273 C
309.9334 427.7938 L
332.569 455.3822 333.924 459.9938 340 459.9938 c
347.9698 459.9938 349.5113 455.4936 390.5999 417.8605 C
396 424.3273 L
f
396.5 324.5 m
355.3722 362.1689 351.6501 369 340 369 c
330.3437 369 327.1318 362.1226 303.5 333.5 C
311.2 326.1 L
333.2173 353.0257 334.5992 357.5 340 357.5 c
347.2183 357.5 348.749 353.1781 389.45 315.9 C
396.5 324.5 L
f
397 224.6636 m
355.8007 262.3981 351.8069 269.3303 340 269.3303 c
330.2292 269.3303 326.6989 262.3676 303 233.6636 C
312.4667 224.3969 L
333.8657 250.6598 335.2745 254.9969 340 254.9969 c
346.4668 254.9969 347.9866 250.8532 388.3 213.9302 C
397 224.6636 L
f
397.5 124.8364 m
356.2291 162.6364 351.9638 169.6697 340 169.6697 c
330.1146 169.6697 326.2661 162.6217 302.5 133.8364 C
313.7333 122.7031 L
334.5141 148.3033 335.9497 152.5031 340 152.5031 c
345.7153 152.5031 347.2243 148.5377 387.15 111.9698 C
397.5 124.8364 L
f
U
398 25 m
356.6575 62.8656 352.1207 70 340 70 c
330 70 325.8333 62.8667 302 34 C
315 21 L
335.1625 45.9375 336.625 50 340 50 c
344.9638 50 346.4619 46.2129 386 10 C
398 25 L
f
u
419.7001 589.4136 m
414.3333 590.3303 L
410.8219 576.8522 409.3333 564.2212 409.3333 549.9969 c
409.3333 535.7727 410.8219 523.1416 414.3333 509.6636 C
419.7001 510.5803 L
416.3484 523.4429 414.8334 535.7748 414.8334 549.9969 c
414.8334 564.2191 416.3484 576.5509 419.7001 589.4136 C
f
U
u
421.5 489.5324 m
413.6667 490.6657 L
410.1706 477.1924 408.6667 464.4635 408.6667 449.999 c
408.6667 435.5347 410.1706 422.8056 413.6667 409.3324 C
421.5 410.4658 L
418.1902 423.2176 416.6667 435.755 416.6667 449.999 c
416.6667 464.2431 418.1902 476.7804 421.5 489.5324 C
f
423.3 389.6512 m
413 391.0012 L
409.5192 377.5327 408 364.7058 408 350.0012 c
408 335.2967 409.5192 322.4697 413 309.0012 C
423.3 310.3512 L
420.032 322.9924 418.5 335.7353 418.5 350.0012 c
418.5 364.2671 420.032 377.01 423.3 389.6512 C
f
425.7671 289.7624 m
413.0003 291.3291 L
409.5348 277.8653 408.0003 264.9404 408.0003 249.9957 c
408.0003 235.051 409.5348 222.1261 413.0003 208.6624 C
425.7671 210.2291 L
422.541 222.7595 421.0004 235.7079 421.0004 249.9957 c
421.0004 264.2835 422.541 277.2319 425.7671 289.7624 C
f
U
u
427.2335 189.8812 m
412.0001 191.6645 L
408.55 178.2055 407.0001 165.1827 407.0001 149.9978 c
407.0001 134.813 408.55 121.7901 412.0001 108.3312 C
427.2335 110.1145 L
424.0493 122.5342 422.5002 135.6882 422.5002 149.9978 c
422.5002 164.3075 424.0493 177.4614 427.2335 189.8812 C
f
U
428.7 90 m
411 92 L
407.5652 78.5458 406 65.425 406 50 c
406 34.575 407.5652 21.4542 411 8 C
428.7 10 L
425.5576 22.309 424 35.6685 424 50 c
424 64.3315 425.5576 77.691 428.7 90 C
f
u
476.85 581.3302 m
476.85 586.497 L
435.5 586.497 L
435.5 581.3302 L
466.1666 581.3302 L
466.1666 562.8303 L
435.5 562.8303 L
435.5 557.6636 L
466.3333 557.6636 L
466.3333 530.6636 L
466.3333 519.6863 461.7109 514.6637 453 514.6637 c
444.115 514.6637 439.5001 518.9467 439.5001 525.3303 c
439.5001 531.8068 444.0409 535.9969 453 535.9969 c
464.6568 535.9969 476.5638 528.9969 484.8166 516.1469 C
488.8334 519.3303 L
479.8462 533.3236 466.3369 541.1636 453.1667 541.1636 c
440.9376 541.1636 434.1667 534.8269 434.1667 525.3303 c
434.1667 515.7875 440.9931 509.4969 453.1667 509.4969 c
464.7413 509.4969 471.8334 516.7527 471.8334 530.4969 C
471.8334 557.6636 L
488.5 557.6636 L
488.5 562.8303 L
471.6667 562.8303 L
471.6667 581.3302 L
476.85 581.3302 L
f
U
u
475.88 479.6657 m
475.88 486.9991 L
435 486.9991 L
435 479.6657 L
464.3333 479.6657 L
464.3333 463.6657 L
435 463.6657 L
435 456.3324 L
464.6667 456.3324 L
464.6667 430.3324 L
464.6667 420.6548 460.6353 416.3324 453 416.3324 c
445.0115 416.3324 441.0001 420.0234 441.0001 425.6657 c
441.0001 431.3824 444.9189 434.999 453 434.999 c
464.5266 434.999 475.4969 428.4462 484.1333 414.999 C
489.6667 419.6657 L
480.0867 434.5821 466.8704 442.3324 453.3334 442.3324 c
440.4163 442.3324 433.3334 435.7559 433.3334 425.6657 c
433.3334 415.4831 440.5274 408.999 453.3334 408.999 c
465.2282 408.999 472.6667 416.4129 472.6667 429.999 C
472.6667 456.3324 L
489 456.3324 L
489 463.6657 L
472.3333 463.6657 L
472.3333 479.6657 L
475.88 479.6657 L
f
474.91 378.0012 m
474.91 387.5012 L
434.5 387.5012 L
434.5 378.0012 L
462.5 378.0012 L
462.5 364.5012 L
434.5 364.5012 L
434.5 355.0012 L
463 355.0012 L
463 330.0012 L
463 321.6233 459.5598 318.0012 453 318.0012 c
445.9079 318.0012 442.5 321.1002 442.5 326.0012 c
442.5 330.9581 445.7968 334.0012 453 334.0012 c
464.3964 334.0012 474.4301 327.8955 483.45 313.8512 C
490.5 320.0012 L
480.3272 335.8406 467.4039 343.5012 453.5 343.5012 c
439.895 343.5012 432.5 336.6849 432.5 326.0012 c
432.5 315.1788 440.0616 308.5012 453.5 308.5012 c
465.7152 308.5012 473.5 316.0732 473.5 329.5012 C
473.5 355.0012 L
489.5 355.0012 L
489.5 364.5012 L
473 364.5012 L
473 378.0012 L
474.91 378.0012 L
f
473.957 276.329 m
473.957 287.9958 L
435.017 287.9958 L
435.017 276.329 L
461.6836 276.329 L
461.6836 265.3291 L
435.017 265.3291 L
435.017 253.6623 L
462.3503 253.6623 L
462.3503 229.6624 L
462.3503 222.5843 459.5012 219.6625 454.017 219.6625 c
447.8215 219.6625 445.0171 222.1694 445.0171 226.3291 c
445.0171 230.5261 447.6918 232.9957 454.017 232.9957 c
465.2832 232.9957 474.3802 227.3372 483.7836 212.6957 C
492.3504 220.3291 L
481.5847 237.0916 468.9544 244.6624 454.6837 244.6624 c
440.3907 244.6624 432.6837 237.6064 432.6837 226.3291 c
432.6837 214.8668 440.6128 207.9957 454.6837 207.9957 c
467.2191 207.9957 475.3504 215.7258 475.3504 228.9957 C
475.3504 253.6623 L
491.017 253.6623 L
491.017 265.3291 L
474.6837 265.3291 L
474.6837 276.329 L
473.957 276.329 L
f
U
u
472.9785 174.6645 m
472.9785 188.4979 L
434.0085 188.4979 L
434.0085 174.6645 L
459.3418 174.6645 L
459.3418 166.1645 L
434.0085 166.1645 L
434.0085 152.3312 L
460.1751 152.3312 L
460.1751 129.3312 L
460.1751 123.5528 457.9171 121.3312 453.5085 121.3312 c
448.2094 121.3312 446.0085 123.2461 446.0085 126.6645 c
446.0085 130.1017 448.0613 131.9978 453.5085 131.9978 c
464.6445 131.9978 472.8048 126.7865 482.5918 111.5478 C
492.6752 120.6645 L
481.3167 138.3501 468.9795 145.8312 454.3418 145.8312 c
439.3609 145.8312 431.3418 138.5354 431.3418 126.6645 c
431.3418 114.5624 439.6386 107.4978 454.3418 107.4978 c
467.1976 107.4978 475.6752 115.386 475.6752 128.4978 C
475.6752 152.3312 L
491.0085 152.3312 L
491.0085 166.1645 L
474.8419 166.1645 L
474.8419 174.6645 L
472.9785 174.6645 L
f
U
472 73 m
472 89 L
433 89 L
433 73 L
457 73 L
457 67 L
433 67 L
433 51 L
458 51 L
458 29 L
458 24.5213 456.3331 23 453 23 c
448.5974 23 447 24.3229 447 27 c
447 29.6774 448.4308 31 453 31 c
464.0058 31 471.2295 26.2358 481.4 10.4 C
493 21 L
481.0487 39.6086 469.0045 47 454 47 c
438.3311 47 430 39.4645 430 27 c
430 14.2581 438.6644 7 454 7 c
467.176 7 476 15.0463 476 28 C
476 51 L
491 51 L
491 67 L
475 67 L
475 73 L
472 73 L
f
u
73.3333 162.5008 m
80.0167 162.5008 L
80.0167 176.3341 L
72.5 176.3341 L
72.5 191.8341 L
57 191.8341 L
57 176.3341 L
30.6667 176.3341 L
30.6667 162.5008 L
57.8334 162.5008 L
57.8334 129.3341 L
57.8334 124.1949 54.9141 121.3341 51 121.3341 c
46.1268 121.3341 43.5 123.4964 43.5 127.6674 c
43.5 131.6997 45.9878 134.0008 51 134.0008 c
60.5156 134.0008 68.8535 128.7005 78.5833 113.5507 C
88.6667 122.6674 L
77.3795 140.2419 64.8995 147.8341 51.8333 147.8341 c
37.358 147.8341 28.8333 139.9827 28.8333 127.6674 c
28.8333 114.9822 37.6356 107.5008 51.8333 107.5008 c
63.6615 107.5008 73.3333 116.0277 73.3333 128.5008 C
73.3333 162.5008 L
f
72.6667 264.0015 m
80.0334 264.0015 L
80.0334 275.6682 L
72 275.6682 L
72 291.6682 L
59 291.6682 L
59 275.6682 L
31.3334 275.6682 L
31.3334 264.0015 L
59.6667 264.0015 L
59.6667 229.6682 L
59.6667 223.202 56.1615 219.6681 51 219.6681 c
45.223 219.6681 42 222.3699 42 227.3348 c
42 232.1887 45.1118 235.0015 51 235.0015 c
61.0253 235.0015 70.4775 229.1651 79.7667 214.7015 C
88.3333 222.3348 L
77.7104 238.8751 64.7947 246.6682 51.6667 246.6682 c
37.8848 246.6682 29.6667 239.1677 29.6667 227.3348 c
29.6667 215.2061 38.1069 208.0015 51.6667 208.0015 c
63.48 208.0015 72.6667 216.3426 72.6667 229.0015 C
72.6667 264.0015 L
f
72 365.5023 m
80.05 365.5023 L
80.05 375.0023 L
71.5 375.0023 L
71.5 391.5023 L
61.0001 391.5023 L
61.0001 375.0023 L
32 375.0023 L
32 365.5023 L
61.5001 365.5023 L
61.5001 330.0023 L
61.5001 322.2091 57.4089 318.0022 51 318.0022 c
44.3191 318.0022 40.5 321.2435 40.5 327.0023 c
40.5 332.6777 44.2357 336.0023 51 336.0023 c
61.535 336.0023 72.1015 329.6298 80.95 315.8523 C
88 322.0023 L
78.0413 337.5084 64.6898 345.5022 51.5 345.5022 c
38.4117 345.5022 30.5 338.3526 30.5 327.0023 c
30.5 315.43 38.5782 308.5023 51.5 308.5023 c
63.2986 308.5023 72 316.6575 72 329.5023 C
72 365.5023 L
f
U
u
71.3333 467.0031 m
80.0667 467.0031 L
80.0667 474.3363 L
71 474.3363 L
71 491.3364 L
63.0001 491.3364 L
63.0001 474.3363 L
32.6667 474.3363 L
32.6667 467.0031 L
63.3334 467.0031 L
63.3334 430.3364 L
63.3334 421.2162 58.6562 416.3363 51 416.3363 c
43.4152 416.3363 39 420.1171 39 426.6697 c
39 433.1668 43.3596 437.0031 51 437.0031 c
62.0446 437.0031 73.7255 430.0944 82.1334 417.0031 C
87.6667 421.6697 L
78.3721 436.1417 64.585 444.3363 51.3333 444.3363 c
38.9385 444.3363 31.3334 437.5376 31.3334 426.6697 c
31.3334 415.6539 39.0496 409.003 51.3333 409.003 c
63.1172 409.003 71.3333 416.9724 71.3333 430.003 C
71.3333 467.0031 L
f
70.6667 568.4969 m
85.0553 568.4969 L
85.0553 573.6636 L
70.5 573.6636 L
70.5 591.1636 L
65 591.1636 L
65 573.6636 L
33.3333 573.6636 L
33.3333 568.4969 L
65.1666 568.4969 L
65.1666 530.6636 L
65.1666 520.2164 59.9036 514.6636 51 514.6636 c
42.5114 514.6636 37.5001 518.9839 37.5001 526.3303 c
37.5001 533.6489 42.4836 537.9969 51 537.9969 c
62.5543 537.9969 75.3493 530.5522 83.3166 518.1469 C
87.3334 521.3303 L
78.7029 534.7682 64.4801 543.1636 51.1667 543.1636 c
39.4653 543.1636 32.1667 536.7158 32.1667 526.3303 c
32.1667 515.8709 39.5209 509.4969 51.1667 509.4969 c
62.9357 509.4969 70.6667 517.2804 70.6667 530.4969 C
70.6667 568.4969 L
f
U
70 670 m
86.1 670 L
86.1 673 L
70 673 L
70 691 L
67 691 L
67 673 L
34 673 L
34 670 L
67 670 L
67 631 l
67 619.2258 61.151 613 51 613 c
41.6075 613 36 617.8598 36 626 c
36 634.1402 41.6075 639 51 639 c
63.064 639 76.9734 631.0192 84.5 619.3 C
87 621 L
79.0338 633.4037 64.3753 642 51 642 c
39.9922 642 33 635.9031 33 626 c
33 616.0971 39.9922 610 51 610 c
62.7543 610 70 617.5976 70 631 C
70 670 L
f
u
25.8999 189.8864 m
10.6667 191.6697 L
7.2165 178.2107 5.6667 165.1879 5.6667 150.003 c
5.6667 134.8182 7.2165 121.7953 10.6667 108.3364 C
25.8999 110.1197 L
22.7157 122.5394 21.1666 135.6934 21.1666 150.003 c
21.1666 164.3127 22.7157 177.4666 25.8999 189.8864 C
f
24.0999 289.7728 m
11.3334 291.3394 L
7.8679 277.8756 6.3334 264.9508 6.3334 250.0061 c
6.3334 235.0614 7.8679 222.1365 11.3334 208.6728 C
24.0999 210.2394 L
20.8738 222.7699 19.3332 235.7183 19.3332 250.0061 c
19.3332 264.2938 20.8738 277.2423 24.0999 289.7728 C
f
22.3 389.65 m
12 391 L
8.5192 377.5314 7 364.7045 7 350 c
7 335.2954 8.5192 322.4685 12 309 C
22.3 310.35 L
19.032 322.9911 17.5 335.7341 17.5 350 c
17.5 364.2659 19.032 377.0087 22.3 389.65 C
f
20.4999 489.5364 m
12.6667 490.6697 L
9.1706 477.1964 7.6667 464.4674 7.6667 450.003 c
7.6667 435.5386 9.1706 422.8096 12.6667 409.3364 C
20.4999 410.4697 L
17.1901 423.2216 15.6666 435.759 15.6666 450.003 c
15.6666 464.2471 17.1901 476.7844 20.4999 489.5364 C
f
18.7001 589.4136 m
13.3333 590.3303 L
9.8219 576.8522 8.3333 564.2212 8.3333 549.9969 c
8.3333 535.7727 9.8219 523.1416 13.3333 509.6636 C
18.7001 510.5803 L
15.3484 523.4429 13.8334 535.7748 13.8334 549.9969 c
13.8334 564.2191 15.3484 576.5509 18.7001 589.4136 C
f
U
16.9 610.7 m
13.5065 623.6733 12 635.7997 12 650 c
12 664.2003 13.5065 676.3265 16.9 689.3 C
14 690 L
10.4733 676.5171 9 663.9841 9 650 c
9 636.0159 10.4733 623.4828 14 610 C
16.9 610.7 L
f
u
99.0001 176.7995 m
95.6255 182.9008 91.6504 189.539 88.0001 195.2995 C
78.621 189.9828 L
82.231 184.2666 86.0896 177.7406 89.3668 171.8162 C
99.0001 176.7995 L
f
99.0002 274.599 m
95.6949 280.6267 91.9773 286.8872 88.4002 292.599 C
80.3769 288.0456 L
83.9419 282.3356 87.5575 276.159 90.7536 270.3324 C
99.0002 274.599 L
f
99.0002 372.3985 m
95.7643 378.3525 92.3042 384.2354 88.8002 389.8984 C
82.1328 386.1085 L
85.6528 380.4046 89.0255 374.5775 92.1403 368.8485 C
99.0002 372.3985 L
f
U
u
99.0003 470.1979 m
95.8336 476.0783 92.6311 481.5836 89.2003 487.1979 C
83.8887 484.1713 L
87.3636 478.4735 90.4935 472.9959 93.527 467.3647 C
99.0003 470.1979 L
f
99.0003 578.4178 m
95.9029 584.2245 92.9579 589.3522 89.6003 594.9178 C
85.6444 592.6544 L
89.0743 586.9628 91.9613 581.8347 94.9136 576.3011 C
99.0003 578.4178 L
f
U
99 677.5 m
95.9719 683.2331 93.2844 687.9831 90 693.5 C
87.4 692 L
90.7848 686.3145 93.4289 681.5359 96.3 676.1 C
99 677.5 L
f
u
70.321 174.9953 m
73.8271 169.4469 77.6342 163.0566 80.8752 157.1954 C
90.3501 162.0996 L
87.0431 168.0788 83.1191 174.5877 79.5418 180.2328 C
70.321 174.9953 L
f
71.7369 274.7757 m
75.1671 269.2866 78.7296 263.2366 81.9202 257.4157 C
90.0401 261.6191 L
86.8011 267.5261 83.1391 273.6682 79.6336 279.2656 C
71.7369 274.7757 L
f
73.1528 374.556 m
76.507 369.1263 79.825 363.4166 82.9653 357.6361 C
89.7302 361.1385 L
86.5591 366.9734 83.1591 372.7488 79.7253 378.2985 C
73.1528 374.556 L
f
U
u
74.5687 474.3363 m
77.847 468.966 80.9205 463.5966 84.0104 457.8564 C
89.4203 460.658 L
86.317 466.4208 83.1791 471.8294 79.817 477.3313 C
74.5687 474.3363 L
f
75.9844 584.5369 m
79.1869 579.2259 82.0157 574.1967 85.0553 568.4969 C
89.1103 570.5977 L
86.0749 576.2883 83.1991 581.3302 79.9087 586.7844 C
75.9844 584.5369 L
f
U
77.4 685.6 m
80.5265 680.3484 83.1108 675.6595 86.1 670 C
88.8 671.4 L
85.8325 677.0184 83.2187 681.6935 80 687.1 C
77.4 685.6 L
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
