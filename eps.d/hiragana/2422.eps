%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (2422.eps)
%%CreationDate: (3/20/04) (12:48 AM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
1 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
500 600 m
500 700 L
400 700 L
400 600 L
500 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
400 600 m
400 700 L
300 700 L
300 600 L
400 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
500 500 m
500 600 L
400 600 L
400 500 L
500 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
400 500 m
400 600 L
300 600 L
300 500 L
400 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
0 Ap
0 O
0 g
114 86 m
110.2143 73.8873 108 60.0255 108 50 c
108 24.4822 120.9041 9 134 9 c
143.1283 9 155.2345 20.7602 163 42 C
147 48 L
142.8318 36.5993 136.1458 28 134 28 c
130.8574 28 126 36.4643 126 50 c
126 58.0943 128.7024 73.449 132 84 C
114 86 L
f
180 86 m
189.4403 66.5674 194 45.2144 194 20 C
176 20 L
176 43.0758 171.4791 63.7878 162.6 81.6 C
180 86 L
f
U
u
226 93 m
240.5 91.25 260.5287 90 275 90 C
275 74 L
260.1089 74 239.8551 75.2228 224.3 77.1 C
226 93 L
f
228 7 m
273.4231 10.9743 290 23.4697 290 43 c
290 58.6039 278.9419 68 255 68 c
240.3334 68 224.2427 66.1517 210 63 C
212.8 47.3 L
226.9308 50.2901 242.3041 52 255 52 c
267.1664 52 272 48.43 272 43 c
272 33.4925 259.9408 25.9959 225.7 23 C
228 7 L
f
U
*u
1 D
324.3 78.1 m
339.8551 76.2228 360.1089 75 375 75 C
375 91 L
360.5287 91 340.5 92.25 326 94 C
324.3 78.1 L
f
318 8 m
384 52 L
384 70 L
314 70 L
314 54 L
378 54 L
376 66 L
308 22 L
318 8 L
f
u
390.6 27.2 m
386.85 26.3875 383.375 26 380 26 c
372.9515 26 372.5296 26.3746 371 33 c
369.2488 40.5846 364.3218 44 354 44 c
343.35 44 341.1875 43.1875 308 22 C
318 8 L
347.8483 27.7941 348.2583 28 350 28 c
352.1904 28 352.4215 27.8372 354 21 c
355.8732 12.886 362.1816 9 376 9 c
380.9979 9 387.4875 9.8125 392 11 C
390.6 27.2 L
f
U
*U
*u
459 7 m
479.0019 8.7501 490 19.4 490 36 c
490 48.4273 477.0418 59 458 59 c
425.1033 59 407 45.1992 407 29 c
407 17.1354 415.6613 9 429 9 c
445.1648 9 452 15.5939 452 32 c
452 65.8 L
472 65.8 L
472 80.8 L
452 80.8 L
452 95.8 L
435 95.8 L
435 80.8 L
413 80.8 L
413 65.8 L
435 65.8 L
435 32 l
435 26.1875 433.2736 24 430 24 c
427.1628 24 425 25.9792 425 30 c
425 36.2161 436.9415 43 458 43 c
466.6739 43 472 39.1156 472 35 c
472 27.7422 467.8749 23.8717 456.3 22.5 C
459 7 L
f
463.7 84.2 m
470.577 76.8101 476.1712 70.0711 482.3 62.5 C
494 72 L
487.6563 79.8366 482.1093 86.3604 475 94 C
463.7 84.2 L
f
*U
*u
87 86 m
47 86 L
47 95 L
30 95 L
30 86 L
13 86 L
13 71 L
30 71 L
30 16 L
47 16 L
47 71 L
87 71 L
87 86 L
f
62 70 m
53.9932 35.9906 42.3415 24 29 24 c
26.0667 24 24 25.9712 24 30 c
24 38.5262 36.927 48 55 48 c
68.6098 48 76 43.0478 76 38 c
76 29.5291 69.3539 23.1434 59 22 C
61 7 L
80.2934 8.6879 93 21.3453 93 38 c
93 52.5639 79.8987 63 55 63 c
26.1288 63 7 47.4704 7 30 c
7 16.0543 14.7127 9 29 9 c
50.1911 9 68.5783 26.9809 78 67 C
62 70 L
f
*U
u
86.6666 185.3364 m
45.3333 185.3364 L
45.3333 194.8364 L
30.6667 194.8364 L
30.6667 185.3364 L
13.3333 185.3364 L
13.3333 172.3364 L
30.6667 172.3364 L
30.6667 116.003 L
45.3333 116.003 L
45.3333 172.3364 L
86.6666 172.3364 L
86.6666 185.3364 L
f
86.3333 284.6727 m
43.6665 284.6727 L
43.6665 294.6727 L
31.3334 294.6727 L
31.3334 284.6727 L
13.6667 284.6727 L
13.6667 273.6728 L
31.3334 273.6728 L
31.3334 216.0061 L
43.6665 216.0061 L
43.6665 273.6728 L
86.3333 273.6728 L
86.3333 284.6727 L
f
86 384 m
42 384 L
42 394.5 L
32 394.5 L
32 384 L
14 384 L
14 375 L
32 375 L
32 316 L
42 316 L
42 375 L
86 375 L
86 384 L
f
85.6666 483.3364 m
40.3333 483.3364 L
40.3333 494.3364 L
32.6667 494.3364 L
32.6667 483.3364 L
14.3333 483.3364 L
14.3333 476.3364 L
32.6667 476.3364 L
32.6667 416.003 L
40.3333 416.003 L
40.3333 476.3364 L
85.6666 476.3364 L
85.6666 483.3364 L
f
85.3333 582.6636 m
38.6667 582.6636 L
38.6667 594.1636 L
33.3333 594.1636 L
33.3333 582.6636 L
14.6666 582.6636 L
14.6666 577.6636 L
33.3333 577.6636 L
33.3333 515.9969 L
38.6667 515.9969 L
38.6667 577.6636 L
85.3333 577.6636 L
85.3333 582.6636 L
f
U
u
0 D
129.8166 183.903 m
126.5579 173.2512 123.9999 158.3543 123.9999 150.003 c
123.9999 135.2758 129.5176 125.8363 133.3333 125.8363 c
135.9594 125.8363 143.136 134.7321 147.6833 147.1697 C
161.4999 142.003 L
153.8488 121.076 142.0179 109.5031 133.3333 109.5031 c
120.9449 109.5031 108.5 124.8751 108.5 150.003 c
108.5 159.9832 110.6419 173.6215 114.3333 185.6697 C
129.8166 183.903 L
f
127.6332 283.8061 m
124.4135 273.0534 121.9999 258.6143 121.9999 250.0061 c
121.9999 234.0872 128.1778 223.6726 132.6666 223.6726 c
135.7731 223.6726 143.4403 232.865 148.3667 246.3394 C
159.9999 242.0061 L
152.4631 221.3918 140.9076 210.0061 132.6666 210.0061 c
120.9856 210.0061 109 225.2679 109 250.0061 c
109 259.9409 111.0695 273.3558 114.6667 285.3394 C
127.6332 283.8061 L
f
125.45 383.7 m
122.2693 372.8464 120 358.8652 120 350 c
120 332.8897 126.8381 321.5 132 321.5 c
135.5868 321.5 143.7446 330.9888 149.05 345.5 C
158.5 342 L
151.0775 321.6984 139.7974 310.5 132 310.5 c
121.0264 310.5 109.5 325.6516 109.5 350 c
109.5 359.8894 111.497 373.0809 115 385 C
125.45 383.7 L
f
123.2666 483.603 m
120.1248 472.6486 117.9999 459.1252 117.9999 450.003 c
117.9999 431.7012 125.4983 419.3363 131.3333 419.3363 c
135.4004 419.3363 144.0489 429.1217 149.7333 444.6697 C
156.9999 442.003 L
149.6918 422.0143 138.687 411.0031 131.3333 411.0031 c
121.0672 411.0031 110 426.0445 110 450.003 c
110 459.8471 111.9246 472.8151 115.3333 484.6697 C
123.2666 483.603 L
f
121.0834 583.4969 m
117.9806 572.4417 116 559.3761 116 549.9969 c
116 530.5036 124.1587 517.1637 130.6667 517.1637 c
135.2141 517.1637 144.3531 527.2455 150.4166 543.8303 C
155.5 541.9969 L
148.3063 522.3209 137.5768 511.4969 130.6667 511.4969 c
121.108 511.4969 110.5 526.4282 110.5 549.9969 c
110.5 559.7957 112.3522 572.5402 115.6666 584.3303 C
121.0834 583.4969 L
f
U
u
226.5 192.6697 m
240.8646 190.7947 260.2201 189.503 274.5 189.503 C
274.5 175.6698 L
259.8603 175.6698 240.276 176.9329 225 178.9197 C
226.5 192.6697 L
f
227 292.3394 m
241.2292 290.3394 259.9116 289.0061 274 289.0061 C
274 277.3395 L
259.6118 277.3395 240.6969 278.643 225.7 280.7395 C
227 292.3394 L
f
227.5 392 m
241.5937 389.875 259.6031 388.5 273.5 388.5 C
273.5 379 L
259.3633 379 241.1178 380.3437 226.4 382.55 C
227.5 392 L
f
228 491.6697 m
241.9583 489.4197 259.2946 488.003 273 488.003 C
273 480.6698 L
259.1147 480.6698 241.5387 482.0538 227.1 484.3698 C
228 491.6697 L
f
228.5 591.3303 m
242.3229 588.9553 258.9861 587.497 272.5 587.497 C
272.5 582.3302 L
258.8662 582.3302 241.9596 583.7546 227.8 586.1802 C
228.5 591.3303 L
f
U
u
226.7 121.3363 m
260.9955 124.337 274 132.8086 274 143.3364 c
274 149.6304 268.5125 153.6698 255 153.6698 c
242.1215 153.6698 226.9946 151.972 212.95 148.9364 C
210.5 162.503 L
224.666 165.68 240.4148 167.503 255 167.503 c
278.6238 167.503 289.5 158.4144 289.5 143.3364 c
289.5 124.1511 272.6159 111.3484 228.6667 107.5031 C
226.7 121.3363 L
f
227.7 219.6726 m
262.0503 222.6781 276.0001 232.1247 276.0001 243.6728 c
276.0001 250.8307 269.8586 255.3395 255 255.3395 c
241.9388 255.3395 227.0583 253.6539 213.1 250.5729 C
211 262.0061 L
225.0893 265.2083 240.4963 267.0061 255 267.0061 c
278.3057 267.0061 289 258.225 289 243.6728 c
289 224.8325 271.8088 211.7225 229.3334 208.0061 C
227.7 219.6726 L
f
228.7 318 m
263.1049 321.0102 278 331.4317 278 344 c
278 352.0218 271.2046 357 255 357 c
241.7562 357 227.1221 355.3265 213.25 352.2 C
211.5 361.5 L
225.5126 364.7275 240.5777 366.5 255 366.5 c
277.9876 366.5 288.5 358.0264 288.5 344 c
288.5 325.5046 271.0018 312.0874 230 308.5 C
228.7 318 L
f
229.7 416.3363 m
264.1597 419.3513 280 430.7479 280 444.3364 c
280 453.2222 272.5507 458.6698 255 458.6698 c
241.5736 458.6698 227.1859 457.0084 213.4 453.8364 C
212 461.003 L
225.936 464.2559 240.6592 466.003 255 466.003 c
277.6695 466.003 288 457.837 288 444.3364 c
288 426.186 270.1947 412.4615 230.6667 409.0031 C
229.7 416.3363 L
f
230.6999 514.6637 m
265.2143 517.6834 281.9999 530.0549 281.9999 544.6636 c
281.9999 554.4133 273.8967 560.3302 255 560.3302 c
241.391 560.3302 227.2497 558.681 213.55 555.4636 C
212.5 560.497 L
226.3592 563.7751 240.7406 565.497 255 565.497 c
277.3514 565.497 287.5 557.6384 287.5 544.6636 c
287.5 526.8582 269.3876 512.8264 231.3333 509.4969 C
230.6999 514.6637 L
f
U
u
1 D
464.9 184.3197 m
471.7365 177.1928 477.2615 170.6634 483.35 163.1197 C
493.5 171.3364 L
487.2448 179.0856 481.7399 185.4635 474.6666 192.8363 C
464.9 184.3197 L
f
466.1 284.4394 m
472.8961 277.5755 478.3518 271.2557 484.4 263.7395 C
493 270.6727 L
486.8333 278.3346 481.3705 284.5666 474.3333 291.6727 C
466.1 284.4394 L
f
467.3 384.55 m
474.0555 377.949 479.442 371.8387 485.45 364.35 C
492.5 370 L
486.4219 377.5745 481.0011 383.6607 474 390.5 C
467.3 384.55 L
f
468.5 484.6697 m
475.2151 478.3317 480.5323 472.431 486.5 464.9697 C
492 469.3364 L
486.0104 476.8236 480.6317 482.7638 473.6666 489.3363 C
468.5 484.6697 L
f
469.6999 584.7803 m
476.3745 578.7052 481.6226 573.0141 487.5499 565.5803 C
491.5 568.6636 L
485.599 576.0635 480.2624 581.8579 473.3333 588.1636 C
469.6999 584.7803 L
f
U
u
325 179.7531 m
340.276 177.7662 359.8603 176.5031 374.5 176.5031 C
374.5 190.3364 L
360.2201 190.3364 340.8646 191.628 326.5 193.503 C
325 179.7531 L
f
325.7 281.4062 m
340.6969 279.3096 359.6118 278.0062 374 278.0062 C
374 289.6727 L
359.9116 289.6727 341.2292 291.0061 327 293.0061 C
325.7 281.4062 L
f
326.4 383.05 m
341.1178 380.8437 359.3633 379.5 373.5 379.5 C
373.5 389 L
359.6031 389 341.5937 390.375 327.5 392.5 C
326.4 383.05 L
f
327.1 484.7031 m
341.5387 482.3872 359.1147 481.0031 373 481.0031 C
373 488.3364 L
359.2946 488.3364 341.9583 489.753 328 492.003 C
327.1 484.7031 L
f
327.8 586.3469 m
341.9596 583.9213 358.8662 582.4969 372.5 582.4969 C
372.5 587.6636 L
358.9861 587.6636 342.3229 589.122 328.5 591.497 C
327.8 586.3469 L
f
U
u
317.1666 108.6697 m
383.3333 154.5031 L
383.3333 170.003 L
314.3333 170.003 L
314.3333 156.1698 L
378.1667 156.1698 L
376.35 166.5531 L
308.5 120.7197 L
317.1666 108.6697 L
f
316.3333 209.3395 m
382.6666 257.0062 L
382.6666 270.0061 L
314.6667 270.0061 L
314.6667 258.3395 L
378.3333 258.3395 L
376.7 267.1061 L
309 219.4393 L
316.3333 209.3395 L
f
315.5 310 m
382 359.5 L
382 370 L
315 370 L
315 360.5 L
378.5 360.5 L
377.05 367.65 L
309.5 318.15 L
315.5 310 L
f
314.6666 410.6697 m
381.3333 462.0031 L
381.3333 470.003 L
315.3333 470.003 L
315.3333 462.6698 L
378.6667 462.6698 L
377.4 468.2031 L
310 416.8697 L
314.6666 410.6697 L
f
313.8333 511.3303 m
380.6667 564.4969 L
380.6667 569.9969 L
315.6666 569.9969 L
315.6666 564.8302 L
378.8333 564.8302 L
377.75 568.7469 L
310.5 515.5803 L
313.8333 511.3303 L
f
U
u
390.2 125.4863 m
386.6262 124.6383 382.9288 124.1697 379.6666 124.1697 c
372.2791 124.1697 371.5591 124.7778 369.9499 132.0197 c
368.1266 140.2124 363.3885 143.6697 353.6666 143.6697 c
343.6979 143.6697 341.75 142.9301 308.5 120.7197 C
317.1666 108.6697 L
347.5194 129.6232 347.934 129.8364 350.3333 129.8364 c
353.0434 129.8364 353.6603 129.2164 355.2834 121.9364 c
357.2216 113.2342 363.0634 109.5031 376.3333 109.5031 C
381.0452 109.5031 387.3125 110.3508 391.5 111.5031 C
390.2 125.4863 L
f
389.8 223.7727 m
386.4025 222.8891 382.4826 222.3393 379.3333 222.3393 c
371.6068 222.3393 370.5886 223.1811 368.8999 231.0394 c
367.0045 239.8403 362.4552 243.3394 353.3333 243.3394 c
344.0458 243.3394 342.3125 242.6727 309 219.4393 C
316.3333 209.3395 L
347.1905 231.4523 347.6097 231.6729 350.6667 231.6729 c
353.8964 231.6729 354.8992 230.5956 356.5667 222.8728 c
358.5699 213.5825 363.9452 210.0061 376.6667 210.0061 C
381.0925 210.0061 387.1376 210.8891 391 212.0061 C
389.8 223.7727 L
f
389.4 322.05 m
386.1788 321.1309 382.0365 320.5 379 320.5 c
370.9345 320.5 369.6182 321.5753 367.85 330.05 c
365.8825 339.459 361.5221 343 353 343 c
344.3937 343 342.875 342.4062 309.5 318.15 C
315.5 310 L
346.8616 333.272 347.2854 333.5 351 333.5 c
354.7493 333.5 356.1379 331.9655 357.85 323.8 c
359.9182 313.9215 364.8269 310.5 377 310.5 C
381.1398 310.5 386.9627 311.4182 390.5 312.5 C
389.4 322.05 L
f
389 420.3363 m
385.9551 419.3818 381.5903 418.6697 378.6666 418.6697 c
370.2622 418.6697 368.6477 419.9786 366.7999 429.0697 c
364.7603 439.0868 360.5888 442.6697 352.6666 442.6697 c
344.7417 442.6697 343.4375 442.1489 310 416.8697 C
314.6666 410.6697 L
346.5327 435.1011 346.9611 435.3364 351.3333 435.3364 c
355.6023 435.3364 357.3768 433.3448 359.1333 424.7364 c
361.2666 414.2698 365.7087 411.0031 377.3333 411.0031 C
381.1871 411.0031 386.7878 411.9566 390 413.0031 C
389 420.3363 L
f
388.6 518.6137 m
385.7314 517.6236 381.1441 516.8303 378.3333 516.8303 c
369.5899 516.8303 367.6773 518.3728 365.75 528.0803 c
363.6383 538.7056 359.6556 542.3303 352.3333 542.3303 c
345.0895 542.3303 344 541.8824 310.5 515.5803 C
313.8333 511.3303 L
346.2039 536.9209 346.6368 537.1636 351.6666 537.1636 c
356.4553 537.1636 358.6155 534.7147 360.4166 525.6636 c
362.6148 514.6089 366.5905 511.4969 377.6666 511.4969 C
381.2345 511.4969 386.6129 512.4857 389.5 513.4969 C
388.6 518.6137 L
f
U
u
62.8334 170.5864 m
54.7288 135.046 42.1591 122.503 28.8333 122.503 c
24.8468 122.503 22.1666 125.0398 22.1666 129.8364 c
22.1666 139.1952 35.7519 149.5031 55 149.5031 c
69.6312 149.5031 77.8334 144.099 77.8334 137.8364 c
77.8334 128.4421 70.5947 121.5253 59.2667 120.3363 C
61 107.3364 L
80.0612 109.0039 92.5 121.3965 92.5 137.8364 c
92.5 152.203 79.5223 162.503 55 162.503 c
26.5471 162.503 7.5 147.004 7.5 129.8364 c
7.5 116.5186 15.1056 109.5031 28.8333 109.5031 c
49.2283 109.5031 67.4264 127.6732 76.6666 168.0031 C
62.8334 170.5864 L
f
63.6667 271.1728 m
55.4643 234.1015 41.9767 221.006 28.6667 221.006 c
23.6269 221.006 20.3332 224.1083 20.3332 229.6728 c
20.3332 239.8643 34.5768 251.0062 55 251.0062 c
70.6527 251.0062 79.6668 245.1502 79.6668 237.6728 c
79.6668 227.3551 71.8355 219.9072 59.5333 218.6727 C
61 207.6728 L
79.8291 209.3199 92 221.4477 92 237.6728 c
92 251.8421 79.146 262.0061 55 262.0061 c
26.9653 262.0061 8 246.5375 8 229.6728 c
8 216.9829 15.4986 210.0061 28.6667 210.0061 c
48.2655 210.0061 66.2745 228.3654 75.3332 269.0062 C
63.6667 271.1728 L
f
64.5 371.75 m
56.1998 333.1478 41.7943 319.5 28.5 319.5 c
22.4072 319.5 18.5 323.1678 18.5 329.5 c
18.5 340.5241 33.4018 352.5 55 352.5 c
71.6741 352.5 81.5 346.1921 81.5 337.5 c
81.5 326.2591 73.0763 318.2801 59.8 317 C
61 308 L
79.5969 309.6268 91.5 321.4897 91.5 337.5 c
91.5 351.4721 78.7697 361.5 55 361.5 c
27.3836 361.5 8.5 346.062 8.5 329.5 c
8.5 317.438 15.8915 310.5 28.5 310.5 c
47.3028 310.5 65.1228 329.0485 74 370 C
64.5 371.75 L
f
65.3334 472.3364 m
56.9354 432.2033 41.6119 418.003 28.3333 418.003 c
21.1873 418.003 16.6666 422.2364 16.6666 429.3364 c
16.6666 441.1932 32.2267 454.0031 55 454.0031 c
72.6955 454.0031 83.3334 447.2433 83.3334 437.3364 c
83.3334 425.1721 74.3171 416.662 60.0667 415.3363 C
61 408.3364 L
79.3648 409.9428 91 421.5409 91 437.3364 c
91 451.1113 78.3933 461.003 55 461.003 c
27.8019 461.003 9 445.5956 9 429.3364 c
9 417.9024 16.2844 411.0031 28.3333 411.0031 c
46.3399 411.0031 63.9709 429.7407 72.6666 471.0031 C
65.3334 472.3364 L
f
66.1666 572.9136 m
57.6708 531.2496 41.4295 516.497 28.1667 516.497 c
19.9675 516.497 14.8334 521.2959 14.8334 529.1636 c
14.8334 541.853 31.0517 555.4969 55 555.4969 c
73.7168 555.4969 85.1666 548.2853 85.1666 537.1636 c
85.1666 524.0761 75.5578 515.0349 60.3333 513.6637 C
61 508.6636 L
79.1326 510.2496 90.5 521.5829 90.5 537.1636 c
90.5 550.7413 78.017 560.497 55 560.497 c
28.2201 560.497 9.5 545.12 9.5 529.1636 c
9.5 518.3575 16.6773 511.4969 28.1667 511.4969 c
45.3772 511.4969 62.8191 530.4238 71.3334 571.9969 C
66.1666 572.9136 L
f
U
*u
61 609 m
78.9005 610.5656 90 621.6341 90 637 c
90 650.3804 77.6407 660 55 660 c
28.6384 660 10 644.6536 10 629 c
10 618.8218 17.0703 612 28 612 c
44.4144 612 61.6672 631.1161 70 673 C
67 673.5 L
58.4064 630.305 41.2471 615 28 615 c
18.7476 615 13 620.3645 13 629 c
13 642.5221 29.8766 657 55 657 c
74.7383 657 87 649.3365 87 637 c
87 622.9891 76.7986 613.4168 60.6 612 C
61 609 L
f
85 682 m
37 682 L
37 694 L
34 694 L
34 682 L
15 682 L
15 679 L
34 679 L
34 615 L
37 615 L
37 679 L
85 679 L
85 682 L
f
*U
u
0 D
178.0001 120.3364 m
178.0001 143.199 173.3479 164.1467 164.4 181.7697 C
179.3333 185.6697 L
188.8252 166.5592 193.5 144.9919 193.5 120.3364 C
178.0001 120.3364 L
f
180.0001 220.6728 m
180.0001 243.3222 175.2167 264.5056 166.2001 281.9394 C
178.6666 285.3394 L
188.2101 266.551 193 244.7694 193 220.6728 C
180.0001 220.6728 L
f
182 321 m
182 343.4362 177.0854 364.8552 168 382.1 C
178 385 L
187.5951 366.5337 192.5 344.5377 192.5 321 C
182 321 L
f
184.0001 421.3364 m
184.0001 443.5594 178.9542 465.2141 169.8 482.2697 C
177.3333 484.6697 L
186.9801 466.5255 192 444.3152 192 421.3364 C
184.0001 421.3364 L
f
185.9999 521.6636 m
185.9999 543.6734 180.8229 565.5638 171.5999 582.4303 C
176.6667 584.3303 L
186.365 566.5082 191.5 544.0835 191.5 521.6636 C
185.9999 521.6636 L
f
U
u
118.9 683.4 m
115.8362 672.2439 114 659.6361 114 650 c
114 629.3151 122.8189 615 130 615 c
135.0278 615 144.6574 625.3784 151.1 643 C
154 642 L
146.9206 622.6367 136.4665 612 130 612 c
121.1488 612 111 626.8211 111 650 c
111 659.7534 112.7798 672.2745 116 684 C
118.9 683.4 L
f
191 622 m
191 643.861 185.75 666.5 176 684 C
173.4 682.6 L
182.6917 665.9227 188 643.7966 188 622 C
191 622 L
f
U
u
229 691 m
242.6875 688.5 258.6776 687 272 687 C
272 684 L
258.6177 684 242.3805 685.4647 228.5 688 C
229 691 L
f
231.7 613 m
266.2691 616.0245 284 629.371 284 645 c
284 655.6137 275.2428 662 255 662 c
241.2084 662 227.3135 660.3629 213.7 657.1 C
213 660 L
226.7826 663.3034 240.8221 665 255 665 c
277.0333 665 287 657.449 287 645 c
287 627.5396 268.5805 613.2005 232 610 C
231.7 613 L
f
U
*u
1 D
328.5 688 m
342.3805 685.4647 358.6177 684 372 684 C
372 687 L
358.6776 687 342.6875 688.5 329 691 C
328.5 688 L
f
378.1 669.3 m
311 614.3 L
313 612 L
380 667 L
380 670 L
316 670 L
316 667 L
379 667 L
378.1 669.3 L
f
313 612 m
345.875 638.75 346.3125 639 352 639 c
357.3083 639 359.8544 636.0939 361.7 626.6 c
363.9632 614.9571 367.4723 612 378 612 C
381.2818 612 386.438 613.024 389 614 C
388.2 616.9 L
385.5077 615.8744 380.698 615 378 615 c
368.9176 615 366.7068 616.7761 364.7 627.1 c
362.5162 638.3334 358.7224 642 352 642 c
345.4375 642 344.5625 641.625 311 614.3 C
313 612 L
f
*U
u
459 107.503 m
478.5818 109.2164 489.5 119.7593 489.5 136.003 c
489.5 148.1484 476.819 158.503 457.8333 158.503 c
425.2297 158.503 407.5 144.9794 407.5 129.003 c
407.5 117.4685 416.0104 109.503 428.8333 109.503 c
443.8057 109.503 450.3333 115.9463 450.3333 132.1697 C
450.3333 167.5031 L
471.3333 167.5031 L
471.3333 180.503 L
450.3333 180.503 L
450.3333 195.503 L
435.6667 195.503 L
435.6667 180.503 L
413.5 180.503 L
413.5 167.5031 L
435.6667 167.5031 L
435.6667 132.1697 l
435.6667 125.0783 433.6246 122.503 429.6667 122.503 c
425.8537 122.503 423 125.1336 423 129.8364 c
423 137.2519 435.4686 144.6697 457.8333 144.6697 c
467.8492 144.6697 474.0001 140.1185 474.0001 135.1697 c
474.0001 126.999 469.0487 122.3007 456.6833 120.9197 C
459 107.503 L
f
459 208.0061 m
478.1616 209.6827 489 220.1187 489 236.0061 c
489 247.8695 476.5962 258.0061 457.6667 258.0061 c
425.3562 258.0061 408 244.7596 408 229.0061 c
408 217.8017 416.3596 210.0061 428.6667 210.0061 c
442.4466 210.0061 448.6666 216.2987 448.6666 232.3394 C
448.6666 269.2062 L
470.6666 269.2062 L
470.6666 280.2061 L
448.6666 280.2061 L
448.6666 295.2061 L
436.3334 295.2061 L
436.3334 280.2061 L
414 280.2061 L
414 269.2062 L
436.3334 269.2062 L
436.3334 232.3394 l
436.3334 223.9691 433.9757 221.006 429.3333 221.006 c
424.5446 221.006 420.9999 224.2881 420.9999 229.6728 c
420.9999 238.2878 433.9957 246.3395 457.6667 246.3395 c
469.0245 246.3395 476.0001 241.1214 476.0001 235.3394 c
476.0001 226.2557 470.2226 220.7297 457.0667 219.3393 C
459 208.0061 L
f
459 308.5 m
477.7415 310.1398 488.5 320.4689 488.5 336 c
488.5 347.5814 476.3734 357.5 457.5 357.5 c
425.4826 357.5 408.5 344.5306 408.5 329 c
408.5 318.1257 416.7087 310.5 428.5 310.5 c
441.0877 310.5 447 316.642 447 332.5 C
447 370.9 L
470 370.9 L
470 379.9 L
447 379.9 L
447 394.9 L
437 394.9 L
437 379.9 L
414.5 379.9 L
414.5 370.9 L
437 370.9 L
437 332.5 l
437 322.8508 434.3267 319.5 429 319.5 c
423.2356 319.5 419 323.4335 419 329.5 c
419 339.3144 432.5229 348 457.5 348 c
470.1997 348 478 342.1151 478 335.5 c
478 325.5034 471.3963 319.1497 457.45 317.75 C
459 308.5 L
f
459 409.003 m
477.3214 410.6061 488 420.8282 488 436.003 c
488 447.3025 476.1506 457.003 457.3333 457.003 c
425.6091 457.003 409 444.3108 409 429.003 c
409 418.4588 417.0579 411.003 428.3333 411.003 c
439.7286 411.003 445.3333 416.9944 445.3333 432.6697 C
445.3333 472.6031 L
469.3333 472.6031 L
469.3333 479.603 L
445.3333 479.603 L
445.3333 494.603 L
437.6667 494.603 L
437.6667 479.603 L
415 479.603 L
415 472.6031 L
437.6667 472.6031 L
437.6667 432.6697 l
437.6667 421.7416 434.6777 418.003 428.6667 418.003 c
421.9265 418.003 417 422.5879 417 429.3364 c
417 440.3502 431.05 449.6697 457.3333 449.6697 c
471.375 449.6697 480.0001 443.118 480.0001 435.6697 c
480.0001 424.7602 472.5702 417.5787 457.8333 416.1697 C
459 409.003 L
f
459 509.4969 m
476.9013 511.0632 487.5 521.1784 487.5 535.9969 c
487.5 547.0145 475.9278 556.4969 457.1667 556.4969 c
425.7355 556.4969 409.5 544.0819 409.5 528.9969 c
409.5 518.7828 417.407 511.4969 428.1667 511.4969 c
438.3697 511.4969 443.6667 517.3377 443.6667 532.8303 C
443.6667 574.2969 L
468.6667 574.2969 L
468.6667 579.2969 L
443.6667 579.2969 L
443.6667 594.2969 L
438.3333 594.2969 L
438.3333 579.2969 L
415.5 579.2969 L
415.5 574.2969 L
438.3333 574.2969 L
438.3333 532.8303 l
438.3333 520.6233 435.0287 516.497 428.3334 516.497 c
420.6175 516.497 415.0001 521.7333 415.0001 529.1636 c
415.0001 541.3768 429.5772 551.3302 457.1667 551.3302 c
472.5502 551.3302 482 544.1117 482 535.8303 c
482 524.0079 473.7439 515.9987 458.2166 514.5803 C
459 509.4969 L
f
U
*u
459 610 m
476.4812 611.5295 487 621.5378 487 636 c
487 646.7356 475.705 656 457 656 c
425.862 656 410 643.8621 410 629 c
410 619.116 417.7562 612 428 612 c
437.0106 612 442 617.6901 442 633 C
442 676 L
468 676 L
468 679 L
442 679 L
442 694 L
439 694 L
439 679 L
416 679 L
416 676 L
439 676 L
439 633 l
439 619.5141 435.3798 615 428 615 c
419.3084 615 413 620.8878 413 629 c
413 642.4127 428.1043 653 457 653 c
473.7255 653 484 645.1146 484 636 c
484 623.2647 474.9178 614.4277 458.6 613 C
459 610 L
f
470.9 684.9 m
477.5341 679.0879 482.7129 673.6064 488.6 666.2 C
491 668 L
485.1875 675.3125 479.893 680.961 473 687 C
470.9 684.9 L
f
*U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
