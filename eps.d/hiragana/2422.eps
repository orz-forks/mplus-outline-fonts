%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (2422.eps)
%%CreationDate: (8/7/04) (2:52 PM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
1 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
500 600 m
500 700 L
400 700 L
400 600 L
500 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
400 600 m
400 700 L
300 700 L
300 600 L
400 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
500 500 m
500 600 L
400 600 L
400 500 L
500 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
400 500 m
400 600 L
300 600 L
300 500 L
400 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
0 Ap
0 O
0 g
1 D
61 609 m
78.9005 610.5656 90 621.6341 90 637 c
90 650.3804 77.6407 660 55 660 c
28.6384 660 10 644.6536 10 629 c
10 618.8218 17.0703 612 28 612 c
44.4144 612 61.6673 631.116 70 673 C
67 673.5 L
58.4064 630.305 41.2471 615 28 615 c
18.7476 615 13 620.3645 13 629 c
13 642.5221 29.8766 657 55 657 c
74.7383 657 87 649.3364 87 637 c
87 622.9891 76.7986 613.4167 60.6 612 C
61 609 L
f
85 682 m
37 682 L
37 694 L
34 694 L
34 682 L
15 682 L
15 679 L
34 679 L
34 615 L
37 615 L
37 679 L
85 679 L
85 682 L
f
329.5 688.1 m
343.4125 685.4873 358.4713 684 372 684 C
372 687 L
358.3026 687 343.3125 688.5 330 691 C
329.5 688.1 L
f
378.1 669.3 m
311 614.3 L
313 612 L
380 667 L
380 670 L
317 670 L
317 667 L
379 667 L
378.1 669.3 L
f
313 612 m
345.875 638.75 346.3125 639 352 639 c
357.3083 639 359.8544 636.0939 361.7 626.6 c
363.9632 614.9571 367.4723 612 378 612 C
381.2818 612 386.438 613.024 389 614 C
388.2 616.9 L
385.5077 615.8744 380.698 615 378 615 c
368.9176 615 366.7068 616.7761 364.7 627.1 c
362.5162 638.3334 358.7224 642 352 642 c
345.4375 642 344.5625 641.625 311 614.3 C
313 612 L
f
151.2 643 m
145.0069 626.0608 135.3419 616 130 616 c
123.2026 616 115 629.4411 115 650 c
115 658.7697 116.6903 670.6127 119.9 682.3 C
117 683 L
113.7686 671.2336 112 659.246 112 650 c
112 627.2848 121.3258 613 130 613 c
136.8654 613 147.367 623.8578 154 642 C
151.2 643 L
f
190 623 m
190 645.727 184.8882 667.0468 176 683 C
173.4 681.6 L
182.0167 666.1341 187 645.1854 187 623 C
190 623 L
f
229.5 687.1 m
243.4125 684.4873 258.4713 683 272 683 C
272 686 L
258.3026 686 243.3125 687.5 230 690 C
229.5 687.1 L
f
233 611 m
269.0146 614.1509 286 627.9507 286 647 c
286 657.4427 276.0924 665 255 665 c
241.4771 665 227.9338 663.3397 214 660 C
214.7 657.1 L
228.1815 660.3313 241.374 662 255 662 c
274.1275 662 283 655.6994 283 647 c
283 629.4168 266.6116 616.9669 232.7 614 C
233 611 L
f
u
150.6666 543.8303 m
144.811 527.8142 135.6425 517.997 130.8334 517.997 c
124.6451 517.997 117.0001 530.6086 117.0001 549.997 c
117.0001 558.6541 118.859 571.0824 122.0834 582.5803 C
116.6667 583.497 L
113.3428 571.6729 111.5 559.3729 111.5 549.997 c
111.5 526.8146 121.4222 512.3303 130.8334 512.3303 c
138.0759 512.3303 148.845 523.3385 155.6667 541.997 C
150.6666 543.8303 L
f
150.1333 444.6606 m
144.6152 429.5676 135.9432 419.994 131.6667 419.994 c
126.0876 419.994 119.0001 431.7761 119.0001 449.9939 c
119.0001 458.5385 121.0278 471.5521 124.2668 482.8606 C
116.3333 483.9939 L
112.9171 472.1121 111 459.4997 111 449.9939 c
111 426.3445 121.5186 411.6605 131.6667 411.6605 c
139.2864 411.6605 150.3229 422.8191 157.3334 441.9939 C
150.1333 444.6606 L
f
149.6 345.5 m
144.4193 331.33 136.2438 322 132.5 322 c
127.53 322 121 332.9527 121 350 c
121 358.432 123.1963 372.0308 126.45 383.15 C
116 384.5 L
112.4914 372.5605 110.5 359.6358 110.5 350 c
110.5 325.8835 121.6149 311 132.5 311 c
140.4968 311 151.8007 322.309 159 342 C
149.6 345.5 L
f
149.0666 246.3303 m
144.2235 233.0835 136.5445 223.997 133.3334 223.997 c
128.9725 223.997 123.0001 234.1202 123.0001 249.997 c
123.0001 258.3164 125.3651 272.5005 128.6334 283.4303 C
115.6667 284.997 L
112.0657 272.9997 110 259.7626 110 249.997 c
110 225.4133 121.7113 210.3303 133.3334 210.3303 c
141.7073 210.3303 153.2787 221.7897 160.6667 241.997 C
149.0666 246.3303 L
f
148.5333 147.1697 m
144.0276 134.8459 136.8451 126.003 134.1666 126.003 c
130.4149 126.003 124.9999 135.2968 124.9999 150.0031 c
124.9999 158.2099 127.5336 172.9793 130.8166 183.7197 C
115.3333 185.503 L
111.64 173.4481 109.5 159.8986 109.5 150.0031 c
109.5 124.9524 121.8077 109.6697 134.1666 109.6697 c
142.9178 109.6697 154.7565 121.2795 162.3333 142.0031 C
148.5333 147.1697 L
f
U
u
190.5 522.4969 m
190.5 545.6385 185.4802 566.9638 176.5 583.497 C
171.4333 581.597 L
180.0937 565.74 184.9999 544.8307 184.9999 522.4969 C
190.5 522.4969 L
f
191 421.9939 m
191 445.55 186.0722 466.8809 177 483.9939 C
169.4665 481.5939 L
178.1707 465.3459 182.9999 444.4761 182.9999 421.9939 C
191 421.9939 L
f
191.5 321.5 m
191.5 345.4707 186.6642 366.8071 177.5 384.5 C
167.5 381.6 L
176.2479 364.9609 181 344.1306 181 321.5 C
191.5 321.5 L
f
192 220.9969 m
192 245.3822 187.2563 266.7241 178 284.997 C
165.5332 281.597 L
174.3249 264.5668 178.9999 243.776 178.9999 220.9969 C
192 220.9969 L
f
192.5 120.5031 m
192.5 145.3029 187.8482 166.6504 178.5 185.503 C
163.5667 181.6031 L
172.4021 164.1819 177.0001 143.4305 177.0001 120.5031 C
192.5 120.5031 L
f
U
115 86 m
111.2143 73.8873 109 60.0255 109 50 c
109 24.4822 121.9041 9 135 9 c
144.1283 9 156.2345 20.7602 164 42 C
148 48 L
143.8318 36.5993 137.1458 28 135 28 c
131.8574 28 127 36.4643 127 50 c
127 58.0943 129.7024 73.449 133 84 C
115 86 L
f
161.6 81.6 m
170.4791 63.7878 175 43.0758 175 20 C
193 20 L
193 45.2144 188.4403 66.5674 179 86 C
161.6 81.6 L
f
u
228.8166 585.4302 m
243.0238 582.9376 258.7856 581.4969 272.5 581.4969 C
272.5 586.6636 L
258.6736 586.6636 243.0104 588.122 229.5 590.497 C
228.8166 585.4302 L
f
228.1333 483.7605 m
242.6351 481.3878 259.0998 479.9938 273 479.9938 C
273 487.3273 L
259.0446 487.3273 242.7083 488.744 229 490.9939 C
228.1333 483.7605 L
f
227.45 382.1 m
242.2464 379.8474 259.414 378.5 273.5 378.5 C
273.5 388 L
259.4156 388 242.4062 389.375 228.5 391.5 C
227.45 382.1 L
f
226.7666 280.4302 m
241.8577 278.2977 259.7283 276.9969 274 276.9969 C
274 288.6636 L
259.7867 288.6636 242.1041 289.997 228 291.997 C
226.7666 280.4302 L
f
226.0833 178.7698 m
241.469 176.7572 260.0425 175.5031 274.5 175.5031 C
274.5 189.3364 L
260.1576 189.3364 241.8021 190.628 227.5 192.503 C
226.0833 178.7698 L
f
U
u
232.3333 510.4969 m
269.5978 513.7572 286.5 527.2805 286.5 546.4969 c
286.5 557.7478 276.4875 565.497 255 565.497 c
241.4708 565.497 227.567 563.8234 213.5 560.497 C
214.5833 555.4636 L
228.1566 558.6738 241.6261 560.3302 255 560.3302 c
273.0229 560.3302 280.9999 554.6062 280.9999 546.4969 c
280.9999 530.2505 265.492 518.6216 231.6833 515.6637 C
232.3333 510.4969 L
f
231.6666 409.9939 m
270.181 413.3635 287 426.6103 287 445.9939 c
287 458.053 276.8826 465.9939 255 465.9939 c
241.4645 465.9939 227.2003 464.3071 213 460.9939 C
214.4667 453.8271 L
228.1317 457.0164 241.8783 458.6605 255 458.6605 c
271.9183 458.6605 278.9999 453.513 278.9999 445.9939 c
278.9999 431.0841 264.3723 420.2763 230.6666 417.3273 C
231.6666 409.9939 L
f
231 309.5 m
270.7642 312.979 287.5 325.9494 287.5 345.5 c
287.5 358.3672 277.2776 366.5 255 366.5 c
241.4582 366.5 226.8335 364.7999 212.5 361.5 C
214.35 352.2 L
228.1069 355.3682 242.1304 357 255 357 c
270.8137 357 277 352.4291 277 345.5 c
277 331.9268 263.2528 321.94 229.65 319 C
231 309.5 L
f
230.3333 208.9969 m
271.3475 212.5854 288 225.2792 288 244.9969 c
288 258.6723 277.6727 266.997 255 266.997 c
241.4519 266.997 226.4668 265.2837 212 261.997 C
214.2333 250.5636 L
228.082 253.7107 242.3826 255.3302 255 255.3302 c
269.7091 255.3302 274.9999 251.3359 274.9999 244.9969 c
274.9999 232.7604 262.1332 223.5947 228.6333 220.6637 C
230.3333 208.9969 L
f
229.6667 108.5031 m
271.9306 112.2009 288.5 124.6182 288.5 144.5031 c
288.5 158.9866 278.0678 167.503 255 167.503 c
241.4456 167.503 226.1 165.7765 211.5 162.503 C
214.1167 148.9364 L
228.0571 152.0626 242.6347 153.6698 255 153.6698 c
268.6046 153.6698 273.0001 150.252 273.0001 144.5031 c
273.0001 133.6032 261.0137 125.2584 227.6167 122.3363 C
229.6667 108.5031 L
f
U
229 8 m
272.5139 11.8072 289 23.948 289 44 c
289 59.2917 278.4629 68 255 68 c
241.4393 68 225.7333 66.2602 211 63 C
214 47.3 L
228.0323 50.4051 242.8869 52 255 52 c
267.5 52 271 49.1588 271 44 c
271 34.4368 259.8941 26.9131 226.6 24 C
229 8 L
f
225.4 77.1 m
241.0803 75.2075 260.3568 74 275 74 C
275 90 L
260.5287 90 241.5 91.25 227 93 C
225.4 77.1 L
f
u
469.6999 584.7803 m
476.3745 578.7052 481.6226 573.0141 487.55 565.5803 C
491.5 568.6636 L
485.599 576.0635 480.2624 581.8579 473.3333 588.1637 C
469.6999 584.7803 L
f
468.4999 484.6605 m
475.215 478.3225 480.5322 472.4218 486.4999 464.9605 C
492 469.3273 L
486.0104 476.8145 480.6318 482.7548 473.6667 489.3273 C
468.4999 484.6605 L
f
467.3 384.55 m
474.0555 377.949 479.442 371.8388 485.45 364.35 C
492.5 370 L
486.4219 377.5746 481.0011 383.6607 474 390.5 C
467.3 384.55 L
f
466.0999 284.4303 m
472.896 277.5663 478.3517 271.2465 484.3999 263.7303 C
493 270.6636 L
486.8334 278.3255 481.3705 284.5576 474.3333 291.6637 C
466.0999 284.4303 L
f
464.9 184.3197 m
471.7365 177.1928 477.2615 170.6634 483.35 163.1197 C
493.5 171.3364 L
487.2448 179.0856 481.7399 185.4635 474.6667 192.8364 C
464.9 184.3197 L
f
U
u
85.3333 582.6636 m
38.6667 582.6636 L
38.6667 594.1636 L
33.3333 594.1636 L
33.3333 582.6636 L
14.6667 582.6636 L
14.6667 577.6636 L
33.3333 577.6636 L
33.3333 515.1636 L
38.6667 515.1636 L
38.6667 577.6636 L
85.3333 577.6636 L
85.3333 582.6636 L
f
85.6667 483.3273 m
40.3334 483.3273 L
40.3334 494.3273 L
32.6666 494.3273 L
32.6666 483.3273 L
14.3333 483.3273 L
14.3333 476.3272 L
32.6666 476.3272 L
32.6666 415.3273 L
40.3334 415.3273 L
40.3334 476.3272 L
85.6667 476.3272 L
85.6667 483.3273 L
f
86 384 m
42 384 L
42 394.5 L
32 394.5 L
32 384 L
14 384 L
14 375 L
32 375 L
32 315.5 L
42 315.5 L
42 375 L
86 375 L
86 384 L
f
86.3333 284.6636 m
43.6667 284.6636 L
43.6667 294.6636 L
31.3333 294.6636 L
31.3333 284.6636 L
13.6667 284.6636 L
13.6667 273.6636 L
31.3333 273.6636 L
31.3333 215.6636 L
43.6667 215.6636 L
43.6667 273.6636 L
86.3333 273.6636 L
86.3333 284.6636 L
f
86.6667 185.3364 m
45.3333 185.3364 L
45.3333 194.8364 L
30.6667 194.8364 L
30.6667 185.3364 L
13.3333 185.3364 L
13.3333 172.3364 L
30.6667 172.3364 L
30.6667 115.8364 L
45.3333 115.8364 L
45.3333 172.3364 L
86.6667 172.3364 L
86.6667 185.3364 L
f
U
u
328.8166 586.4302 m
343.0238 583.9376 358.7856 582.4969 372.5 582.4969 C
372.5 587.6636 L
358.6736 587.6636 343.0104 589.122 329.5 591.497 C
328.8166 586.4302 L
f
328.1333 484.7605 m
342.6351 482.3878 359.0998 480.9938 373 480.9938 C
373 488.3273 L
359.0446 488.3273 342.7083 489.744 329 491.9939 C
328.1333 484.7605 L
f
327.45 383.1 m
342.2464 380.8474 359.414 379.5 373.5 379.5 C
373.5 389 L
359.4156 389 342.4062 390.375 328.5 392.5 C
327.45 383.1 L
f
326.7666 281.4302 m
341.8577 279.2977 359.7283 277.9969 374 277.9969 C
374 289.6636 L
359.7867 289.6636 342.1041 290.997 328 292.997 C
326.7666 281.4302 L
f
326.0833 179.7698 m
341.469 177.7572 360.0425 176.5031 374.5 176.5031 C
374.5 190.3364 L
360.1576 190.3364 341.8021 191.628 327.5 193.503 C
326.0833 179.7698 L
f
U
u
313.8334 511.3303 m
380.6667 564.4969 L
380.6667 569.997 L
316.6667 569.997 L
316.6667 564.8302 L
378.8333 564.8302 L
377.75 568.7469 L
310.5 515.5803 L
313.8334 511.3303 L
f
314.6667 410.6605 m
381.3334 461.9938 L
381.3334 469.9939 L
316.3333 469.9939 L
316.3333 462.6604 L
378.6667 462.6604 L
377.4 468.1939 L
310 416.8606 L
314.6667 410.6605 L
f
315.5 310 m
382 359.5 L
382 370 L
316 370 L
316 360.5 L
378.5 360.5 L
377.05 367.65 L
309.5 318.15 L
315.5 310 L
f
316.3334 209.3303 m
382.6667 256.9969 L
382.6667 269.997 L
315.6667 269.997 L
315.6667 258.3302 L
378.3333 258.3302 L
376.7 267.0969 L
309 219.4303 L
316.3334 209.3303 L
f
317.1666 108.6697 m
383.3333 154.5031 L
383.3333 170.0031 L
315.3333 170.0031 L
315.3333 156.1698 L
378.1667 156.1698 L
376.35 166.5531 L
308.5 120.7197 L
317.1666 108.6697 L
f
U
u
388.6 518.6137 m
385.7314 517.6236 381.1442 516.8303 378.3333 516.8303 c
369.5899 516.8303 367.6773 518.3728 365.75 528.0803 c
363.6383 538.7056 359.6557 542.3303 352.3333 542.3303 c
345.0896 542.3303 344 541.8824 310.5 515.5803 C
313.8334 511.3303 L
346.2039 536.9209 346.6368 537.1636 351.6667 537.1636 c
356.4553 537.1636 358.6155 534.7147 360.4166 525.6636 c
362.6148 514.6089 366.5905 511.4969 377.6667 511.4969 C
381.2345 511.4969 386.6129 512.4857 389.5 513.4969 C
388.6 518.6137 L
f
389 420.3273 m
385.9551 419.3728 381.5904 418.6607 378.6667 418.6607 c
370.2622 418.6607 368.6478 419.9696 366.8001 429.0606 c
364.7604 439.0777 360.5889 442.6606 352.6667 442.6606 c
344.7416 442.6606 343.4375 442.1398 310 416.8606 C
314.6667 410.6605 L
346.5328 435.0918 346.9611 435.3271 351.3333 435.3271 c
355.6023 435.3271 357.3767 433.3355 359.1333 424.7272 c
361.2664 414.2606 365.7087 410.9939 377.3333 410.9939 C
381.1872 410.9939 386.7878 411.9474 390 412.9939 C
389 420.3273 L
f
389.4 322.05 m
386.1788 321.1309 382.0365 320.5 379 320.5 c
370.9345 320.5 369.6182 321.5753 367.85 330.05 c
365.8825 339.459 361.5221 343 353 343 c
344.3937 343 342.875 342.4062 309.5 318.15 C
315.5 310 L
346.8616 333.272 347.2854 333.5 351 333.5 c
354.7493 333.5 356.1379 331.9655 357.85 323.8 c
359.9182 313.9215 364.8269 310.5 377 310.5 C
381.1398 310.5 386.9627 311.4182 390.5 312.5 C
389.4 322.05 L
f
389.8 223.7637 m
386.4026 222.8801 382.4827 222.3303 379.3333 222.3303 c
371.6069 222.3303 370.5887 223.1721 368.9 231.0303 c
367.0046 239.8312 362.4553 243.3303 353.3333 243.3303 c
344.0458 243.3303 342.3125 242.6636 309 219.4303 C
316.3334 209.3303 L
347.1905 231.443 347.6097 231.6636 350.6667 231.6636 c
353.8963 231.6636 354.8991 230.5863 356.5666 222.8636 c
358.5698 213.5733 363.9451 209.9969 376.6667 209.9969 C
381.0925 209.9969 387.1376 210.8799 391 211.9969 C
389.8 223.7637 L
f
390.2 125.4863 m
386.6262 124.6383 382.9288 124.1697 379.6667 124.1697 c
372.2791 124.1697 371.5591 124.7779 369.95 132.0197 c
368.1266 140.2124 363.3885 143.6697 353.6667 143.6697 c
343.6979 143.6697 341.75 142.9301 308.5 120.7197 C
317.1666 108.6697 L
347.5194 129.6232 347.934 129.8365 350.3333 129.8365 c
353.0434 129.8365 353.6603 129.2164 355.2834 121.9364 c
357.2216 113.2342 363.0634 109.5031 376.3333 109.5031 C
381.0452 109.5031 387.3126 110.3508 391.5 111.5031 C
390.2 125.4863 L
f
U
325.4 78.1 m
341.0803 76.2075 360.3568 75 375 75 C
375 91 L
360.5287 91 341.5 92.25 327 94 C
325.4 78.1 L
f
318 8 m
384 52 L
384 70 L
315 70 L
315 54 L
378 54 L
376 66 L
308 22 L
318 8 L
f
390.6 27.2 m
386.85 26.3875 383.375 26 380 26 c
372.9515 26 372.5296 26.3746 371 33 c
369.2488 40.5846 364.3218 44 354 44 c
343.35 44 341.1875 43.1875 308 22 C
318 8 L
347.8483 27.7941 348.2583 28 350 28 c
352.1904 28 352.4215 27.8372 354 21 c
355.8732 12.886 362.1816 9 376 9 c
380.9979 9 387.4875 9.8125 392 11 C
390.6 27.2 L
f
u
61 508.6636 m
79.1326 510.2496 90.5 521.5829 90.5 537.1636 c
90.5 550.9635 78.017 560.8303 55 560.8303 c
28.2201 560.8303 9.5 545.3422 9.5 529.1636 c
9.5 518.3575 16.6773 511.4969 28.1667 511.4969 c
45.3772 511.4969 62.8192 530.4237 71.3334 571.9969 C
66.1666 572.9136 L
57.6708 531.2496 41.4295 516.497 28.1667 516.497 c
19.9675 516.497 14.8334 521.2959 14.8334 529.1636 c
14.8334 542.2081 30.8725 555.8302 55 555.8302 c
73.862 555.8302 85.1666 548.6426 85.1666 537.1636 c
85.1666 524.0761 75.5578 515.0348 60.3333 513.6636 C
61 508.6636 L
f
61 408.3272 m
79.3648 409.9336 91 421.5317 91 437.3272 c
91 451.5466 78.3934 461.6606 55 461.6606 c
27.8018 461.6606 9 446.0308 9 429.3272 c
9 417.8932 16.2844 410.9939 28.3333 410.9939 c
46.34 410.9939 63.971 429.7315 72.6667 470.9938 C
65.3333 472.3272 L
56.9353 432.1941 41.6119 417.994 28.3333 417.994 c
21.1874 417.994 16.6668 422.2273 16.6668 429.3272 c
16.6668 441.8941 31.8685 454.6605 55 454.6605 c
72.9857 454.6605 83.3332 447.9489 83.3332 437.3272 c
83.3332 425.163 74.317 416.6529 60.0666 415.3273 C
61 408.3272 L
f
61 308 m
79.597 309.6267 91.5 321.4897 91.5 337.5 c
91.5 352.1388 78.7697 362.5 55 362.5 c
27.3836 362.5 8.5 346.7286 8.5 329.5 c
8.5 317.438 15.8915 310.5 28.5 310.5 c
47.3027 310.5 65.1228 329.0484 74 370 C
64.5 371.75 L
56.1998 333.1478 41.7943 319.5 28.5 319.5 c
22.4071 319.5 18.5 323.1678 18.5 329.5 c
18.5 341.5893 32.8643 353.5 55 353.5 c
72.1094 353.5 81.5 347.2643 81.5 337.5 c
81.5 326.2591 73.0762 318.28 59.8 317 C
61 308 L
f
61 207.6636 m
79.8291 209.3107 92 221.4385 92 237.6636 c
92 252.7219 79.146 263.3303 55 263.3303 c
26.9653 263.3303 8 247.4172 8 229.6636 c
8 216.9737 15.4985 209.9969 28.6667 209.9969 c
48.2655 209.9969 66.2747 228.3562 75.3334 268.9969 C
63.6666 271.1636 L
55.4642 234.0923 41.9767 220.997 28.6667 220.997 c
23.627 220.997 20.3334 224.0993 20.3334 229.6636 c
20.3334 241.2754 33.8603 252.3302 55 252.3302 c
71.2331 252.3302 79.6666 246.5706 79.6666 237.6636 c
79.6666 227.3461 71.8354 219.8981 59.5333 218.6636 C
61 207.6636 L
f
61 107.3364 m
80.0612 109.0039 92.5 121.3965 92.5 137.8364 c
92.5 153.3141 79.5223 164.1697 55 164.1697 c
26.5471 164.1697 7.5 148.1149 7.5 129.8364 c
7.5 116.5186 15.1056 109.503 28.8333 109.503 c
49.2283 109.503 67.4264 127.6731 76.6666 168.0031 C
62.8334 170.5864 L
54.7287 135.046 42.1591 122.503 28.8333 122.503 c
24.8468 122.503 22.1666 125.0397 22.1666 129.8364 c
22.1666 140.9706 34.8561 151.1697 55 151.1697 c
70.3569 151.1697 77.8334 145.886 77.8334 137.8364 c
77.8334 128.4421 70.5947 121.5252 59.2667 120.3363 C
61 107.3364 L
f
U
87 86 m
47 86 L
47 95 L
30 95 L
30 86 L
13 86 L
13 71 L
30 71 L
30 16 L
47 16 L
47 71 L
87 71 L
87 86 L
f
24 30 m
24 40.6566 35.8521 50 55 50 c
69.4805 50 76 45.1923 76 38 c
76 29.5291 69.3539 23.1434 59 22 C
61 7 L
80.2934 8.6879 93 21.3453 93 38 c
93 53.8972 79.8987 65 55 65 c
26.1288 65 7 48.8035 7 30 c
7 16.0543 14.7127 9 29 9 c
50.1911 9 68.5783 26.9809 78 67 C
62 70 L
53.9932 35.9906 42.3415 24 29 24 c
26.0667 24 24 25.9712 24 30 c
f
470.9 684.9 m
477.5341 679.0879 482.7129 673.6064 488.6 666.2 C
491 668 L
485.1875 675.3125 479.893 680.961 473 687 C
470.9 684.9 L
f
463.7 84.2 m
470.577 76.8101 476.1712 70.0711 482.3 62.5 C
494 72 L
487.6563 79.8366 482.1093 86.3604 475 94 C
463.7 84.2 L
f
413 629 m
413 642.1885 428.2804 653 456 653 c
472.7255 653 483 645.1146 483 636 c
483 622.8266 474.624 614.4895 457.6 613 c
458 610 L
475.9808 611.5732 486 620.8276 486 636 c
486 646.7356 474.705 656 456 656 c
425.8621 656 410 643.8621 410 629 c
410 619.9498 418.7561 612 428 612 c
437.3437 612 441 615.3568 441 625 C
441 676 L
468 676 L
468 679 L
441 679 L
441 694 L
438 694 L
438 679 L
416 679 L
416 676 L
438 676 L
438 625 l
438 617.1495 435.8505 615 428 615 c
420.2897 615 413 621.8037 413 629 c
f
u
458 509.6636 m
476.4843 511.2808 486.5 520.5443 486.5 535.9969 c
486.5 547.0145 474.9278 556.4969 456.1667 556.4969 c
425.7356 556.4969 409.5 544.0819 409.5 528.9969 c
409.5 519.5166 418.2903 511.4969 428 511.4969 c
438.675 511.4969 442.6667 515.1155 442.6667 526.1636 C
442.6667 574.3302 L
468.6667 574.3302 L
468.6667 579.3303 L
442.6667 579.3303 L
442.6667 594.1636 L
437.3333 594.1636 L
437.3333 579.3303 L
415.5 579.3303 L
415.5 574.3302 L
437.3333 574.3302 L
437.3333 526.1636 l
437.3333 518.4251 435.3931 516.497 428.1667 516.497 c
421.3352 516.497 415.0001 522.4633 415.0001 529.1636 c
415.0001 541.1345 429.6128 551.3302 456.1667 551.3302 c
471.6057 551.3302 481 544.0839 481 535.6636 c
481 523.682 473.4713 516.2333 457.2166 514.747 C
458 509.6636 L
f
458 409.3272 m
476.9878 410.9885 487 420.261 487 435.9939 c
487 447.2934 475.1506 456.9939 456.3333 456.9939 c
425.6091 456.9939 409 444.3017 409 428.9939 c
409 419.0834 417.8244 410.9939 428 410.9939 c
440.0064 410.9939 444.3334 414.8742 444.3334 427.3273 C
444.3334 472.6605 L
469.3334 472.6605 L
469.3334 479.6606 L
444.3334 479.6606 L
444.3334 494.3272 L
436.6666 494.3272 L
436.6666 479.6606 L
415 479.6606 L
415 472.6605 L
436.6666 472.6605 L
436.6666 427.3273 l
436.6666 419.7008 434.9358 417.994 428.3333 417.994 c
422.3807 417.994 417.0001 423.1229 417.0001 429.3272 c
417.0001 440.0804 430.9453 449.6605 456.3333 449.6605 c
470.486 449.6605 478.9999 443.0532 478.9999 435.3272 c
478.9999 424.5374 472.3185 417.9771 456.8333 416.494 C
458 409.3272 L
f
458 309 m
477.4913 310.7054 487.5 319.9869 487.5 336 c
487.5 347.5814 475.3734 357.5 456.5 357.5 c
425.4826 357.5 408.5 344.5306 408.5 329 c
408.5 318.6595 417.3587 310.5 428 310.5 c
441.3376 310.5 446 314.642 446 328.5 C
446 371 L
470 371 L
470 380 L
446 380 L
446 394.5 L
436 394.5 L
436 380 L
414.5 380 L
414.5 371 L
436 371 L
436 328.5 l
436 320.9854 434.4785 319.5 428.5 319.5 c
423.4262 319.5 419 323.7915 419 329.5 c
419 339.0356 432.2776 348 456.5 348 c
469.3663 348 477 342.0317 477 335 c
477 325.4019 471.1659 319.7299 456.45 318.25 C
458 309 L
f
458 208.6636 m
477.9947 210.4131 488 219.7037 488 235.9969 c
488 247.8603 475.5962 257.9969 456.6667 257.9969 c
425.3562 257.9969 408 244.7504 408 228.9969 c
408 218.2263 416.8928 209.9969 428 209.9969 c
442.6689 209.9969 447.6667 214.4007 447.6667 229.6636 C
447.6667 269.3302 L
470.6667 269.3302 L
470.6667 280.3303 L
447.6667 280.3303 L
447.6667 294.6636 L
435.3333 294.6636 L
435.3333 280.3303 L
414 280.3303 L
414 269.3302 L
435.3333 269.3302 L
435.3333 229.6636 l
435.3333 222.261 434.0212 220.997 428.6667 220.997 c
424.4717 220.997 421.0001 224.4511 421.0001 229.6636 c
421.0001 237.9816 433.6101 246.3302 456.6667 246.3302 c
468.2466 246.3302 475 241.001 475 234.6636 c
475 226.2573 470.0132 221.4738 456.0666 219.997 C
458 208.6636 L
f
458 108.3364 m
478.4982 110.1299 488.5 119.4296 488.5 136.003 c
488.5 148.1484 475.819 158.503 456.8333 158.503 c
425.2297 158.503 407.5 144.9794 407.5 129.003 c
407.5 117.8023 416.427 109.503 428 109.503 c
444.0001 109.503 449.3333 114.1686 449.3333 130.8363 C
449.3333 167.6697 L
471.3333 167.6697 L
471.3333 180.6697 L
449.3333 180.6697 L
449.3333 194.8364 L
434.6667 194.8364 L
434.6667 180.6697 L
413.5 180.6697 L
413.5 167.6697 L
434.6667 167.6697 L
434.6667 130.8363 l
434.6667 123.5457 433.5639 122.503 428.8333 122.503 c
425.5171 122.503 423 125.1198 423 129.8364 c
423 136.9368 434.9424 144.6697 456.8333 144.6697 c
467.1269 144.6697 473.0001 139.9796 473.0001 134.3364 c
473.0001 127.1218 468.8606 123.2266 455.6833 121.753 C
458 108.3364 L
f
U
458 8 m
479.0017 9.8376 489 19.1463 489 36 c
489 48.4273 476.0418 59 457 59 c
425.1032 59 407 45.1992 407 29 c
407 17.3692 415.9612 9 428 9 c
445.3315 9 451 13.9273 451 32 c
451 66 L
472 66 L
472 81 L
451 81 L
451 95 L
434 95 L
434 81 L
413 81 L
413 66 L
434 66 L
434 32 l
434 24.8213 433.1065 24 429 24 c
426.5626 24 425 25.7794 425 30 c
425 35.8828 436.2749 43 457 43 c
466.0072 43 471 38.9489 471 34 c
471 27.9772 467.7079 24.9704 455.3 23.5 C
458 8 L
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
