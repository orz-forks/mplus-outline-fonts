%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (2422.eps)
%%CreationDate: (2/16/04) (9:11 AM)
%%BoundingBox: 0 0 500 500
%%HiResBoundingBox: 0 0 500 500
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 256.5 244.5 256.5
%AI3_TileBox: -41.5 -119.5 534.5 642.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -139.5 520.5 1 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -119.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
1 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
0 Ap
0 O
0 g
132.8 410.4 m
140.0955 410.4 147.7458 418.4851 152.4 436.8 C
147.4 438.2 L
143.5303 422.9721 137.3643 415.8 132.8 415.8 c
126.0487 415.8 116.4 430.41 116.4 451.2 c
116.4 461.528 118.2719 472.8415 121.4 483.5 C
116.2 484.7 L
112.9343 473.5724 111.2 462.0169 111.2 451.2 c
111.2 426.6787 122.7484 410.4 132.8 410.4 c
f
190.8 423 m
190.8 447.8674 185.2437 468.9357 174.8 483.9 C
170.4 481 L
180.2315 466.9129 185.6 446.7977 185.6 423 C
190.8 423 L
f
132.7 310 m
140.4564 310 148.8301 318.63 153.6 337.4 C
146.5 339.4 L
142.837 324.9855 136.8493 317.8 132.8 317.8 c
126.9707 317.8 118.5 331.291 118.5 351.2 c
118.5 361.3895 120.4482 373.3016 123.5 383.7 C
115.8 385.1 L
112.554 374.0395 110.8 362.1044 110.8 351.2 c
110.8 325.5088 122.0154 310 132.7 310 c
f
132.6 209.6 m
140.8173 209.6 149.9145 218.7749 154.8 238 C
145.6 240.6 L
142.1437 226.999 136.3343 219.8 132.8 219.8 c
127.8927 219.8 120.6 232.1721 120.6 251.2 c
120.6 261.251 122.6246 273.7617 125.6 283.9 C
115.4 285.5 L
112.1737 274.5066 110.4 262.192 110.4 251.2 c
110.4 224.3389 121.2825 209.6 132.6 209.6 c
f
132.5 109.2 m
141.1782 109.2 150.9988 118.9198 156 138.6 C
144.7 141.8 L
141.4505 129.0124 135.8194 121.8 132.8 121.8 c
128.8147 121.8 122.7 133.0531 122.7 151.2 c
122.7 161.1125 124.8009 174.2219 127.7 184.1 C
115 185.9 L
111.7934 174.9738 110 162.2795 110 151.2 c
110 123.169 120.5495 109.2 132.5 109.2 c
f
191.2 322.7 m
191.2 347.7721 185.6196 369.2702 175.2 384.2 C
168.6 380.6 L
178.1485 366.9184 183.5 346.339 183.5 322.7 C
191.2 322.7 L
f
191.6 222.4 m
191.6 247.6769 185.9956 269.6046 175.6 284.5 C
166.8 280.2 L
176.0655 266.9239 181.4 245.8804 181.4 222.4 C
191.6 222.4 L
f
192 122.1 m
192 147.5816 186.3715 169.9391 176 184.8 C
165 179.8 L
173.9824 166.9295 179.3 145.4217 179.3 122.1 C
192 122.1 L
f
132.8 23.8 m
129.7367 23.8 124.8 33.9342 124.8 51.2 c
124.8 60.974 126.9773 74.682 129.8 84.3 C
114.6 86.3 L
111.4131 75.4409 109.6 62.3671 109.6 51.2 c
109.6 21.9992 119.8166 8.8 132.4 8.8 c
141.5391 8.8 152.0832 19.0647 157.2 39.2 C
143.8 43 L
140.7572 31.0259 135.3044 23.8 132.8 23.8 c
f
163.2 79.4 m
171.8994 66.935 177.2 44.9631 177.2 21.8 C
192.4 21.8 L
192.4 47.4864 186.7475 70.2736 176.4 85.1 C
163.2 79.4 L
f
272 488 m
258 488 242.25 489.35 228.8 491.6 C
227.9 486.6 L
241.8366 484.2686 257.9581 483 272 483 C
272 488 L
f
253.4 460.8 m
273.3522 460.8 280.8 454.6208 280.8 443 c
280.8 428.1112 266.2581 416.3011 233.1 413.4 C
233.8 408.2 L
269.4411 411.3183 286 425.061 286 443 c
286 457.7555 276.1421 466 253.4 466 c
239.6499 466 228.3564 463.7083 212 457.6 C
213.8 452.7 L
229.5553 458.5838 240.302 460.8 253.4 460.8 c
f
227.1 384.8 m
241.1066 382.5306 258.3321 381.2 272.5 381.2 C
272.5 388.3 L
258.5608 388.3 241.7969 389.6812 228.3 391.9 C
227.1 384.8 L
f
226.3 283 m
240.3766 280.7926 258.7061 279.4 273 279.4 C
273 288.6 L
259.1216 288.6 241.3437 290.0125 227.8 292.2 C
226.3 283 L
f
225.5 181.2 m
239.6467 179.0546 259.0801 177.6 273.5 177.6 C
273.5 188.9 L
259.6824 188.9 240.8906 190.3437 227.3 192.5 C
225.5 181.2 L
f
253.4 358.5 m
275.3617 358.5 278.7 350.6733 278.7 342.7 c
278.7 328.8514 265.2912 318.0952 232.2 315.2 C
233.2 307.9 L
269.8453 311.1061 286.3 324.6316 286.3 342.7 c
286.3 357.4948 276.2996 365.8 253.4 365.8 c
239.6286 365.8 228.1788 363.5167 211.8 357.4 C
214.3 350.5 L
229.983 356.3568 240.4636 358.5 253.4 358.5 c
f
253.4 256.2 m
273.0377 256.2 276.6 250.0592 276.6 242.4 c
276.6 229.5917 264.3243 219.8893 231.3 217 C
232.6 207.6 L
270.2495 210.894 286.6 224.2021 286.6 242.4 c
286.6 257.234 276.4571 265.6 253.4 265.6 c
239.6072 265.6 228.0012 263.325 211.6 257.2 C
214.8 248.3 L
230.4108 254.1298 240.6253 256.2 253.4 256.2 c
f
253.4 153.9 m
270.7138 153.9 274.5 149.4451 274.5 142.1 c
274.5 130.332 263.3575 121.6834 230.4 118.8 C
232 107.3 L
270.6538 110.6818 286.9 123.7727 286.9 142.1 c
286.9 156.9733 276.6147 165.4 253.4 165.4 c
239.5859 165.4 227.8237 163.1334 211.4 157 C
215.3 146.1 L
230.8385 151.9029 240.7869 153.9 253.4 153.9 c
f
224.7 79.4 m
238.9167 77.3167 259.4541 75.8 274 75.8 C
274 89.2 L
260.2432 89.2 240.4375 90.675 226.8 92.8 C
224.7 79.4 L
f
253.4 65.2 m
239.5646 65.2 227.6461 62.9418 211.2 56.8 C
215.8 43.9 L
231.2663 49.6759 240.9486 51.6 253.4 51.6 c
268.3899 51.6 272.4 48.831 272.4 41.8 c
272.4 31.0722 262.3906 23.4776 229.5 20.6 C
231.4 7 L
271.058 10.4697 287.2 23.3433 287.2 41.8 c
287.2 56.7126 276.7722 65.2 253.4 65.2 c
f
*u
1 D
9.2 428.8 m
9.2 418.433 16.847 411.2 26.6 411.2 c
40.1598 411.2 56.4896 426.5145 66.3401 454.9499 C
80.0547 452.691 86 446.0568 86 436.8 c
86 424.2341 74.9387 413.2719 60.4 412 C
61 407.2 L
78.1027 408.6963 90.8 422.0404 90.8 436.8 c
90.8 448.1179 83.3302 456.5728 67.8237 459.4888 C
68.7569 462.527 69.6215 465.6934 70.4 469 C
65.6 470 L
64.7952 466.5816 63.8942 463.3169 62.9172 460.1974 C
60.3869 460.46 57.6859 460.6 54.8 460.6 c
49.082 460.6 43.799 459.9861 39 458.8735 C
39 476.2 L
85.8 476.2 L
85.8 481 L
39 481 L
39 493.8 L
34 493.8 L
34 481 L
14.2 481 L
14.2 476.2 L
34 476.2 L
34 457.4841 L
18.417 452.3354 9.2 441.3618 9.2 428.8 c
f
0 D
14 428.8 m
14 438.7218 21.1745 447.7701 34 452.4513 C
34 417.8246 L
31.4504 416.6246 28.9574 416 26.6 416 c
19.2991 416 14 421.3832 14 428.8 c
f
54.8 455.8 m
57.1327 455.8 59.313 455.7109 61.3625 455.5469 C
55.418 438.8409 47.1692 427.0288 39 420.8849 C
39 453.9703 L
43.6906 455.1442 48.9711 455.8 54.8 455.8 c
f
*U
*u
1 D
26.6 310.6 m
41.12 310.6 57.3756 325.4131 67.3262 353.2684 C
78.7764 350.8901 83.8 344.9075 83.8 336.8 c
83.8 325.1417 73.9488 315.2403 59.9 313.9 C
61 307.1 L
78.4525 308.6269 91 321.7183 91 336.8 c
91 347.7899 83.8459 356.2521 69.3851 359.5242 C
70.2549 362.3997 71.0665 365.3843 71.8 368.5 C
64.9 369.9 L
64.1397 366.6705 63.2983 363.5823 62.3883 360.6342 C
60.0062 360.8709 57.4828 361 54.8 361 c
49.5904 361 44.7222 360.4829 40.25 359.5279 C
40.25 375 L
85.9 375 L
85.9 381.5 L
40.25 381.5 L
40.25 393.9 L
33.15 393.9 L
33.15 381.5 L
14.1 381.5 L
14.1 375 L
33.15 375 L
33.15 357.5264 L
17.9789 352.1605 8.9 341.1698 8.9 328.8 c
8.9 318.1414 16.722 310.6 26.6 310.6 c
f
0 D
54.8 354.4 m
56.7065 354.4 58.5098 354.3388 60.2128 354.2195 C
54.7918 339.5388 47.5953 329.0187 40.25 323.0787 C
40.25 352.7576 L
44.6031 353.8141 49.4708 354.4 54.8 354.4 c
f
33.15 350.4373 m
33.15 318.7641 L
30.9147 317.8598 28.7154 317.4 26.6 317.4 c
20.4018 317.4 15.9 322.0125 15.9 328.8 c
15.9 337.6214 22.1338 345.7986 33.15 350.4373 C
f
*U
*u
1 D
26.6 210 m
42.0356 210 58.229 224.2819 68.2788 251.4998 C
77.5027 249.047 81.6 243.7468 81.6 236.8 c
81.6 226.0494 72.9588 217.2087 59.4 215.8 C
61 207 L
78.8023 208.5575 91.2 221.3963 91.2 236.8 c
91.2 247.4492 84.3816 255.8834 70.9266 259.4925 C
71.7416 262.2242 72.5059 265.0516 73.2 268 C
64.2 269.8 L
63.4841 266.7589 62.6979 263.8525 61.8532 261.0747 C
59.6252 261.2855 57.2787 261.4 54.8 261.4 c
50.0798 261.4 45.6367 260.9542 41.5 260.1437 C
41.5 273.8 L
86 273.8 L
86 282 L
41.5 282 L
41.5 294 L
32.3 294 L
32.3 282 L
14 282 L
14 273.8 L
32.3 273.8 L
32.3 257.554 L
17.5286 251.9794 8.6 240.9778 8.6 228.8 c
8.6 217.8498 16.597 210 26.6 210 c
f
0 D
54.8 253 m
56.2847 253 57.6944 252.955 59.0457 252.8756 C
54.1775 240.1987 47.9772 230.9619 41.5 225.327 C
41.5 251.5326 L
45.5141 252.4749 49.9631 253 54.8 253 c
f
32.3 248.2993 m
32.3 219.7948 L
30.3717 219.141 28.4621 218.8 26.6 218.8 c
21.5044 218.8 17.8 222.6417 17.8 228.8 c
17.8 236.5092 23.0709 243.7771 32.3 248.2993 C
f
*U
*u
1 D
26.6 109.4 m
42.8881 109.4 58.9986 123.1338 69.1483 149.608 C
76.2142 147.1492 79.4 142.5757 79.4 136.8 c
79.4 126.9571 71.9689 119.1771 58.9 117.7 C
61 106.9 L
79.1521 108.4881 91.4 121.0742 91.4 136.8 c
91.4 147.0964 84.9346 155.467 72.4467 159.3892 C
73.2158 161.9978 73.9392 164.6935 74.6 167.5 C
63.5 169.7 L
62.8285 166.848 62.0958 164.1262 61.315 161.5186 C
59.2461 161.7036 57.0748 161.8 54.8 161.8 c
50.5623 161.8 46.5356 161.4347 42.75 160.7593 C
42.75 172.6 L
86.1 172.6 L
86.1 182.5 L
42.75 182.5 L
42.75 194.1 L
31.45 194.1 L
31.45 182.5 L
13.9 182.5 L
13.9 172.6 L
31.45 172.6 L
31.45 157.5597 L
17.0702 151.7849 8.3 140.7846 8.3 128.8 c
8.3 117.5583 16.472 109.4 26.6 109.4 c
f
0 D
54.8 151.6 m
55.8519 151.6 56.8658 151.5768 57.8448 151.5326 C
53.5615 140.8401 48.321 132.8647 42.75 127.6384 C
42.75 150.3055 L
46.4209 151.1354 50.4513 151.6 54.8 151.6 c
f
31.45 146.0064 m
31.45 120.8829 L
29.8213 120.4344 28.1995 120.2 26.6 120.2 c
22.6071 120.2 19.7 123.2711 19.7 128.8 c
19.7 135.3815 23.9844 141.6971 31.45 146.0064 C
f
*U
*u
1 D
73.9443 59.21 m
74.6766 61.7183 75.3663 64.3083 76 67 C
62.8 69.6 L
62.1723 66.9339 61.4921 64.392 60.7726 61.9516 C
58.8636 62.1121 56.876 62.2 54.8 62.2 c
51.0309 62.2 47.4264 61.8968 44 61.3447 C
44 71.4 L
86.2 71.4 L
86.2 83 L
44 83 L
44 94.2 L
30.6 94.2 L
30.6 83 L
13.8 83 L
13.8 71.4 L
30.6 71.4 L
30.6 57.5328 L
16.6085 51.5662 8 40.588 8 28.8 c
8 17.2667 16.347 8.8 26.6 8.8 c
43.6606 8.8 59.6842 21.9092 69.9337 47.5059 C
74.9011 45.1401 77.2 41.3723 77.2 36.8 c
77.2 27.8647 70.979 21.1454 58.4 19.6 C
61 6.8 L
79.5019 8.4187 91.6 20.7522 91.6 36.8 c
91.6 46.7318 85.5018 55.0037 73.9443 59.21 C
f
0 D
21.6 28.8 m
21.6 34.2269 24.8818 39.525 30.6 43.493 C
30.6 22.0317 L
29.2645 21.7452 27.9289 21.6 26.6 21.6 c
23.7098 21.6 21.6 23.9003 21.6 28.8 c
f
44 30.0256 m
44 49.0802 L
47.3219 49.7994 50.9362 50.2 54.8 50.2 c
55.4268 50.2 56.0156 50.1766 56.614 50.159 C
52.9509 41.43 48.6338 34.7334 44 30.0256 C
f
*U
370.8 488.6 m
356.8 488.6 343.4375 489.8 330 492.2 C
329.1 487.3 L
342.9449 484.8273 356.6228 483.8 370.8 483.8 C
370.8 488.6 L
f
312.6 410.2 m
344.2008 434.9499 345.1947 435.3 350.4 435.3 c
358.5821 435.3 361.3871 433.0054 362 426 c
363.0135 414.4157 367.9284 410.2 379.2 410.2 c
382.5625 410.2 387.5625 410.8875 390 411.6 C
389 416.6 L
386.3875 415.8125 382.1657 415.2 379.2 415.2 c
370.4197 415.2 367.9682 417.6194 367.2 426.4 c
366.378 435.7951 361.6597 440.1616 350.8727 440.288 C
379 462.4 L
379 469 L
317 469 L
317 464 L
372.7471 464 L
309.4 414.2 L
312.6 410.2 L
f
328.3 385.6 m
341.7568 383.1966 356.3874 382.1 371.3 382.1 C
371.3 388.8 L
357.3 388.8 342.9375 390 329.5 392.4 C
328.3 385.6 L
f
327.5 283.9 m
340.5687 281.5659 356.152 280.4 371.8 280.4 C
371.8 289 L
357.8 289 342.4375 290.2 329 292.6 C
327.5 283.9 L
f
326.7 182.2 m
339.3807 179.9352 355.9166 178.7 372.3 178.7 C
372.3 189.2 L
358.3 189.2 341.9375 190.4 328.5 192.8 C
326.7 182.2 L
f
350.4 334.3 m
357.6751 334.3 359.8907 332.4638 360.5 325.5 c
361.4661 314.4574 366.9342 310 379.2 310 c
382.5625 310 387.6625 310.6875 390.1 311.4 C
389 318.3 L
386.4873 317.5375 382.1285 316.9 379.2 316.9 c
370.7832 316.9 368.6428 318.9097 367.9 327.4 c
367.1607 335.8494 362.9799 340.1112 353.301 340.791 C
379.1 360.8 L
379.1 368.9 L
316.9 368.9 L
316.9 362 L
369.1267 362 L
309.3 315.6 L
313.6 310 L
344.5075 333.878 345.5442 334.3 350.4 334.3 c
f
350.4 233.3 m
356.7681 233.3 358.3944 231.9221 359 225 c
359.9187 214.4991 365.9399 209.8 379.2 209.8 c
382.5625 209.8 387.7625 210.4875 390.2 211.2 C
389 220 L
386.5872 219.2625 382.0913 218.6 379.2 218.6 c
371.1468 218.6 369.3174 220.2 368.6 228.4 c
367.9368 235.9795 364.2478 240.0881 355.6431 241.1859 C
379.2 259.2 L
379.2 268.8 L
316.8 268.8 L
316.8 260 L
365.4307 260 L
309.2 217 L
314.6 209.8 L
344.8143 232.8061 345.8937 233.3 350.4 233.3 c
f
350.4 132.3 m
355.8611 132.3 356.898 131.3805 357.5 124.5 c
358.3713 114.5408 364.9457 109.6 379.2 109.6 c
382.5625 109.6 387.8625 110.2875 390.3 111 C
389 121.7 L
386.687 120.9874 382.0541 120.3 379.2 120.3 c
371.5103 120.3 369.992 121.4904 369.3 129.4 c
368.7078 136.1682 365.4763 140.0832 357.9219 141.4908 C
379.3 157.6 L
379.3 168.7 L
316.7 168.7 L
316.7 158 L
361.6525 158 L
309.1 118.4 L
315.6 109.6 L
345.121 131.7343 346.2433 132.3 350.4 132.3 c
f
325.9 80.5 m
338.1926 78.3045 355.6812 77 372.8 77 C
372.8 89.4 L
358.8 89.4 341.4375 90.6 328 93 C
325.9 80.5 L
f
379.2 22 m
371.8738 22 370.6666 22.7807 370 30.4 c
369.4747 36.4026 366.6749 40.0894 360.1503 41.716 C
379.4 56 L
379.4 68.6 L
316.6 68.6 L
316.6 56 L
357.7845 56 L
309 19.8 L
316.6 9.4 L
345.4278 30.6624 346.5928 31.3 350.4 31.3 c
354.9541 31.3 355.4017 30.8389 356 24 c
356.8239 14.5825 363.9515 9.4 379.2 9.4 c
382.5625 9.4 387.9625 10.0875 390.4 10.8 C
389 23.4 L
386.7869 22.7124 382.0169 22 379.2 22 c
f
*u
1 D
409.2 429.4 m
409.2 418.1808 417.3294 410 428.6 410 c
437.4663 410 442 415.0798 442 427 C
442 450.5186 L
446.0977 451.2124 450.6309 451.6 455.6 451.6 c
473.6952 451.6 482.8 444.1916 482.8 435.2 c
482.8 423.0239 473.6127 414.3486 458.2 413 C
459 408 L
477.0948 409.5832 487.8 420.3776 487.8 435.2 c
487.8 447.2122 476.4158 456.6 455.6 456.6 c
450.7072 456.6 446.1735 456.2371 442 455.5787 C
442 475 L
467.8 475 L
467.8 479.8 L
442 479.8 L
442 493.8 L
436.8 493.8 L
436.8 479.8 L
415.2 479.8 L
415.2 475 L
436.8 475 L
436.8 454.5595 L
418.9835 450.3527 409.2 440.1878 409.2 429.4 c
f
0 D
436.8 427 m
436.8 417.9033 434.3622 415 428.6 415 c
420.051 415 414.2 420.9247 414.2 429.4 c
414.2 437.3022 421.9275 445.5814 436.8 449.413 C
436.8 427 L
f
*U
489.2 466.6 m
492.8 469.4 L
487.0666 477 481.175 482.925 473.8 488.8 C
470.8 485.4 L
478.0238 479.6455 483.8466 473.6963 489.2 466.6 C
f
*u
1 D
428.6 309.6 m
438.7145 309.6 444 315.3949 444 327.9 C
444 349.5181 L
447.5355 350.0218 451.3994 350.3 455.6 350.3 c
472.1967 350.3 480.9 343.269 480.9 334.9 c
480.9 323.8549 472.6018 316.1141 457.9 314.8 C
459 307.7 L
477.2617 309.2978 488.3 320.1922 488.3 334.9 c
488.3 347.1597 476.2327 357.2 455.6 357.2 c
451.4701 357.2 447.6077 356.9468 444 356.486 C
444 373.5 L
467.9 373.5 L
467.9 380.1 L
444 380.1 L
444 393.9 L
436.5 393.9 L
436.5 380.1 L
415.1 380.1 L
415.1 373.5 L
436.5 373.5 L
436.5 355.1384 L
418.5665 350.897 409 340.6391 409 329.5 c
409 318.1654 417.2974 309.6 428.6 309.6 c
f
0 D
436.5 347.9889 m
436.5 327.9 L
436.5 319.2581 434.2385 316.5 428.6 316.5 c
421.33 316.5 416.3 321.6924 416.3 329.5 c
416.3 336.8603 423.1128 344.3303 436.5 347.9889 C
f
*U
*u
1 D
428.6 209.2 m
439.9627 209.2 446 215.71 446 228.8 C
446 248.4681 L
448.9633 248.8105 452.1572 249 455.6 249 c
470.6982 249 479 242.3464 479 234.6 c
479 224.686 471.5909 217.8797 457.6 216.6 C
459 207.4 L
477.4285 209.0124 488.8 220.0067 488.8 234.6 c
488.8 247.1071 476.0495 257.8 455.6 257.8 c
452.2183 257.8 449.0249 257.6323 446 257.3292 C
446 272 L
468 272 L
468 280.4 L
446 280.4 L
446 294 L
436.2 294 L
436.2 280.4 L
415 280.4 L
415 272 L
436.2 272 L
436.2 255.7172 L
418.1504 251.4412 408.8 241.0899 408.8 229.6 c
408.8 218.15 417.2654 209.2 428.6 209.2 c
f
0 D
436.2 246.5484 m
436.2 228.8 L
436.2 220.6129 434.1149 218 428.6 218 c
422.6088 218 418.4 222.46 418.4 229.6 c
418.4 236.4071 424.3194 243.0818 436.2 246.5484 C
f
*U
*u
1 D
428.6 108.8 m
441.2109 108.8 448 116.0251 448 129.7 C
448 147.3723 L
450.3778 147.5834 452.9051 147.7 455.6 147.7 c
469.1997 147.7 477.1 141.4239 477.1 134.3 c
477.1 125.517 470.58 119.6453 457.3 118.4 C
459 107.1 L
477.5953 108.727 489.3 119.8213 489.3 134.3 c
489.3 147.0546 475.8663 158.4 455.6 158.4 c
452.9521 158.4 450.4249 158.2983 448 158.1162 C
448 170.5 L
468.1 170.5 L
468.1 180.7 L
448 180.7 L
448 194.1 L
435.9 194.1 L
435.9 180.7 L
414.9 180.7 L
414.9 170.5 L
435.9 170.5 L
435.9 156.2961 L
417.7354 151.9855 408.6 141.5403 408.6 129.7 c
408.6 118.1346 417.2334 108.8 428.6 108.8 c
f
0 D
435.9 145.093 m
435.9 129.7 L
435.9 121.9677 433.9911 119.5 428.6 119.5 c
423.8878 119.5 420.5 123.2277 420.5 129.7 c
420.5 135.94 425.546 141.8397 435.9 145.093 C
f
*U
474.8 389.7 m
470 385.2 L
476.8979 379.1663 482.3849 373.2066 487.7 365.9 C
493.1 369.7 L
487.4562 377.5281 481.8875 383.4875 474.8 389.7 C
f
475.8 290.6 m
469.2 285 L
475.772 278.6872 480.9233 272.7169 486.2 265.2 C
493.4 270 L
487.8458 278.0563 482.6 284.05 475.8 290.6 C
f
468.4 184.8 m
474.6461 178.2081 479.4617 172.2272 484.7 164.5 C
493.7 170.3 L
488.2354 178.5843 483.3125 184.6125 476.8 191.5 C
468.4 184.8 L
f
467.6 84.6 m
473.5201 77.7289 478 71.7375 483.2 63.8 C
494 70.6 L
488.625 79.1125 484.025 85.175 477.8 92.4 C
467.6 84.6 L
f
*u
1 D
455.6 59 m
453.6722 59 451.8074 58.9495 450 58.855 C
450 69 L
468.2 69 L
468.2 81 L
450 81 L
450 94.2 L
435.6 94.2 L
435.6 81 L
414.8 81 L
414.8 69 L
435.6 69 L
435.6 56.8749 L
417.3211 52.5296 408.4 41.9901 408.4 29.8 c
408.4 18.1193 417.2014 8.4 428.6 8.4 c
442.4591 8.4 450 16.3402 450 30.6 C
450 46.227 L
451.7779 46.3386 453.6401 46.4 455.6 46.4 c
467.7012 46.4 475.2 40.5013 475.2 34 c
475.2 26.3481 469.5691 21.4108 457 20.2 C
459 6.8 L
477.7621 8.4416 489.8 19.6359 489.8 34 c
489.8 47.0021 475.6832 59 455.6 59 c
f
0 D
435.6 30.6 m
435.6 23.3225 433.8675 21 428.6 21 c
425.1667 21 422.6 23.9954 422.6 29.8 c
422.6 35.4548 426.7916 40.6046 435.6 43.6216 C
435.6 30.6 L
f
*U
U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
