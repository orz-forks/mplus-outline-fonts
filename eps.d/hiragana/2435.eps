%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (2435.eps)
%%CreationDate: (5/26/04) (12:32 PM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
1 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
500 600 m
500 700 L
400 700 L
400 600 L
500 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
400 600 m
400 700 L
300 700 L
300 600 L
400 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
500 500 m
500 600 L
400 600 L
400 500 L
500 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
400 500 m
400 600 L
300 600 L
300 500 L
400 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
0 Ap
0 O
0 g
1 D
124 691 m
122.7382 677.5343 122 660.9438 122 647 C
122 619.4015 131.7595 609 152 609 c
167.2735 609 178.7103 618.0313 188 643 C
185.2 644 L
176.4709 620.538 166.2777 612 152 612 c
133.3225 612 125 621.4737 125 647 c
125 661.0985 125.7559 677.7223 127 691 C
124 691 L
f
327 670 m
373 670 L
373 652 L
373 642.3801 372.6526 642 366 642 c
362.9839 642 356.3125 643.625 351.1 645.8 C
350 643 L
355.2264 640.7092 362.3614 639 366 639 c
374.4684 639 376 640.4164 376 652 C
376 670 L
392 670 L
392 673 L
376 673 L
376 691 L
373 691 L
373 673 L
327 673 L
327 691 L
324 691 L
324 673 L
308 673 L
308 670 L
324 670 L
324 633.7399 L
324 613.8822 327.7756 610 354 610 c
362.9014 610 372.6346 610.6276 381 612 C
380.6 615 L
372.3057 613.6392 362.6261 613 354 613 c
329.8319 613 327 615.4673 327 633.7399 c
327 670 L
f
u
123 591.1636 m
121.7451 577.6301 121 561.0449 121 547.1636 C
121 519.593 131.2595 508.8303 151.6667 508.8303 c
167.5498 508.8303 179.2117 518.0839 188.6667 543.4969 C
183.532 545.4345 L
174.8383 522.2579 165.1839 514.1637 151.6667 514.1637 c
134.4785 514.1637 126.6667 523.0028 126.6667 547.1636 c
126.6667 561.1125 127.4384 577.9213 128.6667 591.1636 C
123 591.1636 L
f
121.9999 491.3272 m
120.752 477.726 119.9999 461.146 119.9999 447.3272 C
119.9999 419.7844 130.7595 408.6605 151.3333 408.6605 c
167.8261 408.6605 179.713 418.1365 189.3334 443.9939 C
181.8641 446.8691 L
173.2057 423.9778 164.0901 416.3274 151.3333 416.3274 c
135.6345 416.3274 128.3334 424.532 128.3334 447.3272 c
128.3334 461.1264 129.1209 478.1202 130.3334 491.3272 C
121.9999 491.3272 L
f
121 391.5 m
119.7589 377.831 119 361.2563 119 347.5 C
119 319.985 130.2595 308.5 151 308.5 c
168.1024 308.5 180.2144 318.1982 190 344.5 C
180.1963 348.3126 L
171.5732 325.7066 162.9964 318.5 151 318.5 c
136.7904 318.5 130 326.0702 130 347.5 c
130 361.1496 130.8033 378.3283 132 391.5 C
121 391.5 L
f
120 291.6636 m
118.7658 277.9268 118 261.3574 118 247.6636 C
118 220.1765 129.7595 208.3303 150.6667 208.3303 c
168.3787 208.3303 180.7157 218.2508 190.6667 244.9969 C
178.5283 249.7472 L
169.9406 227.4265 161.9026 220.6637 150.6667 220.6637 c
137.9464 220.6637 131.6667 227.5993 131.6667 247.6636 c
131.6667 261.1636 132.4858 278.5273 133.6667 291.6636 C
120 291.6636 L
f
119 191.8364 m
117.7728 178.0318 117 161.4677 117 147.8364 C
117 120.3771 129.2595 108.1697 150.3334 108.1697 c
168.655 108.1697 181.217 118.3125 191.3333 145.503 C
176.8605 151.1907 L
168.3081 129.1554 160.8089 122.8363 150.3334 122.8363 c
139.1023 122.8363 133.3333 129.1375 133.3333 147.8364 c
133.3333 161.1867 134.1682 178.7354 135.3333 191.8364 C
119 191.8364 L
f
U
118 92 m
116.7797 78.1277 116 61.5688 116 48 C
116 20.5686 128.7595 8 150 8 c
168.9313 8 181.7184 18.3651 192 46 C
175.1925 52.6253 L
166.6755 30.8753 159.7151 25 150 25 c
140.2583 25 135 30.6667 135 48 c
135 61.2007 135.8507 78.9344 137 92 C
118 92 L
f
253 42 m
253 25.8818 250.7628 23.6442 227 21.6 C
230 7 L
260.1337 9.5923 270 18.7485 270 43 c
270 60.0675 257.423 69 243 69 c
229.4023 69 220 59.5978 220 48 c
220 36.4022 229.4023 28 243 28 c
254.4932 28 268 40.5836 268 48 C
268 72 L
294 72 L
294 87 L
268 87 L
268 96 L
251 96 L
251 87 L
206 87 L
206 72 L
251 72 L
251 48 l
251 44.4197 248.1325 42 244 42 c
239.8674 42 237 44.4197 237 48 c
237 51.5803 239.8674 54 244 54 c
249.933 54 253 49.8333 253 42 c
f
u
328.6667 568.6636 m
371.3333 568.6636 L
371.3333 552.2969 L
371.3333 543.796 370.99 543.4303 365.0666 543.4303 c
362.0615 543.4303 355.6146 544.9032 350.6333 546.8303 C
349.3333 541.9302 L
354.7859 539.7962 362.4977 538.1969 366.1667 538.1969 c
374.7906 538.1969 376.8334 540.1244 376.8334 551.5303 C
376.8334 568.6636 L
392.3334 568.6636 L
392.3334 573.8303 L
376.8334 573.8303 L
376.8334 591.3303 L
371.3333 591.3303 L
371.3333 573.8303 L
328.6667 573.8303 L
328.6667 591.3303 L
323.1667 591.3303 L
323.1667 573.8303 L
307.6667 573.8303 L
307.6667 568.6636 L
323.1667 568.6636 L
323.1667 533.7802 L
323.1667 514.1392 327.6868 509.6636 353.8333 509.6636 c
362.8597 509.6636 373.0914 510.3324 381.5 511.6636 C
380.9 516.8303 L
372.5672 515.4984 362.6071 514.8303 353.8333 514.8303 c
331.4 514.8303 328.6667 517.192 328.6667 533.7802 c
328.6667 568.6636 L
f
330.3334 467.3271 m
369.6666 467.3271 L
369.6666 452.5939 L
369.6666 445.212 369.3275 444.8606 364.1333 444.8606 c
361.1392 444.8606 354.9166 446.1815 350.1666 447.8606 C
348.6666 440.8605 L
354.3453 438.8833 362.634 437.3938 366.3333 437.3938 c
375.1128 437.3938 377.6667 439.8325 377.6667 451.0605 C
377.6667 467.3271 L
392.6667 467.3271 L
392.6667 474.6606 L
377.6667 474.6606 L
377.6667 491.6606 L
369.6666 491.6606 L
369.6666 474.6606 L
330.3334 474.6606 L
330.3334 491.6606 L
322.3333 491.6606 L
322.3333 474.6606 L
307.3333 474.6606 L
307.3333 467.3271 L
322.3333 467.3271 L
322.3333 433.8205 L
322.3333 414.3962 327.5979 409.3272 353.6667 409.3272 c
362.818 409.3272 373.5481 410.0373 382 411.3272 C
381.2 418.6607 L
372.8288 417.3576 362.588 416.6607 353.6667 416.6607 c
332.968 416.6607 330.3334 418.9168 330.3334 433.8205 c
330.3334 467.3271 L
f
332 366 m
368 366 L
368 352.9 L
368 346.6369 367.6651 346.3 363.2 346.3 c
360.2169 346.3 354.2187 347.4687 349.7 348.9 C
348 339.8 L
353.9049 337.9796 362.7703 336.6 366.5 336.6 c
375.435 336.6 378.5 339.5497 378.5 350.6 C
378.5 366 L
393 366 L
393 375.5 L
378.5 375.5 L
378.5 392 L
368 392 L
368 375.5 L
332 375.5 L
332 392 L
321.5 392 L
321.5 375.5 L
307 375.5 L
307 366 L
321.5 366 L
321.5 333.8699 L
321.5 314.6623 327.5092 309 353.5 309 c
362.7764 309 374.0048 309.7513 382.5 311 C
381.5 320.5 L
373.0903 319.2258 362.569 318.5 353.5 318.5 c
334.5359 318.5 332 320.6505 332 333.8699 c
332 366 L
f
333.6667 264.6636 m
366.3333 264.6636 L
366.3333 253.1969 L
366.3333 248.0529 366.0026 247.7303 362.2666 247.7303 c
359.2945 247.7303 353.5208 248.747 349.2333 249.9303 C
347.3333 238.7302 L
353.4643 237.0666 362.9067 235.7969 366.6667 235.7969 c
375.7572 235.7969 379.3334 239.2578 379.3334 250.1303 C
379.3334 264.6636 L
393.3334 264.6636 L
393.3334 276.3303 L
379.3334 276.3303 L
379.3334 292.3303 L
366.3333 292.3303 L
366.3333 276.3303 L
333.6667 276.3303 L
333.6667 292.3303 L
320.6667 292.3303 L
320.6667 276.3303 L
306.6667 276.3303 L
306.6667 264.6636 L
320.6667 264.6636 L
320.6667 233.9102 L
320.6667 214.9193 327.4203 208.6636 353.3333 208.6636 c
362.7347 208.6636 374.4615 209.4561 383 210.6636 C
381.8 222.3303 L
373.3519 221.0851 362.5499 220.3303 353.3333 220.3303 c
336.104 220.3303 333.6667 222.3752 333.6667 233.9102 c
333.6667 264.6636 L
f
335.3333 163.3364 m
364.6667 163.3364 L
364.6667 153.503 L
364.6667 149.4779 364.3402 149.1697 361.3334 149.1697 c
358.3722 149.1697 352.8229 150.0343 348.7667 150.9697 C
346.6667 137.6697 L
353.0238 136.1629 363.043 135.0031 366.8333 135.0031 c
376.0794 135.0031 380.1667 138.975 380.1667 149.6697 C
380.1667 163.3364 L
393.6667 163.3364 L
393.6667 177.1697 L
380.1667 177.1697 L
380.1667 192.6697 L
364.6667 192.6697 L
364.6667 177.1697 L
335.3333 177.1697 L
335.3333 192.6697 L
319.8334 192.6697 L
319.8334 177.1697 L
306.3334 177.1697 L
306.3334 163.3364 L
319.8334 163.3364 L
319.8334 133.9597 L
319.8334 115.1854 327.3315 108.3364 353.1667 108.3364 c
362.693 108.3364 374.9182 109.1702 383.5 110.3364 C
382.1 124.1696 L
373.6134 122.9533 362.5308 122.1696 353.1667 122.1696 c
337.6719 122.1696 335.3333 124.109 335.3333 133.9597 c
335.3333 163.3364 L
f
U
363 62 m
363 53.8 L
363 50.8938 362.6777 50.6 360.4 50.6 c
357.4499 50.6 352.125 51.3125 348.3 52 C
346 36.6 L
352.5833 35.25 363.1793 34.2 367 34.2 c
376.4016 34.2 381 38.6831 381 49.2 C
381 62 L
394 62 L
394 78 L
381 78 L
381 93 L
363 93 L
363 78 L
337 78 L
337 93 L
319 93 L
319 78 L
306 78 L
306 62 L
319 62 L
319 34 L
319 15.4424 327.2427 8 353 8 c
362.6514 8 375.375 8.875 384 10 C
382.4 26 L
373.875 24.8125 362.5118 24 353 24 c
339.24 24 337 25.8337 337 34 c
337 62 L
363 62 L
f
u
408.6667 552.4969 m
426.2914 552.4969 444.0379 559.8301 475.6667 582.9969 C
475.6667 588.4969 L
428.3333 588.4969 L
428.3333 583.3302 L
473.8333 583.3302 L
472.548 587.1201 L
440.3384 563.5082 423.4879 556.4969 408.6667 556.4969 C
408.6667 552.4969 L
f
408.3333 451.7938 m
428.4332 451.7938 446.5705 458.9729 476.3334 480.9938 C
476.3334 488.9939 L
427.6666 488.9939 L
427.6666 481.6605 L
473.6667 481.6605 L
471.8584 486.8124 L
441.1299 464.0437 424.0464 456.9939 408.3333 456.9939 C
408.3333 451.7938 L
f
408 351.1 m
430.5749 351.1 449.1029 358.1249 477 379 C
477 389.5 L
427 389.5 L
427 380 L
473.5 380 L
471.1688 386.5139 L
441.9213 364.5882 424.6049 357.5 408 357.5 C
408 351.1 L
f
407.6667 250.3969 m
432.7167 250.3969 451.6355 257.2677 477.6667 276.9969 C
477.6667 289.9969 L
426.3333 289.9969 L
426.3333 278.3302 L
473.3333 278.3302 L
470.4792 286.2062 L
442.7127 265.1237 425.1633 257.9969 407.6667 257.9969 C
407.6667 250.3969 L
f
407.3334 149.7031 m
434.8583 149.7031 454.1679 156.4198 478.3333 175.0031 C
478.3333 190.503 L
425.6667 190.503 L
425.6667 176.6697 L
473.1667 176.6697 L
469.7896 185.9077 L
443.5041 165.6682 425.7218 158.503 407.3334 158.503 C
407.3334 149.7031 L
f
U
u
254.3334 142.003 m
254.3334 125.5418 251.0625 122.0409 228.0667 119.8363 C
230.6667 107.1697 L
259.1377 109.8571 269 119.2524 269 142.8364 c
269 159.9872 257.3415 168.8364 243.3334 168.8364 c
230.3451 168.8364 221.1667 159.658 221.1667 148.3364 c
221.1667 137.0147 230.3451 128.6697 243.3334 128.6697 c
254.6005 128.6697 267.1667 140.4755 267.1667 148.3364 C
267.1667 173.0031 L
293.6667 173.0031 L
293.6667 186.003 L
267.1667 186.003 L
267.1667 195.8364 L
252.5001 195.8364 L
252.5001 186.003 L
206.3334 186.003 L
206.3334 173.0031 L
252.5001 173.0031 L
252.5001 148.3364 L
252.5001 143.9231 248.9567 140.8363 244.1667 140.8363 c
239.3443 140.8363 235.8333 143.9743 235.8333 148.3364 c
235.8333 152.6985 239.3443 155.8364 244.1667 155.8364 c
250.797 155.8364 254.3334 151.1856 254.3334 142.003 c
f
255.6667 242.0061 m
255.6667 225.2017 251.3623 220.4376 229.1334 218.0727 C
231.3334 207.3394 L
258.1417 210.1219 267.9999 219.7564 267.9999 242.6728 c
267.9999 259.9069 257.26 268.6728 243.6667 268.6728 c
231.2879 268.6728 222.3334 259.7183 222.3334 248.6728 c
222.3334 237.6273 231.2879 229.3395 243.6667 229.3395 c
254.7078 229.3395 266.3333 240.3674 266.3333 248.6728 C
266.3333 274.0062 L
293.3333 274.0062 L
293.3333 285.006 L
266.3333 285.006 L
266.3333 295.6728 L
254.0001 295.6728 L
254.0001 285.006 L
206.6667 285.006 L
206.6667 274.0062 L
254.0001 274.0062 L
254.0001 248.6728 L
254.0001 243.4266 249.781 239.6727 244.3333 239.6727 c
238.8212 239.6727 234.6666 243.5288 234.6666 248.6728 c
234.6666 253.8167 238.8212 257.6729 244.3333 257.6729 c
251.6609 257.6729 255.6667 252.5379 255.6667 242.0061 c
f
257 342 m
257 324.8526 251.662 318.8253 230.2 316.3 C
232 307.5 L
257.1458 310.3775 267 320.2511 267 342.5 c
267 359.8174 257.1786 368.5 244 368.5 c
232.2306 368.5 223.5 359.7694 223.5 349 c
223.5 338.2306 232.2306 330 244 330 c
254.8151 330 265.5 340.2501 265.5 349 C
265.5 375 L
293 375 L
293 384 L
265.5 384 L
265.5 395.5 L
255.5 395.5 L
255.5 384 L
207 384 L
207 375 L
255.5 375 L
255.5 349 L
255.5 342.9209 250.6051 338.5 244.5 338.5 c
238.2982 338.5 233.5 343.0743 233.5 349 c
233.5 354.9257 238.2982 359.5 244.5 359.5 c
252.5249 359.5 257 353.8808 257 342 c
f
258.3334 442.003 m
258.3334 424.5126 251.9617 417.222 231.2667 414.5363 C
232.6667 407.6697 L
256.1499 410.6423 266 420.7551 266 442.3364 c
266 459.7371 257.0971 468.3364 244.3334 468.3364 c
233.1735 468.3364 224.6667 459.8296 224.6667 449.3364 c
224.6667 438.8431 233.1735 430.6697 244.3334 430.6697 c
254.9225 430.6697 264.6667 440.142 264.6667 449.3364 C
264.6667 476.0031 L
292.6667 476.0031 L
292.6667 483.003 L
264.6667 483.003 L
264.6667 495.3364 L
257.0001 495.3364 L
257.0001 483.003 L
207.3334 483.003 L
207.3334 476.0031 L
257.0001 476.0031 L
257.0001 449.3364 L
257.0001 442.4244 251.4294 437.3363 244.6667 437.3363 c
237.7751 437.3363 232.3333 442.6289 232.3333 449.3364 c
232.3333 456.0439 237.7751 461.3364 244.6667 461.3364 c
253.3888 461.3364 258.3334 455.2331 258.3334 442.003 c
f
259.6666 541.9969 m
259.6666 524.1634 252.2614 515.6097 232.3333 512.7637 C
233.3333 507.8303 L
255.154 510.898 265 521.2498 265 542.1636 c
265 559.6477 257.0156 568.1636 244.6667 568.1636 c
234.1162 568.1636 225.8333 559.8807 225.8333 549.6636 c
225.8333 539.4465 234.1162 531.3302 244.6667 531.3302 c
255.0298 531.3302 263.8334 540.0248 263.8334 549.6636 C
263.8334 576.9969 L
292.3334 576.9969 L
292.3334 581.997 L
263.8334 581.997 L
263.8334 595.1636 L
258.5 595.1636 L
258.5 581.997 L
207.6667 581.997 L
207.6667 576.9969 L
258.5 576.9969 L
258.5 549.6636 L
258.5 541.9187 252.2536 536.1636 244.8333 536.1636 c
237.252 536.1636 231.1667 542.1743 231.1667 549.6636 c
231.1667 557.1529 237.252 563.1635 244.8333 563.1635 c
254.2527 563.1635 259.6666 556.5761 259.6666 541.9969 c
f
U
261 642 m
261 623.8234 252.5612 614.0064 233.4 611 C
234 608 L
254.158 611.1628 264 621.7538 264 642 c
264 659.5674 256.9341 668 245 668 c
235.059 668 227 659.941 227 650 c
227 640.059 235.059 632 245 632 c
255.1371 632 263 639.9167 263 650 C
263 678 L
292 678 L
292 681 L
263 681 L
263 695 L
260 695 L
260 681 L
208 681 L
208 678 L
260 678 L
260 650 L
260 641.4222 253.0778 635 245 635 c
236.7289 635 230 641.7289 230 650 c
230 658.2711 236.7289 665 245 665 c
255.1167 665 261 657.9284 261 642 c
f
89 676 m
89 679 L
11 679 L
11 676 L
89 676 L
f
75.6 615 m
67.9288 613.7008 60.2581 613 53 613 c
30.8423 613 20 621.0618 20 634 c
20 644.2482 28.501 651 45 651 c
55.5492 651 67.1647 647.7917 74.6 643.2 C
77 645 L
68.8805 650.3542 56.8361 654 45 654 c
26.4849 654 17 645.9505 17 634 c
17 619.1603 28.9326 610 53 610 c
60.4638 610 68.25 610.6875 76 612 C
75.6 615 L
f
77 645 m
65.2121 659.9911 61.8289 669.263 61 693 C
58 693 L
58.8299 669.2345 62.2112 658.9553 74.6 643.2 C
77 645 L
f
u
89.3334 574.6636 m
89.3334 579.8303 L
10.6667 579.8303 L
10.6667 574.6636 L
89.3334 574.6636 L
f
89.6667 473.3272 m
89.6667 480.6606 L
10.3333 480.6606 L
10.3333 473.3272 L
89.6667 473.3272 L
f
90 372 m
90 381.5 L
10 381.5 L
10 372 L
90 372 L
f
90.3334 270.6636 m
90.3334 282.3303 L
9.6667 282.3303 L
9.6667 270.6636 L
90.3334 270.6636 L
f
90.6667 169.3364 m
90.6667 183.1697 L
9.3334 183.1697 L
9.3334 169.3364 L
90.6667 169.3364 L
f
U
u
77.8334 545.497 m
66.0765 560.3801 62.8393 569.2971 62 593.3303 C
56.4833 593.3303 L
57.3478 568.5734 60.8329 558.1534 73.4166 542.2303 C
77.8334 545.497 L
f
78.6667 445.9939 m
66.9408 460.7691 63.8496 469.3312 63.0001 493.6606 C
54.9666 493.6606 L
55.8657 467.9122 59.4545 457.3515 72.2333 441.2605 C
78.6667 445.9939 L
f
79.5 346.5 m
67.8051 361.1673 64.8599 369.3745 64 394 C
53.45 394 L
54.3838 367.2603 58.0763 356.5589 71.05 340.3 C
79.5 346.5 L
f
80.3334 246.997 m
68.6694 261.5563 65.8703 269.4086 65 294.3303 C
51.9333 294.3303 L
52.9017 266.5991 56.698 255.757 69.8666 239.3303 C
80.3334 246.997 L
f
81.1667 147.503 m
69.5337 161.9545 66.8805 169.4519 66 194.6697 C
50.4167 194.6697 L
51.4197 165.9472 55.3198 154.9644 68.6834 138.3697 C
81.1667 147.503 L
f
U
u
76.0329 516.9641 m
68.5518 515.6459 60.1057 514.8303 53 514.8303 c
31.9254 514.8303 22.0001 522.2578 22.0001 534.1636 c
22.0001 543.4416 29.7745 549.6636 44.8333 549.6636 c
54.9687 549.6636 66.2694 546.5977 73.4166 542.2303 C
77.8334 545.497 L
69.5567 550.9276 56.5318 554.8303 44.8333 554.8303 c
26.4477 554.8303 16.5 546.339 16.5 534.3303 c
16.5 519.1218 28.6848 509.6636 53 509.6636 c
60.513 509.6636 69.1503 510.462 76.8358 511.833 C
76.0329 516.9641 L
f
76.4659 418.9282 m
69.1747 417.591 59.9532 416.6607 53 416.6607 c
33.0085 416.6607 24.0001 423.4537 24.0001 434.3273 c
24.0001 442.6351 31.0479 448.3272 44.6667 448.3272 c
54.3882 448.3272 65.3741 445.4036 72.2333 441.2605 C
78.6667 445.9939 L
70.2329 451.5009 56.2275 455.6606 44.6667 455.6606 c
26.4104 455.6606 16 446.7274 16 434.6606 c
16 419.0833 28.4369 409.3272 53 409.3272 c
60.5621 409.3272 70.0506 410.2365 77.6716 411.6661 C
76.4659 418.9282 L
f
76.8988 320.9013 m
69.7976 319.5451 59.8008 318.5 53 318.5 c
34.0915 318.5 26 324.6587 26 334.5 c
26 341.8377 32.3213 347 44.5 347 c
53.8078 347 64.4789 344.2188 71.05 340.3 C
79.5 346.5 L
70.909 352.0833 55.9232 356.5 44.5 356.5 c
26.3732 356.5 15.5 347.125 15.5 335 c
15.5 319.0539 28.1891 309 53 309 c
60.6113 309 70.9508 310.0201 78.5074 311.5083 C
76.8988 320.9013 L
f
77.3317 222.8654 m
70.4206 221.4903 59.6484 220.3303 53 220.3303 c
35.1746 220.3303 28.0001 225.8547 28.0001 234.6636 c
28.0001 241.0312 33.5948 245.6636 44.3333 245.6636 c
53.2273 245.6636 63.5835 243.0247 69.8666 239.3303 C
80.3334 246.997 L
71.5852 252.6567 55.6189 257.3303 44.3333 257.3303 c
26.3359 257.3303 15 247.5135 15 235.3303 c
15 219.0154 27.9412 208.6636 53 208.6636 c
60.6604 208.6636 71.8511 209.7946 79.3432 211.3413 C
77.3317 222.8654 L
f
77.7646 124.8385 m
71.0435 123.4444 59.4959 122.1697 53 122.1697 c
36.2576 122.1697 30 127.0597 30 134.8364 c
30 140.2339 34.8681 144.3364 44.1667 144.3364 c
52.6469 144.3364 62.6883 141.8399 68.6834 138.3697 C
81.1667 147.503 L
72.2613 153.2391 55.3146 158.1697 44.1667 158.1697 c
26.2987 158.1697 14.5 147.9111 14.5 135.6697 c
14.5 118.986 27.6934 108.3364 53 108.3364 c
60.7096 108.3364 72.7513 109.5782 80.1789 111.1835 C
77.7646 124.8385 L
f
U
91 68 m
91 84 L
9 84 L
9 68 L
91 68 L
f
82 48 m
70.398 62.3435 67.8909 69.486 67 95 C
48.9 95 L
49.9376 65.2861 53.9414 54.1625 67.5 37.4 C
82 48 L
f
82 48 m
72.9375 53.8125 55.0103 59 44 59 c
26.2614 59 14 48.2995 14 36 c
14 18.9475 27.4456 8 53 8 c
60.7587 8 73.6516 9.3527 81.0147 11.0165 C
78.1975 26.8026 L
71.6664 25.3895 59.3435 24 53 24 c
37.3407 24 32 28.2556 32 35 c
32 39.4273 36.1416 43 44 43 c
52.0664 43 61.793 40.6459 67.5 37.4 C
82 48 L
f
409 653.2 m
424.1496 653.2 441.5053 660.6872 475 685 C
475 688 L
429 688 L
429 685 L
474 685 L
473.2377 687.4278 L
439.547 662.9728 422.9294 656 409 656 C
409 653.2 L
f
434 633 m
434 644.3423 443.9483 653 456 653 c
491 653 L
491 656 L
409 656 L
409 653 L
448 653 L
447.7 654.6 L
436.8445 650.6132 431 642.776 431 633 c
431 619.5284 441.4906 610 459 610 c
465.7503 610 470.0316 610.533 477 612 C
476.4 615 L
469.3536 613.5166 465.2743 613 459 613 c
443.4798 613 434 621.184 434 633 c
f
469.1 85.6 m
444.2955 66.2037 426.2803 59 407 59 C
407 49 L
437.0002 49 456.7005 55.5626 479 73 C
479 91 L
425 91 L
425 75 L
473 75 L
469.1 85.6 L
f
u
435.8334 532.9969 m
435.8334 543.4888 444.8397 551.3302 457.1667 551.3302 c
491.3334 551.3302 L
491.3334 556.4969 L
408.6667 556.4969 L
408.6667 551.3302 L
448.1667 551.3302 L
447.4167 554.3303 L
435.9644 550.1243 430.3333 542.5617 430.3333 532.8303 c
430.3333 519.1117 441.0848 509.4969 459 509.4969 c
465.9794 509.4969 470.7243 510.0557 477.6667 511.4969 C
476.8 516.647 L
469.8328 515.1998 465.3056 514.6636 459 514.6636 c
444.5984 514.6636 435.8334 522.1786 435.8334 532.9969 c
f
437.6668 432.9939 m
437.6668 442.6353 445.7312 449.6605 458.3334 449.6605 c
491.6667 449.6605 L
491.6667 456.9939 L
408.3333 456.9939 L
408.3333 449.6605 L
448.3333 449.6605 L
447.1333 454.0605 L
435.0842 449.6354 429.6666 442.3473 429.6666 432.6605 c
429.6666 418.695 440.6791 408.9939 459 408.9939 c
466.2085 408.9939 471.4169 409.5783 478.3334 410.9939 C
477.2 418.294 L
470.312 416.8831 465.337 416.3273 459 416.3273 c
445.717 416.3273 437.6668 423.1731 437.6668 432.9939 c
f
439.5 333 m
439.5 341.791 446.6226 348 459.5 348 c
492 348 L
492 357.5 L
408 357.5 L
408 348 L
448.5 348 L
446.85 353.8 L
434.2042 349.1557 429 342.1422 429 332.5 c
429 318.2875 440.2734 308.5 459 308.5 c
466.4376 308.5 472.1095 309.1102 479 310.5 C
477.6 319.95 L
470.7913 318.5753 465.3683 318 459 318 c
446.8355 318 439.5 324.1767 439.5 333 c
f
441.3334 232.9969 m
441.3334 240.9375 447.514 246.3302 460.6667 246.3302 c
492.3334 246.3302 L
492.3334 257.9969 L
407.6667 257.9969 L
407.6667 246.3302 L
448.6667 246.3302 L
446.5667 253.5303 L
433.3241 248.6669 428.3333 241.9279 428.3333 232.3303 c
428.3333 217.8709 439.8676 207.9969 459 207.9969 c
466.6668 207.9969 472.8022 208.6329 479.6667 209.9969 C
478 221.597 L
471.2705 220.2585 465.3997 219.6636 459 219.6636 c
447.9541 219.6636 441.3334 225.1713 441.3334 232.9969 c
f
443.1666 133.003 m
443.1666 140.0933 448.4054 144.6697 461.8333 144.6697 c
492.6667 144.6697 L
492.6667 158.503 L
407.3334 158.503 L
407.3334 144.6697 L
448.8333 144.6697 L
446.2834 153.2697 L
432.444 148.1872 427.6667 141.7227 427.6667 132.1697 c
427.6667 117.4634 439.4619 107.503 459 107.503 c
466.8959 107.503 473.4948 108.1648 480.3333 109.503 C
478.4 123.253 L
471.7497 121.9507 465.431 121.3363 459 121.3363 c
449.0726 121.3363 443.1666 126.1749 443.1666 133.003 c
f
U
459 23 m
450.1912 23 445 27.1695 445 33 c
445 39.2398 449.2968 43 463 43 c
493 43 L
493 59 L
407 59 L
407 43 L
449 43 L
446 53 L
431.5639 47.6983 427 41.5084 427 32 c
427 17.0467 439.0562 7 459 7 c
467.125 7 474.1875 7.6875 481 9 C
478.8 24.9 L
472.2289 23.634 465.4624 23 459 23 c
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
