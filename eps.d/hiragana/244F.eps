%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (244F.eps)
%%CreationDate: (3/4/05) (11:50 AM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
500 600 m
500 700 L
400 700 L
400 600 L
500 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
400 600 m
400 700 L
300 700 L
300 600 L
400 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
500 500 m
500 600 L
400 600 L
400 500 L
500 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
400 500 m
400 600 L
300 600 L
300 500 L
400 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
0 O
0 g
1 D
395 627 m
354.087 664.4722 351.1794 671 340 671 c
330.6875 671 328.4303 664.3786 305 636 C
307.4 634.2 L
331.2722 663.1139 332.5735 668 340 668 c
349.4729 668 351.036 663.1433 392.9 624.8 C
395 627 L
f
146 72.3 m
146 89 L
108 89 L
108 73 L
141 73 L
141 86 L
120.8722 74.8174 110 57.1181 110 41 c
110 20.7479 123.1589 8 145 8 c
167.4294 8 180 19.4411 180 41 c
180 52.3387 177.2003 65.3792 170 83 C
154 81 L
160.4997 67.7296 162 60.443 162 45 c
162 29.6056 156.957 24 145 24 c
134.4324 24 128 30.183 128 41 c
128 51.4623 135.2036 64.8251 146 72.3 C
f
154 81 m
164.25 70.25 176.8956 59.0903 188 50.5 C
197 65 L
187.0625 72.6875 176.6875 81.9375 167 92 C
154 81 L
f
u
395.5 527.6636 m
354.5154 565.2014 351.3363 571.8303 340 571.8303 c
330.5729 571.8303 327.9974 565.1236 304.5 536.6636 C
308.6667 532.9969 L
331.9206 561.2481 333.2488 565.9969 340 565.9969 c
348.7213 565.9969 350.2736 561.3185 391.75 523.3302 C
395.5 527.6636 L
f
396 428.3273 m
354.9438 465.9306 351.4932 472.6606 340 472.6606 c
330.4583 472.6606 327.5646 465.8686 304 437.3273 C
309.9334 431.7938 L
332.569 459.3822 333.924 463.9938 340 463.9938 c
347.9698 463.9938 349.5112 459.4936 390.5999 421.8605 C
396 428.3273 L
f
396.5 329 m
355.3722 366.6689 351.6501 373.5 340 373.5 c
330.3438 373.5 327.1318 366.6226 303.5 338 C
311.2 330.6 L
333.2174 357.5257 334.5993 362 340 362 c
347.2184 362 348.7489 357.6781 389.45 320.4 C
396.5 329 L
f
397 229.6636 m
355.8007 267.3981 351.8069 274.3303 340 274.3303 c
330.2292 274.3303 326.699 267.3676 303 238.6636 C
312.4667 229.3969 L
333.8657 255.6599 335.2745 259.9969 340 259.9969 c
346.4668 259.9969 347.9866 255.8533 388.3 218.9302 C
397 229.6636 L
f
397.5 130.3364 m
356.2291 168.1364 351.9638 175.1697 340 175.1697 c
330.1146 175.1697 326.2662 168.1217 302.5 139.3364 C
313.7333 128.2031 L
334.5141 153.8034 335.9497 158.0031 340 158.0031 c
345.7154 158.0031 347.2243 154.0378 387.15 117.4698 C
397.5 130.3364 L
f
U
398 31 m
356.6575 68.8657 352.1207 76 340 76 c
330 76 325.8333 68.8667 302 40 C
315 27 L
335.1625 51.9375 336.625 56 340 56 c
344.9638 56 346.4619 52.213 386 16 C
398 31 L
f
251 82 m
240.0122 74.8878 235 67.057 235 60 c
235 46.125 251 40.75 251 30 c
251 26.0769 248.7957 24 245 24 c
241.1919 24 236.6903 25.0916 232.2 27.3 C
226 12 L
230.739 9.1416 238.6922 7 245 7 c
260.9181 7 271 15.5285 271 30 c
271 45.375 255 52.75 255 62 c
255 67.2962 263.9863 74.5958 276 76 C
276 92 L
223 92 L
223 76 L
252 76 L
251 82 L
f
218 18.2 m
223.9414 29.8709 228.7968 42.8538 231.8 54.8 C
215 58 L
212.2798 47.1798 207.25 34.3125 202 24 C
218 18.2 L
f
298 26 m
294.5 36.75 288.1875 50.25 282 60 C
266.6 53 L
271.7434 44.8954 278.4355 30.8937 282 20.2 C
298 26 L
f
u
216.4499 118.7697 m
222.2725 130.064 227.155 142.9731 230.1499 154.8863 C
215.6667 157.6697 L
212.9311 146.7883 207.926 134.0218 202.6667 123.8364 C
216.4499 118.7697 L
f
214.8999 219.3394 m
220.6036 230.2571 225.5132 243.0924 228.4999 254.9727 C
216.3334 257.3394 L
213.5824 246.3968 208.602 233.7312 203.3334 223.6727 C
214.8999 219.3394 L
f
213.35 319.9 m
218.9348 330.441 223.8716 343.2026 226.85 355.05 C
217 357 L
214.2336 345.9961 209.2779 333.4315 204 323.5 C
213.35 319.9 L
f
211.7999 420.4697 m
217.2659 430.6341 222.2299 443.3219 225.1999 455.1364 C
217.6667 456.6697 L
214.8849 445.6046 209.9539 433.1408 204.6667 423.3364 C
211.7999 420.4697 L
f
210.25 521.0302 m
215.5972 530.818 220.5882 543.432 223.55 555.2136 C
218.3333 556.3303 L
215.5362 545.204 210.6298 532.8411 205.3333 523.1636 C
210.25 521.0302 L
f
U
u
253.1667 182.7864 m
241.6429 176.3584 236 168.4218 236 161.1697 c
236 146.6801 253.3334 141.326 253.3334 129.6697 c
253.3334 125.0307 250.1906 122.1696 245.1667 122.1696 c
241.1425 122.1696 236.3773 123.3501 232.05 125.5363 C
226.6667 112.3364 L
231.2721 109.5585 238.9602 107.503 245.1667 107.503 c
260.5282 107.503 270.5 115.9239 270.5 129.6697 c
270.5 145.4447 253.1666 152.5072 253.1666 162.8364 c
253.1666 168.5592 262.5033 176.1085 275.3333 177.5031 C
275.3333 191.3363 L
223.6667 191.3363 L
223.6667 177.5031 L
254 177.5031 L
253.1667 182.7864 L
f
255.3334 283.5728 m
243.2736 277.8291 237 269.7866 237 262.3395 c
237 247.2353 255.6668 241.902 255.6668 229.3394 c
255.6668 223.9846 251.5855 220.3393 245.3333 220.3393 c
241.0931 220.3393 236.0643 221.6087 231.9 223.7726 C
227.3334 212.6728 L
231.8052 209.9755 239.2281 208.0061 245.3333 208.0061 c
260.1383 208.0061 270 216.3193 270 229.3394 c
270 245.5144 251.3332 252.2644 251.3332 263.6728 c
251.3332 269.8222 261.0203 277.6211 274.6666 279.0062 C
274.6666 290.6727 L
224.3334 290.6727 L
224.3334 279.0062 L
256.0001 279.0062 L
255.3334 283.5728 L
f
257.5 384.35 m
244.9042 379.2905 238 371.1421 238 363.5 c
238 347.7812 258 342.4687 258 329 c
258 322.9294 252.9803 318.5 245.5 318.5 c
241.0438 318.5 235.7514 319.8583 231.75 322 C
228 313 L
232.3382 310.3833 239.4961 308.5 245.5 308.5 c
259.7485 308.5 269.5 316.7055 269.5 329 c
269.5 345.575 249.5 352.0125 249.5 364.5 c
249.5 371.0759 259.5374 379.1245 274 380.5 C
274 390 L
225 390 L
225 380.5 L
258 380.5 L
257.5 384.35 L
f
259.6667 485.1364 m
246.535 480.7611 239 472.5069 239 464.6697 c
239 448.3364 260.3334 443.0447 260.3334 428.6697 c
260.3334 421.8833 254.3753 416.6696 245.6667 416.6696 c
240.9944 416.6696 235.4384 418.1168 231.6 420.2363 C
228.6667 413.3364 L
232.8713 410.8002 239.764 409.003 245.6667 409.003 c
259.3586 409.003 269 417.1009 269 428.6697 c
269 445.6447 247.6666 451.7697 247.6666 465.3364 c
247.6666 472.3388 258.0544 480.6372 273.3333 482.0031 C
273.3333 489.3363 L
225.6667 489.3363 L
225.6667 482.0031 L
260 482.0031 L
259.6667 485.1364 L
f
261.8332 585.9136 m
248.1656 582.2225 240 573.8624 240 565.8302 c
240 548.8823 262.6666 543.6115 262.6666 528.3303 c
262.6666 520.8281 255.77 514.8303 245.8333 514.8303 c
240.945 514.8303 235.1255 516.3664 231.45 518.4636 C
229.3333 513.6636 L
233.4044 511.208 240.032 509.4969 245.8333 509.4969 c
258.9687 509.4969 268.5 517.4872 268.5 528.3303 c
268.5 545.7052 245.8334 551.5178 245.8334 566.1636 c
245.8334 573.5926 256.5716 582.1406 272.6667 583.4969 C
272.6667 588.6636 L
226.3333 588.6636 L
226.3333 583.4969 L
261.9999 583.4969 L
261.8332 585.9136 L
f
U
u
297.3333 125.503 m
293.875 136.1488 287.5601 149.5969 281.3333 159.3363 C
268.0834 153.2364 L
273.3915 144.9414 280.0087 131.1058 283.5167 120.5197 C
297.3333 125.503 L
f
296.6666 225.0061 m
293.2499 235.5477 286.9328 248.9438 280.6666 258.6727 C
269.5667 253.4728 L
275.0395 244.9874 281.5819 231.318 285.0334 220.8394 C
296.6666 225.0061 L
f
296 324.5 m
292.625 334.9375 286.3055 348.2816 280 358 C
271.05 353.7 L
276.6875 345.0243 283.155 331.521 286.55 321.15 C
296 324.5 L
f
295.3333 424.003 m
292 434.3363 285.6781 447.6285 279.3333 457.3363 C
272.5334 453.9364 L
278.3356 445.0704 284.7282 431.7332 288.0667 421.4697 C
295.3333 424.003 L
f
294.6667 523.4969 m
291.375 533.7261 285.0508 546.9663 278.6667 556.6636 C
274.0166 554.1636 L
279.9835 545.1072 286.3013 531.9362 289.5832 521.7802 C
294.6667 523.4969 L
f
U
272 688 m
227 688 L
227 685 L
264 685 L
264 686.7 L
249.7963 683.6932 241 675.2272 241 667 c
241 649.4375 265 644.1875 265 628 c
265 619.782 257.165 613 246 613 c
240.8957 613 234.8125 614.625 231.3 616.7 C
230 614 L
233.9375 611.625 240.3 610 246 610 c
258.5789 610 268 617.8826 268 628 c
268 645.775 244 651.275 244 667 c
244 674.8556 255.0886 683.6533 272 685 C
272 688 L
f
208.7 621.6 m
213.9283 631.0111 218.9465 643.5514 221.9 655.3 C
219 656 L
216.1875 644.8125 211.3058 632.5505 206 623 C
208.7 621.6 L
f
294 623 m
290.75 633.125 284.4235 646.3132 278 656 C
275.5 654.4 L
281.6316 645.1533 287.8746 632.1484 291.1 622.1 C
294 623 L
f
u
145.8333 173.7198 m
145.8333 188.1697 L
108.5 188.1697 L
108.5 174.3364 L
141.3334 174.3364 L
141.3334 185.503 L
121.5452 174.5091 110.6667 156.9436 110.6667 140.6697 c
110.6667 120.9248 123.7239 108.3364 144.8333 108.3364 c
167.0428 108.3364 179.5 119.8307 179.5 141.8364 c
179.5 153.2923 176.585 166.7499 169.5 183.8364 C
155.7167 181.9697 L
162.1894 168.5719 164.0001 160.017 164.0001 145.1697 c
164.0001 128.636 158.0597 122.1696 144.8333 122.1696 c
133.3774 122.1696 126.1666 129.1041 126.1666 140.6697 c
126.1666 152.0221 133.9048 165.8619 145.8333 173.7198 C
f
145.6667 275.1395 m
145.6667 287.3394 L
109 287.3394 L
109 275.6728 L
141.6667 275.6728 L
141.6667 285.0061 L
122.2182 274.2008 111.3334 256.7692 111.3334 240.3394 c
111.3334 221.1017 124.2889 208.6728 144.6667 208.6728 c
166.6563 208.6728 179 220.2203 179 242.6728 c
179 254.246 175.9698 268.1206 169 284.6728 C
157.4334 282.9395 L
163.879 269.4142 166.0001 259.5911 166.0001 245.3394 c
166.0001 227.6663 159.1624 220.3393 144.6667 220.3393 c
132.3225 220.3393 124.3332 228.0252 124.3332 240.3394 c
124.3332 252.5819 132.6059 266.8988 145.6667 275.1395 C
f
145.5 376.55 m
145.5 386.5 L
109.5 386.5 L
109.5 377 L
142 377 L
142 384.5 L
122.8911 373.8834 112 356.5856 112 340 c
112 321.2694 124.8539 309 144.5 309 c
166.2698 309 178.5 320.6007 178.5 343.5 c
178.5 355.1903 175.3546 369.482 168.5 385.5 C
159.15 383.9 L
165.5686 370.2472 168 359.156 168 345.5 c
168 326.6876 160.265 318.5 144.5 318.5 c
131.2676 318.5 122.5 326.9373 122.5 340 c
122.5 353.1325 131.3072 367.9264 145.5 376.55 C
f
145.3333 477.9697 m
145.3333 485.6697 L
110 485.6697 L
110 478.3364 L
142.3334 478.3364 L
142.3334 484.003 L
123.5641 473.5752 112.6667 456.4111 112.6667 439.6697 c
112.6667 421.4463 125.4189 409.3364 144.3333 409.3364 c
165.8832 409.3364 178 420.9903 178 444.3364 c
178 456.144 174.7394 470.8527 168 486.3364 C
160.8667 484.8697 L
167.2582 471.0895 170.0001 458.73 170.0001 445.6697 c
170.0001 425.718 161.3677 416.6696 144.3333 416.6696 c
130.2126 416.6696 120.6666 425.8584 120.6666 439.6697 c
120.6666 453.6923 130.0083 468.9632 145.3333 477.9697 C
f
145.1667 579.3802 m
145.1667 584.8303 L
110.5 584.8303 L
110.5 579.6636 L
142.6667 579.6636 L
142.6667 583.4969 L
124.237 573.2577 113.3333 556.2275 113.3333 539.3303 c
113.3333 521.614 125.9839 509.6636 144.1667 509.6636 c
165.4967 509.6636 177.5 521.3707 177.5 545.1636 c
177.5 557.0883 174.1242 572.2141 167.5 587.1636 C
162.5833 585.8302 L
168.9477 571.9226 172 558.2949 172 545.8303 c
172 524.7393 162.4703 514.8303 144.1667 514.8303 c
129.1578 514.8303 118.8334 524.7704 118.8334 539.3303 c
118.8334 554.243 128.7095 569.9908 145.1667 579.3802 C
f
U
145 680.8 m
145 684 L
111 684 L
111 681 L
143 681 L
143 683 L
124.91 672.9495 114 656.0531 114 639 c
114 621.7909 126.5489 610 144 610 c
165.1101 610 177 621.7603 177 646 c
177 658.042 173.509 673.5848 167 688 C
164.3 686.8 L
170.6374 672.7649 174 657.869 174 646 c
174 623.7697 163.573 613 144 613 c
128.1028 613 117 623.6916 117 639 c
117 654.8028 127.4107 671.0277 145 680.8 C
f
u
155.7167 181.9697 m
165.5349 171.2238 177.7998 160.1086 188.6834 151.7031 C
196.5 164.1697 L
186.6667 171.7634 176.3328 181.1865 167 191.3363 C
155.7167 181.9697 L
f
157.4334 282.9395 m
166.8197 272.1975 178.7041 261.127 189.3667 252.9062 C
196 263.3394 L
186.2708 270.8394 175.9781 280.4355 167 290.6727 C
157.4334 282.9395 L
f
159.15 383.9 m
168.1045 373.162 179.6083 362.1361 190.05 354.1 C
195.5 362.5 L
185.875 369.9062 175.6234 379.6755 167 390 C
159.15 383.9 L
f
160.8667 484.8697 m
169.3893 474.1358 180.5125 463.1544 190.7334 455.3031 C
195 461.6697 L
185.4792 468.9822 175.2687 478.9245 167 489.3363 C
160.8667 484.8697 L
f
162.5833 585.8302 m
170.674 575.1003 181.4167 564.1635 191.4167 556.4969 C
194.5 560.8303 L
185.0834 568.049 174.914 578.1645 167 588.6636 C
162.5833 585.8302 L
f
U
164.3 686.8 m
171.9589 676.0741 182.3209 665.1819 192.1 657.7 C
194 660 L
184.6875 667.125 174.5593 677.4135 167 688 C
164.3 686.8 L
f
18.9 610.7 m
15.5065 623.6733 14 635.7997 14 650 c
14 664.2003 15.5065 676.3265 18.9 689.3 C
16 690 L
12.4733 676.5171 11 663.9841 11 650 c
11 636.0159 12.4733 623.4828 16 610 C
18.9 610.7 L
f
418.9 610.7 m
415.5065 623.6733 414 635.7997 414 650 c
414 664.2003 415.5065 676.3265 418.9 689.3 C
416 690 L
412.4733 676.5171 411 663.9841 411 650 c
411 636.0159 412.4733 623.4828 416 610 C
418.9 610.7 L
f
55 613 m
45.6075 613 40 617.8598 40 626 c
40 634.1402 45.6075 639 55 639 c
63.4451 639 72.1288 634.2885 88.9 616.9 C
91 619 L
73.5788 637.0624 64.4423 642 55 642 c
43.9922 642 37 635.9031 37 626 c
37 616.0971 43.9922 610 55 610 c
67.2494 610 74 616.2618 74 629 C
74 671 L
91 671 L
91 674 L
74 674 L
74 691 L
71 691 L
71 674 L
38 674 L
38 671 L
71 671 L
71 629 l
71 618.2336 65.7663 613 55 613 c
f
470 629 m
470 618.2336 464.7663 613 454 613 c
445.6262 613 440 617.8224 440 625 c
440 632.1776 445.6262 637 454 637 c
462.6177 637 471.2896 632.1219 487.9 614.9 C
490 617 L
472.5788 635.0624 463.4423 640 454 640 c
443.6589 640 437 633.5697 437 625 c
437 616.0971 443.9923 610 454 610 c
466.2494 610 473 616.2618 473 629 C
473 660 L
490 660 L
490 663 L
473 663 L
473 684 L
490 684 L
490 687 L
438 687 L
438 684 L
470 684 L
470 663 L
438 663 L
438 660 L
470 660 L
470 629 L
f
u
20.7001 589.4136 m
15.3333 590.3303 L
11.8219 576.8522 10.3333 564.2212 10.3333 549.9969 c
10.3333 535.7727 11.8219 523.1416 15.3333 509.6636 C
20.7001 510.5803 L
17.3484 523.4429 15.8334 535.7748 15.8334 549.9969 c
15.8334 564.2191 17.3484 576.5509 20.7001 589.4136 C
f
22.5001 489.5272 m
14.6666 490.6606 L
11.1705 477.1872 9.6666 464.4583 9.6666 449.9939 c
9.6666 435.5295 11.1705 422.8005 14.6666 409.3272 C
22.5001 410.4606 L
19.1903 423.2124 17.6668 435.7499 17.6668 449.9939 c
17.6668 464.2379 19.1903 476.7752 22.5001 489.5272 C
f
24.3 389.65 m
14 391 L
10.5192 377.5314 9 364.7045 9 350 c
9 335.2954 10.5192 322.4685 14 309 C
24.3 310.35 L
21.032 322.9911 19.5 335.7341 19.5 350 c
19.5 364.2659 21.032 377.0087 24.3 389.65 C
f
26.1 289.7636 m
13.3333 291.3303 L
9.8679 277.8665 8.3333 264.9416 8.3333 249.9969 c
8.3333 235.0522 9.8679 222.1273 13.3333 208.6636 C
26.1 210.2303 L
22.8739 222.7607 21.3334 235.7092 21.3334 249.9969 c
21.3334 264.2847 22.8739 277.2331 26.1 289.7636 C
f
27.8999 189.8864 m
12.6667 191.6697 L
9.2165 178.2107 7.6667 165.1879 7.6667 150.003 c
7.6667 134.8182 9.2165 121.7953 12.6667 108.3364 C
27.8999 110.1197 L
24.7157 122.5394 23.1666 135.6934 23.1666 150.003 c
23.1666 164.3127 24.7157 177.4666 27.8999 189.8864 C
f
U
29.7 90 m
12 92 L
8.5652 78.5458 7 65.425 7 50 c
7 34.575 8.5652 21.4542 12 8 C
29.7 10 L
26.5576 22.309 25 35.6685 25 50 c
25 64.3315 26.5576 77.691 29.7 90 C
f
u
55 514.6636 m
46.3447 514.6636 41.3334 518.9839 41.3334 526.3303 c
41.3334 533.6489 46.3169 537.9969 55 537.9969 c
63.0392 537.9969 71.1206 533.5354 88.05 515.8469 C
91.6667 519.4969 L
73.686 538.299 64.8277 543.1636 55.1667 543.1636 c
43.2987 543.1636 36 536.7158 36 526.3303 c
36 515.8709 43.3542 509.4969 55.1667 509.4969 c
67.7649 509.4969 74.8334 515.9728 74.8334 528.8303 C
74.8334 569.4969 L
91.5 569.4969 L
91.5 574.6636 L
74.8334 574.6636 L
74.8334 591.1636 L
69.3333 591.1636 L
69.3333 574.6636 L
37.5 574.6636 L
37.5 569.4969 L
69.3333 569.4969 L
69.3333 528.9969 L
69.3333 519.3007 64.6719 514.6636 55 514.6636 c
f
55 416.3273 m
47.0819 416.3273 42.6667 420.1081 42.6667 426.6606 c
42.6667 433.1576 47.0263 436.9938 55 436.9938 c
62.6333 436.9938 70.1125 432.7823 87.1999 414.7938 C
92.3334 419.9939 L
73.7932 439.5356 65.213 444.3273 55.3333 444.3273 c
42.6051 444.3273 34.9999 437.5286 34.9999 426.6606 c
34.9999 415.6447 42.7162 408.9939 55.3333 408.9939 c
68.2805 408.9939 75.6667 415.6838 75.6667 428.6605 C
75.6667 467.9938 L
92 467.9938 L
92 475.3273 L
75.6667 475.3273 L
75.6667 491.3272 L
67.6666 491.3272 L
67.6666 475.3273 L
37 475.3273 L
37 467.9938 L
67.6666 467.9938 L
67.6666 428.9939 L
67.6666 420.3679 63.5774 416.3273 55 416.3273 c
f
55 318 m
47.8191 318 44 321.2413 44 327 c
44 332.6754 47.7357 336 55 336 c
62.2274 336 69.1045 332.0385 86.35 313.75 C
93 320.5 L
73.9003 340.7812 65.5984 345.5 55.5 345.5 c
41.9117 345.5 34 338.3504 34 327 c
34 315.4277 42.0782 308.5 55.5 308.5 c
68.7959 308.5 76.5 315.404 76.5 328.5 C
76.5 366.5 L
92.5 366.5 L
92.5 376 L
76.5 376 L
76.5 391.5 L
66 391.5 L
66 376 L
36.5 376 L
36.5 366.5 L
66 366.5 L
66 329 L
66 321.4441 62.4831 318 55 318 c
f
55 219.6636 m
48.5563 219.6636 45.3334 222.3654 45.3334 227.3303 c
45.3334 232.1841 48.4451 234.9969 55 234.9969 c
61.8215 234.9969 68.0963 231.2854 85.5 212.6969 C
93.6667 220.9969 L
74.0075 242.0178 65.9837 246.6636 55.6667 246.6636 c
41.2182 246.6636 33 239.1631 33 227.3303 c
33 215.2015 41.4402 207.9969 55.6667 207.9969 c
69.3114 207.9969 77.3334 215.115 77.3334 228.3303 C
77.3334 264.9969 L
93 264.9969 L
93 276.6636 L
77.3334 276.6636 L
77.3334 291.6636 L
64.3333 291.6636 L
64.3333 276.6636 L
36 276.6636 L
36 264.9969 L
64.3333 264.9969 L
64.3333 228.9969 L
64.3333 222.5112 61.3887 219.6636 55 219.6636 c
f
55 121.3363 m
49.2935 121.3363 46.6666 123.4986 46.6666 127.6697 c
46.6666 131.702 49.1545 134.0031 55 134.0031 c
61.4156 134.0031 67.0882 130.5415 84.65 111.6531 C
94.3333 121.503 L
74.1147 143.2635 66.3691 147.8363 55.8333 147.8363 c
40.5247 147.8363 32 139.985 32 127.6697 c
32 114.9845 40.8022 107.503 55.8333 107.503 c
69.8269 107.503 78.1667 114.8352 78.1667 128.1697 C
78.1667 163.5031 L
93.5 163.5031 L
93.5 177.3363 L
78.1667 177.3363 L
78.1667 191.8364 L
62.6667 191.8364 L
62.6667 177.3363 L
35.5 177.3363 L
35.5 163.5031 L
62.6667 163.5031 L
62.6667 129.003 L
62.6667 123.5875 60.2943 121.3363 55 121.3363 c
f
U
83.8 10.6 m
95 22 L
74.2219 44.5001 66.7545 49 56 49 c
39.8312 49 31 40.7977 31 28 c
31 14.7583 40.1642 7 56 7 c
70.3425 7 79 14.5463 79 28 C
79 62 L
94 62 L
94 78 L
79 78 L
79 92 L
61 92 L
61 78 L
35 78 L
35 62 L
61 62 L
61 29 L
61 24.6546 59.1999 23 55 23 c
50.0307 23 48 24.6228 48 28 c
48 31.2107 49.8639 33 55 33 c
61.0096 33 66.0801 29.7884 83.8 10.6 C
f
u
420.7001 589.4136 m
415.3333 590.3303 L
411.8219 576.8522 410.3333 564.2212 410.3333 549.9969 c
410.3333 535.7727 411.8219 523.1416 415.3333 509.6636 C
420.7001 510.5803 L
417.3484 523.4429 415.8334 535.7748 415.8334 549.9969 c
415.8334 564.2191 417.3484 576.5509 420.7001 589.4136 C
f
422.5001 489.5272 m
414.6666 490.6606 L
411.1705 477.1872 409.6666 464.4583 409.6666 449.9939 c
409.6666 435.5295 411.1705 422.8005 414.6666 409.3272 C
422.5001 410.4606 L
419.1903 423.2124 417.6668 435.7499 417.6668 449.9939 c
417.6668 464.2379 419.1903 476.7752 422.5001 489.5272 C
f
424.3 389.65 m
414 391 L
410.5192 377.5314 409 364.7045 409 350 c
409 335.2954 410.5192 322.4685 414 309 C
424.3 310.35 L
421.032 322.9911 419.5 335.7341 419.5 350 c
419.5 364.2659 421.032 377.0087 424.3 389.65 C
f
426.1 289.7636 m
413.3333 291.3303 L
409.8679 277.8665 408.3333 264.9416 408.3333 249.9969 c
408.3333 235.0522 409.8679 222.1273 413.3333 208.6636 C
426.1 210.2303 L
422.8739 222.7607 421.3334 235.7092 421.3334 249.9969 c
421.3334 264.2847 422.8739 277.2331 426.1 289.7636 C
f
427.8999 189.8864 m
412.6667 191.6697 L
409.2165 178.2107 407.6667 165.1879 407.6667 150.003 c
407.6667 134.8182 409.2165 121.7953 412.6667 108.3364 C
427.8999 110.1197 L
424.7157 122.5394 423.1666 135.6934 423.1666 150.003 c
423.1666 164.3127 424.7157 177.4666 427.8999 189.8864 C
f
U
429.7 90 m
412 92 L
408.5652 78.5458 407 65.425 407 50 c
407 34.575 408.5652 21.4542 412 8 C
429.7 10 L
426.5576 22.309 425 35.6685 425 50 c
425 64.3315 426.5576 77.691 429.7 90 C
f
u
468.1666 528.9969 m
468.1666 519.3285 463.533 514.6636 454.1667 514.6636 c
446.2936 514.6636 441.3334 518.8861 441.3334 525.3303 c
441.3334 531.7189 446.2936 535.9969 454.1667 535.9969 c
462.576 535.9969 470.8061 531.3132 487.2166 514.1802 C
490.8334 517.8303 L
473.0835 536.3823 464.2079 541.1636 454.3334 541.1636 c
442.9098 541.1636 436 534.4936 436 525.3303 c
436 515.7598 443.2709 509.4969 454.3334 509.4969 c
466.6538 509.4969 473.6667 516.0284 473.6667 528.8303 C
473.6667 558.6636 L
490.5 558.6636 L
490.5 563.8303 L
473.6667 563.8303 L
473.6667 582.3302 L
490.5 582.3302 L
490.5 587.4969 L
437.5 587.4969 L
437.5 582.3302 L
468.1666 582.3302 L
468.1666 563.8303 L
437.5 563.8303 L
437.5 558.6636 L
468.1666 558.6636 L
468.1666 528.9969 L
f
466.3332 428.9939 m
466.3332 420.4235 462.2996 416.3273 454.3333 416.3273 c
446.9611 416.3273 442.6667 419.9499 442.6667 425.6606 c
442.6667 431.2603 446.961 434.9938 454.3333 434.9938 c
462.5343 434.9938 470.3227 430.5045 486.5333 413.4605 C
491.6667 418.6606 L
473.5883 437.7023 464.9735 442.3273 454.6667 442.3273 c
442.1607 442.3273 434.9999 435.4174 434.9999 425.6606 c
434.9999 415.4226 442.5496 408.9939 454.6667 408.9939 c
467.0582 408.9939 474.3334 415.795 474.3334 428.6605 C
474.3334 457.3271 L
491 457.3271 L
491 464.6606 L
474.3334 464.6606 L
474.3334 480.6605 L
491 480.6605 L
491 487.9939 L
437 487.9939 L
437 480.6605 L
466.3332 480.6605 L
466.3332 464.6606 L
437 464.6606 L
437 457.3271 L
466.3332 457.3271 L
466.3332 428.9939 L
f
464.5 329 m
464.5 321.5275 461.0664 318 454.5 318 c
447.6284 318 444 321.0227 444 326 c
444 330.8108 447.6284 334 454.5 334 c
462.4927 334 469.8393 329.7051 485.85 312.75 C
492.5 319.5 L
474.0929 339.0312 465.739 343.5 455 343.5 c
441.4117 343.5 434 336.3503 434 326 c
434 315.0945 441.8283 308.5 455 308.5 c
467.4626 308.5 475 315.5707 475 328.5 C
475 356 L
491.5 356 L
491.5 365.5 L
475 365.5 L
475 379 L
491.5 379 L
491.5 388.5 L
436.5 388.5 L
436.5 379 L
464.5 379 L
464.5 365.5 L
436.5 365.5 L
436.5 356 L
464.5 356 L
464.5 329 L
f
462.6666 228.9969 m
462.6666 222.6224 459.833 219.6636 454.6667 219.6636 c
448.2959 219.6636 445.3334 222.0864 445.3334 226.3303 c
445.3334 230.3522 448.2958 232.9969 454.6667 232.9969 c
462.451 232.9969 469.3558 228.8964 485.1666 212.0303 C
493.3334 220.3303 L
474.5977 240.3512 466.5046 244.6636 455.3334 244.6636 c
440.6627 244.6636 433 237.2742 433 226.3303 c
433 214.7572 441.1069 207.9969 455.3334 207.9969 c
467.867 207.9969 475.6667 215.3373 475.6667 228.3303 C
475.6667 254.6636 L
492 254.6636 L
492 266.3303 L
475.6667 266.3303 L
475.6667 277.3302 L
492 277.3302 L
492 288.9969 L
436 288.9969 L
436 277.3302 L
462.6666 277.3302 L
462.6666 266.3303 L
436 266.3303 L
436 254.6636 L
462.6666 254.6636 L
462.6666 228.9969 L
f
460.8334 129.003 m
460.8334 123.7265 458.5998 121.3363 454.8333 121.3363 c
448.9633 121.3363 446.6666 123.1592 446.6666 126.6697 c
446.6666 129.9027 448.9632 132.0031 454.8333 132.0031 c
462.4093 132.0031 468.8724 128.097 484.4833 111.3197 C
494.1667 121.1697 L
475.1024 141.6801 467.2702 145.8363 455.6667 145.8363 c
439.9136 145.8363 432 138.2071 432 126.6697 c
432 114.4292 440.3856 107.503 455.6667 107.503 c
468.2713 107.503 476.3333 115.1131 476.3333 128.1697 C
476.3333 153.3364 L
492.5 153.3364 L
492.5 167.1697 L
476.3333 167.1697 L
476.3333 175.6697 L
492.5 175.6697 L
492.5 189.503 L
435.5 189.503 L
435.5 175.6697 L
460.8334 175.6697 L
460.8334 167.1697 L
435.5 167.1697 L
435.5 153.3364 L
460.8334 153.3364 L
460.8334 129.003 L
f
U
459 29 m
459 24.8214 457.3665 23 455 23 c
449.6307 23 448 24.223 448 27 c
448 29.4441 449.6306 31 455 31 c
462.3676 31 468.3889 27.2883 483.8 10.6 C
495 22 L
475.6071 43.0001 468.0358 47 456 47 c
439.1646 47 431 39.131 431 27 c
431 14.0919 439.6643 7 456 7 c
468.6757 7 477 14.8796 477 28 C
477 52 L
493 52 L
493 68 L
477 68 L
477 74 L
493 74 L
493 90 L
435 90 L
435 74 L
459 74 L
459 68 L
435 68 L
435 52 L
459 52 L
459 29 L
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
