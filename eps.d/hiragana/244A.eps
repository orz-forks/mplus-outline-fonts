%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (244A.eps)
%%CreationDate: (4/14/04) (10:18 AM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
1 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
500 600 m
500 700 L
400 700 L
400 600 L
500 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
400 600 m
400 700 L
300 700 L
300 600 L
400 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
500 500 m
500 600 L
400 600 L
400 500 L
500 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
400 500 m
400 600 L
300 600 L
300 500 L
400 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
0 Ap
0 O
0 g
1 D
120.9 610.7 m
117.5065 623.6733 116 635.7997 116 650 c
116 664.2003 117.5065 676.3265 120.9 689.3 C
118 690 L
114.4733 676.5171 113 663.9841 113 650 c
113 636.0159 114.4733 623.4828 118 610 C
120.9 610.7 L
f
0 D
186 678 m
186 681 L
144 681 L
144 678 L
186 678 L
f
151.9 647.7 m
144.3633 642.5303 140 635.4189 140 631 c
140 623.2929 149.2818 617 166 617 c
173.3056 617 179.6875 617.875 187.4 619.9 C
188 617 L
180.3125 614.9375 173.6043 614 166 614 c
147.3004 614 137 621.3907 137 631 c
137 636.6783 141.8665 644.4209 150 650 C
151.9 647.7 L
f
U
*u
1 D
241.314 626.8696 m
234.1042 647.13 227.6702 669.2023 222.9 690.6 C
220 690 L
224.9164 667.9465 231.375 645.75 238.414 625.9696 C
241.314 626.8696 L
f
271 614 m
264.6262 614 260 618.2057 260 624 c
260 629.4611 264.4595 634 271 634 c
278.5924 634 283.7516 630.7167 292.4 615.5 C
295 617 L
285.8434 633.1109 280.0588 637 271 637 c
262.7349 637 257 631.1796 257 624 c
257 616.3206 263.2349 611 271 611 c
282.2917 611 291 621.4589 291 644 c
291 664.1731 275.545 679 253 679 c
226.7065 679 208 660.65 208 638 c
208 622.6903 214.9597 615 224 615 c
237.7944 615 255.967 638.4071 267.9 693.4 C
265 694 L
253.7295 642.0604 236.4474 618 224 618 c
216.3599 618 211 624.6433 211 638 c
211 659.33 228.7229 676 253 676 c
273.9408 676 288 662.5076 288 644 c
288 623.8818 280.9781 614 271 614 c
f
*U
*u
u
329 609 m
332 609 L
332 692 L
329 692 L
329 675 L
308 675 L
308 672 L
329 672 L
329 609 L
f
U
394 620 m
385.4784 634.9937 379.0921 639 367 639 c
357.797 639 351 632.8986 351 625 c
351 616.7681 358.1303 611 367 611 c
380.0671 611 390 622.0304 390 646 c
390 673.3973 381.899 682 363 682 c
349.0755 682 333.5963 670.9833 307 633 C
309.5 631.3 L
334.7887 667.4159 350.3576 679 363 679 c
380.5649 679 387 671.0743 387 646 c
387 624.6637 379.0435 614 367 614 c
359.5888 614 354 618.729 354 625 c
354 631.1043 359.4221 636 367 636 c
377.9591 636 383.413 632.553 391.4 618.5 C
394 620 L
f
*U
0 D
450 684.2 m
445.4625 633.9406 436.8038 618 427 618 c
419.1064 618 411 629.3493 411 645 c
411 667.0403 428.1823 683 454 683 c
474.2866 683 489 668.4798 489 650 c
489 629.7153 477.3299 616.3269 460.5 614.9 C
461 612 L
479.1261 613.5368 492 627.6552 492 650 c
492 670.3671 475.6617 686 454 686 c
426.4631 686 408 668.8969 408 645 c
408 626.8912 417.5572 615 427 615 c
438.3726 615 448.0933 629.6517 453 684 C
450 684.2 L
f
u
449 584.1636 m
444.6196 535.6454 436.3954 519.8303 427.5 519.8303 C
420.3125 519.8303 413 530.1623 413 544.9969 c
413 566.2419 429.1565 581.3302 454 581.3302 c
473.2009 581.3302 486.9999 567.7769 486.9999 549.9969 c
486.9999 530.3828 476.181 517.9612 459.9166 516.547 C
460.8333 511.3302 L
479.494 512.9124 492.5 527.2043 492.5 549.9969 c
492.5 570.8696 475.9748 586.6636 454 586.6636 c
426.133 586.6636 407.5 569.3399 407.5 544.9969 c
407.5 526.4247 417.3675 514.3302 427.5 514.3302 c
439.9065 514.3302 449.4966 528.4111 454.5 583.8303 C
449 584.1636 L
f
447.9999 484.1272 m
443.7768 437.3503 435.987 421.6607 428 421.6607 C
421.5185 421.6607 415.0001 430.9753 415.0001 444.9939 c
415.0001 465.4436 430.1307 479.6605 454 479.6605 c
472.1153 479.6605 484.9999 467.074 484.9999 449.9939 c
484.9999 431.0503 475.0322 419.5955 459.3333 418.194 C
460.6666 410.6605 L
479.8619 412.288 493 426.7534 493 449.9939 c
493 471.372 476.2879 487.3273 454 487.3273 c
425.803 487.3273 407 469.7828 407 444.9939 c
407 425.9582 417.1779 413.6605 428 413.6605 c
441.4405 413.6605 450.9 427.1705 456.0001 483.6605 C
447.9999 484.1272 L
f
447 384.1 m
442.934 339.0641 435.5786 323.5 428.5 323.5 C
422.7245 323.5 417 331.7974 417 345 c
417 364.6544 431.1048 378 454 378 c
471.0298 378 483 366.3804 483 350 c
483 331.7269 473.8835 321.2388 458.75 319.85 C
460.5 310 L
480.2297 311.6727 493.5 326.3117 493.5 350 c
493.5 371.8836 476.601 388 454 388 c
425.473 388 406.5 370.2349 406.5 345 c
406.5 325.5009 416.9883 313 428.5 313 c
442.9743 313 452.3032 325.9391 457.5 383.5 C
447 384.1 L
f
446 284.0636 m
442.0912 240.7689 435.1702 225.3303 429 225.3303 C
423.9306 225.3303 419 232.6104 419 244.9969 c
419 263.8561 432.0789 276.3302 454 276.3302 c
469.9441 276.3302 480.9999 265.6775 480.9999 249.9969 c
480.9999 232.3944 472.7347 222.8731 458.1666 221.497 C
460.3333 209.3302 L
480.5976 211.0484 494 225.8608 494 249.9969 c
494 272.3861 476.9141 288.6636 454 288.6636 c
425.143 288.6636 406 270.6779 406 244.9969 c
406 225.0344 416.7986 212.3302 429 212.3302 c
444.5082 212.3302 453.7066 224.6985 459 283.3303 C
446 284.0636 L
f
445 184.0364 m
441.2484 142.4828 434.7618 127.1696 429.5 127.1696 C
425.1366 127.1696 420.9999 133.4325 420.9999 145.003 c
420.9999 163.0669 433.0531 174.6697 454 174.6697 c
468.8586 174.6697 479 164.9838 479 150.003 c
479 133.071 471.586 124.5164 457.5833 123.153 C
460.1667 108.6697 L
480.9654 110.4331 494.5 125.4192 494.5 150.003 c
494.5 172.8976 477.2272 189.3363 454 189.3363 c
424.813 189.3363 405.5 171.13 405.5 145.003 c
405.5 124.5771 416.609 111.6697 429.5 111.6697 c
446.042 111.6697 455.1098 123.4672 460.4999 183.1697 C
445 184.0364 L
f
U
460 8 m
481.3333 9.8087 495 24.9683 495 50 c
495 73.4001 477.5404 90 454 90 c
424.483 90 405 71.573 405 45 c
405 24.1106 416.4193 11 430 11 c
447.576 11 456.5132 22.2266 462 83 C
444 84 L
440.4056 44.1876 434.3534 29 430 29 C
426.3426 29 423 34.2455 423 45 c
423 62.2686 434.0272 73 454 73 c
467.773 73 477 64.2809 477 50 c
477 33.7385 470.4371 26.1508 457 24.8 C
460 8 L
f
u
118 549.9969 m
118 535.7748 119.515 523.4429 122.8667 510.5803 C
117.5 509.6636 L
113.9886 523.1416 112.5 535.7727 112.5 549.9969 c
112.5 564.2212 113.9886 576.8522 117.5 590.3303 C
122.8667 589.4136 L
119.515 576.5509 118 564.2191 118 549.9969 c
f
120.0001 449.9939 m
120.0001 435.7499 121.5236 423.2124 124.8334 410.4606 C
117 409.3272 L
113.5039 422.8005 112 435.5295 112 449.9939 c
112 464.4583 113.5039 477.1872 117 490.6606 C
124.8334 489.5272 L
121.5236 476.7752 120.0001 464.2379 120.0001 449.9939 c
f
122 350 m
122 335.7341 123.532 322.9911 126.8 310.35 C
116.5 309 L
113.0192 322.4685 111.5 335.2954 111.5 350 c
111.5 364.7045 113.0192 377.5314 116.5 391 C
126.8 389.65 L
123.532 377.0087 122 364.2659 122 350 c
f
124 249.9969 m
124 235.7092 125.5406 222.7607 128.7667 210.2303 C
116 208.6636 L
112.5345 222.1273 111 235.0522 111 249.9969 c
111 264.9416 112.5345 277.8665 116 291.3303 C
128.7667 289.7636 L
125.5406 277.2331 124 264.2847 124 249.9969 c
f
125.9999 150.003 m
125.9999 135.6934 127.549 122.5394 130.7333 110.1197 C
115.5 108.3364 L
112.0499 121.7953 110.5 134.8182 110.5 150.003 c
110.5 165.1879 112.0499 178.2107 115.5 191.6697 C
130.7333 189.8864 L
127.549 177.4666 125.9999 164.3127 125.9999 150.003 c
f
U
u
186.5 576.4969 m
186.5 581.6636 L
144.1667 581.6636 L
144.1667 576.4969 L
186.5 576.4969 L
f
187 474.9938 m
187 482.3273 L
144.3333 482.3273 L
144.3333 474.9938 L
187 474.9938 L
f
187.5 373.5 m
187.5 383 L
144.5 383 L
144.5 373.5 L
187.5 373.5 L
f
188 271.9969 m
188 283.6636 L
144.6667 283.6636 L
144.6667 271.9969 L
188 271.9969 L
f
188.5 170.5031 m
188.5 184.3363 L
144.8333 184.3363 L
144.8333 170.5031 L
188.5 170.5031 L
f
U
u
142.3334 531.4969 m
142.3334 524.3494 150.4834 518.8303 166.1667 518.8303 c
173.307 518.8303 179.9792 519.7262 187.6333 521.7137 C
188.5 516.6636 L
180.8125 514.6219 173.7709 513.6636 166.1667 513.6636 c
147.1337 513.6636 136.8333 521.1044 136.8333 531.1636 c
136.8333 536.9259 141.8783 545.1185 150 550.8303 C
153.5167 547.2469 L
146.4243 542.2791 142.3334 535.6104 142.3334 531.4969 c
f
144.6668 431.9939 m
144.6668 425.406 151.6849 420.6607 166.3333 420.6607 c
173.3084 420.6607 180.2708 421.5773 187.8667 423.5273 C
189 416.3272 L
181.3125 414.3064 173.9376 413.3272 166.3333 413.3272 c
146.9671 413.3272 136.6666 420.8181 136.6666 431.3272 c
136.6666 437.1735 141.8901 445.8162 150 451.6606 C
155.1334 446.7939 L
148.4854 442.028 144.6668 435.802 144.6668 431.9939 c
f
147 332.5 m
147 326.4716 152.8864 322.5 166.5 322.5 c
173.3099 322.5 180.5625 323.4375 188.1 325.35 C
189.5 316 L
181.8125 314 174.1043 313 166.5 313 c
146.8005 313 136.5 320.541 136.5 331.5 c
136.5 337.4302 141.902 346.5229 150 352.5 C
156.75 346.35 L
150.5462 341.786 147 336.0027 147 332.5 c
f
149.3334 232.9969 m
149.3334 227.5282 154.088 224.3303 166.6667 224.3303 c
173.3113 224.3303 180.8542 225.2887 188.3333 227.1637 C
190 215.6636 L
182.3125 213.6844 174.271 212.6636 166.6667 212.6636 c
146.6338 212.6636 136.3333 220.2547 136.3333 231.6636 c
136.3333 237.6777 141.9138 247.2206 150 253.3303 C
158.3667 245.8969 L
152.6073 241.5349 149.3334 236.1942 149.3334 232.9969 c
f
151.6666 133.503 m
151.6666 128.5938 155.2895 126.1696 166.8333 126.1696 c
173.3127 126.1696 181.1458 127.1488 188.5666 128.9863 C
190.5 115.3364 L
182.8125 113.3781 174.4376 112.3364 166.8333 112.3364 c
146.4672 112.3364 136.1667 119.9776 136.1667 131.8364 c
136.1667 137.9345 141.9256 147.9273 150 154.1697 C
159.9833 145.4531 L
154.6681 141.2929 151.6666 136.3949 151.6666 133.503 c
f
U
u
128 50 m
128 35.6685 129.5576 22.309 132.7 10 C
115 8 L
111.5652 21.4542 110 34.575 110 50 c
110 65.425 111.5652 78.5458 115 92 C
132.7 90 L
129.5576 77.691 128 64.3315 128 50 c
f
189 69 m
189 85 L
145 85 L
145 69 L
189 69 L
f
154 34 m
154 29.6504 156.4911 28 167 28 c
173.3142 28 181.4375 29 188.8 30.8 C
191 15 L
183.3125 13.0625 174.6043 12 167 12 c
146.3006 12 136 19.6913 136 32 c
136 38.182 141.9375 48.625 150 55 C
161.6 45 L
156.7292 41.0417 154 36.5865 154 34 c
f
U
u
1 D
242.4283 527.7216 m
235.1755 547.9356 228.9231 569.3009 224.0833 590.8303 C
219.0333 589.8303 L
224.0211 567.6421 230.348 546.0332 237.4949 526.1216 C
242.4283 527.7216 L
f
243.5427 428.5737 m
236.2468 448.7413 230.176 469.3996 225.2667 491.0606 C
218.0666 489.6605 L
223.1259 467.3378 229.3209 446.3165 236.5759 426.2736 C
243.5427 428.5737 L
f
244.657 329.4348 m
237.318 349.556 231.4288 369.5074 226.45 391.3 C
217.1 389.5 L
222.2307 367.0426 228.294 346.6089 235.657 326.4348 C
244.657 329.4348 L
f
245.7713 230.2868 m
238.3893 250.3617 232.6818 269.606 227.6334 291.5303 C
216.1333 289.3303 L
221.3355 266.7382 227.267 246.8921 234.738 226.5868 C
245.7713 230.2868 L
f
246.8856 131.1479 m
239.4606 151.1764 233.9346 169.7138 228.8166 191.7697 C
215.1667 189.1697 L
220.4403 166.443 226.24 147.1845 233.819 126.748 C
246.8856 131.1479 L
f
U
u
363 582.3303 m
348.9188 582.3303 333.0669 571.1437 306.5 533.4969 C
310.5834 530.2469 L
335.3327 565.3879 351.0365 576.9969 363 576.9969 c
379.1419 576.9969 385 569.8087 385 545.9969 c
385 525.189 377.9075 515.6636 366.6667 515.6636 c
359.8792 515.6636 354.8334 519.9225 354.8334 525.6636 c
354.8334 531.2381 359.7125 535.6636 366.6667 535.6636 c
376.9732 535.6636 382.3974 532.1931 390.75 517.4969 C
394.6667 520.6636 L
385.8173 536.234 378.7947 540.6636 366.6667 540.6636 c
356.8502 540.6636 349.6666 534.1423 349.6666 525.6636 c
349.6666 516.9072 357.128 510.6636 366.6667 510.6636 c
380.1594 510.6636 390.5 521.7776 390.5 545.9969 c
390.5 573.5245 382.3107 582.3303 363 582.3303 c
f
363 482.6606 m
348.7621 482.6606 332.5375 471.3042 306 433.9939 C
311.6667 429.1938 L
335.8766 463.3599 351.7155 474.9938 363 474.9938 c
377.7189 474.9938 382.9999 468.5431 382.9999 445.9939 c
382.9999 425.7142 376.7716 417.3273 366.3333 417.3273 c
360.1696 417.3273 355.6667 421.1159 355.6667 426.3273 c
355.6667 431.372 360.0029 435.3272 366.3333 435.3272 c
375.9872 435.3272 381.3819 431.8331 390.1 416.4938 C
395.3334 421.3273 L
386.1563 437.4743 378.4974 442.3273 366.3333 442.3273 c
355.9035 442.3273 348.3332 435.3859 348.3332 426.3273 c
348.3332 417.0464 356.1257 410.3272 366.3333 410.3272 c
380.2516 410.3272 391 421.5249 391 445.9939 c
391 473.6518 382.7224 482.6606 363 482.6606 c
f
363 383 m
348.6055 383 332.0081 371.4738 305.5 334.5 C
312.75 328.15 L
336.4205 361.3413 352.3944 373 363 373 c
376.2961 373 381 367.2868 381 346 c
381 326.2486 375.6358 319 366 319 c
360.4599 319 356.5 322.3184 356.5 327 c
356.5 331.515 360.2932 335 366 335 c
375.0014 335 380.3665 331.4824 389.45 315.5 C
396 322 L
386.4952 338.7236 378.2001 344 366 344 c
354.9568 344 347 336.6387 347 327 c
347 317.1947 355.1235 310 366 310 c
380.3439 310 391.5 321.2813 391.5 346 c
391.5 373.7882 383.134 383 363 383 c
f
363 283.3303 m
348.4488 283.3303 331.4787 271.6342 305 234.9969 C
313.8334 227.0969 L
336.9645 259.3133 353.0733 270.9969 363 270.9969 c
374.8731 270.9969 379 266.0212 379 245.9969 c
379 226.7738 374.4998 220.6636 365.6667 220.6636 c
360.7503 220.6636 357.3334 223.5119 357.3334 227.6636 c
357.3334 231.6488 360.5836 234.6636 365.6667 234.6636 c
374.0155 234.6636 379.3509 231.1225 388.8 214.4969 C
396.6667 222.6636 L
386.8342 239.9639 377.9027 245.6636 365.6667 245.6636 c
354.0101 245.6636 345.6666 237.8823 345.6666 227.6636 c
345.6666 217.3338 354.1212 209.6636 365.6667 209.6636 c
380.4361 209.6636 392 221.0286 392 245.9969 c
392 273.9154 383.5457 283.3303 363 283.3303 c
f
363 183.6697 m
348.2921 183.6697 330.9493 171.8038 304.5 135.503 C
314.9166 126.0531 L
337.5084 157.2947 353.7522 169.0031 363 169.0031 c
373.4502 169.0031 377.0001 164.7649 377.0001 146.003 c
377.0001 127.3082 373.364 122.3363 365.3334 122.3363 c
361.0407 122.3363 358.1667 124.7144 358.1667 128.3363 c
358.1667 131.7919 360.874 134.3364 365.3334 134.3364 c
373.0296 134.3364 378.3354 130.7717 388.15 113.5031 C
397.3333 123.3363 L
387.1731 141.2132 377.6054 147.3363 365.3334 147.3363 c
353.0634 147.3363 344.3334 139.1351 344.3334 128.3363 c
344.3334 117.4821 353.119 109.3364 365.3334 109.3364 c
380.5284 109.3364 392.5 120.785 392.5 146.003 c
392.5 174.0518 383.9574 183.6697 363 183.6697 c
f
U
u
327.8333 508.6636 m
333.1667 508.6636 L
333.1667 592.3303 L
327.8333 592.3303 L
327.8333 575.997 L
307.6667 575.997 L
307.6667 570.9969 L
327.8333 570.9969 L
327.8333 508.6636 L
f
326.6666 408.3272 m
334.3334 408.3272 L
334.3334 492.6606 L
326.6666 492.6606 L
326.6666 476.994 L
307.3333 476.994 L
307.3333 469.9938 L
326.6666 469.9938 L
326.6666 408.3272 L
f
325.5 308 m
335.5 308 L
335.5 393 L
325.5 393 L
325.5 378 L
307 378 L
307 369 L
325.5 369 L
325.5 308 L
f
324.3333 207.6636 m
336.6667 207.6636 L
336.6667 293.3303 L
324.3333 293.3303 L
324.3333 278.997 L
306.6667 278.997 L
306.6667 267.9969 L
324.3333 267.9969 L
324.3333 207.6636 L
f
323.1667 107.3364 m
337.8333 107.3364 L
337.8333 193.6697 L
323.1667 193.6697 L
323.1667 180.003 L
306.3334 180.003 L
306.3334 167.0031 L
323.1667 167.0031 L
323.1667 107.3364 L
f
U
*u
322 7 m
339 7 L
339 94 L
322 94 L
322 81 L
306 81 L
306 66 L
322 66 L
322 7 L
f
363 84 m
348.1354 84 330.4199 71.9643 304 36 C
316 25 L
338.0523 55.2667 354.4311 67 363 67 c
372.0272 67 375 63.4994 375 46 c
375 27.8335 372.2281 24 365 24 c
361.3311 24 359 25.9079 359 29 c
359 31.9257 361.1644 34 365 34 c
372.0437 34 377.3199 30.4118 387.5 12.5 C
398 24 L
387.512 42.4535 377.3081 49 365 49 c
352.1167 49 343 40.3787 343 29 c
343 17.6212 352.1167 9 365 9 c
380.6207 9 393 20.5323 393 46 c
393 74.179 384.3691 84 363 84 c
f
*U
*u
59 71.7 m
68.625 69.25 80.5 65.8125 90.2 62.8 C
95 79 L
85.25 82.0625 73.8125 85.375 64 88 C
59 71.7 L
f
20.3 19.2 m
29.1956 43.0503 35.6469 65.8892 41 93 C
24 95 L
18.8333 68.8333 12.625 47.125 4 24 C
20.3 19.2 L
f
54 84 m
9 84 L
9 68 L
54 68 L
54 84 L
f
61 62 m
61 30.6689 l
61 23.3883 59.1132 21 54 21 c
48.9222 21 46 23.3217 46 27 c
46 30.5119 48.7 33 54 33 c
62.3054 33 75.7695 25.0614 83.4 14.9 C
95 25 L
86.4988 38.2368 68.6705 48 54 48 c
37.0198 48 28 39.3786 28 27 c
28 14.3436 37.4088 6 54 6 c
69.2863 6 79 15.2919 79 30.6689 c
79 62 L
61 62 L
f
*U
u
18.3833 120.0031 m
27.2533 143.6776 33.644 166.1136 38.9999 192.903 C
24.3333 194.6697 L
19.1215 168.6141 12.9577 147.1873 4.3333 124.1697 C
18.3833 120.0031 L
f
16.4665 220.8062 m
25.311 244.3048 31.6412 266.3381 36.9999 292.8061 C
24.6667 294.3394 L
19.4097 268.395 13.2904 247.2496 4.6667 224.3395 C
16.4665 220.8062 L
f
14.55 321.6 m
23.3688 344.9229 29.6385 366.5533 35 392.7 C
25 394 L
19.6979 368.1666 13.6231 347.3027 5 324.5 C
14.55 321.6 L
f
12.6332 422.4031 m
21.4265 445.5501 27.6357 466.7778 32.9999 492.603 C
25.3333 493.6697 L
19.9861 467.9475 13.9559 447.365 5.3333 424.6697 C
12.6332 422.4031 L
f
10.7167 523.1969 m
19.4844 546.1682 25.633 566.993 31 592.4969 C
25.6666 593.3303 L
20.2743 567.7192 14.2885 547.4182 5.6666 524.8303 C
10.7167 523.1969 L
f
U
u
53.5 183.1697 m
9.3333 183.1697 L
9.3333 169.3364 L
53.5 169.3364 L
53.5 183.1697 L
f
53 282.3394 m
9.6667 282.3394 L
9.6667 270.6729 L
53 270.6729 L
53 282.3394 L
f
52.5 381.5 m
10 381.5 L
10 372 L
52.5 372 L
52.5 381.5 L
f
52 480.6697 m
10.3333 480.6697 L
10.3333 473.3364 L
52 473.3364 L
52 480.6697 L
f
51.5 579.8303 m
10.6666 579.8303 L
10.6666 574.6636 L
51.5 574.6636 L
51.5 579.8303 L
f
U
u
59.8667 173.1031 m
69.3958 170.6594 80.6936 167.3666 90.35 164.3531 C
94.5 178.3364 L
84.8287 181.3862 73.9594 184.5523 64.1667 187.1697 C
59.8667 173.1031 L
f
60.7334 274.5062 m
70.1667 272.0687 80.8873 268.9206 90.5 265.9062 C
94 277.6727 L
84.4075 280.7099 74.1064 283.7297 64.3333 286.3394 C
60.7334 274.5062 L
f
61.6 375.9 m
70.9375 373.4687 81.081 370.4654 90.65 367.45 C
93.5 377 L
83.9863 380.0245 74.2533 382.8979 64.5 385.5 C
61.6 375.9 L
f
62.4667 477.3031 m
71.7083 474.8781 81.2747 472.0195 90.8 469.0031 C
93 476.3364 L
83.5651 479.3482 74.4003 482.0753 64.6667 484.6697 C
62.4667 477.3031 L
f
63.3333 578.6969 m
72.4791 576.2781 81.4683 573.5642 90.95 570.5469 C
92.5 575.6636 L
83.1439 578.6629 74.5472 581.2435 64.8333 583.8303 C
63.3333 578.6969 L
f
U
u
62.3334 162.5031 m
62.3334 130.672 l
62.3334 122.5996 59.7613 119.503 53.8333 119.503 c
47.7381 119.503 44.3333 122.247 44.3333 126.6697 c
44.3333 130.8395 47.5604 133.6697 53.8333 133.6697 c
62.923 133.6697 76.3126 125.8674 83.9 115.4864 C
94 124.1697 L
85.5979 137.2521 68.4121 146.6697 53.8333 146.6697 c
37.4676 146.6697 28.8333 138.4397 28.8333 126.6697 c
28.8333 114.4739 37.8473 106.5031 53.8333 106.5031 c
68.5024 106.5031 77.8333 115.5679 77.8333 130.672 c
77.8333 162.5031 L
62.3334 162.5031 L
f
63.6667 263.0061 m
63.6667 230.675 l
63.6667 221.8109 60.4093 218.006 53.6666 218.006 c
46.5539 218.006 42.6665 221.1724 42.6665 226.3394 c
42.6665 231.1672 46.4209 234.3395 53.6666 234.3395 c
63.5406 234.3395 76.8556 226.6733 84.4 216.0728 C
92.9999 223.3394 L
84.6971 236.2673 68.1538 245.3394 53.6666 245.3394 c
37.9155 245.3394 29.6667 237.5007 29.6667 226.3394 c
29.6667 214.6041 38.2859 207.0061 53.6666 207.0061 c
67.7186 207.0061 76.6666 215.8439 76.6666 230.675 c
76.6666 263.0061 L
63.6667 263.0061 L
f
65 363.5 m
65 330.6689 l
65 321.0131 61.0574 316.5 53.5 316.5 c
45.3699 316.5 41 320.0886 41 326 c
41 331.4857 45.2814 335 53.5 335 c
64.1582 335 77.3987 327.47 84.9 316.65 C
92 322.5 L
83.7963 335.2735 67.8955 344 53.5 344 c
38.3633 344 30.5 336.5527 30.5 326 c
30.5 314.7252 38.7244 307.5 53.5 307.5 c
66.9348 307.5 75.5 316.1108 75.5 330.6689 c
75.5 363.5 L
65 363.5 L
f
66.3334 464.0031 m
66.3334 430.6719 l
66.3334 420.2244 61.7055 415.003 53.3333 415.003 c
44.1858 415.003 39.3333 419.014 39.3333 425.6697 c
39.3333 431.8133 44.1419 435.6697 53.3333 435.6697 c
64.7759 435.6697 77.9418 428.276 85.4 417.2364 C
91 421.6697 L
82.8955 434.2887 67.6371 442.6697 53.3333 442.6697 c
38.8111 442.6697 31.3333 435.6138 31.3333 425.6697 c
31.3333 414.8554 39.163 408.0031 53.3333 408.0031 c
66.151 408.0031 74.3333 416.3868 74.3333 430.6719 c
74.3333 464.0031 L
66.3334 464.0031 L
f
67.6666 564.4969 m
67.6666 530.6658 l
67.6666 519.4267 62.3535 513.497 53.1667 513.497 c
43.0018 513.497 37.6667 517.9302 37.6667 525.3303 c
37.6667 532.1318 43.0024 536.3303 53.1667 536.3303 c
65.3934 536.3303 78.4848 529.0727 85.9 517.8136 C
90 520.8303 L
81.9947 533.2949 67.3788 541.3303 53.1667 541.3303 c
39.2589 541.3303 32.1666 534.6658 32.1666 525.3303 c
32.1666 514.9765 39.6015 508.4969 53.1667 508.4969 c
65.3672 508.4969 73.1667 516.6537 73.1667 530.6658 c
73.1667 564.4969 L
67.6666 564.4969 L
f
U
*u
92 675 m
82.7227 677.9866 74.6942 680.4209 65 683 C
64.2 680.1 L
73.25 677.6875 81.662 675.1183 91.1 672.1 C
92 675 L
f
8.8 624 m
17.5421 646.7955 23.6302 667.2175 29 692.4 C
26 693 L
20.5625 667.5 14.6213 647.4805 6 625 C
8.8 624 L
f
51 679 m
11 679 L
11 676 L
51 676 L
51 679 L
f
89 620 m
81.0939 632.3102 67.1205 640 53 640 c
39.7068 640 33 633.7269 33 625 c
33 615.1068 40.0401 609 53 609 c
64.5834 609 72 616.9297 72 630.6689 c
72 665 L
69 665 L
69 630.6689 l
69 618.638 63.0016 612 53 612 c
41.8177 612 36 616.8556 36 625 c
36 632.4595 41.8629 637 53 637 c
66.0111 637 79.0279 629.8787 86.4 618.4 C
89 620 L
f
*U
u
270.6667 515.3303 m
265.0597 515.3303 261 519.0627 261 524.1636 c
261 528.9697 264.9619 532.9969 270.8333 532.9969 c
278.0647 532.9969 282.7673 529.9573 291.4499 514.6802 C
295.5 517.6636 L
286.1815 534.0594 280.4493 537.8303 270.8333 537.8303 c
262.129 537.8303 256 531.6932 256 524.1636 c
256 516.1474 262.5407 510.4969 270.6667 510.4969 c
282.3251 510.4969 291.5 521.6375 291.5 544.3303 c
291.5 564.6509 275.7734 579.6636 253 579.6636 c
226.5208 579.6636 207.5 561.2122 207.5 538.3303 c
207.5 522.3886 214.6797 514.3302 224.1667 514.3302 c
238.2571 514.3302 256.7351 537.8601 268.75 593.2303 C
263.7 594.1636 L
252.7391 543.6513 235.9889 519.6636 224.3333 519.6636 c
217.503 519.6636 212.6667 525.757 212.6667 538.3303 c
212.6667 558.3812 229.768 574.3302 253 574.3302 c
272.889 574.3302 285.9999 561.7992 285.9999 544.3303 c
285.9999 524.2282 279.7462 515.3303 270.6667 515.3303 c
f
270.3333 416.6606 m
265.4932 416.6606 262.0001 419.9198 262.0001 424.3272 c
262.0001 428.4783 265.4643 431.9938 270.6667 431.9938 c
277.537 431.9938 281.783 429.1978 290.4999 413.8605 C
296 418.3273 L
286.5196 435.0079 280.8399 438.6606 270.6667 438.6606 c
261.5231 438.6606 254.9999 432.2069 254.9999 424.3272 c
254.9999 415.9743 261.8466 409.9939 270.3333 409.9939 c
282.3586 409.9939 292 421.8161 292 444.6606 c
292 465.1287 276.0019 480.3273 253 480.3273 c
226.3351 480.3273 207 461.7744 207 438.6606 c
207 422.087 214.3998 413.6605 224.3333 413.6605 c
238.7198 413.6605 257.5033 437.3132 269.6 493.0605 C
262.3999 494.3272 L
251.7488 445.2422 235.5303 421.3273 224.6667 421.3273 c
218.6462 421.3273 214.3334 426.8707 214.3334 438.6606 c
214.3334 457.4324 230.8132 472.6605 253 472.6605 c
271.8373 472.6605 283.9999 461.0908 283.9999 444.6606 c
283.9999 424.5747 278.5143 416.6606 270.3333 416.6606 c
f
270 318 m
265.9267 318 263 320.7859 263 324.5 c
263 327.9962 265.9666 331 270.5 331 c
277.0094 331 280.7987 328.4476 289.55 313.05 C
296.5 319 L
286.8577 335.9654 281.2304 339.5 270.5 339.5 c
260.9172 339.5 254 332.7296 254 324.5 c
254 315.8103 261.1524 309.5 270 309.5 c
282.3921 309.5 292.5 322.0038 292.5 345 c
292.5 365.6156 276.2303 381 253 381 c
226.1495 381 206.5 362.3457 206.5 339 c
206.5 321.7945 214.1199 313 224.5 313 c
239.1825 313 258.2714 336.7754 270.45 392.9 C
261.1 394.5 L
250.7586 346.8421 235.0718 323 225 323 c
219.7892 323 216 327.9934 216 339 c
216 356.4929 231.8583 371 253 371 c
270.7857 371 282 360.3917 282 345 c
282 324.9302 277.2825 318 270 318 c
f
269.6667 219.3303 m
266.3603 219.3303 264 221.6429 264 224.6636 c
264 227.5048 266.469 229.9969 270.3333 229.9969 c
276.4817 229.9969 279.8144 227.6882 288.5999 212.2302 C
297 219.6636 L
287.1958 236.9139 281.621 240.3303 270.3333 240.3303 c
260.3113 240.3303 253 233.2432 253 224.6636 c
253 215.6372 260.4583 208.9969 269.6667 208.9969 c
282.4255 208.9969 293 222.1824 293 245.3303 c
293 266.0934 276.4588 281.6636 253 281.6636 c
225.9638 281.6636 206 262.9079 206 239.3303 c
206 221.4929 213.8399 212.3302 224.6667 212.3302 c
239.6452 212.3302 259.0395 236.2284 271.3 292.7303 C
259.8 294.6636 L
249.7682 248.433 234.6133 224.6636 225.3333 224.6636 c
220.9323 224.6636 217.6667 229.1071 217.6667 239.3303 c
217.6667 255.5441 232.9034 269.3302 253 269.3302 c
269.7339 269.3302 279.9999 259.6833 279.9999 245.3303 c
279.9999 225.2767 276.0506 219.3303 269.6667 219.3303 c
f
269.3333 120.6697 m
266.7937 120.6697 265 122.509 265 124.8364 c
265 127.0226 266.9714 129.0031 270.1667 129.0031 c
275.9541 129.0031 278.8302 126.938 287.65 111.4197 C
297.5 120.3363 L
287.5338 137.8715 282.0115 141.1697 270.1667 141.1697 c
259.7054 141.1697 252 133.7659 252 124.8364 c
252 115.4732 259.7641 108.503 269.3333 108.503 c
282.459 108.503 293.5 122.3702 293.5 145.6697 c
293.5 166.5803 276.6872 182.3363 253 182.3363 c
225.7782 182.3363 205.5 163.4792 205.5 139.6697 c
205.5 121.2004 213.56 111.6697 224.8333 111.6697 c
240.1079 111.6697 259.8076 135.6906 272.15 192.5697 C
258.5 194.8364 L
248.778 150.033 234.1548 126.3363 225.6667 126.3363 c
222.0753 126.3363 219.3333 130.2299 219.3333 139.6697 c
219.3333 154.6045 233.9485 167.6697 253 167.6697 c
268.6823 167.6697 278.0001 158.9841 278.0001 145.6697 c
278.0001 125.6322 274.8189 120.6697 269.3333 120.6697 c
f
U
*u
248 32 m
240.5319 51.982 235.1875 69.8125 230 92 C
214.2 89 L
219.5451 66.1387 225.213 47.4678 232.9 26.9 C
248 32 L
f
221 40 m
221 53.6558 234.9937 66 253 66 c
267.6306 66 276 58.2758 276 46 c
276 25.9787 273.587 22 269 22 c
267.2273 22 266 23.3661 266 25 c
266 26.5313 267.4738 28 270 28 c
275.4264 28 277.8459 26.1786 286.7 10.6 C
298 21 L
287.8719 38.82 282.402 42 270 42 c
259.0995 42 251 34.2796 251 25 c
251 15.3001 259.07 8 269 8 c
282.4925 8 294 22.5488 294 46 c
294 67.0581 276.9157 83 253 83 c
225.5925 83 205 64.0414 205 40 c
205 20.8988 213.2801 11 225 11 c
240.5706 11 260.5758 35.1437 273 92.4 C
257.2 95 L
247.7877 51.6239 233.6963 28 226 28 c
223.2185 28 221 31.3436 221 40 c
f
*U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
