%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (2443.eps)
%%CreationDate: (9/6/04) (12:23 PM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
500 600 m
500 700 L
400 700 L
400 600 L
500 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
400 600 m
400 700 L
300 700 L
300 600 L
400 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
500 500 m
500 600 L
400 600 L
400 500 L
500 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
400 500 m
400 600 L
300 600 L
300 500 L
400 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
0 O
0 g
1 D
52.3778 664.9306 m
69.1461 664.9306 79.289 656.1479 79.289 644.3972 c
79.289 625.6874 66.5581 615.8637 32.3333 615.8637 C
32.3333 613.1304 L
67.7718 613.1304 82.0668 623.7055 82.0668 644.3972 c
82.0668 657.6941 70.8172 667.6639 52.3778 667.6639 c
40.6905 667.6639 28.6233 665.6835 17.9332 662.0639 C
18.8088 659.4216 L
29.3269 662.9837 40.9444 664.9306 52.3778 664.9306 c
f
148.5111 609.7637 m
143.3933 630.1703 137.3272 650.7327 130.0288 672.4639 C
127.4666 671.5751 L
134.5061 650.6141 140.5481 630.337 145.8666 609.1304 C
148.5111 609.7637 L
f
150.8822 673.9528 m
152.5389 669.4869 154.2826 664.1744 155.6067 659.6928 C
158.2445 660.435 L
156.8834 665.0531 155 670.6612 153.4445 674.8417 C
150.8822 673.9528 L
f
159.6 631.4416 m
176.3808 632.9097 182.8668 638.8372 182.8668 649.9527 c
182.8668 658.1679 177.3505 662.8861 166.0001 662.8861 c
156.9024 662.8861 140.4371 657.5249 116.3332 645.2638 C
117.4954 642.8194 L
140.7524 654.6495 157.1651 660.175 165.9556 660.175 c
175.7973 660.175 180.1334 656.665 180.1334 649.9305 c
180.1334 640.2684 174.7511 635.485 159.2178 634.126 C
159.6 631.4416 L
f
222.9999 667.6417 m
220.311 667.6417 L
219.7624 659.9417 219.511 652.3786 219.511 645.1972 c
219.511 638.0157 219.7624 630.4527 220.311 622.7526 C
222.9777 622.7526 L
222.4599 630.1354 222.1957 637.827 222.1999 645.1972 c
222.204 652.5657 222.4741 660.2617 222.9999 667.6417 C
f
222.9777 622.7526 m
223.3298 648.7727 237.702 664.2195 257.9334 664.2195 c
272.733 664.2195 280.1557 657.2503 280.1557 645.2194 c
280.1557 632.6823 273.1883 626.2193 257.9778 626.2193 c
249.2109 626.2193 242.5768 629.8877 237.8257 637.7659 C
235.5679 636.2725 L
240.8336 627.5389 248.2535 623.5304 257.9778 623.5304 c
274.1993 623.5304 282.889 630.8127 282.889 645.2194 c
282.889 658.7598 274.4044 666.9084 257.9778 666.9084 c
236.355 666.9084 220.7297 650.4147 220.3554 622.7526 C
222.9777 622.7526 L
f
240.48 607.5526 m
254.3696 612.225 258.9112 618.6317 258.9112 636.3972 c
258.9112 646.9493 258.5613 664.1866 258.1112 676.4417 C
255.3778 676.4417 L
255.8321 664.0715 256.1778 646.7673 256.1778 636.3972 c
256.1778 619.8912 252.4483 614.4074 239.5422 610.0637 C
240.48 607.5526 L
f
349.8222 626.7971 m
349.8222 617.6312 345.007 612.6193 337.2444 612.6193 c
328.5703 612.6193 323.8221 616.7605 323.8221 623.6415 c
323.8221 630.5147 328.5703 634.6638 337.2444 634.6638 c
353.1101 634.6638 367.8605 628.0252 376.8601 617.2015 C
378.9112 618.9415 L
369.5516 630.2345 353.9371 637.3527 337.2444 637.3527 c
326.604 637.3527 321.0888 631.6547 321.0888 623.6415 c
321.0888 615.6248 326.6114 609.9304 337.2444 609.9304 c
346.3296 609.9304 352.5778 615.9049 352.5778 626.7971 C
352.5778 658.6417 L
377.2445 658.6417 L
377.2445 661.3306 L
352.5778 661.3306 L
352.5778 675.6417 L
349.8222 675.6417 L
349.8222 626.7971 L
f
u
52.2481 563.2057 m
67.9262 563.2057 77.3074 555.0754 77.3074 544.2679 c
77.3074 526.862 65.1349 517.5834 31.9444 517.5834 C
31.9444 512.7389 L
67.9426 512.7389 82.4557 523.4886 82.4557 544.3946 c
82.4557 557.9476 70.9912 568.0502 52.2481 568.0502 c
40.5745 568.0502 28.3605 566.0634 17.5443 562.4502 C
18.8606 557.7616 L
29.3446 561.2677 41.0438 563.2057 52.2481 563.2057 c
f
52.1185 461.4808 m
66.7064 461.4808 75.3259 454.0028 75.3259 444.1387 c
75.3259 428.0366 63.7117 419.3031 31.5554 419.3031 C
31.5554 412.3474 L
68.1134 412.3474 82.8446 423.2716 82.8446 444.392 c
82.8446 458.2011 71.1652 468.4366 52.1185 468.4366 c
40.4586 468.4366 28.0977 466.4433 17.1554 462.8365 C
18.9125 456.1016 L
29.3623 459.5518 41.1433 461.4808 52.1185 461.4808 c
f
51.9889 359.7653 m
65.4867 359.7653 73.3445 352.9395 73.3445 344.0186 c
73.3445 329.2203 62.2886 321.0318 31.1666 321.0318 C
31.1666 311.9651 L
68.2843 311.9651 83.2335 323.0639 83.2335 344.3986 c
83.2335 358.4638 71.3392 368.832 51.9889 368.832 c
40.3427 368.832 27.8349 366.8323 16.7666 363.232 C
18.9643 354.4508 L
29.38 357.8451 41.2428 359.7653 51.9889 359.7653 c
f
51.8592 258.0404 m
64.2669 258.0404 71.363 251.867 71.363 243.8893 c
71.363 230.3949 60.8654 222.7515 30.7777 222.7515 C
30.7777 211.5736 L
68.4551 211.5736 83.6224 222.847 83.6224 244.396 c
83.6224 258.7174 71.5132 269.2183 51.8592 269.2183 c
40.2268 269.2183 27.5721 267.2122 16.3776 263.6183 C
19.0162 252.7908 L
29.3977 256.1292 41.3423 258.0404 51.8592 258.0404 c
f
51.7296 156.3249 m
63.0472 156.3249 69.3816 150.8037 69.3816 143.7693 c
69.3816 131.5786 59.4423 124.4802 30.3888 124.4802 C
30.3888 111.1914 L
68.6259 111.1914 84.0112 122.6393 84.0112 144.4026 c
84.0112 158.98 71.6872 169.6138 51.7296 169.6138 c
40.1109 169.6138 27.3093 167.6013 15.9888 164.0138 C
19.068 151.14 L
29.4154 154.4225 41.4418 156.3249 51.7296 156.3249 c
f
U
19.1199 49.48 m
29.4331 52.7066 41.5412 54.6 51.6 54.6 c
61.8274 54.6 67.4001 49.7311 67.4001 43.64 c
67.4001 32.7532 58.019 26.1999 29.9999 26.1999 C
29.9999 10.7999 L
68.7967 10.7999 84.4001 22.4224 84.4001 44.4 c
84.4001 59.2336 71.8613 70.0001 51.6 70.0001 c
39.9949 70.0001 27.0465 67.9812 15.5999 64.4001 C
19.1199 49.48 L
f
u
126.5221 571.4428 m
133.53 550.4587 139.6037 529.9455 144.9222 508.7389 C
149.626 509.8 L
144.4551 530.4182 138.3715 551.1713 131.1307 572.8503 C
126.5221 571.4428 L
f
125.5776 471.3106 m
132.554 450.3033 138.6592 429.554 143.9777 408.3474 C
150.7408 409.8363 L
145.5169 430.6661 139.4159 451.6099 132.2326 473.2366 C
125.5776 471.3106 L
f
124.6332 371.1876 m
131.578 350.1571 137.7148 329.1717 143.0333 307.9651 C
151.8556 309.8818 L
146.5785 330.9231 140.4601 352.0576 133.3344 373.632 C
124.6332 371.1876 L
f
123.6888 271.0554 m
130.6019 250.0017 136.7703 228.7803 142.0888 207.5736 C
152.9704 209.9181 L
147.6403 231.171 141.5044 252.4962 134.4362 274.0183 C
123.6888 271.0554 L
f
122.7444 170.9323 m
129.626 149.8554 135.8259 128.398 141.1444 107.1913 C
154.0852 109.9635 L
148.702 131.428 142.5487 152.944 135.538 174.4138 C
122.7444 170.9323 L
f
U
u
159.6 530.3649 m
176.5107 531.8444 183.2557 538.0498 183.2557 549.5642 c
183.2557 558.4097 177.5319 563.4021 166.0001 563.4021 c
156.7204 563.4021 139.8594 557.8151 115.9443 545.6502 C
117.8195 541.3797 L
140.8724 553.106 157.2576 558.7094 165.5297 558.7094 c
174.4477 558.7094 178.4112 555.5377 178.4112 549.4124 c
178.4112 540.6297 173.4605 536.1532 158.8548 534.8753 C
159.6 530.3649 L
f
159.6 429.2882 m
176.6405 430.7791 183.6446 437.2625 183.6446 449.1757 c
183.6446 458.6514 177.7133 463.918 166.0001 463.918 c
156.5384 463.918 139.2816 458.1054 115.5554 446.0365 C
118.1436 439.94 L
140.9923 451.5626 157.35 457.2438 165.1037 457.2438 c
173.0981 457.2438 176.6889 454.4104 176.6889 448.8942 c
176.6889 440.991 172.17 436.8213 158.4918 435.6246 C
159.6 429.2882 L
f
159.6 328.2207 m
176.7703 329.723 184.0335 336.4844 184.0335 348.7964 c
184.0335 358.9023 177.8946 364.4431 166.0001 364.4431 c
156.3564 364.4431 138.704 358.4048 115.1665 346.4319 C
118.4676 338.5097 L
141.1123 350.0284 157.4424 355.7875 164.6778 355.7875 c
171.7487 355.7875 174.9668 353.2924 174.9668 348.3853 c
174.9668 341.3614 170.8796 337.4986 158.1289 336.383 C
159.6 328.2207 L
f
159.6 227.144 m
176.9002 228.6576 184.4224 235.697 184.4224 248.4079 c
184.4224 259.1441 178.076 264.9591 166.0001 264.9591 c
156.1744 264.9591 138.1262 258.695 114.7776 246.8182 C
118.7917 237.07 L
141.2323 248.4849 157.5348 254.3219 164.2519 254.3219 c
170.3991 254.3219 173.2445 252.1651 173.2445 247.8671 c
173.2445 241.7227 169.5891 238.1667 157.7659 237.1323 C
159.6 227.144 L
f
159.6 126.0766 m
177.03 127.6016 184.8112 134.9189 184.8112 148.0285 c
184.8112 159.395 178.2574 165.4841 166.0001 165.4841 c
155.9925 165.4841 137.5485 158.9944 114.3888 147.2137 C
119.1158 135.6396 L
141.3523 146.9507 157.6272 152.8656 163.826 152.8656 c
169.0496 152.8656 171.5223 151.0471 171.5223 147.3582 c
171.5223 142.0931 168.2987 138.844 157.403 137.8907 C
159.6 126.0766 L
f
U
u
150.2618 573.691 m
151.9241 569.1315 153.6458 563.877 155.0122 559.3143 C
159.6705 560.6528 L
158.5362 564.5012 156.1667 571.6146 154.8704 575.0984 C
150.2618 573.691 L
f
149.6414 473.4291 m
151.3093 468.7761 153.009 463.5795 154.4178 458.9357 C
161.0964 460.8706 L
160.189 463.9493 157.3334 472.5681 156.2964 475.3551 C
149.6414 473.4291 L
f
149.0211 373.1764 m
150.6945 368.4298 152.3723 363.2912 153.8233 358.5664 C
162.5223 361.0975 L
161.8417 363.4066 158.5 373.5306 157.7223 375.6209 C
149.0211 373.1764 L
f
148.4007 272.9146 m
150.0797 268.0743 151.7355 262.9937 153.2289 258.1879 C
163.9482 261.3153 L
163.4945 262.8547 159.6667 274.4841 159.1482 275.8776 C
148.4007 272.9146 L
f
147.7804 172.6619 m
149.4649 167.7281 151.0988 162.7054 152.6345 157.8186 C
165.3741 161.5422 L
165.1472 162.3119 160.8333 175.4467 160.5741 176.1434 C
147.7804 172.6619 L
f
U
159.6 24.9999 m
177.1598 26.5362 185.2001 34.1315 185.2001 47.64 c
185.2001 59.6367 178.4388 66.0001 166.0001 66.0001 c
155.8105 66.0001 136.9708 59.2847 113.9999 47.6 C
119.4399 34.1999 L
141.4723 45.4072 157.7196 51.4 163.4001 51.4 c
167.7 51.4 169.8001 49.9198 169.8001 46.84 c
169.8001 42.4544 167.0081 39.5121 157.04 38.64 C
159.6 24.9999 L
f
121.7999 70.8001 m
128.6499 49.7 134.8815 28.0065 140.2 6.7998 C
155.2 9.9999 L
149.7638 31.6759 143.593 53.3826 136.6399 74.8001 C
121.7999 70.8001 L
f
147.16 72.4001 m
148.8501 67.3726 150.462 62.408 152.04 57.44 C
166.8001 61.7601 L
162 76.4001 L
147.16 72.4001 L
f
u
224.3333 567.8984 m
219.7925 567.8984 L
219.2519 560.1984 218.9924 552.4272 218.9924 545.1946 c
218.9924 537.9619 219.2519 530.1908 219.7925 522.4908 C
224.1814 522.4908 L
223.7166 529.9181 223.5048 537.8528 223.5333 545.1946 c
223.5615 552.5252 223.8134 560.4901 224.3333 567.8984 C
f
225.6667 468.1551 m
219.2739 468.1551 L
218.7415 460.455 218.4739 452.4758 218.4739 445.192 c
218.4739 437.9082 218.7415 429.929 219.2739 422.2289 C
225.3852 422.2289 L
224.9733 429.7008 224.8139 437.8786 224.8666 445.192 c
224.919 452.4847 225.1527 460.7185 225.6667 468.1551 C
f
226.9999 368.4209 m
218.7554 368.4209 L
218.2311 360.7209 217.9554 352.5336 217.9554 345.1986 c
217.9554 337.8636 218.2311 329.6763 218.7554 321.9763 C
226.5888 321.9763 L
226.2299 329.4927 226.1228 337.9135 226.1999 345.1986 c
226.2763 352.4533 226.4919 360.956 226.9999 368.4209 C
f
228.3333 268.6776 m
218.2369 268.6776 L
217.7207 260.9776 217.4369 252.5822 217.4369 245.196 c
217.4369 237.8098 217.7207 229.4144 218.2369 221.7144 C
227.7925 221.7144 L
227.4866 229.2754 227.4319 237.9393 227.5333 245.196 c
227.6338 252.4128 227.8312 261.1843 228.3333 268.6776 C
f
229.6665 168.9434 m
217.7184 168.9434 L
217.2103 161.2434 216.9184 152.6399 216.9184 145.2026 c
216.9184 137.7652 217.2103 129.1618 217.7184 121.4618 C
228.9962 121.4618 L
228.7432 129.0672 228.7408 137.9742 228.8665 145.2026 c
228.9911 152.3815 229.1704 161.4218 229.6665 168.9434 C
f
U
u
224.1814 522.4908 m
224.5256 547.929 238.3817 563.0131 257.5445 563.0131 c
271.6747 563.0131 278.563 556.5971 278.563 545.3464 c
278.563 533.6537 272.1374 527.6798 257.8482 527.6798 c
249.5221 527.6798 243.3478 530.9825 238.5091 538.4476 C
235.2142 535.5431 L
240.6993 527.0105 248.1067 523.1389 257.8482 523.1389 c
274.5009 523.1389 283.4076 530.6919 283.4076 545.3464 c
283.4076 559.2405 274.627 567.554 257.8482 567.554 c
235.9837 567.554 220.482 551.0037 220.0962 522.4908 C
224.1814 522.4908 L
f
225.3852 422.2289 m
225.7215 447.0852 239.0614 461.8068 257.1556 461.8068 c
270.6164 461.8068 276.9704 455.9438 276.9704 445.4735 c
276.9704 434.6252 271.0864 429.1402 257.7185 429.1402 c
249.8333 429.1402 244.1189 432.0773 239.1924 439.1293 C
234.8605 434.8136 L
240.5649 426.4821 247.96 422.7474 257.7185 422.7474 c
274.8025 422.7474 283.9261 430.5711 283.9261 445.4735 c
283.9261 459.7212 274.8496 468.1996 257.7185 468.1996 c
235.6125 468.1996 220.2342 451.5926 219.8369 422.2289 C
225.3852 422.2289 L
f
226.5888 321.9763 m
226.9173 346.2508 239.7411 360.6097 256.7667 360.6097 c
269.5583 360.6097 275.3779 355.2998 275.3779 345.6097 c
275.3779 335.6057 270.0355 330.6096 257.5889 330.6096 c
250.1445 330.6096 244.8899 333.1811 239.8758 339.8201 C
234.5069 334.0934 L
240.4305 325.9629 247.8132 322.3651 257.5889 322.3651 c
275.1041 322.3651 284.4446 330.4594 284.4446 345.6097 c
284.4446 360.2109 275.0722 368.8542 257.5889 368.8542 c
235.2412 368.8542 219.9865 352.1906 219.5777 321.9763 C
226.5888 321.9763 L
f
227.7925 221.7144 m
228.1131 245.4071 240.4208 259.4034 256.3778 259.4034 c
268.5 259.4034 273.7852 254.6466 273.7852 245.7367 c
273.7852 236.5771 268.9846 232.0701 257.4593 232.0701 c
250.4557 232.0701 245.6609 234.276 240.5592 240.5019 C
234.1532 233.364 L
240.2961 225.4346 247.6665 221.9737 257.4593 221.9737 c
275.4057 221.9737 284.9631 230.3386 284.9631 245.7367 c
284.9631 260.6916 275.2949 269.4998 257.4593 269.4998 c
234.87 269.4998 219.7387 252.7796 219.3184 221.7144 C
227.7925 221.7144 L
f
228.9962 121.4618 m
229.3089 144.5726 241.1004 158.2064 255.9889 158.2064 c
267.4418 158.2064 272.1927 154.0026 272.1927 145.8729 c
272.1927 137.5576 267.9337 133.5395 257.3297 133.5395 c
250.7669 133.5395 246.4319 135.3798 241.2425 141.1927 C
233.7995 132.6438 L
240.1617 124.9154 247.5198 121.5914 257.3297 121.5914 c
275.7073 121.5914 285.4816 130.227 285.4816 145.8729 c
285.4816 161.1814 275.5175 170.1545 257.3297 170.1545 c
234.4987 170.1545 219.491 153.3776 219.0591 121.4618 C
228.9962 121.4618 L
f
U
u
240.9466 507.2907 m
254.9137 511.9892 259.5593 518.5036 259.5593 536.3946 c
259.5593 546.9222 259.2106 564.4138 258.7593 576.6984 C
253.9148 576.6984 L
254.3649 564.445 254.7148 546.8046 254.7148 536.3946 c
254.7148 520.5421 251.2334 515.4999 239.0385 511.3834 C
240.9466 507.2907 L
f
241.4133 407.0289 m
255.4577 411.7534 260.2075 418.3755 260.2075 436.392 c
260.2075 446.8951 259.8598 464.641 259.4075 476.9551 C
252.4517 476.9551 L
252.8976 464.8184 253.2518 446.8419 253.2518 436.392 c
253.2518 421.193 250.0184 416.5924 238.5347 412.7031 C
241.4133 407.0289 L
f
241.88 306.7762 m
256.0018 311.5267 260.8556 318.2565 260.8556 336.3986 c
260.8556 346.8772 260.509 364.8773 260.0556 377.2209 C
250.9889 377.2209 L
251.4304 365.201 251.7889 346.8883 251.7889 336.3986 c
251.7889 321.853 248.8036 317.6939 238.0311 314.0318 C
241.88 306.7762 L
f
242.3466 206.5144 m
256.5458 211.2909 261.5038 218.1283 261.5038 236.396 c
261.5038 246.8501 261.1583 265.1045 260.7038 277.4776 C
249.5259 277.4776 L
249.9631 265.5745 250.3259 246.9256 250.3259 236.396 c
250.3259 222.5039 247.5886 218.7864 237.5273 215.3515 C
242.3466 206.5144 L
f
242.8133 106.2617 m
257.0899 111.0642 262.1519 118.0094 262.1519 136.4026 c
262.1519 146.8322 261.8075 165.3408 261.3519 177.7434 C
248.063 177.7434 L
248.496 165.9571 248.863 146.9721 248.863 136.4026 c
248.863 123.1638 246.3737 119.888 237.0237 116.6802 C
242.8133 106.2617 L
f
U
230.9999 69.2001 m
217.1999 69.2001 L
216.6999 61.5001 216.3999 52.6886 216.3999 45.2 c
216.3999 37.7114 216.6999 28.8999 217.1999 21.1999 C
230.1999 21.1999 L
229.9999 28.8499 230.0499 38 230.1999 45.2 c
230.3486 52.341 230.5097 61.6502 230.9999 69.2001 C
f
233.4458 31.9143 m
240.0273 24.387 247.373 21.1999 257.2 21.1999 c
276.0089 21.1999 286.0001 30.1062 286.0001 46 c
286.0001 61.6621 275.7401 70.8001 257.2 70.8001 c
234.1274 70.8001 219.2432 53.9665 218.7999 21.1999 C
230.1999 21.1999 L
230.5047 43.7289 241.7801 57 255.6 57 c
266.3835 57 270.6001 53.3494 270.6001 46 c
270.6001 38.5291 266.8827 35 257.2 35 c
251.0782 35 247.203 36.4746 241.9259 41.8744 C
233.4458 31.9143 L
f
243.2799 5.9998 m
257.6339 10.8284 262.8 17.8813 262.8 36.4 c
262.8 46.8051 262.4568 65.568 262 78.0001 C
246.6 78.0001 L
247.0287 66.3305 247.4 47.0093 247.4 36.4 c
247.4 23.8147 245.1588 20.9805 236.5199 17.9999 C
243.2799 5.9998 L
f
u
348.7851 526.7945 m
348.7851 518.4559 344.5447 514.0797 337.5037 514.0797 c
329.5397 514.0797 325.2851 517.7194 325.2851 524.0249 c
325.2851 530.1078 329.623 533.8834 337.5037 533.8834 c
352.8827 533.8834 367.2092 527.4615 376.2767 516.7582 C
379.5594 519.9482 L
370.195 531.2469 354.3768 538.4242 337.5037 538.4242 c
326.2682 538.4242 320.4406 532.4925 320.4406 523.8982 c
320.4406 515.4198 326.3466 509.5389 337.5037 509.5389 c
347.4773 509.5389 353.7815 515.5376 353.7815 526.7945 C
353.7815 557.7316 L
377.5038 557.7316 L
377.5038 562.2725 L
353.7815 562.2725 L
353.7815 575.8984 L
348.7851 575.8984 L
348.7851 526.7945 L
f
347.7481 426.7919 m
347.7481 419.2806 344.0823 415.5401 337.7629 415.5401 c
330.509 415.5401 326.7481 418.6783 326.7481 424.4082 c
326.7481 429.7008 330.6757 433.103 337.7629 433.103 c
352.6553 433.103 366.5578 426.8978 375.6934 416.3148 C
380.2076 420.9549 L
370.8384 432.2593 354.8166 439.4958 337.7629 439.4958 c
325.9325 439.4958 319.7924 433.3304 319.7924 424.1549 c
319.7924 415.2149 326.0818 409.1474 337.7629 409.1474 c
348.625 409.1474 354.9853 415.1703 354.9853 426.7919 C
354.9853 456.8216 L
377.7631 456.8216 L
377.7631 463.2144 L
354.9853 463.2144 L
354.9853 476.1551 L
347.7481 476.1551 L
347.7481 426.7919 L
f
346.7111 326.7985 m
346.7111 320.1144 343.62 317.0096 338.0222 317.0096 c
331.4783 317.0096 328.211 319.6462 328.211 324.8007 c
328.211 329.3031 331.7284 332.3319 338.0222 332.3319 c
352.4279 332.3319 365.9066 326.3432 375.1101 315.8807 C
380.8557 321.9707 L
371.4818 333.2808 355.2563 340.5763 338.0222 340.5763 c
325.5968 340.5763 319.1443 334.1774 319.1443 324.4207 c
319.1443 315.0191 325.8171 308.7651 338.0222 308.7651 c
349.7726 308.7651 356.1889 314.8121 356.1889 326.7985 C
356.1889 355.9208 L
378.0223 355.9208 L
378.0223 364.1653 L
356.1889 364.1653 L
356.1889 376.4209 L
346.7111 376.4209 L
346.7111 326.7985 L
f
345.674 226.7959 m
345.674 220.9391 343.1576 218.47 338.2814 218.47 c
332.4476 218.47 329.674 220.6051 329.674 225.1841 c
329.674 228.8962 332.7811 231.5515 338.2814 231.5515 c
352.2005 231.5515 365.2552 225.7795 374.5267 215.4373 C
381.5039 222.9774 L
372.1252 234.2933 355.6961 241.6479 338.2814 241.6479 c
325.2611 241.6479 318.4962 235.0152 318.4962 224.6774 c
318.4962 214.8142 325.5523 208.3736 338.2814 208.3736 c
350.9203 208.3736 357.3927 214.4448 357.3927 226.7959 C
357.3927 255.0108 L
378.2816 255.0108 L
378.2816 265.1072 L
357.3927 265.1072 L
357.3927 276.6776 L
345.674 276.6776 L
345.674 226.7959 L
f
344.637 126.8025 m
344.637 121.7729 342.6952 119.9395 338.5407 119.9395 c
333.4169 119.9395 331.1369 121.573 331.1369 125.5765 c
331.1369 128.4985 333.8337 130.7803 338.5407 130.7803 c
351.9732 130.7803 364.6039 125.225 373.9434 115.0032 C
382.152 123.9932 L
372.7686 135.3148 356.1358 142.7285 338.5407 142.7285 c
324.9254 142.7285 317.848 135.8622 317.848 124.9432 c
317.848 114.6185 325.2875 107.9913 338.5407 107.9913 c
352.0679 107.9913 358.5963 114.0866 358.5963 126.8025 C
358.5963 154.11 L
378.5408 154.11 L
378.5408 166.0582 L
358.5963 166.0582 L
358.5963 176.9434 L
344.637 176.9434 L
344.637 126.8025 L
f
U
343.6 26.7999 m
343.6 22.5976 342.2329 21.3999 338.8 21.3999 c
334.3862 21.3999 332.5999 22.5319 332.5999 25.9599 c
332.5999 28.0915 334.8864 29.9999 338.8 29.9999 c
351.7458 29.9999 363.9525 24.6613 373.3601 14.5599 C
382.8001 24.9999 L
373.412 36.3272 356.5755 43.8 338.8 43.8 c
324.5896 43.8 317.1999 36.7001 317.1999 25.1999 c
317.1999 14.4136 325.0228 7.5998 338.8 7.5998 c
353.2155 7.5998 359.8 13.7193 359.8 26.7999 C
359.8 53.2 L
378.8001 53.2 L
378.8001 67.0001 L
359.8 67.0001 L
359.8 77.2001 L
343.6 77.2001 L
343.6 26.7999 L
f
428.3999 7.5999 m
443 7.5999 L
443 77.2001 L
428.3999 77.2001 L
428.3999 67.8001 L
415.5999 67.8001 L
415.5999 54.8 L
428.3999 54.8 L
428.3999 7.5999 L
f
469.0001 39.6 m
469.0001 28.9006 464.6663 24.8165 453.36 24.5999 C
455.6 9.9999 L
473.9626 9.9999 485.2001 20.2931 485.2001 39.6 c
485.2001 61.5435 478.2954 69.4001 461.2 69.4001 c
448.5736 69.4001 435.8705 60.7716 413.9999 31 C
423.5999 21.1999 L
441.2418 45.4134 454.3449 54.8 460.2 54.8 c
466.7549 54.8 469.0001 51.8663 469.0001 39.6 c
f
u
429.3074 107.8617 m
441.9259 107.8617 L
441.9259 176.9434 L
429.3074 176.9434 L
429.3074 166.8582 L
415.7295 166.8582 L
415.7295 155.5804 L
429.3074 155.5804 L
429.3074 107.8617 L
f
430.2148 208.1235 m
440.8518 208.1235 L
440.8518 276.6867 L
430.2148 276.6867 L
430.2148 265.9163 L
415.8591 265.9163 L
415.8591 256.3608 L
430.2148 256.3608 L
430.2148 208.1235 L
f
431.1222 308.3762 m
439.7777 308.3762 L
439.7777 376.4209 L
431.1222 376.4209 L
431.1222 364.9653 L
415.9888 364.9653 L
415.9888 357.132 L
431.1222 357.132 L
431.1222 308.3762 L
f
432.0296 408.6381 m
438.7036 408.6381 L
438.7036 476.1642 L
432.0296 476.1642 L
432.0296 464.0234 L
416.1184 464.0234 L
416.1184 457.9123 L
432.0296 457.9123 L
432.0296 408.6381 L
f
432.9369 508.8907 m
437.6296 508.8907 L
437.6296 575.8984 L
432.9369 575.8984 L
432.9369 563.0725 L
416.248 563.0725 L
416.248 558.6835 L
432.9369 558.6835 L
432.9369 508.8907 L
f
U
433.8444 609.1526 m
436.5555 609.1526 L
436.5555 675.6417 L
433.8444 675.6417 L
433.8444 662.1306 L
416.3776 662.1306 L
416.3776 659.4639 L
433.8444 659.4639 L
433.8444 609.1526 L
f
u
470.852 139.9915 m
470.852 127.7311 465.8712 122.997 452.9192 122.8154 C
454.8222 110.1969 L
473.8329 110.1969 484.8112 120.2526 484.8112 139.9915 c
484.8112 160.889 477.7158 168.8471 461.2 168.8471 c
448.714 168.8471 436.5446 160.5296 414.2591 129.9284 C
422.6276 121.5007 L
441.2457 147.264 453.6922 156.2286 460.3667 156.2286 c
467.8657 156.2286 470.852 152.5272 470.852 139.9915 c
f
472.7039 240.3829 m
472.7039 226.5615 467.0761 221.1775 452.4785 221.0309 C
454.0444 210.3939 L
473.7031 210.3939 484.4223 220.212 484.4223 240.3829 c
484.4223 260.2345 477.1363 268.2941 461.2 268.2941 c
448.8544 268.2941 437.2186 260.2877 414.5184 228.8569 C
421.6554 221.8014 L
441.2496 249.1147 453.0395 257.6571 460.5334 257.6571 c
468.9765 257.6571 472.7039 253.1881 472.7039 240.3829 c
f
474.5557 340.7652 m
474.5557 325.3829 468.2809 319.3489 452.0378 319.2374 C
453.2667 310.5818 L
473.5734 310.5818 484.0335 320.1623 484.0335 340.7652 c
484.0335 359.5709 476.5569 367.732 461.2 367.732 c
448.9948 367.732 437.8926 360.0366 414.7776 327.7763 C
420.6832 322.0929 L
441.2535 350.956 452.3869 359.0764 460.7 359.0764 c
470.0872 359.0764 474.5557 353.8398 474.5557 340.7652 c
f
476.4076 441.1567 m
476.4076 424.2133 469.4858 417.5294 451.597 417.4529 C
452.4889 410.7788 L
473.4436 410.7788 483.6445 420.1218 483.6445 441.1567 c
483.6445 458.9164 475.9773 467.179 461.2 467.179 c
449.1352 467.179 438.5666 459.7947 415.0369 426.7048 C
419.7109 422.3937 L
441.2574 452.8067 451.7343 460.505 460.8667 460.505 c
471.198 460.505 476.4076 454.5007 476.4076 441.1567 c
f
478.2593 541.539 m
478.2593 523.0347 470.6906 515.7009 451.1563 515.6594 C
451.7112 510.9667 L
473.3139 510.9667 483.2557 520.0721 483.2557 541.539 c
483.2557 558.2529 475.3978 566.6169 461.2 566.6169 c
449.2756 566.6169 439.2406 559.5437 415.2962 525.6242 C
418.7388 522.6852 L
441.2612 554.648 451.0817 561.9242 461.0334 561.9242 c
472.3087 561.9242 478.2593 555.1524 478.2593 541.539 c
f
U
480.1112 641.9305 m
480.1112 621.8651 471.8954 613.8814 450.7155 613.8748 C
450.9333 611.1637 L
473.1842 611.1637 482.8668 620.0316 482.8668 641.9305 c
482.8668 657.5984 474.8183 666.0639 461.2 666.0639 c
449.416 666.0639 439.9146 659.3017 415.5554 624.5526 C
417.7665 622.986 L
441.2651 656.4987 450.429 663.3528 461.2 663.3528 c
473.4195 663.3528 480.1112 655.8133 480.1112 641.9305 c
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
