%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (2443.eps)
%%CreationDate: (2/2/04) (2:37 PM)
%%BoundingBox: 0 0 500 500
%%HiResBoundingBox: 0 0 500 500
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 256.5 244.5 256.5
%AI3_TileBox: -41.5 -119.5 534.5 642.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -139.5 520.5 1 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -119.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
1 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
0 Ap
0 O
0 g
52.4 463.2801 m
68.6657 463.2801 77.5201 455.607 77.5201 444.24 c
77.5201 426.1316 65.9673 417.5199 32.0799 417.5199 C
32.0799 412.5599 L
68.2917 412.5599 82.6401 423.0771 82.6401 444.24 c
82.6401 457.9556 70.9665 468.2401 52.4 468.2401 c
40.4229 468.2401 28.1547 465.929 17.3599 461.8401 C
18.7999 457.0401 L
29.2363 460.9933 41.1907 463.2801 52.4 463.2801 c
f
52.4 361.7401 m
67.4555 361.7401 75.5001 354.7061 75.5001 344.24 c
75.5001 327.2387 64.6469 319.2199 31.8399 319.2199 C
31.9999 312.3999 L
68.3227 312.3999 82.7201 323.0883 82.7201 344.24 c
82.7201 358.0223 70.9441 368.5601 52.4 368.5601 c
40.3592 368.5601 27.9361 366.2268 17.1999 362.1601 C
19.1999 355.5001 L
29.618 359.4463 41.5375 361.7401 52.4 361.7401 c
f
52.4 260.2001 m
66.2453 260.2001 73.4801 253.8052 73.4801 244.24 c
73.4801 228.3458 63.3265 220.9199 31.5999 220.9199 C
31.9199 212.2399 L
68.3537 212.2399 82.8001 223.0995 82.8001 244.24 c
82.8001 258.0889 70.9218 268.8801 52.4 268.8801 c
40.2956 268.8801 27.7175 266.5246 17.0399 262.4801 C
19.5999 253.9601 L
29.9998 257.8994 41.8843 260.2001 52.4 260.2001 c
f
52.4 158.6601 m
65.0351 158.6601 71.4601 152.9043 71.4601 144.24 c
71.4601 129.4529 62.0061 122.6199 31.3599 122.6199 C
31.8399 112.0799 L
68.3848 112.0799 82.8801 123.1107 82.8801 144.24 c
82.8801 158.1556 70.8995 169.2001 52.4 169.2001 c
40.2319 169.2001 27.4988 166.8224 16.8799 162.8001 C
19.9999 152.42 L
30.3815 156.3525 42.2311 158.6601 52.4 158.6601 c
f
52.4 69.5201 m
40.1683 69.5201 27.2801 67.1202 16.7198 63.1201 C
20.3999 50.8801 L
30.7633 54.8056 42.5779 57.1201 52.4 57.1201 c
63.8248 57.1201 69.4401 52.0034 69.4401 44.24 c
69.4401 30.5599 60.6857 24.3199 31.1199 24.3199 C
31.7599 11.9199 L
68.4158 11.9199 82.9601 23.1218 82.9601 44.24 c
82.9601 58.2223 70.8771 69.5201 52.4 69.5201 c
f
*u
1 D
336.72 406.9599 m
346.9341 406.9599 353.68 413.7811 353.68 424.4 C
353.68 429.7742 L
363.2687 426.9866 371.5861 421.5928 377.6801 414.2399 C
381.5201 417.3599 L
374.4476 425.8933 364.6835 431.8173 353.68 434.6519 C
353.68 457.5201 L
376.8801 457.5201 L
376.8801 462.1601 L
353.68 462.1601 L
353.68 477.0402 L
348.88 477.0402 L
348.88 435.667 L
345.4911 436.2468 342.0153 436.56 338.4799 436.56 c
326.843 436.56 319.5999 429.3165 319.5999 421.3599 c
319.5999 412.2056 325.5101 406.9599 336.72 406.9599 c
f
0 D
338.4799 431.92 m
342.0524 431.92 345.5262 431.5683 348.88 430.9257 C
348.88 424.4 L
348.88 415.8959 344.709 411.5998 336.72 411.5998 c
327.3998 411.5998 324.3999 414.736 324.3999 421.3599 c
324.3999 427.3139 329.2369 431.92 338.4799 431.92 c
f
*U
*u
1 D
224.3999 423.5999 m
224.3999 445.0261 235.9214 459.0448 254.1042 460.965 C
254.3345 450.8214 254.48 441.3254 254.48 435.6 c
254.48 432.8585 254.4053 430.4747 254.2125 428.3702 C
247.5009 429.318 242.6971 432.7158 238.6399 439.52 C
234.6399 436.56 L
239.0366 429.1865 245.2988 424.9764 253.4866 423.7962 C
251.8074 417.0585 247.5602 414.0704 237.6 410.7198 C
239.92 406.1598 L
251.0274 409.8963 256.2444 414.2881 258.2441 423.446 C
258.3237 423.4455 258.4001 423.4399 258.48 423.4399 c
275.0569 423.4399 283.4401 431.0227 283.4401 444.88 c
283.4401 457.863 275.243 465.7307 258.789 465.8307 C
258.6946 469.6152 258.5906 473.4056 258.48 477.0402 C
253.68 477.0402 L
253.7933 473.3151 253.8989 469.4527 253.9941 465.6152 C
238.6154 464.0802 227.2133 454.5882 222.2867 439.7596 C
222.1919 441.5812 222.1479 443.3947 222.1598 445.2 c
222.2071 452.3426 222.9983 460.4706 224.3999 468.7201 C
219.5999 469.0401 L
218.1999 460.8001 217.4098 452.7501 217.3599 445.2 c
217.3099 437.65 218.0998 430.3 219.5999 422.96 C
224.3999 423.5999 L
f
0 D
278.6401 444.88 m
278.6401 433.436 273.072 428.2095 258.9579 428.0912 C
259.18 430.3442 259.28 432.8329 259.28 435.6 c
259.28 441.5094 259.1302 451.0909 258.8995 461.1901 C
273.0283 461.0853 278.6401 455.8289 278.6401 444.88 c
f
*U
116.7198 441.72 m
122.2021 444.5087 127.2353 446.92 131.8808 449.0206 C
136.1451 435.1425 139.9757 421.411 143.6 406.9599 C
148.4399 407.9199 L
144.7456 422.6505 140.8522 436.7318 136.4658 451.045 C
151.1155 457.3487 161.1738 460.0401 166.9601 460.0401 c
175.1461 460.0401 179.4401 456.1185 179.4401 449.04 c
179.4401 439.8269 175.7292 436.0652 159.44 434.6399 C
160.08 429.8 L
177.4533 431.32 184.2401 437.6233 184.2401 449.04 c
184.2401 458.0707 178.0566 464.8801 166.9601 464.8801 c
164.7763 464.8801 162.1232 464.5478 159.0223 463.8809 C
157.6271 467.9389 156.1052 472.1589 154.76 475.8401 C
150 474.4801 L
151.408 470.6263 152.8384 466.7111 154.232 462.6738 C
148.8996 461.1642 142.5129 458.8451 135.0498 455.6404 C
133.3058 461.2135 131.4846 466.8347 129.5599 472.5601 C
124.7199 471.2801 L
126.7286 465.3049 128.6293 459.4404 130.4556 453.6155 C
125.6801 451.4604 120.5331 448.995 114.9598 446.16 C
116.7198 441.72 L
f
*u
1 D
336.72 306.8799 m
347.914 306.8799 354.98 313.8113 354.98 324.7199 C
354.98 329.2062 L
363.4797 326.2361 370.9502 321.0226 376.4001 314.1599 C
381.7001 318.3399 L
375.0297 326.7665 365.549 332.8231 354.98 335.9402 C
354.98 356.3801 L
376.9601 356.3801 L
376.9601 362.7201 L
354.98 362.7201 L
354.98 377.1201 L
348.08 377.1201 L
348.08 337.5394 L
344.9264 338.0649 341.7137 338.34 338.4799 338.34 c
326.6163 338.34 319.0399 330.6431 319.0399 322.3599 c
319.0399 312.5924 325.4301 306.8799 336.72 306.8799 c
f
0 D
338.4799 331.9999 m
341.7476 331.9999 344.9576 331.6651 348.08 331.0571 C
348.08 324.7199 L
348.08 317.0342 344.4709 313.2199 336.72 313.2199 c
328.7227 313.2199 325.7799 316.2666 325.7799 322.3599 c
325.7799 327.6558 330.0062 331.9999 338.4799 331.9999 c
f
*U
*u
1 D
336.72 206.7999 m
348.8939 206.7999 356.28 213.8415 356.28 225.0399 C
356.28 228.4665 L
363.7167 225.3666 370.3148 220.4057 375.1201 214.0799 C
381.8801 219.3199 L
375.5979 227.6258 366.4327 233.7973 356.28 237.1799 C
356.28 255.24 L
377.0401 255.24 L
377.0401 263.2801 L
356.28 263.2801 L
356.28 277.2001 L
347.28 277.2001 L
347.28 239.3947 L
344.3669 239.8649 341.4216 240.12 338.48 240.12 c
326.3896 240.12 318.4799 231.9697 318.4799 223.3599 c
318.4799 212.9792 325.3501 206.7999 336.72 206.7999 c
f
0 D
338.48 232.08 m
341.4468 232.08 344.3928 231.7665 347.28 231.1963 C
347.28 225.0399 L
347.28 218.1724 344.2329 214.8399 336.72 214.8399 c
330.0456 214.8399 327.1599 217.7972 327.1599 223.3599 c
327.1599 227.9976 330.7756 232.08 338.48 232.08 c
f
*U
*u
1 D
336.72 106.7198 m
349.8738 106.7198 357.58 113.8718 357.58 125.3599 C
357.58 127.5419 L
363.9746 124.382 369.6771 119.7394 373.8401 113.9999 C
382.0601 120.2999 L
376.1536 128.4701 367.3267 134.7221 357.58 138.3508 C
357.58 154.1 L
377.1201 154.1 L
377.1201 163.8401 L
357.58 163.8401 L
357.58 177.2801 L
346.48 177.2801 L
346.48 141.2505 L
343.8138 141.6642 341.136 141.9 338.4799 141.9 c
326.1628 141.9 317.9199 133.2964 317.9199 124.3599 c
317.9199 113.366 325.2701 106.7198 336.72 106.7198 c
f
0 D
338.4799 132.16 m
341.1504 132.16 343.8318 131.8735 346.48 131.3444 C
346.48 125.3599 L
346.48 119.3107 343.9948 116.4599 336.72 116.4599 c
331.3684 116.4599 328.5399 119.3278 328.5399 124.3599 c
328.5399 128.3395 331.545 132.16 338.4799 132.16 c
f
*U
*u
1 D
358.88 39.4467 m
358.88 52.9601 L
377.2001 52.9601 L
377.2001 64.4001 L
358.88 64.4001 L
358.88 77.3602 L
345.68 77.3602 L
345.68 43.118 L
343.2668 43.4748 340.8563 43.68 338.4799 43.68 c
325.9362 43.68 317.3599 34.623 317.3599 25.3599 c
317.3599 13.7527 325.1901 6.6399 336.72 6.6399 c
350.8537 6.6399 358.88 13.902 358.88 25.6799 C
358.88 26.4056 L
364.246 23.2747 369.0355 19.0193 372.5601 13.9199 C
382.2401 21.2799 L
376.6967 29.2999 368.2272 35.5941 358.88 39.4467 C
f
0 D
345.68 25.6799 m
345.68 20.449 343.7567 18.0799 336.72 18.0799 c
332.6913 18.0799 329.9199 20.8584 329.9199 25.3599 c
329.9199 28.6813 332.3143 32.24 338.4799 32.24 c
340.8592 32.24 343.2747 31.9868 345.68 31.5022 C
345.68 25.6799 L
f
*U
*u
1 D
226.0199 323.7599 m
226.2451 344.1092 236.5317 357.298 252.8444 359.7278 C
253.0577 349.9824 253.18 340.9904 253.18 335.6 c
253.18 333.397 253.1305 331.4448 253.006 329.6926 C
247.6379 330.8362 243.5868 333.9161 240.02 339.72 C
234.6399 336.08 L
238.7609 329.1688 244.636 324.9834 251.9579 323.4716 C
250.1985 317.9152 246.1087 315.3496 237.08 312.4199 C
239.84 306.0799 L
250.9235 309.6472 256.488 314.1308 258.7711 322.8292 C
274.8818 322.9276 283.6001 330.9943 283.6001 345.04 c
283.6001 358.0894 275.4349 366.162 259.5834 366.5254 C
259.4919 370.1042 259.3904 373.6813 259.28 377.1201 C
252.38 377.1201 L
252.4949 373.5439 252.5992 369.8422 252.6924 366.1587 C
239.6014 364.3403 229.3334 356.3124 223.8684 344.0225 C
223.8661 344.4149 223.8573 344.8096 223.8599 345.2 c
223.9061 352.1723 224.7002 360.3218 226.0999 368.5601 C
219.5199 369.1201 L
218.1199 360.8801 217.3299 352.7501 217.2798 345.2 c
217.2299 337.65 218.0199 330.22 219.5199 322.8799 C
226.0199 323.7599 L
f
0 D
276.8601 345.04 m
276.8601 334.3378 272.0154 329.5191 259.8228 329.1918 C
259.9972 331.1561 260.08 333.2825 260.08 335.6 c
260.08 341.2921 259.952 350.4029 259.7367 360.1113 C
272.1492 359.8146 276.8601 355.1113 276.8601 345.04 c
f
*U
*u
1 D
227.6399 223.9199 m
228.0745 243.1275 237.1436 255.4934 251.5843 258.4092 C
251.7784 249.1104 251.88 240.6493 251.88 235.6 c
251.88 233.9825 251.8521 232.5146 251.7863 231.1661 C
247.7028 232.4526 244.416 235.175 241.4 239.92 C
234.6399 235.6 L
238.4587 229.1956 243.8803 225.0872 250.3856 223.2761 C
248.5598 218.8075 244.6516 216.641 236.5599 214.1199 C
239.7599 205.9999 L
250.8036 209.4015 256.6843 213.9518 259.2535 222.2264 C
274.7945 222.505 283.7601 231.0309 283.7601 245.2 c
283.7601 258.3047 275.6527 266.5836 260.3773 267.2182 C
260.2885 270.5912 260.1896 273.9565 260.08 277.2001 C
251.08 277.2001 L
251.1966 273.7513 251.3003 270.1865 251.3921 266.6351 C
240.3193 264.6111 231.2267 257.8307 225.6094 247.6911 C
225.8051 253.9534 226.5688 261.1537 227.7999 268.4001 C
219.4399 269.2001 L
218.0399 260.9601 217.2499 252.7501 217.1999 245.2 c
217.1499 237.65 217.9399 230.1399 219.4399 222.7999 C
227.6399 223.9199 L
f
0 D
275.0801 245.2 m
275.0801 235.2715 270.9806 230.826 260.6859 230.2957 C
260.8149 231.9538 260.8801 233.7141 260.8801 235.6 c
260.8801 241.0742 260.7711 249.7254 260.5723 259.0341 C
271.2657 258.571 275.0801 254.3842 275.0801 245.2 c
f
*U
*u
1 D
229.2599 124.08 m
229.8843 142.0646 237.756 153.6118 250.3253 156.9844 C
250.4984 148.1854 250.58 140.3012 250.58 135.6 c
250.58 134.6316 250.569 133.7257 250.5466 132.8652 C
247.6634 134.2056 245.166 136.5058 242.78 140.12 C
234.6399 135.12 L
238.1309 129.2652 243.0407 125.2931 248.7688 123.2344 C
246.8977 119.7411 243.1977 117.9496 236.04 115.8199 C
239.68 105.9199 L
250.6525 109.1547 256.8158 113.7388 259.6764 121.6017 C
274.7193 122.0538 283.9201 131.0541 283.9201 145.36 c
283.9201 158.509 275.8951 166.9965 261.1708 167.9092 C
261.0846 171.0765 260.9881 174.2315 260.8801 177.2801 C
249.78 177.2801 L
249.8985 173.9378 250.003 170.4864 250.0941 167.0458 C
240.8375 164.9043 232.9395 159.2214 227.4668 150.9581 C
227.7903 156.3153 228.4852 162.2677 229.4999 168.2401 C
219.3599 169.2801 L
217.9599 161.0401 217.1699 152.7501 217.1199 145.2 c
217.0699 137.65 217.8599 130.0599 219.3599 122.7199 C
229.2599 124.08 L
f
0 D
273.3001 145.36 m
273.3001 136.2771 269.9226 132.2038 261.5508 131.4582 C
261.6355 132.7763 261.68 134.152 261.68 135.6 c
261.68 140.848 261.5888 149.0284 261.4077 157.9145 C
270.3213 157.2975 273.3001 153.6201 273.3001 145.36 c
f
*U
*u
1 D
261.9649 68.5608 m
261.8811 71.5352 261.7864 74.494 261.68 77.3602 C
248.48 77.3602 L
248.601 74.0984 248.7061 70.7334 248.7969 67.3769 C
241.1832 65.2101 234.4784 60.4995 229.3873 53.8799 C
229.7634 58.3763 230.3751 63.2253 231.1999 68.0801 C
219.2798 69.3601 L
217.8799 61.1201 217.0898 52.7501 217.0399 45.2 c
216.9899 37.65 217.7798 29.98 219.2798 22.6399 C
230.8799 24.2399 L
231.6691 40.8986 238.364 51.6306 249.066 55.4222 C
249.2161 47.197 249.28 39.9381 249.28 35.6 c
249.28 35.3787 249.2783 35.1677 249.2772 34.9528 C
247.4876 36.1846 245.8129 37.9214 244.16 40.32 C
234.6399 34.6399 L
237.7763 29.38 242.1201 25.6106 247.0931 23.3744 C
245.2043 20.7325 241.7536 19.2791 235.52 17.5199 C
239.6 5.8398 L
250.493 8.9139 256.9145 13.5048 260.0605 20.9966 C
274.6413 21.6313 284.0801 31.0787 284.0801 45.52 c
284.0801 58.6928 276.1427 67.3547 261.9649 68.5608 C
f
0 D
262.4108 32.6711 m
262.4563 33.618 262.48 34.5928 262.48 35.6 c
262.48 40.6188 262.4052 48.3276 262.2423 56.7797 C
269.3531 56.0345 271.5201 52.822 271.5201 45.52 c
271.5201 37.369 268.878 33.6352 262.4108 32.6711 C
f
*U
131.9847 347.4011 m
136.0501 334.0032 139.717 320.6879 143.2 306.7999 C
150.01 308.2399 L
146.3764 322.7283 142.5907 336.4628 138.4027 350.2277 C
151.9684 355.9705 161.4171 358.5101 166.7201 358.5101 c
173.936 358.5101 177.5801 355.1068 177.5801 348.8 c
177.5801 340.1383 174.0027 336.5753 159.04 335.1999 C
160 328.71 L
177.2983 330.2234 184.4001 337.3065 184.4001 348.8 c
184.4001 357.9974 177.6832 365.0801 166.7201 365.0801 c
164.9616 365.0801 162.9047 364.8668 160.5571 364.4374 C
159.1674 368.5497 157.6278 372.8202 156.25 376.5601 C
149.76 374.5601 L
151.1559 370.7391 152.574 366.8582 153.9565 362.8575 C
149.0264 361.4549 143.2161 359.3754 136.462 356.5256 C
134.7344 362.043 132.9379 367.584 131.0499 373.2001 C
124.3199 371.3601 L
126.3224 365.4031 128.2178 359.5375 130.0391 353.7041 C
125.3384 351.5751 120.2769 349.146 114.7999 346.36 C
117.1999 340.27 L
122.5241 342.9783 127.4366 345.3361 131.9847 347.4011 C
f
132.0707 245.7731 m
135.941 232.853 139.4578 219.9665 142.8 206.6399 C
151.58 208.5599 L
148.0155 222.7727 144.3398 236.1517 140.3426 249.3864 C
152.8174 254.5764 161.6559 256.98 166.48 256.98 c
172.7258 256.98 175.7201 254.0952 175.7201 248.56 c
175.7201 240.4496 172.2762 237.0854 158.64 235.7599 C
159.92 227.6199 L
177.1433 229.1268 184.5601 236.9897 184.5601 248.56 c
184.5601 257.9241 177.3099 265.2801 166.48 265.2801 c
165.1877 265.2801 163.7213 265.1542 162.1143 264.924 C
160.7252 269.1122 159.1586 273.4604 157.74 277.2801 C
149.52 274.6401 L
150.9039 270.852 152.3099 267.0053 153.681 263.0411 C
149.1748 261.7527 143.9138 259.8813 137.8818 257.3854 C
136.1684 262.8551 134.3943 268.3239 132.5399 273.8401 C
123.9199 271.4401 L
125.9164 265.5011 127.8066 259.6345 129.6228 253.7926 C
124.9971 251.6899 120.0205 249.297 114.6399 246.56 C
117.6799 238.82 L
122.8398 241.4448 127.6258 243.7463 132.0707 245.7731 C
f
132.1486 144.1457 m
135.8292 131.6982 139.197 119.2512 142.4 106.4799 C
153.15 108.8799 L
149.6599 122.796 146.0902 135.8182 142.2733 148.5496 C
153.7034 153.2245 161.8759 155.4501 166.24 155.4501 c
171.5157 155.4501 173.8601 153.0836 173.8601 148.32 c
173.8601 140.761 170.5497 137.5955 158.24 136.3199 C
159.84 126.53 L
176.9883 128.0303 184.7201 136.6729 184.7201 148.32 c
184.7201 157.8508 176.9366 165.4801 166.24 165.4801 c
165.4555 165.4801 164.5925 165.4227 163.6934 165.3386 C
162.3013 169.6253 160.6977 174.0784 159.23 178.0001 C
149.28 174.7201 L
150.6519 170.9648 152.0457 167.1523 153.4055 163.2247 C
149.3238 162.0518 144.636 160.4098 139.3019 158.2478 C
137.603 163.6686 135.8506 169.0638 134.0299 174.4802 C
123.5199 171.5201 L
125.5104 165.5989 127.3954 159.7313 129.2067 153.8809 C
124.6562 151.8051 119.764 149.4479 114.4799 146.76 C
118.1598 137.37 L
123.1481 139.9074 127.8137 142.1602 132.1486 144.1457 C
f
166.0001 65.6801 m
165.7785 65.6801 165.531 65.6609 165.3004 65.6543 C
163.9014 70.0704 162.2491 74.6655 160.72 78.7201 C
149.04 74.8001 L
150.4 71.0776 151.7815 67.2994 153.1301 63.4081 C
149.4918 62.3575 145.361 60.9244 140.7274 59.089 C
139.0411 64.4675 137.3096 69.7963 135.52 75.1201 C
123.1199 71.6001 L
125.1045 65.6963 126.9844 59.8277 128.7908 53.969 C
124.3157 51.9204 119.5073 49.5987 114.3199 46.96 C
118.6399 35.92 L
123.4625 38.3731 127.9958 40.5661 132.2234 42.5109 C
135.7186 30.535 138.9354 18.5394 142 6.3199 C
154.72 9.1999 L
151.3112 22.7922 147.8519 35.4517 144.2074 47.6979 C
154.5911 51.8694 162.0868 53.92 166.0001 53.92 c
170.3055 53.92 172.0001 52.072 172.0001 48.08 c
172.0001 41.0724 168.8231 38.1056 157.84 36.88 C
159.76 25.4399 L
176.8333 26.9337 184.8801 36.3561 184.8801 48.08 c
184.8801 57.7774 176.5632 65.6801 166.0001 65.6801 c
f
414.1598 425.9999 m
418.1598 422.96 L
423.4734 430.5484 428.1743 436.7785 432.4 441.8576 C
432.4 406.9599 L
437.1999 406.9599 L
437.1999 447.3543 L
447.3229 458.337 454.5639 462.0001 461.36 462.0001 c
473.9808 462.0001 478.6401 456.7682 478.6401 437.36 c
478.6401 422.8821 471.7797 415.5955 457.2 414.3199 C
457.84 409.6799 L
474.2043 411.1116 483.4401 421.045 483.4401 437.36 c
483.4401 459.1558 475.0533 466.6401 461.36 466.6401 c
453.5484 466.6401 446.1731 463.3002 437.1999 454.5768 C
437.1999 477.0402 L
432.4 477.0402 L
432.4 462.9601 L
414.9598 462.9601 L
414.9598 458.3201 L
432.4 458.3201 L
432.4 449.568 L
427.0464 443.6221 421.0873 435.8934 414.1598 425.9999 C
f
431.7599 338.9362 m
431.7599 306.8799 L
438.4199 306.8799 L
438.4199 346.6601 L
447.9335 356.8939 454.8191 360.4601 461.12 360.4601 c
472.662 360.4601 476.7001 355.8362 476.7001 337.36 c
476.7001 323.7753 470.6738 317.2953 456.72 315.9399 C
457.84 309.5999 L
474.2043 311.0316 483.5201 321.045 483.5201 337.36 c
483.5201 359.3224 475.18 367.0401 461.12 367.0401 c
453.926 367.0401 446.8545 363.9293 438.4199 356.1018 C
438.4199 377.1201 L
431.7599 377.1201 L
431.7599 363.2801 L
414.8799 363.2801 L
414.8799 356.8601 L
431.7599 356.8601 L
431.7599 349.2656 L
426.5206 343.4031 420.7187 335.8812 414.0798 326.4 C
419.4598 322.4399 L
423.9814 328.8974 428.053 334.3522 431.7599 338.9362 C
f
431.1199 235.9587 m
431.1199 206.7999 L
439.6399 206.7999 L
439.6399 245.974 L
448.5511 255.4764 455.0677 258.9201 460.88 258.9201 c
471.3432 258.9201 474.7601 254.9042 474.7601 237.36 c
474.7601 224.6684 469.568 218.9952 456.24 217.5599 C
457.84 209.5199 L
474.2043 210.9516 483.6002 221.045 483.6002 237.36 c
483.6002 259.489 475.3067 267.4401 460.88 267.4401 c
454.2816 267.4401 447.5486 264.5629 439.6399 257.568 C
439.6399 277.2001 L
431.1199 277.2001 L
431.1199 263.6001 L
414.7999 263.6001 L
414.7999 255.4001 L
431.1199 255.4001 L
431.1199 248.9485 L
425.9966 243.1774 420.3605 235.8838 413.9999 226.7999 C
420.7599 221.9199 L
424.5109 227.2769 427.9476 231.9299 431.1199 235.9587 C
f
430.4799 132.9268 m
430.4799 106.7198 L
440.8599 106.7198 L
440.8599 145.2759 L
449.1683 154.0535 455.3124 157.3801 460.64 157.3801 c
470.0245 157.3801 472.8201 153.9722 472.8201 137.36 c
472.8201 125.5616 468.4622 120.6951 455.76 119.1799 C
457.84 109.4399 L
474.2043 110.8716 483.6801 121.045 483.6801 137.36 c
483.6801 159.6556 475.4333 167.8401 460.64 167.8401 c
454.6147 167.8401 448.2511 165.1992 440.8599 158.9779 C
440.8599 177.2801 L
430.4799 177.2801 L
430.4799 163.9201 L
414.7198 163.9201 L
414.7198 153.9401 L
430.4799 153.9401 L
430.4799 148.637 L
425.4772 142.9664 420.008 135.8946 413.9199 127.1999 C
422.0599 121.4 L
425.0617 125.687 427.8597 129.5151 430.4799 132.9268 C
f
460.4 68.2401 m
454.9254 68.2401 448.9579 65.8367 442.08 60.3344 C
442.08 77.3602 L
429.8399 77.3602 L
429.8399 64.2401 L
414.6398 64.2401 L
414.6398 52.48 L
429.8399 52.48 L
429.8399 48.3306 L
424.9623 42.7695 419.661 35.9134 413.8398 27.6 C
423.3599 20.8799 L
425.634 24.1277 427.7907 27.1093 429.8399 29.8409 C
429.8399 6.6399 L
442.08 6.6399 L
442.08 44.5869 L
449.7922 52.6583 455.549 55.8401 460.4 55.8401 c
468.7057 55.8401 470.8801 53.0402 470.8801 37.36 c
470.8801 26.4548 467.3563 22.395 455.28 20.7999 C
457.84 9.3599 L
474.2043 10.7916 483.7601 21.045 483.7601 37.36 c
483.7601 59.8223 475.56 68.2401 460.4 68.2401 c
f
U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
