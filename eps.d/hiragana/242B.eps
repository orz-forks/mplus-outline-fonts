%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (242B.eps)
%%CreationDate: (3/23/04) (7:09 PM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
1 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
500 600 m
500 700 L
400 700 L
400 600 L
500 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
400 600 m
400 700 L
300 700 L
300 600 L
400 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
500 500 m
500 600 L
400 600 L
400 500 L
500 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
400 500 m
400 600 L
300 600 L
300 500 L
400 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
*u
0 Ap
0 O
0 g
1 D
74.3 681.6 m
81.1775 668.5627 88.0257 652.3725 93.1 637.1 C
96 638 L
90.998 653.0547 84.1875 669.375 77 683 C
74.3 681.6 L
f
34 694.4 m
30.5638 667.0605 22.524 638.8614 11.3 615.2 C
14 614 L
25.5625 638.375 33.5613 666.6408 37 694 C
34 694.4 L
f
34.9413 614.9748 m
41.9945 612.3285 47.928 611 53 611 c
60.9681 611 69 621.6533 69 646 c
69 671.521 65.8766 675 47 675 C
11 675 L
11 672 L
47 672 l
64.2792 672 66 669.7269 66 646 c
66 624.8472 59.5944 614 53 614 c
48.3433 614 42.7271 615.2288 35.9413 617.7748 C
34.9413 614.9748 L
f
*U
u
34.1177 514.6426 m
40.9164 512.0717 47.1389 510.6636 52.5 510.6636 c
61.0016 510.6636 69 521.1303 69 545.9969 c
69 571.9315 65.7384 575.4969 46.3333 575.4969 C
10.6666 575.4969 L
10.6666 570.3302 L
45.8333 570.3302 l
62.0535 570.3302 63.4999 568.4141 63.4999 545.9969 c
63.4999 525.6939 57.7281 515.8303 51.6666 515.8303 c
47.311 515.8303 42.0214 517.0227 35.5677 519.3927 C
34.1177 514.6426 L
f
33.2941 414.3104 m
39.8384 411.8148 46.3498 410.3272 52 410.3272 c
61.0352 410.3272 69 420.6072 69 445.9939 c
69 472.3421 65.6003 475.9939 45.6666 475.9939 C
10.3333 475.9939 L
10.3333 468.6605 L
44.6666 468.6605 l
59.8278 468.6605 60.9998 467.1014 60.9998 445.9939 c
60.9998 426.5406 55.8619 417.6607 50.3332 417.6607 c
46.2787 417.6607 41.3158 418.8167 35.1942 421.0105 C
33.2941 414.3104 L
f
32.4706 313.9874 m
38.7605 311.5672 45.5609 310 51.5 310 c
61.0687 310 69 320.0934 69 346 c
69 372.7617 65.4622 376.5 45 376.5 C
10 376.5 L
10 367 L
43.5 367 l
57.6024 367 58.5 365.7979 58.5 346 c
58.5 327.3964 53.9959 319.5 49 319.5 c
45.2466 319.5 40.6102 320.6197 34.8206 322.6374 C
32.4706 313.9874 L
f
31.6471 213.6552 m
37.6824 211.3104 44.7718 209.6636 51 209.6636 c
61.1023 209.6636 69 219.5704 69 245.9969 c
69 273.1723 65.324 276.9969 44.3333 276.9969 C
9.6666 276.9969 L
9.6666 265.3302 L
42.3333 265.3302 l
55.3767 265.3302 55.9999 264.4852 55.9999 245.9969 c
55.9999 228.2431 52.1297 221.3303 47.6666 221.3303 c
44.2143 221.3303 39.9046 222.4136 34.4471 224.2553 C
31.6471 213.6552 L
f
30.8236 113.3322 m
36.6045 111.0627 43.9828 109.3364 50.5 109.3364 c
61.1358 109.3364 69 119.0565 69 146.003 c
69 173.5919 65.1859 177.503 43.6667 177.503 C
9.3333 177.503 L
9.3333 163.6697 L
41.1667 163.6697 l
53.1512 163.6697 53.5001 163.1817 53.5001 146.003 c
53.5001 129.0989 50.2636 123.1696 46.3334 123.1696 c
43.1821 123.1696 39.199 124.2166 34.0735 125.8821 C
30.8236 113.3322 L
f
U
u
32.6666 594.4969 m
29.0323 566.6307 21.4678 539.6731 10.4166 515.3303 C
15.3334 513.4969 L
26.8417 538.9112 34.4269 566.1602 38 593.9636 C
32.6666 594.4969 L
f
31.3332 494.5939 m
27.5008 466.2009 20.4117 440.4849 9.5333 415.4606 C
16.6667 412.9939 L
28.1209 439.4474 35.2926 465.6797 39 493.9272 C
31.3332 494.5939 L
f
30 394.7 m
25.9694 365.7802 19.3557 341.3057 8.65 315.6 C
18 312.5 L
29.3999 339.9926 36.1581 365.2083 40 393.9 C
30 394.7 L
f
28.6666 294.7969 m
24.4379 265.3504 18.2996 242.1174 7.7666 215.7303 C
19.3334 211.9969 L
30.6791 240.5288 37.0238 264.7278 41 293.8636 C
28.6666 294.7969 L
f
27.3334 194.903 m
22.9065 164.9298 17.2436 142.9382 6.8833 115.8697 C
20.6666 111.503 L
31.9582 141.0741 37.8893 164.2564 42 193.8364 C
27.3334 194.903 L
f
U
u
73.0166 581.2636 m
79.5929 568.0246 86.3339 551.1634 91.1666 535.9802 C
96.5 537.3302 L
91.6962 552.4592 85.0303 569.3535 78.1667 583.1636 C
73.0166 581.2636 L
f
71.7332 480.9272 m
78.0083 467.4865 84.6421 449.9542 89.2332 434.8605 C
97 436.6605 L
92.3945 451.8636 85.8731 469.332 79.3334 483.3272 C
71.7332 480.9272 L
f
70.45 380.6 m
76.4239 366.9576 82.9505 348.7544 87.3 333.75 C
97.5 336 L
93.0927 351.2773 86.7158 369.3197 80.5 383.5 C
70.45 380.6 L
f
69.1666 280.2636 m
74.8394 266.4196 81.2587 247.5453 85.3666 232.6302 C
98 235.3302 L
93.791 250.6818 87.5586 269.2982 81.6667 283.6636 C
69.1666 280.2636 L
f
67.8833 179.9364 m
73.2549 165.8907 79.5671 146.3454 83.4334 131.5197 C
98.5 134.6697 L
94.4892 150.0955 88.4013 169.2859 82.8333 183.8364 C
67.8833 179.9364 L
f
U
*u
99 34 m
95.1875 49.5 89.2441 69.2644 84 84 C
66.6 79.6 L
71.6704 65.3526 77.8753 45.1363 81.5 30.4 C
99 34 L
f
22 11 m
33.2374 41.6103 38.755 63.7759 43 93.8 C
26 95 L
21.375 64.5 16.1875 43.75 6 16 C
22 11 L
f
30 13 m
35.5265 10.8059 43.1938 9 50 9 c
61.1694 9 69 18.5335 69 46 c
69 74.0025 65.0478 78 43 78 c
9 78 L
9 62 L
40 62 l
50.9256 62 51 61.869 51 46 c
51 29.9456 48.3974 25 45 25 c
42.1499 25 38.4934 26.0106 33.7 27.5 C
30 13 L
f
*U
*u
184 679 m
184 682 L
116 682 L
116 679 L
184 679 L
f
189 661 m
189 664 L
111 664 L
111 661 L
189 661 L
f
157 693 m
157.7822 670.5984 163.8205 653.0186 176.6 636.2 C
179 638 L
166.775 654.0889 160.7621 671.1741 160 693 C
157 693 L
f
179 638 m
170.7751 643.7307 156.8121 648 145 648 c
127.2261 648 118 640.841 118 631 c
118 617.8368 127.8831 610 154 610 c
162.1825 610 169.7039 610.608 177 612 C
176.5 615 L
169.6337 613.69 162.232 613 154 613 c
130.0874 613 121 619.4396 121 631 c
121 639.1356 129.363 645 145 645 c
155.4685 645 168.6332 641.393 176.6 636.2 C
179 638 L
f
*U
0 D
267 692 m
231.6147 661.5294 223 660.0392 223 652 c
223 643.072 232.3882 644.1376 270 608 C
272.1 610.2 L
236.2979 644.5989 226 645.5834 226 652 c
226 657.838 235.8179 661.1266 269 689.7 C
267 692 L
f
u
484.4 616.9 m
477.1624 615.0385 460.1352 613 452 613 c
429.1123 613 419 620.1229 419 631 c
419 636.1073 421.1251 640.5195 428.576 647.0192 C
426.576 649.2192 L
418.5647 642.2306 416 637.1493 416 631 c
416 618.3348 427.0798 610 452 610 c
460.6442 610 477.6986 612.1221 485 614 C
484.4 616.9 L
f
476 683 m
476 686 L
424 686 L
424 683 L
476 683 L
f
U
u
1 D
184.3333 577.6636 m
184.3333 582.6636 L
115.8333 582.6636 L
115.8333 577.6636 L
184.3333 577.6636 L
f
184.6667 476.3271 m
184.6667 483.3273 L
115.6667 483.3273 L
115.6667 476.3271 L
184.6667 476.3271 L
f
185 375 m
185 384 L
115.5 384 L
115.5 375 L
185 375 L
f
185.3333 273.6636 m
185.3333 284.6636 L
115.3333 284.6636 L
115.3333 273.6636 L
185.3333 273.6636 L
f
185.6667 172.3364 m
185.6667 185.3363 L
115.1667 185.3363 L
115.1667 172.3364 L
185.6667 172.3364 L
f
U
u
189.3333 559.4969 m
189.3333 564.4969 L
110.6667 564.4969 L
110.6667 559.4969 L
189.3333 559.4969 L
f
189.6667 457.9938 m
189.6667 464.9939 L
110.3333 464.9939 L
110.3333 457.9938 L
189.6667 457.9938 L
f
190 356.5 m
190 365.5 L
110 365.5 L
110 356.5 L
190 356.5 L
f
190.3333 254.9969 m
190.3333 265.9969 L
109.6667 265.9969 L
109.6667 254.9969 L
190.3333 254.9969 L
f
190.6667 153.5031 m
190.6667 166.503 L
109.3334 166.503 L
109.3334 153.5031 L
190.6667 153.5031 L
f
U
u
155.1666 593.3303 m
155.968 570.3785 162.1629 552.0244 174.9499 535.1636 C
179.5 537.9969 L
167.5625 553.8627 161.6031 571.2864 160.8334 593.3303 C
155.1666 593.3303 L
f
153.3332 493.6606 m
154.1539 470.1586 160.5052 451.0302 173.2999 434.1272 C
180 437.9939 L
168.35 453.6365 162.444 471.3987 161.6667 493.6606 C
153.3332 493.6606 L
f
151.5 394 m
152.3399 369.9479 158.8478 350.0453 171.65 333.1 C
180.5 338 L
169.1375 353.4194 163.285 371.5201 162.5 394 C
151.5 394 L
f
149.6666 294.3303 m
150.5257 269.728 157.1902 249.0511 170 232.0636 C
181 237.9969 L
169.925 253.1932 164.1259 271.6325 163.3334 294.3303 C
149.6666 294.3303 L
f
147.8334 194.6697 m
148.7117 169.5173 155.5327 148.0661 168.35 131.0364 C
181.5 138.003 L
170.7125 152.9762 164.9669 171.7539 164.1667 194.6697 C
147.8334 194.6697 L
f
U
u
0 D
270.3 588.2802 m
237.8341 560.3236 227.8334 557.5563 227.8334 551.9969 c
227.8334 545.9382 237.915 545.6405 273.4667 511.5303 C
269.6667 507.6636 L
231.5787 544.2587 222 541.9502 222 551.9969 c
222 561.0077 230.4685 561.1597 266.6667 592.3303 C
270.3 588.2802 L
f
271.6001 486.8605 m
239.8504 459.5205 229.6668 457.2746 229.6668 451.9939 c
229.6668 446.2931 239.532 446.6821 274.8334 412.8606 C
269.3333 407.3272 L
230.7691 444.3798 220.9999 440.8284 220.9999 451.9939 c
220.9999 461.9762 229.3223 460.79 266.3333 492.6606 C
271.6001 486.8605 L
f
272.9 385.45 m
241.8665 358.7267 231.5 357.002 231.5 352 c
231.5 346.6571 241.149 347.7328 276.2 314.2 C
269 307 L
229.9597 344.5101 220 339.7159 220 352 c
220 362.9537 228.1762 360.4295 266 393 C
272.9 385.45 L
f
274.2 284.0302 m
243.8827 257.9237 233.3334 256.7203 233.3334 251.9969 c
233.3334 247.0119 242.766 248.7744 277.5667 215.5303 C
268.6667 206.6636 L
229.1502 244.6313 219 238.5941 219 251.9969 c
219 263.9223 227.03 260.0599 265.6667 293.3303 C
274.2 284.0302 L
f
275.5 182.6197 m
245.8988 157.1299 235.1666 156.4478 235.1666 152.003 c
235.1666 147.3759 244.3829 149.8251 278.9333 116.8696 C
268.3333 106.3364 L
228.3407 144.7615 218 137.4816 218 152.003 c
218 164.8998 225.8839 159.6994 265.3333 193.6697 C
275.5 182.6197 L
f
U
268 6 m
227.5312 44.8827 217 36.3598 217 52 c
217 65.8683 224.7377 59.3297 265 94 C
276.8 81.2 L
247.9151 56.3269 237 56.1661 237 52 c
237 47.7308 246 50.8667 280.3 18.2 C
268 6 L
f
u
317 691 m
313.4733 677.1855 312 664.328 312 650 c
312 635.672 313.4733 622.8144 317 609 C
319.9 609.7 L
316.5065 622.9924 315 635.4505 315 650 c
315 664.5495 316.5065 677.0075 319.9 690.3 C
317 691 L
f
393 673 m
378 673 L
378 691 L
375 691 L
375 673 L
338 673 L
338 670 L
375 670 L
375 650 L
375 623.2783 371.3867 618.1609 352 611.8 C
353 609 L
374.3415 616.0024 378 622.5991 378 650 C
378 670 L
393 670 L
393 673 L
f
U
u
317.0001 549.9969 m
317.0001 535.4838 318.5151 522.8754 321.8668 509.7469 C
316.5 508.8303 L
312.9886 522.5846 311.5 535.4861 311.5 549.9969 c
311.5 564.5078 312.9886 577.4092 316.5 591.1636 C
321.8668 590.2469 L
318.5151 577.1184 317.0001 564.5101 317.0001 549.9969 c
f
319.0001 449.9939 m
319.0001 435.517 320.5236 422.7585 323.8335 409.7939 C
316 408.6605 L
312.5039 422.3549 311 435.3002 311 449.9939 c
311 464.6876 312.5039 477.6328 316 491.3272 C
323.8335 490.1939 L
320.5236 477.2292 319.0001 464.4707 319.0001 449.9939 c
f
321 350 m
321 335.5595 322.5321 322.6507 325.8 309.85 C
315.5 308.5 L
312.0193 322.1343 310.5 335.1235 310.5 350 c
310.5 364.8765 312.0193 377.8656 315.5 391.5 C
325.8 390.15 L
322.5321 377.3493 321 364.4405 321 350 c
f
323.0001 249.9969 m
323.0001 235.5928 324.5406 222.5337 327.7667 209.8969 C
315 208.3303 L
311.5346 221.9045 310 234.9376 310 249.9969 c
310 265.0563 311.5346 278.0893 315 291.6636 C
327.7667 290.0969 L
324.5406 277.4601 323.0001 264.4011 323.0001 249.9969 c
f
325 150.003 m
325 135.6352 326.549 122.4259 329.7333 109.953 C
314.5 108.1697 L
311.05 121.6839 309.5 134.7609 309.5 150.003 c
309.5 165.2452 311.05 178.3221 314.5 191.8364 C
329.7333 190.053 L
326.549 177.5802 325 164.3709 325 150.003 c
f
U
u
393.3334 573.4969 m
378.6667 573.4969 L
378.6667 591.1636 L
373.1666 591.1636 L
373.1666 573.4969 L
338 573.4969 L
338 568.3302 L
373.1666 568.3302 L
373.1666 549.8303 L
373.1666 524.1818 370.1237 519.8836 351.1667 513.6636 C
353 508.6636 L
374.8289 515.8259 378.6667 522.4915 378.6667 549.8303 C
378.6667 568.3302 L
393.3334 568.3302 L
393.3334 573.4969 L
f
393.6667 473.9939 m
379.3334 473.9939 L
379.3334 491.3272 L
371.3332 491.3272 L
371.3332 473.9939 L
338 473.9939 L
338 466.6605 L
371.3332 466.6605 L
371.3332 449.6605 L
371.3332 425.0853 368.8606 421.6063 350.3333 415.5273 C
353 408.3272 L
375.3162 415.6494 379.3334 422.3838 379.3334 449.6605 C
379.3334 466.6605 L
393.6667 466.6605 L
393.6667 473.9939 L
f
394 374.5 m
380 374.5 L
380 391.5 L
369.5 391.5 L
369.5 374.5 L
338 374.5 L
338 365 L
369.5 365 L
369.5 349.5 L
369.5 325.9979 367.5977 323.338 349.5 317.4 C
353 308 L
375.8035 315.4821 380 322.2854 380 349.5 C
380 365 L
394 365 L
394 374.5 L
f
394.3334 274.9969 m
380.6667 274.9969 L
380.6667 291.6636 L
367.6666 291.6636 L
367.6666 274.9969 L
338 274.9969 L
338 263.3302 L
367.6666 263.3302 L
367.6666 249.3303 L
367.6666 226.9014 366.3347 225.0607 348.6667 219.2637 C
353 207.6636 L
376.2909 215.3055 380.6667 222.1777 380.6667 249.3303 C
380.6667 263.3302 L
394.3334 263.3302 L
394.3334 274.9969 L
f
394.6667 175.503 m
381.3333 175.503 L
381.3333 191.8364 L
365.8334 191.8364 L
365.8334 175.503 L
338 175.503 L
338 161.6697 L
365.8334 161.6697 L
365.8334 149.1697 L
365.8334 127.814 365.0717 126.7924 347.8334 121.1363 C
353 107.3364 L
376.7782 115.1382 381.3333 122.0793 381.3333 149.1697 C
381.3333 161.6697 L
394.6667 161.6697 L
394.6667 175.503 L
f
U
u
395 76 m
382 76 L
382 92 L
364 92 L
364 76 L
338 76 L
338 60 L
364 60 L
364 49 L
364 28.7175 363.8087 28.5151 347 23 C
353 7 L
377.2655 14.9617 382 21.9716 382 49 C
382 60 L
395 60 L
395 76 L
f
327 50 m
327 35.6685 328.5576 22.309 331.7 10 C
314 8 L
310.5653 21.4542 309 34.575 309 50 c
309 65.425 310.5653 78.5458 314 92 C
331.7 90 L
328.5576 77.691 327 64.3315 327 50 c
f
U
u
476.3333 581.1635 m
476.3333 586.4969 L
423.6667 586.4969 L
423.6667 581.1635 L
476.3333 581.1635 L
f
476.6667 479.3271 m
476.6667 486.9939 L
423.3333 486.9939 L
423.3333 479.3271 L
476.6667 479.3271 L
f
477 377.5 m
477 387.5 L
423 387.5 L
423 377.5 L
477 377.5 L
f
477.3333 275.6635 m
477.3333 287.9969 L
422.6667 287.9969 L
422.6667 275.6635 L
477.3333 275.6635 L
f
477.6667 173.8364 m
477.6667 188.503 L
422.3333 188.503 L
422.3333 173.8364 L
477.6667 173.8364 L
f
U
u
430.1467 546.8463 m
423.2131 540.9358 421.0001 536.4535 421.0001 531.4969 c
421.0001 521.5565 430.3497 514.997 451.8333 514.997 c
459.9817 514.997 476.6991 517.0097 484.3333 518.9137 C
485.3333 513.6636 L
477.603 511.7341 460.7035 509.6636 451.8333 509.6636 c
426.5707 509.6636 415.5 518.0514 415.5 531.1636 c
415.5 537.5927 418.4779 543.3982 426.48 550.1796 C
430.1467 546.8463 L
f
431.7174 446.6734 m
425.3011 441.3522 423.0001 436.7997 423.0001 431.9939 c
423.0001 422.9901 431.5872 416.994 451.6667 416.994 c
459.8283 416.994 476.2358 418.981 484.2667 420.9273 C
485.6667 413.3272 L
477.5074 411.3461 460.7628 409.3272 451.6667 409.3272 c
426.0615 409.3272 415 417.7679 415 431.3272 c
415 438.0361 418.3912 444.5658 426.384 451.1401 C
431.7174 446.6734 L
f
433.288 346.5096 m
427.3889 341.7777 425 337.155 425 332.5 c
425 324.4328 432.8245 319 451.5 319 c
459.6748 319 475.7726 320.9612 484.2 322.95 C
486 313 L
477.4118 310.9673 460.8221 309 451.5 309 c
425.5524 309 414.5 317.4936 414.5 331.5 c
414.5 338.4886 418.3045 345.7424 426.288 352.1096 C
433.288 346.5096 L
f
434.8587 246.3367 m
429.4769 242.1941 427.0001 237.5012 427.0001 232.9969 c
427.0001 225.8664 434.0619 220.997 451.3333 220.997 c
459.5214 220.997 475.3093 222.9324 484.1333 224.9637 C
486.3333 212.6636 L
477.3162 210.5793 460.8814 208.6636 451.3333 208.6636 c
425.0433 208.6636 414 217.2102 414 231.6636 c
414 238.932 418.2178 246.91 426.192 253.07 C
434.8587 246.3367 L
f
436.4293 146.1729 m
431.5647 142.6195 428.9999 137.8566 428.9999 133.503 c
428.9999 127.309 435.2993 123.003 451.1667 123.003 c
459.3679 123.003 474.846 124.9126 484.0667 126.9863 C
486.6667 112.3364 L
477.2206 110.2005 460.9407 108.3364 451.1667 108.3364 c
424.5342 108.3364 413.5 116.936 413.5 131.8364 c
413.5 139.3846 418.131 148.0866 426.096 154.0395 C
436.4293 146.1729 L
f
U
u
u
478 72 m
478 89 L
422 89 L
422 72 L
478 72 L
f
U
438 46 m
433.6527 43.0359 431 38.2028 431 34 c
431 28.7427 436.5367 25 451 25 c
459.2145 25 474.3827 26.8839 484 29 C
487 12 L
477.125 9.8125 461 8 451 8 c
424.0251 8 413 16.6525 413 32 c
413 39.828 418.0443 49.2542 426 55 C
438 46 L
f
U
u
1 D
179.5 537.9969 m
171.1814 543.7929 156.8531 548.1636 145 548.1636 c
126.906 548.1636 117.5 540.7662 117.5 530.6636 c
117.5 517.4835 127.7249 509.6636 154.1667 509.6636 c
162.406 509.6636 169.9512 510.2848 177.3334 511.6636 C
176.6167 516.6636 L
169.6814 515.3681 162.2597 514.6636 154.1667 514.6636 c
131.4843 514.6636 123.1667 520.3761 123.1667 530.8303 c
123.1667 538.0057 130.5433 543.1635 145 543.1635 c
155.2079 543.1635 167.3714 539.9286 174.9499 535.1636 C
179.5 537.9969 L
f
180 437.9939 m
171.5878 443.8551 156.8941 448.3272 145 448.3272 c
126.5859 448.3272 117 440.6914 117 430.3272 c
117 417.1303 127.5668 409.3272 154.3333 409.3272 c
162.6295 409.3272 170.1984 409.9617 177.6667 411.3272 C
176.7333 418.3273 L
169.7291 417.0463 162.2874 416.3273 154.3333 416.3273 c
132.8812 416.3273 125.3335 421.3127 125.3335 430.6605 c
125.3335 436.8759 131.7236 441.3271 145 441.3271 c
154.9473 441.3271 166.1095 438.4641 173.2999 434.1272 C
180 437.9939 L
f
180.5 338 m
171.9942 343.9265 156.9351 348.5 145 348.5 c
126.2658 348.5 116.5 340.6258 116.5 330 c
116.5 316.7862 127.4086 309 154.5 309 c
162.8529 309 170.4457 309.6477 178 311 C
176.85 320 L
169.7768 318.7334 162.3151 318 154.5 318 c
134.278 318 127.5 322.2583 127.5 330.5 c
127.5 335.7553 132.9039 339.5 145 339.5 c
154.6868 339.5 164.8479 337.009 171.65 333.1 C
180.5 338 L
f
181 237.9969 m
172.4005 243.9887 156.9761 248.6636 145 248.6636 c
125.9456 248.6636 116 240.551 116 229.6636 c
116 216.433 127.2505 208.6636 154.6667 208.6636 c
163.0764 208.6636 170.693 209.3246 178.3334 210.6636 C
176.9667 221.6636 L
169.8245 220.4116 162.3428 219.6636 154.6667 219.6636 c
135.675 219.6636 129.6667 223.1948 129.6667 230.3303 c
129.6667 234.6255 134.0841 237.6635 145 237.6635 c
154.4262 237.6635 163.586 235.5446 169.9999 232.0636 C
181 237.9969 L
f
181.5 138.003 m
172.8069 144.0601 157.0171 148.8364 145 148.8364 c
125.6255 148.8364 115.5 140.4854 115.5 129.3364 c
115.5 116.0889 127.0923 108.3364 154.8333 108.3364 c
163.2999 108.3364 170.9402 109.0106 178.6667 110.3364 C
177.0833 123.3363 L
169.8722 122.0987 162.3705 121.3363 154.8333 121.3363 c
137.0718 121.3363 131.8333 124.1404 131.8333 130.1697 c
131.8333 133.5049 135.2644 135.8364 145 135.8364 c
154.1657 135.8364 162.3243 134.0894 168.35 131.0364 C
181.5 138.003 L
f
U
*u
186 71 m
186 86 L
115 86 L
115 71 L
186 71 L
f
191 52 m
191 67 L
109 67 L
109 52 L
191 52 L
f
182 38 m
171.5 52.75 165.8078 71.8662 165 95 C
146 95 L
146.8975 69.2975 153.8751 47.072 166.7 30 C
182 38 L
f
182 38 m
173.2132 44.1223 157.0581 49 145 49 c
125.3054 49 115 40.4106 115 29 c
115 15.7357 126.9342 8 155 8 c
163.5234 8 171.1875 8.6875 179 10 C
177.2 25 L
169.9199 23.7769 162.3982 23 155 23 c
138.4687 23 134 25.077 134 30 c
134 32.3751 136.4447 34 145 34 c
153.9051 34 161.0625 32.625 166.7 30 C
182 38 L
f
*U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
