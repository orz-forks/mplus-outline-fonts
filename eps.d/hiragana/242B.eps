%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (242B.eps)
%%CreationDate: (3/31/04) (4:31 PM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
1 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
500 600 m
500 700 L
400 700 L
400 600 L
500 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
400 600 m
400 700 L
300 700 L
300 600 L
400 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
500 500 m
500 600 L
400 600 L
400 500 L
500 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
400 500 m
400 600 L
300 600 L
300 500 L
400 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
*u
0 Ap
0 O
0 g
1 D
99 34 m
95.1875 49.5 89.2441 69.2644 84 84 C
66.6 79.6 L
71.6704 65.3526 78 44.375 81.6 29.8 C
99 34 L
f
22 11 m
33.2374 41.6103 38.755 63.7759 43 93.8 C
26 95 L
21.375 64.5 16.1875 43.75 6 16 C
22 11 L
f
30 13 m
35.5265 10.8059 43.1938 9 50 9 c
61.1694 9 69 18.5335 69 46 c
69 74.0022 65.0478 78 43 78 c
9 78 L
9 62 L
40 62 l
50.9256 62 51 61.8688 51 46 c
51 29.9456 48.3974 25 45 25 c
42.1499 25 38.4934 26.0106 33.7 27.5 C
30 13 L
f
*U
0 D
269 5 m
223.8121 43.0997 214 36.3599 214 52 c
214 65.8683 222.1128 61.1081 267 95 C
279 82 L
246.7971 57.6853 235 56.1661 235 52 c
235 47.7308 243.7053 49.0031 282 17 C
269 5 L
f
u
395 75 m
382 75 L
382 92 L
364 92 L
364 75 L
338 75 L
338 59 L
364 59 L
364 49 L
364 28.7175 363.8087 28.5151 347 23 C
353 7 L
377.2655 14.9617 382 21.9716 382 49 C
382 59 L
395 59 L
395 75 L
f
327 50 m
327 35.6685 328.5576 22.309 331.7 10 C
314 8 L
310.5652 21.4542 309 34.575 309 50 c
309 65.425 310.5652 78.5458 314 92 C
331.7 90 L
328.5576 77.691 327 64.3315 327 50 c
f
U
u
u
480 73 m
480 90 L
420 90 L
420 73 L
480 73 L
f
U
437 46 m
432.6527 43.0359 430 38.2028 430 34 c
430 28.7428 435.5367 25 451 25 c
459.5895 25 475.7402 26.9625 485 29 C
488 12 L
478.4821 9.8916 461.375 8 451 8 c
423.0253 8 412 16.6526 412 32 c
412 40.3003 417.5443 50.6153 425 56 C
437 46 L
f
U
*u
1 D
186 72 m
186 87 L
115 87 L
115 72 L
186 72 L
f
191 53 m
191 68 L
109 68 L
109 53 L
191 53 L
f
183 39 m
171.5586 55.0724 165.7491 73.5438 165 95 C
147 95 L
147.8913 69.4726 155.1813 48.0637 168 31 C
183 39 L
f
183 39 m
175.8877 43.9556 155.5503 50 146 50 c
124.5724 50 115 41.9772 115 30 c
115 16.236 125.9342 8 155 8 c
163.5234 8 173.1164 8.8055 181 10 C
179.2 25.6 L
171.1175 24.4642 161.6482 23.6 155 23.6 c
137.9686 23.6 134 25.8441 134 30 c
134 32.9753 136.9447 35 146 35 c
154.9051 35 162.05 33.125 168 31 C
183 39 L
f
*U
u
30.8236 113.3322 m
36.6045 111.0627 43.9828 109.3364 50.5 109.3364 c
61.1358 109.3364 69 119.0565 69 146.0031 c
69 173.425 65.1859 177.3364 44 177.3364 C
9.3333 177.3364 L
9.3333 163.5031 L
41.5 163.5031 l
53.1375 163.5031 53.5001 163.0034 53.5001 146.0031 c
53.5001 129.0989 50.2636 123.1697 46.3334 123.1697 c
43.1821 123.1697 39.199 124.2166 34.0735 125.8822 C
30.8236 113.3322 L
f
31.6471 213.6644 m
37.6825 211.3196 44.7719 209.6728 51 209.6728 c
61.1023 209.6728 69 219.5796 69 246.0061 c
69 272.8479 65.324 276.6727 45 276.6727 C
9.6667 276.6727 L
9.6667 265.0062 L
43.0001 265.0062 l
55.3495 265.0062 56.0001 264.138 56.0001 246.0061 c
56.0001 228.2522 52.1298 221.3393 47.6667 221.3393 c
44.2144 221.3393 39.9047 222.4226 34.4471 224.2643 C
31.6471 213.6644 L
f
32.4706 313.9874 m
38.7605 311.5672 45.5609 310 51.5 310 c
61.0687 310 69 320.0934 69 346 c
69 372.2616 65.4621 376 46 376 C
10 376 L
10 366.5 L
44.5 366.5 l
57.5612 366.5 58.5 365.2634 58.5 346 c
58.5 327.3964 53.9959 319.5 49 319.5 c
45.2466 319.5 40.6102 320.6197 34.8206 322.6374 C
32.4706 313.9874 L
f
33.2942 414.3196 m
39.8385 411.824 46.3499 410.3364 52 410.3364 c
61.0352 410.3364 69 420.6164 69 446.0031 c
69 471.6844 65.6002 475.3364 47 475.3364 C
10.3333 475.3364 L
10.3333 468.0031 L
46 468.0031 l
59.7731 468.0031 61.0001 466.398 61.0001 446.0031 c
61.0001 426.5497 55.8621 417.6697 50.3334 417.6697 c
46.2788 417.6697 41.3159 418.8257 35.1942 421.0195 C
33.2942 414.3196 L
f
34.1177 514.6426 m
40.9164 512.0717 47.1389 510.6636 52.5 510.6636 c
61.0016 510.6636 69 521.1303 69 545.997 c
69 571.0982 65.7384 574.6636 48 574.6636 C
10.6666 574.6636 L
10.6666 569.4969 L
47.4999 569.4969 l
61.9848 569.4969 63.4999 567.5234 63.4999 545.997 c
63.4999 525.6939 57.7281 515.8303 51.6666 515.8303 c
47.311 515.8303 42.0214 517.0228 35.5677 519.3927 C
34.1177 514.6426 L
f
U
u
20.6666 111.5031 m
31.9582 141.0741 37.8893 164.2565 42 193.8364 C
27.3334 194.9031 L
22.9065 164.9298 17.2436 142.9383 6.8833 115.8697 C
20.6666 111.5031 L
f
19.3332 212.0061 m
30.679 240.5379 37.0237 264.737 40.9999 293.8728 C
28.6667 294.8061 L
24.438 265.3596 18.2997 242.1265 7.7667 215.7394 C
19.3332 212.0061 L
f
18 312.5 m
29.3999 339.9926 36.1581 365.2084 40 393.9 C
30 394.7 L
25.9694 365.7802 19.3557 341.3057 8.65 315.6 C
18 312.5 L
f
16.6666 413.0031 m
28.1207 439.4565 35.2925 465.6889 39 493.9364 C
31.3334 494.6031 L
27.5009 466.2101 20.4118 440.494 9.5333 415.4697 C
16.6666 413.0031 L
f
15.3334 513.4969 m
26.8417 538.9112 34.4269 566.1603 38 593.9636 C
32.6666 594.497 L
29.0323 566.6307 21.4678 539.6731 10.4166 515.3303 C
15.3334 513.4969 L
f
U
u
67.8833 179.9364 m
73.2549 165.8907 79.671 145.711 83.5167 131.0198 C
98.5 134.6697 L
94.4892 150.0955 88.4013 169.2859 82.8333 183.8364 C
67.8833 179.9364 L
f
69.1667 280.2728 m
74.8395 266.4288 81.342 247.047 85.4334 232.2395 C
98 235.3395 L
93.7909 250.6911 87.5585 269.3074 81.6666 283.6728 C
69.1667 280.2728 L
f
70.45 380.6 m
76.4239 366.9577 83.0128 348.3737 87.35 333.45 C
97.5 336 L
93.0927 351.2773 86.7158 369.3197 80.5 383.5 C
70.45 380.6 L
f
71.7333 480.9364 m
78.0085 467.4957 84.6838 449.7098 89.2667 434.6698 C
97 436.6697 L
92.3945 451.8729 85.873 469.3412 79.3333 483.3364 C
71.7333 480.9364 L
f
73.0166 581.2636 m
79.5929 568.0246 86.3547 551.0365 91.1832 535.8802 C
96.5 537.3303 L
91.6962 552.4592 85.0303 569.3535 78.1667 583.1636 C
73.0166 581.2636 L
f
U
*u
74.3 681.6 m
81.1775 668.5627 88.0257 652.3725 93.1 637.1 C
96 638 L
90.998 653.0547 84.1875 669.375 77 683 C
74.3 681.6 L
f
34 694.4 m
30.5638 667.0605 22.524 638.8614 11.3 615.2 C
14 614 L
25.5625 638.375 33.5613 666.6408 37 694 C
34 694.4 L
f
53 614 m
48.3433 614 42.7271 615.2288 35.9413 617.7748 C
34.9413 614.9748 L
41.9945 612.3285 47.928 611 53 611 c
60.9681 611 69 621.6533 69 646 c
69 670.521 65.8765 674 49 674 C
11 674 L
11 671 L
49 671 l
64.1968 671 66 668.658 66 646 c
66 624.8472 59.5944 614 53 614 c
f
*U
u
185.5 173.1698 m
185.5 186.1697 L
115.3333 186.1697 L
115.3333 173.1698 L
185.5 173.1698 L
f
185 274.3395 m
185 285.3394 L
115.6667 285.3394 L
115.6667 274.3395 L
185 274.3395 L
f
184.5 375.5 m
184.5 384.5 L
116 384.5 L
116 375.5 L
184.5 375.5 L
f
184 476.6698 m
184 483.6697 L
116.3333 483.6697 L
116.3333 476.6698 L
184 476.6698 L
f
183.5 577.8303 m
183.5 582.8303 L
116.6666 582.8303 L
116.6666 577.8303 L
183.5 577.8303 L
f
U
u
190.6666 154.3364 m
190.6666 167.3364 L
109.3333 167.3364 L
109.3333 154.3364 L
190.6666 154.3364 L
f
190.3333 255.6729 m
190.3333 266.6727 L
109.6667 266.6727 L
109.6667 255.6729 L
190.3333 255.6729 L
f
190 357 m
190 366 L
110 366 L
110 357 L
190 357 L
f
189.6666 458.3364 m
189.6666 465.3364 L
110.3333 465.3364 L
110.3333 458.3364 L
189.6666 458.3364 L
f
189.3333 559.6636 m
189.3333 564.6636 L
110.6666 564.6636 L
110.6666 559.6636 L
189.3333 559.6636 L
f
U
u
182.3333 138.8364 m
175.0355 143.9212 155.7606 149.6697 145.8333 149.6697 c
125.0147 149.6697 115.5 141.7909 115.5 130.1697 c
115.5 116.5058 126.259 108.3364 154.8333 108.3364 c
163.2999 108.3364 172.5476 109.109 180.3333 110.3364 C
178.75 123.8363 L
170.8702 122.6715 161.7455 121.8363 154.8333 121.8363 c
136.655 121.8363 131.8332 124.7797 131.8332 130.1697 c
131.8332 134.0051 135.681 136.6698 145.8333 136.6698 c
154.999 136.6698 163.1472 134.5061 169.4334 131.8697 C
182.3333 138.8364 L
f
181.6666 238.6728 m
174.1834 243.8867 155.9709 249.3394 145.6666 249.3394 c
125.457 249.3394 116 241.6046 116 230.3395 c
116 216.7757 126.5838 208.6728 154.6666 208.6728 c
163.0764 208.6728 171.9788 209.4124 179.6666 210.6728 C
178.3 222.0727 L
170.6229 220.8788 161.8428 220.0727 154.6666 220.0727 c
135.3414 220.0727 129.6665 223.7153 129.6665 230.3395 c
129.6665 235.0349 134.4174 238.3395 145.6666 238.3395 c
155.0929 238.3395 164.2444 235.8872 170.8667 232.7395 C
181.6666 238.6728 L
f
181 338.5 m
173.3314 343.8432 156.1812 349 145.5 349 c
125.8992 349 116.5 341.4091 116.5 330.5 c
116.5 317.0364 126.9086 309 154.5 309 c
162.8529 309 171.4101 309.7067 179 311 C
177.85 320.3 L
170.3756 319.0771 161.9401 318.3 154.5 318.3 c
134.028 318.3 127.5 322.6418 127.5 330.5 c
127.5 336.0554 133.1538 340 145.5 340 c
155.1868 340 165.3416 337.259 172.3 333.6 C
181 338.5 L
f
180.3333 438.3364 m
172.4792 443.8087 156.3915 448.6697 145.3333 448.6697 c
126.3415 448.6697 117 441.2228 117 430.6697 c
117 417.3062 127.2335 409.3364 154.3333 409.3364 c
162.6294 409.3364 170.8414 410.0102 178.3333 411.3364 C
177.4 418.5363 L
170.1283 417.2844 162.0374 416.5363 154.3333 416.5363 c
132.7144 416.5363 125.3332 421.5774 125.3332 430.6697 c
125.3332 437.0853 131.8902 441.6698 145.3333 441.6698 c
155.2807 441.6698 166.4388 438.6401 173.7333 434.4698 C
180.3333 438.3364 L
f
179.6667 538.1636 m
171.6272 543.7651 156.6018 548.3303 145.1667 548.3303 c
126.7838 548.3303 117.5 541.0273 117.5 530.8303 c
117.5 517.5669 127.5583 509.6636 154.1667 509.6636 c
162.406 509.6636 170.2726 510.3045 177.6667 511.6636 C
176.95 516.7637 L
169.881 515.4827 162.1347 514.7637 154.1667 514.7637 c
131.4009 514.7637 123.1667 520.504 123.1667 530.8303 c
123.1667 538.1058 130.6266 543.3302 145.1667 543.3302 c
155.3746 543.3302 167.5359 540.0119 175.1666 535.3303 C
179.6667 538.1636 L
f
U
u
148.6667 194.6697 m
149.5399 169.6633 156.6212 148.8926 169.4334 131.8697 C
182.3333 138.8364 L
170.7613 154.9116 164.9179 173.1519 164.1666 194.6697 C
148.6667 194.6697 L
f
150.3334 294.3394 m
151.1884 269.854 158.0611 249.7215 170.8667 232.7395 C
181.6666 238.6728 L
169.964 254.7507 164.0867 272.76 163.3333 294.3394 C
150.3334 294.3394 L
f
152 394 m
152.8368 370.0355 159.5009 350.5411 172.3 333.6 C
181 338.5 L
169.1668 354.5807 163.2556 372.3589 162.5 394 C
152 394 L
f
153.6667 493.6697 m
154.4853 470.2262 160.9408 451.3701 173.7333 434.4698 C
180.3333 438.3364 L
168.3695 454.4198 162.4244 471.967 161.6666 493.6697 C
153.6667 493.6697 L
f
155.3333 593.3303 m
156.1337 570.4077 162.3806 552.1897 175.1666 535.3303 C
179.6667 538.1636 L
167.5723 554.2498 161.5933 571.566 160.8333 593.3303 C
155.3333 593.3303 L
f
U
*u
183 679 m
183 682 L
117 682 L
117 679 L
183 679 L
f
189 661 m
189 664 L
111 664 L
111 661 L
189 661 L
f
157 693 m
157.7822 670.5984 163.8205 653.0186 176.6 636.2 C
179 638 L
166.775 654.0889 160.7621 671.1741 160 693 C
157 693 L
f
179 638 m
170.7751 643.7307 156.8121 648 145 648 c
127.2261 648 118 640.841 118 631 c
118 617.8368 127.8831 610 154 610 c
162.1825 610 169.7039 610.608 177 612 C
176.5 615 L
169.6337 613.69 162.232 613 154 613 c
130.0874 613 121 619.4396 121 631 c
121 639.1356 129.363 645 145 645 c
155.4685 645 168.6332 641.393 176.6 636.2 C
179 638 L
f
*U
u
0 D
269.5 105.5031 m
224.9479 143.2757 215 137.4817 215 152.0031 c
215 164.8998 223.44 161.1814 267.3333 194.503 C
277.6499 183.2864 L
244.7663 158.2898 232.9999 156.4488 232.9999 152.0031 c
232.9999 147.3458 242.1678 148.3065 280.6833 115.8697 C
269.5 105.5031 L
f
270 206.0061 m
226.0837 243.4518 216 238.6034 216 252.0061 c
216 263.9313 224.7672 261.2546 267.6667 294.0061 C
276.2999 284.5729 L
242.7355 258.8942 230.9999 256.7314 230.9999 252.0061 c
230.9999 246.9608 240.6304 247.61 279.3666 214.7394 C
270 206.0061 L
f
270.5 306.5 m
227.2194 343.6186 217 339.7159 217 352 c
217 362.9537 226.0943 361.3187 268 393.5 C
274.95 385.85 L
240.7049 359.4895 229 357.0049 229 352 c
229 346.5666 239.093 346.9043 278.05 313.6 C
270.5 306.5 L
f
271 407.0031 m
228.3552 443.7947 218 440.8377 218 452.0031 c
218 461.9853 227.4216 461.392 268.3333 493.003 C
273.5999 487.1364 L
238.6741 460.0939 226.9999 457.2876 226.9999 452.0031 c
226.9999 446.1816 237.5556 446.2077 276.7333 412.4697 C
271 407.0031 L
f
271.5 507.4969 m
229.4909 543.9616 219 541.9502 219 551.997 c
219 561.0077 228.7487 561.4561 268.6666 592.497 C
272.25 588.4136 L
236.6436 560.6891 225 557.561 225 551.997 c
225 545.7874 236.0182 545.5021 275.4167 511.3303 C
271.5 507.4969 L
f
U
269 692 m
230.0759 661.5294 220 660.0392 220 652 c
220 643.072 230.6268 644.1376 272 608 C
274.1 610.2 L
234.4808 644.8055 223 645.4024 223 652 c
223 657.8437 234.6128 661.2936 270.9 689.7 C
269 692 L
f
u
1 D
324.9999 150.0031 m
324.9999 135.6934 326.549 122.5394 329.7333 110.1197 C
314.5 108.3364 L
311.0499 121.7954 309.5 134.8182 309.5 150.0031 c
309.5 165.1879 311.0499 178.2107 314.5 191.6697 C
329.7333 189.8864 L
326.549 177.4666 324.9999 164.3127 324.9999 150.0031 c
f
322.9999 250.0061 m
322.9999 235.7183 324.5404 222.7699 327.7665 210.2395 C
315 208.6728 L
311.5346 222.1365 310 235.0614 310 250.0061 c
310 264.9508 311.5346 277.8757 315 291.3394 C
327.7665 289.7728 L
324.5404 277.2423 322.9999 264.2939 322.9999 250.0061 c
f
321 350 m
321 335.7341 322.532 322.9911 325.8 310.35 C
315.5 309 L
312.0192 322.4685 310.5 335.2955 310.5 350 c
310.5 364.7045 312.0192 377.5314 315.5 391 C
325.8 389.65 L
322.532 377.0088 321 364.2659 321 350 c
f
318.9999 450.0031 m
318.9999 435.759 320.5234 423.2216 323.8332 410.4697 C
316 409.3364 L
312.5039 422.8097 311 435.5387 311 450.0031 c
311 464.4674 312.5039 477.1964 316 490.6697 C
323.8332 489.5364 L
320.5234 476.7844 318.9999 464.2471 318.9999 450.0031 c
f
317 549.997 m
317 535.7748 318.515 523.4429 321.8667 510.5803 C
316.5 509.6636 L
312.9886 523.1416 311.5 535.7727 311.5 549.997 c
311.5 564.2212 312.9886 576.8522 316.5 590.3303 C
321.8667 589.4136 L
318.515 576.5509 317 564.2191 317 549.997 c
f
U
u
0 D
394.6666 174.503 m
381.3333 174.503 L
381.3333 191.8364 L
365.8334 191.8364 L
365.8334 174.503 L
338 174.503 L
338 160.6698 L
365.8334 160.6698 L
365.8334 149.3364 L
365.8334 127.9807 365.0717 126.9591 347.8333 121.303 C
353 107.5031 L
376.7781 115.3049 381.3333 122.2459 381.3333 149.3364 C
381.3333 160.6698 L
394.6666 160.6698 L
394.6666 174.503 L
f
394.3333 274.0061 m
380.6666 274.0061 L
380.6666 291.6728 L
367.6668 291.6728 L
367.6668 274.0061 L
338 274.0061 L
338 262.3395 L
367.6668 262.3395 L
367.6668 249.6728 L
367.6668 227.2438 366.3347 225.403 348.6667 219.606 C
353 208.0061 L
376.2908 215.6481 380.6666 222.5202 380.6666 249.6728 C
380.6666 262.3395 L
394.3333 262.3395 L
394.3333 274.0061 L
f
394 373.5 m
380 373.5 L
380 391.5 L
369.5 391.5 L
369.5 373.5 L
338 373.5 L
338 364 L
369.5 364 L
369.5 350 L
369.5 326.4979 367.5977 323.838 349.5 317.9 C
353 308.5 L
375.8035 315.9821 380 322.7853 380 350 C
380 364 L
394 364 L
394 373.5 L
f
393.6666 473.003 m
379.3333 473.003 L
379.3333 491.3364 L
371.3334 491.3364 L
371.3334 473.003 L
338 473.003 L
338 465.6698 L
371.3334 465.6698 L
371.3334 450.3364 L
371.3334 425.7611 368.8607 422.282 350.3333 416.203 C
353 409.0031 L
375.3161 416.3252 379.3333 423.0597 379.3333 450.3364 C
379.3333 465.6698 L
393.6666 465.6698 L
393.6666 473.003 L
f
393.3333 572.497 m
378.6667 572.497 L
378.6667 591.1636 L
373.1666 591.1636 L
373.1666 572.497 L
338 572.497 L
338 567.3302 L
373.1666 567.3302 L
373.1666 550.6636 L
373.1666 525.0151 370.1236 520.7169 351.1666 514.497 C
353 509.4969 L
374.8288 516.6592 378.6667 523.3248 378.6667 550.6636 C
378.6667 567.3302 L
393.3333 567.3302 L
393.3333 572.497 L
f
U
u
393 672 m
378 672 L
378 691 L
375 691 L
375 672 L
338 672 L
338 669 L
375 669 L
375 651 L
375 624.2783 371.3867 619.1609 352 612.8 C
353 610 L
374.3415 617.0024 378 623.5991 378 651 C
378 669 L
393 669 L
393 672 L
f
1 D
319.9 610.7 m
316.5065 623.6733 315 635.7997 315 650 c
315 664.2003 316.5065 676.3265 319.9 689.3 C
317 690 L
313.4733 676.5171 312 663.9841 312 650 c
312 636.0159 313.4733 623.4828 317 610 C
319.9 610.7 L
f
U
u
0 D
435.9293 146.6729 m
430.965 143.1362 428 137.7987 428 133.503 c
428 127.3914 434.2993 123.1696 451 123.1696 c
459.6387 123.1696 476.0627 125.1668 484.9 127.153 C
487.5 112.503 L
478.41 110.4481 461.149 108.503 451 108.503 c
423.5344 108.503 412.5 117.0194 412.5 131.8364 c
412.5 139.7169 417.9467 149.7437 425.596 155.3729 C
435.9293 146.6729 L
f
434.8586 247.3459 m
429.2773 243.2365 425.9999 237.3945 425.9999 233.0061 c
425.9999 226.0399 433.0618 221.3393 451 221.3393 c
459.688 221.3393 476.3853 223.3711 484.8 225.306 C
487 213.0061 L
478.3379 211.0046 460.923 209.0061 451 209.0061 c
424.0435 209.0061 413 217.3863 413 231.6728 c
413 239.1335 418.349 248.8721 426.192 254.7458 C
434.8586 247.3459 L
f
433.788 348.0096 m
427.5898 343.3277 424 336.9813 424 332.5 c
424 324.6795 431.8245 319.5 451 319.5 c
459.7373 319.5 476.7078 321.5665 484.7 323.45 C
486.5 313.5 L
478.2659 311.552 460.6971 309.5 451 309.5 c
424.5525 309.5 413.5 317.7439 413.5 331.5 c
413.5 338.5411 418.7514 347.9914 426.788 354.1096 C
433.788 348.0096 L
f
432.7173 448.6825 m
425.902 443.428 422 436.5772 422 432.003 c
422 423.328 430.5871 417.6696 451 417.6696 c
459.7866 417.6696 477.0303 419.7708 484.6 421.603 C
486 414.003 L
478.1938 412.1085 460.4711 410.003 451 410.003 c
425.0616 410.003 414 418.1107 414 431.3364 c
414 437.9577 419.1537 447.1198 427.384 453.4825 C
432.7173 448.6825 L
f
431.6467 549.3462 m
424.2145 543.5191 420.0001 536.1639 420.0001 531.4969 c
420.0001 521.9676 429.3498 515.8303 451 515.8303 c
459.8358 515.8303 477.3529 517.9661 484.5 519.747 C
485.5 514.4969 L
478.1218 512.6558 460.2452 510.4969 451 510.4969 c
425.5706 510.4969 414.5 518.4684 414.5 531.1636 c
414.5 537.3652 419.556 546.2391 427.98 552.8463 C
431.6467 549.3462 L
f
U
u
479.5 174.8364 m
479.5 189.503 L
420.5 189.503 L
420.5 174.8364 L
479.5 174.8364 L
f
479 276.6729 m
479 289.0061 L
421 289.0061 L
421 276.6729 L
479 276.6729 L
f
478.5 378.5 m
478.5 388.5 L
421.5 388.5 L
421.5 378.5 L
478.5 378.5 L
f
478 480.3364 m
478 488.003 L
422 488.003 L
422 480.3364 L
478 480.3364 L
f
477.5 582.1635 m
477.5 587.4969 L
422.5 587.4969 L
422.5 582.1635 L
477.5 582.1635 L
f
U
u
430.576 650.0192 m
422.5268 643.6195 418 635.7598 418 631 c
418 620.6161 428.1123 614 451 614 c
459.8851 614 477.6754 616.1705 484.4 617.9 C
485 615 L
478.0497 613.2124 460.0192 611 451 611 c
426.0797 611 415 618.8352 415 631 c
415 636.7818 419.9584 645.3675 428.576 652.2192 C
430.576 650.0192 L
f
477 684 m
477 687 L
423 687 L
423 684 L
477 684 L
f
U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
