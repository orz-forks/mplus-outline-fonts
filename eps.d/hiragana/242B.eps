%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (242B.eps)
%%CreationDate: (9/28/04) (11:32 AM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
500 600 m
500 700 L
400 700 L
400 600 L
500 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
400 600 m
400 700 L
300 700 L
300 600 L
400 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
500 500 m
500 600 L
400 600 L
400 500 L
500 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
400 500 m
400 600 L
300 600 L
300 500 L
400 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
0 O
0 g
1 D
282 17 m
243.7053 49.0031 235 47.7308 235 52 c
235 56.1661 246.7971 57.6853 279 82 C
267 95 L
222.1128 61.1081 214 65.8683 214 52 c
214 36.3599 223.8121 43.0997 269 5 C
282 17 L
f
395 75 m
382 75 L
382 92 L
364 92 L
364 75 L
338 75 L
338 59 L
364 59 L
364 49 L
364 28.7175 363.8087 28.5151 347 23 C
353 7 L
377.2655 14.9617 382 21.9716 382 49 C
382 59 L
395 59 L
395 75 L
f
331.7 90 m
314 92 L
310.5652 78.5458 309 65.425 309 50 c
309 34.575 310.5652 21.4542 314 8 C
331.7 10 L
328.5576 22.309 327 35.6685 327 50 c
327 64.3315 328.5576 77.691 331.7 90 C
f
u
280.6833 115.8697 m
242.1678 148.3065 232.9999 147.3458 232.9999 152.0031 c
232.9999 156.4488 244.7663 158.2898 277.6499 183.2864 C
267.3333 194.503 L
223.44 161.1814 215 164.8998 215 152.0031 c
215 137.4817 224.9479 143.2757 269.5 105.5031 C
280.6833 115.8697 L
f
279.3666 214.7394 m
240.6304 247.61 230.9999 246.9608 230.9999 252.0061 c
230.9999 256.7314 242.7355 258.8942 276.2999 284.5729 C
267.6667 294.0061 L
224.7672 261.2546 216 263.9313 216 252.0061 c
216 238.6034 226.0837 243.4518 270 206.0061 C
279.3666 214.7394 L
f
278.05 313.6 m
239.093 346.9043 229 346.5666 229 352 c
229 357.0049 240.7049 359.4895 274.95 385.85 C
268 393.5 L
226.0943 361.3187 217 362.9537 217 352 c
217 339.7159 227.2194 343.6186 270.5 306.5 C
278.05 313.6 L
f
276.7333 412.4697 m
237.5556 446.2077 226.9999 446.1816 226.9999 452.0031 c
226.9999 457.2876 238.6741 460.0939 273.5999 487.1364 C
268.3333 493.003 L
227.4216 461.392 218 461.9853 218 452.0031 c
218 440.8377 228.3552 443.7947 271 407.0031 C
276.7333 412.4697 L
f
275.4167 511.3303 m
236.0182 545.5021 225 545.7874 225 551.997 c
225 557.561 236.6436 560.6891 272.25 588.4136 C
268.6666 592.497 L
228.7487 561.4561 219 561.0077 219 551.997 c
219 541.9502 229.4909 543.9616 271.5 507.4969 C
275.4167 511.3303 L
f
U
269 692 m
230.0759 661.5294 220 660.0392 220 652 c
220 643.072 230.6268 644.1376 272 608 C
274.1 610.2 L
234.4808 644.8055 223 645.4024 223 652 c
223 657.8437 234.6128 661.2936 270.9 689.7 C
269 692 L
f
u
329.7333 189.8864 m
314.5 191.6697 L
311.0499 178.2107 309.5 165.1879 309.5 150.0031 c
309.5 134.8182 311.0499 121.7954 314.5 108.3364 C
329.7333 110.1197 L
326.549 122.5394 324.9999 135.6934 324.9999 150.0031 c
324.9999 164.3127 326.549 177.4666 329.7333 189.8864 C
f
327.7665 289.7728 m
315 291.3394 L
311.5346 277.8757 310 264.9508 310 250.0061 c
310 235.0614 311.5346 222.1365 315 208.6728 C
327.7665 210.2395 L
324.5404 222.7699 322.9999 235.7183 322.9999 250.0061 c
322.9999 264.2939 324.5404 277.2423 327.7665 289.7728 C
f
325.8 389.65 m
315.5 391 L
312.0192 377.5314 310.5 364.7045 310.5 350 c
310.5 335.2955 312.0192 322.4685 315.5 309 C
325.8 310.35 L
322.532 322.9911 321 335.7341 321 350 c
321 364.2659 322.532 377.0088 325.8 389.65 C
f
323.8332 489.5364 m
316 490.6697 L
312.5039 477.1964 311 464.4674 311 450.0031 c
311 435.5387 312.5039 422.8097 316 409.3364 C
323.8332 410.4697 L
320.5234 423.2216 318.9999 435.759 318.9999 450.0031 c
318.9999 464.2471 320.5234 476.7844 323.8332 489.5364 C
f
321.8667 589.4136 m
316.5 590.3303 L
312.9886 576.8522 311.5 564.2212 311.5 549.997 c
311.5 535.7727 312.9886 523.1416 316.5 509.6636 C
321.8667 510.5803 L
318.515 523.4429 317 535.7748 317 549.997 c
317 564.2191 318.515 576.5509 321.8667 589.4136 C
f
U
u
394.6666 174.503 m
381.3333 174.503 L
381.3333 191.8364 L
365.8334 191.8364 L
365.8334 174.503 L
338 174.503 L
338 160.6698 L
365.8334 160.6698 L
365.8334 149.3364 L
365.8334 127.9807 365.0717 126.9591 347.8333 121.303 C
353 107.5031 L
376.7781 115.3049 381.3333 122.2459 381.3333 149.3364 C
381.3333 160.6698 L
394.6666 160.6698 L
394.6666 174.503 L
f
394.3333 274.0061 m
380.6666 274.0061 L
380.6666 291.6728 L
367.6668 291.6728 L
367.6668 274.0061 L
338 274.0061 L
338 262.3395 L
367.6668 262.3395 L
367.6668 249.6728 L
367.6668 227.2438 366.3347 225.403 348.6667 219.606 C
353 208.0061 L
376.2908 215.6481 380.6666 222.5202 380.6666 249.6728 C
380.6666 262.3395 L
394.3333 262.3395 L
394.3333 274.0061 L
f
394 373.5 m
380 373.5 L
380 391.5 L
369.5 391.5 L
369.5 373.5 L
338 373.5 L
338 364 L
369.5 364 L
369.5 350 L
369.5 326.4979 367.5977 323.838 349.5 317.9 C
353 308.5 L
375.8035 315.9821 380 322.7853 380 350 C
380 364 L
394 364 L
394 373.5 L
f
393.6666 473.003 m
379.3333 473.003 L
379.3333 491.3364 L
371.3334 491.3364 L
371.3334 473.003 L
338 473.003 L
338 465.6698 L
371.3334 465.6698 L
371.3334 450.3364 L
371.3334 425.7611 368.8607 422.282 350.3333 416.203 C
353 409.0031 L
375.3161 416.3252 379.3333 423.0597 379.3333 450.3364 C
379.3333 465.6698 L
393.6666 465.6698 L
393.6666 473.003 L
f
393.3333 572.497 m
378.6667 572.497 L
378.6667 591.1636 L
373.1666 591.1636 L
373.1666 572.497 L
338 572.497 L
338 567.3302 L
373.1666 567.3302 L
373.1666 550.6636 L
373.1666 525.0151 370.1236 520.7169 351.1666 514.497 C
353 509.4969 L
374.8288 516.6592 378.6667 523.3248 378.6667 550.6636 C
378.6667 567.3302 L
393.3333 567.3302 L
393.3333 572.497 L
f
U
393 672 m
378 672 L
378 691 L
375 691 L
375 672 L
338 672 L
338 669 L
375 669 L
375 651 L
375 624.2783 371.3867 619.1609 352 612.8 C
353 610 L
374.3415 617.0024 378 623.5991 378 651 C
378 669 L
393 669 L
393 672 L
f
319.9 610.7 m
316.5065 623.6733 315 635.7997 315 650 c
315 664.2003 316.5065 676.3265 319.9 689.3 C
317 690 L
313.4733 676.5171 312 663.9841 312 650 c
312 636.0159 313.4733 623.4828 317 610 C
319.9 610.7 L
f
428.576 652.2192 m
419.9584 645.3675 415 636.7818 415 631 c
415 618.8352 426.0797 611 451 611 c
460.0192 611 478.0497 613.2124 485 615 C
484.4 617.9 L
477.6754 616.1705 459.8851 614 451 614 c
428.1123 614 418 620.6161 418 631 c
418 635.7598 422.5268 643.6195 430.576 650.0192 C
428.576 652.2192 L
f
477 683 m
477 686 L
423 686 L
423 683 L
477 683 L
f
u
427.98 553.013 m
419.556 546.4058 414.5 537.5318 414.5 531.3303 c
414.5 518.5517 425.7095 510.4969 451 510.4969 c
460.2452 510.4969 478.1153 512.7332 485.5 514.6636 C
484.5 519.9137 L
477.3554 518.042 459.8358 515.8303 451 515.8303 c
429.4609 515.8303 420.0001 522.0509 420.0001 531.6636 c
420.0001 536.3306 424.2145 543.6858 431.6467 549.5129 C
427.98 553.013 L
f
427.384 453.8067 m
419.1537 447.444 414 438.2819 414 431.6606 c
414 418.2682 425.3393 409.9939 451 409.9939 c
460.4711 409.9939 478.1808 412.2539 486 414.3272 C
484.6 421.9273 L
477.0354 419.9136 459.7865 417.6607 451 417.6607 c
430.8094 417.6607 422.0001 423.4856 422.0001 432.3273 c
422.0001 436.9014 425.9022 443.7522 432.7174 449.0067 C
427.384 453.8067 L
f
426.788 354.6096 m
418.7514 348.4914 413.5 339.041 413.5 332 c
413.5 317.9939 424.9691 309.5 451 309.5 c
460.6971 309.5 478.2464 311.7838 486.5 314 C
484.7 323.95 L
476.7155 321.7942 459.7373 319.5 451 319.5 c
432.1579 319.5 424 324.9294 424 333 c
424 337.4813 427.5897 343.8277 433.788 348.5096 C
426.788 354.6096 L
f
426.192 255.4034 m
418.349 249.5297 413 239.7911 413 232.3303 c
413 217.7104 424.5989 208.9969 451 208.9969 c
460.9231 208.9969 478.3119 211.3046 487 213.6636 C
484.8 225.9637 L
476.3955 223.6658 459.688 221.3303 451 221.3303 c
433.5065 221.3303 426.0001 226.3642 426.0001 233.6636 c
426.0001 238.0521 429.2774 243.894 434.8587 248.0033 C
426.192 255.4034 L
f
425.596 156.2062 m
417.9467 150.577 412.5 140.5502 412.5 132.6697 c
412.5 117.4361 424.2287 108.503 451 108.503 c
461.149 108.503 478.3775 110.8345 487.5 113.3364 C
484.9 127.9863 L
476.0756 125.5463 459.6387 123.1696 451 123.1696 c
434.8549 123.1696 428 127.808 428 134.3363 c
428 138.632 430.965 143.9695 435.9293 147.5063 C
425.596 156.2062 L
f
U
u
477.3334 581.3302 m
477.3334 586.6636 L
422.6667 586.6636 L
422.6667 581.3302 L
477.3334 581.3302 L
f
477.6667 479.6605 m
477.6667 487.3273 L
422.3333 487.3273 L
422.3333 479.6605 L
477.6667 479.6605 L
f
478 378 m
478 388 L
422 388 L
422 378 L
478 378 L
f
478.3334 276.3302 m
478.3334 288.6636 L
421.6667 288.6636 L
421.6667 276.3302 L
478.3334 276.3302 L
f
478.6667 174.6697 m
478.6667 189.3363 L
421.3334 189.3363 L
421.3334 174.6697 L
478.6667 174.6697 L
f
U
479 73 m
479 90 L
421 90 L
421 73 L
479 73 L
f
425 57 m
417.5443 51.6153 412 41.3003 412 33 c
412 17.1526 423.8585 8 451 8 c
461.375 8 478.4431 10.3553 488 13 C
485 30 L
475.7556 27.4179 459.5895 25 451 25 c
436.2035 25 430 29.2428 430 35 c
430 39.2028 432.6527 44.0359 437 47 C
425 57 L
f
183 678 m
183 681 L
117 681 L
117 678 L
183 678 L
f
189 660 m
189 663 L
111 663 L
111 660 L
189 660 L
f
179 637 m
170.7751 642.7307 156.8121 647 145 647 c
127.2261 647 118 639.841 118 630 c
118 616.8368 127.8831 609 154 609 c
162.1825 609 169.7039 609.608 177 611 C
176.5 614 L
169.6337 612.69 162.232 612 154 612 c
130.0874 612 121 618.4396 121 630 c
121 638.1356 129.363 644 145 644 c
155.4685 644 168.6332 640.393 176.6 635.2 C
179 637 L
f
179 637 m
166.8948 652.9311 160.809 670.8318 160 694 C
157 694 L
157.8216 670.4709 164.0431 651.7256 176.6 635.2 C
179 637 L
f
u
183.5 576.9969 m
183.5 581.997 L
116.6667 581.997 L
116.6667 576.9969 L
183.5 576.9969 L
f
184 475.9938 m
184 482.994 L
116.3333 482.994 L
116.3333 475.9938 L
184 475.9938 L
f
184.5 375 m
184.5 384 L
116 384 L
116 375 L
184.5 375 L
f
185 273.9969 m
185 284.997 L
115.6667 284.997 L
115.6667 273.9969 L
185 273.9969 L
f
185.5 173.0031 m
185.5 186.003 L
115.3334 186.003 L
115.3334 173.0031 L
185.5 173.0031 L
f
U
u
189.3334 558.8303 m
189.3334 563.8303 L
110.6667 563.8303 L
110.6667 558.8303 L
189.3334 558.8303 L
f
189.6667 457.6605 m
189.6667 464.6606 L
110.3333 464.6606 L
110.3333 457.6605 L
189.6667 457.6605 L
f
190 356.5 m
190 365.5 L
110 365.5 L
110 356.5 L
190 356.5 L
f
190.3334 255.3303 m
190.3334 266.3303 L
109.6667 266.3303 L
109.6667 255.3303 L
190.3334 255.3303 L
f
190.6667 154.1698 m
190.6667 167.1697 L
109.3334 167.1697 L
109.3334 154.1698 L
190.6667 154.1698 L
f
U
u
179.6667 537.3303 m
167.6721 553.2849 161.6324 571.2808 160.8334 594.1636 C
155.3333 594.1636 L
156.1665 570.3015 162.5661 551.1122 175.1666 534.4969 C
179.6667 537.3303 L
f
180.3334 437.6606 m
168.4494 453.6388 162.4557 471.7297 161.6667 494.3273 C
153.6666 494.3273 L
154.5114 470.132 161.0891 450.4988 173.7332 433.7939 C
180.3334 437.6606 L
f
181 338 m
169.2267 354.0017 163.279 372.1878 162.5 394.5 C
152 394.5 L
152.8565 369.9717 159.6122 349.8946 172.3 333.1 C
181 338 L
f
181.6667 238.3303 m
170.004 254.3556 164.1024 272.6368 163.3334 294.6636 C
150.3333 294.6636 L
151.2014 269.8023 158.1352 249.2813 170.8666 232.3969 C
181.6667 238.3303 L
f
182.3333 138.6697 m
170.7813 154.7186 164.9257 173.0948 164.1667 194.8364 C
148.6667 194.8364 L
149.5465 169.642 156.6583 148.6771 169.4334 131.7031 C
182.3333 138.6697 L
f
U
186 72 m
186 87 L
115 87 L
115 72 L
186 72 L
f
191 53 m
191 68 L
109 68 L
109 53 L
191 53 L
f
183 39 m
171.5586 55.0724 165.7491 73.5438 165 95 C
147 95 L
147.8914 69.4726 155.1813 48.0637 168 31 C
183 39 L
f
u
179.6667 537.3303 m
171.6272 542.9318 156.9351 547.3303 145.1667 547.3303 c
126.8671 547.3303 117.5 540.0829 117.5 529.9969 c
117.5 516.7336 127.5583 508.8303 154.1667 508.8303 c
162.406 508.8303 170.2727 509.4712 177.6667 510.8303 C
176.95 515.9303 L
169.881 514.6494 162.1347 513.9303 154.1667 513.9303 c
131.401 513.9303 123.1667 519.6706 123.1667 529.9969 c
123.1667 537.2725 130.6266 542.4969 145.1667 542.4969 c
155.3746 542.4969 167.536 539.1786 175.1666 534.4969 C
179.6667 537.3303 L
f
180.3334 437.6606 m
172.4793 443.1329 157.0581 447.6606 145.3333 447.6606 c
126.5081 447.6606 117 440.3247 117 429.9939 c
117 416.6304 127.2334 408.6605 154.3333 408.6605 c
162.6295 408.6605 170.8414 409.3344 178.3334 410.6605 C
177.4 417.8607 L
170.1283 416.6087 162.0374 415.8607 154.3333 415.8607 c
132.7145 415.8607 125.3335 420.9017 125.3335 429.9939 c
125.3335 436.4093 131.8903 440.9938 145.3333 440.9938 c
155.2807 440.9938 166.4387 437.9642 173.7332 433.7938 C
180.3334 437.6606 L
f
181 338 m
173.3313 343.3432 157.1811 348 145.5 348 c
126.1492 348 116.5 340.5757 116.5 330 c
116.5 316.5364 126.9086 308.5 154.5 308.5 c
162.8529 308.5 171.4101 309.2067 179 310.5 C
177.85 319.8 L
170.3757 318.5771 161.9401 317.8 154.5 317.8 c
134.028 317.8 127.5 322.1418 127.5 330 c
127.5 335.5554 133.1539 339.5 145.5 339.5 c
155.1868 339.5 165.3416 336.759 172.3 333.1 C
181 338 L
f
181.6667 238.3303 m
174.1835 243.5443 157.3042 248.3303 145.6667 248.3303 c
125.7902 248.3303 116 240.8176 116 229.9969 c
116 216.4332 126.5838 208.3303 154.6667 208.3303 c
163.0764 208.3303 171.9789 209.0699 179.6667 210.3303 C
178.3 221.7303 L
170.623 220.5364 161.8428 219.7303 154.6667 219.7303 c
135.3415 219.7303 129.6667 223.3728 129.6667 229.9969 c
129.6667 234.6923 134.4175 237.9969 145.6667 237.9969 c
155.0929 237.9969 164.2444 235.5446 170.8666 232.3969 C
181.6667 238.3303 L
f
182.3333 138.6697 m
175.0355 143.7545 157.4272 148.6697 145.8333 148.6697 c
125.4313 148.6697 115.5 141.0686 115.5 130.003 c
115.5 116.3392 126.259 108.1697 154.8333 108.1697 c
163.2999 108.1697 172.5476 108.9423 180.3333 110.1697 C
178.75 123.6696 L
170.8703 122.5048 161.7455 121.6696 154.8333 121.6696 c
136.655 121.6696 131.8333 124.6129 131.8333 130.003 c
131.8333 133.8384 135.681 136.5031 145.8333 136.5031 c
154.999 136.5031 163.1472 134.3394 169.4334 131.7031 C
182.3333 138.6697 L
f
U
183 39 m
175.8876 43.9557 157.5502 49 146 49 c
125.0723 49 115 41.3105 115 30 c
115 16.236 125.9342 8 155 8 c
163.5234 8 173.1164 8.8055 181 10 C
179.2 25.6 L
171.1176 24.4642 161.6482 23.6 155 23.6 c
137.9686 23.6 134 25.844 134 30 c
134 32.9753 136.9447 35 146 35 c
154.9051 35 162.05 33.125 168 31 C
183 39 L
f
74.3 680.6 m
81.1775 667.5627 88.0257 651.3725 93.1 636.1 C
96 637 L
90.998 652.0547 84.1875 668.375 77 682 C
74.3 680.6 L
f
12.7 612.7 m
25.2304 636.0435 35.1724 665.4237 40 693.5 C
37 694 L
32.25 666.375 22.3125 636.9375 10 614 C
12.7 612.7 L
f
52 613 m
47.3433 613 41.7271 614.2288 34.9413 616.7748 C
33.9413 613.9748 L
40.9945 611.3285 46.928 610 52 610 c
60.6347 610 69 621.6533 69 645 c
69 671.6877 66.8761 674 49 674 C
11 674 L
11 671 L
49 671 l
64.8911 671 66 669.9998 66 645 c
66 624.3251 59.1237 613 52 613 c
f
u
73.0166 580.4302 m
79.5929 567.1913 86.3547 550.2031 91.1833 535.0469 C
96.5 536.4969 L
91.6963 551.6258 85.0303 568.5202 78.1667 582.3303 C
73.0166 580.4302 L
f
71.7333 480.2605 m
78.0084 466.8199 84.6837 449.0338 89.2666 433.9938 C
97 435.9938 L
92.3945 451.197 85.8731 468.6654 79.3334 482.6606 C
71.7333 480.2605 L
f
70.45 380.1 m
76.424 366.4576 83.0129 347.8737 87.35 332.95 C
97.5 335.5 L
93.0928 350.7773 86.7158 368.8197 80.5 383 C
70.45 380.1 L
f
69.1666 279.9302 m
74.8394 266.0862 81.3419 246.7044 85.4333 231.8969 C
98 234.9969 L
93.791 250.3485 87.5586 268.9649 81.6667 283.3303 C
69.1666 279.9302 L
f
67.8834 179.7697 m
73.255 165.724 79.671 145.5443 83.5167 130.8531 C
98.5 134.503 L
94.4892 149.9288 88.4013 169.1192 82.8333 183.6697 C
67.8834 179.7697 L
f
U
99 34 m
95.1875 49.5 89.2441 69.2644 84 84 C
66.6 79.6 L
71.6704 65.3526 78 44.375 81.6 29.8 C
99 34 L
f
u
14.0834 512.4136 m
26.3983 536.9683 35.6028 565.146 40.3334 593.5469 C
35 594.1636 L
30.2708 566.0594 21.125 538.0699 9.1667 514.3303 C
14.0834 512.4136 L
f
15.4668 412.1272 m
27.5661 437.893 36.0333 464.8683 40.6667 493.5939 C
32.9999 494.3272 L
28.2916 465.7439 19.9374 439.2023 8.3333 414.6606 C
15.4668 412.1272 L
f
16.85 311.85 m
28.7339 338.8269 36.4637 364.5998 41 393.65 C
31 394.5 L
26.3125 365.4375 18.75 340.3437 7.5 315 C
16.85 311.85 L
f
18.2334 211.5636 m
29.9018 239.7516 36.8941 264.3221 41.3334 293.6969 C
29 294.6636 L
24.3333 265.1219 17.5625 241.4761 6.6667 215.3303 C
18.2334 211.5636 L
f
19.6166 111.2864 m
31.0695 140.6855 37.3246 164.0536 41.6667 193.753 C
27.0001 194.8364 L
22.3542 164.8155 16.375 142.6176 5.8334 115.6697 C
19.6166 111.2864 L
f
U
21 11 m
32.2374 41.6103 37.755 63.7759 42 93.8 C
25 95 L
20.375 64.5 15.1875 43.75 5 16 C
21 11 L
f
u
50.5 514.897 m
46.1452 514.897 40.8202 516.0431 34.5511 518.3593 C
33.0844 513.5259 L
39.9476 510.9731 46.0291 509.6636 51.1667 509.6636 c
60.6127 509.6636 69 521.047 69 544.9969 c
69 572.0704 66.5714 574.6636 48 574.6636 C
10.5 574.6636 L
10.5 569.4969 L
48.1667 569.4969 L
62.5634 569.4969 63.4999 568.6415 63.4999 545.6636 c
63.4999 524.8423 57.3914 514.897 50.5 514.897 c
f
48.9999 416.794 m
44.9472 416.794 39.9133 417.8573 34.1609 419.9438 C
32.2275 413.077 L
38.9007 410.6177 45.1302 409.3272 50.3333 409.3272 c
60.5906 409.3272 69 420.4406 69 444.9939 c
69 472.453 66.2666 475.3273 47 475.3273 C
10 475.3273 L
10 467.9938 L
47.3333 467.9938 L
60.2357 467.9938 60.9999 467.2833 60.9999 446.3273 c
60.9999 425.3595 55.6591 416.794 48.9999 416.794 c
f
47.5 318.7 m
43.7492 318.7 39.0065 319.6806 33.7707 321.5374 C
31.3707 312.6374 L
37.8539 310.2715 44.2314 309 49.5 309 c
60.5686 309 69 319.8434 69 345 c
69 372.8448 65.962 376 46 376 C
9.5 376 L
9.5 366.5 L
46.5 366.5 L
57.9083 366.5 58.5 365.9343 58.5 347 c
58.5 325.8858 53.927 318.7 47.5 318.7 c
f
46 220.597 m
42.5511 220.597 38.0995 221.4949 33.3804 223.1219 C
30.5138 212.1885 L
36.807 209.9161 43.3326 208.6636 48.6667 208.6636 c
60.5465 208.6636 69 219.237 69 244.9969 c
69 273.2275 65.6572 276.6636 45 276.6636 C
9 276.6636 L
9 264.9969 L
45.6667 264.9969 L
55.5806 264.9969 55.9999 264.5761 55.9999 247.6636 c
55.9999 226.403 52.1947 220.597 46 220.597 c
f
44.5001 122.503 m
41.3532 122.503 37.1927 123.3181 32.9902 124.7154 C
29.6569 111.7488 L
35.7602 109.5699 42.4338 108.3364 47.8334 108.3364 c
60.5245 108.3364 69 118.6399 69 145.003 c
69 173.6193 65.3525 177.3363 44 177.3363 C
8.5 177.3363 L
8.5 163.5031 L
44.8334 163.5031 L
53.2531 163.5031 53.5001 163.2271 53.5001 148.3363 c
53.5001 126.9293 50.4627 122.503 44.5001 122.503 c
f
U
43 78 m
8 78 L
8 62 L
44 62 L
50.9254 62 51 61.8689 51 49 c
51 27.4465 48.7304 24.4 43 24.4 c
40.1551 24.4 36.2858 25.1324 32.6 26.3 C
28.8 11.3 L
34.7133 9.2145 41.5349 8 47 8 c
60.5024 8 69 18.0335 69 45 c
69 74.002 65.0478 78 43 78 C
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
