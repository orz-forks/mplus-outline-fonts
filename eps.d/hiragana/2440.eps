%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (2440.eps)
%%CreationDate: (9/16/04) (4:15 PM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
500 600 m
500 700 L
400 700 L
400 600 L
500 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
400 600 m
400 700 L
300 700 L
300 600 L
400 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
500 500 m
500 600 L
400 600 L
400 500 L
500 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
400 500 m
400 600 L
300 600 L
300 500 L
400 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
0 O
0 g
1 D
9.9 609.1 m
18.1629 634.4316 25.2961 663.6094 30 693.6 C
27 694 L
22.441 664.9323 15.5625 636.25 7 610 C
9.9 609.1 L
f
64 680 m
10 680 L
10 677 L
64 677 L
64 680 L
f
51 640 m
42.7709 635.0354 39 629.6178 39 625 c
39 615.8605 47.3713 610 67 610 c
73.7066 610 80.5 610.75 87 612 C
86.5 615 L
80.0475 613.7591 73.4956 613 67 613 c
49.5951 613 42 617.7486 42 625 c
42 628.4682 45.2607 633.0119 52.7 637.5 C
51 640 L
f
83 655 m
83 658 L
46 658 L
46 655 L
83 655 L
f
121.7 638.7 m
128.7982 647.2415 140.1614 652 156 652 c
171.7617 652 179 645.6106 179 634 c
179 621.9191 166.3753 612 147 612 c
138.9451 612 131.8872 612.8843 124.8174 614.8865 C
124 612 L
131.0625 610 138.3255 609 147 609 c
168.0008 609 182 620.2072 182 634 c
182 647.264 173.6182 655 156 655 c
138.545 655 126.6646 649.6843 119 640 C
121.7 638.7 L
f
188 673 m
188 676 L
110 676 L
110 673 L
188 673 L
f
121.7 638.7 m
130.5583 656.1501 134.9837 671.7622 137 692 C
134 692 L
132.0014 671.9397 127.5987 656.9387 119 640 C
121.7 638.7 L
f
416 631 m
416 643.6519 430.6945 654.6168 479.7 664 C
479 667 L
427.5776 657.154 413 645.3211 413 631 c
413 618.838 424.7423 610 447 610 c
460.1234 610 468 610.75 480 613 C
479.5 616 L
467.4483 613.7403 459.8144 613 447 613 c
426.712 613 416 620.5638 416 631 c
f
436 654 m
432.8339 665.9664 429.9567 679.2275 428 691 C
425 690.5 L
426.9845 678.5603 429.9314 665.276 433.1 653.3 C
436 654 L
f
284 648 m
284 626.1819 269.1093 615 226 615 c
226 612 L
270.6773 612 287 624.1816 287 648 c
287 664.7328 273.8171 676 251 676 c
236.388 676 221.3356 673.5258 208 669 C
209 666.1 L
222.155 670.5645 236.6592 673 251 673 c
272.1885 673 284 662.754 284 648 c
f
331 644 m
331 663.4645 349.1422 682 369 682 c
389 682 L
389 685 L
309 685 L
309 682 L
359 682 L
359 683.6 L
341.4951 678.6645 328 661.6496 328 644 c
328 622.6402 340.8819 611 364 611 C
367.294 611 369.9375 611.3125 373 612 C
372.4 614.9 L
369.4665 614.2415 366.9923 614 364 614 c
342.4112 614 331 624.3738 331 644 c
f
89 680 m
85.75 685.25 82.875 689.25 79 694 C
76.6 692.2 L
80.4897 687.4319 83.2563 683.5783 86.4 678.5 C
89 680 L
f
77.6 676.7 m
74.5234 681.6148 71.703 685.4608 68 690 C
65.6 688.2 L
69.2965 683.6688 72.0445 679.8155 75 675.1 C
77.6 676.7 L
f
197 684 m
193.75 689.25 190.875 693.25 187 698 C
184.6 696.2 L
188.4897 691.4319 191.2563 687.5783 194.4 682.5 C
197 684 L
f
185.6 680.7 m
182.5234 685.6148 179.703 689.4608 176 694 C
173.6 692.2 L
177.2965 687.6688 180.0445 683.8155 183 679.1 C
185.6 680.7 L
f
290 679 m
286.75 684.25 283.875 688.25 280 693 C
277.6 691.2 L
281.4897 686.4319 284.2563 682.5783 287.4 677.5 C
290 679 L
f
278.6 675.7 m
275.5234 680.6148 272.703 684.4608 269 689 C
266.6 687.2 L
270.2965 682.6688 273.0445 678.8155 276 674.1 C
278.6 675.7 L
f
484 679 m
480.75 684.25 477.875 688.25 474 693 C
471.6 691.2 L
475.4897 686.4319 478.2563 682.5783 481.4 677.5 C
484 679 L
f
472.6 675.7 m
469.5234 680.6148 466.703 684.4608 463 689 C
460.6 687.2 L
464.2965 682.6688 467.0445 678.8155 470 674.1 C
472.6 675.7 L
f
390 654 m
386.5 659.375 382.875 664.25 379 669 C
376.6 667.2 L
380.6415 662.2459 384.2671 657.3648 387.5 652.4 C
390 654 L
f
377.4 649.9 m
374.0824 654.9223 370.658 659.516 367 664 C
364.6 662.2 L
368.2734 657.6971 371.69 653.1491 374.9 648.3 C
377.4 649.9 L
f
u
123.3834 537.6469 m
132.0919 555.0653 136.7642 571.3946 138.85 592.3303 C
133.3333 592.3303 L
131.301 571.932 126.9367 557.0409 118.3333 539.8303 C
123.3834 537.6469 L
f
U
u
125.0668 436.5938 m
133.6256 453.9805 138.5447 471.0271 140.7001 492.6606 C
132.6666 492.6606 L
130.6007 471.9243 126.2747 457.1432 117.6666 439.6606 C
125.0668 436.5938 L
f
126.75 337.05 m
136.0696 356.2544 140.4148 371.5689 142.55 393 C
132 393 L
130.0233 373.1595 125.99 359.5206 117 341 C
126.75 337.05 L
f
128.4334 236.4969 m
137.9067 256.2862 142.2252 271.5015 144.4001 293.3303 C
131.3333 293.3303 L
129.3639 273.5631 125.4537 260.3782 116.3333 241.3303 C
128.4334 236.4969 L
f
130.1166 135.953 m
139.7437 156.3271 144.0354 171.4432 146.2499 193.6697 C
130.6667 193.6697 L
128.7046 173.9758 124.9175 161.2449 115.6667 141.6697 C
130.1166 135.953 L
f
U
131.8 35.4 m
141.5809 56.3588 145.8459 71.3757 148.1 94 C
130 94 L
128.0452 74.3794 124.3813 62.1025 115 42 C
131.8 35.4 L
f
u
123.3834 537.6469 m
130.2268 545.4808 140.9732 549.8302 156 549.8302 c
170.4124 549.8302 176.9999 543.9999 176.9999 533.6636 c
176.9999 522.8196 165.1787 513.8303 147 513.8303 c
139.1739 513.8303 131.7235 514.762 124.6645 516.7024 C
123.5 511.6636 L
130.672 509.6641 138.3641 508.6636 147 508.6636 c
168.3837 508.6636 182.5 519.9015 182.5 533.4969 c
182.5 546.9708 173.8277 554.9969 156 554.9969 c
138.579 554.9969 125.8622 549.3431 118.3333 539.8303 C
123.3834 537.6469 L
f
U
u
125.0668 436.5938 m
131.6554 443.7201 141.785 447.6604 156 447.6604 c
169.063 447.6604 174.9999 442.3892 174.9999 433.3272 c
174.9999 423.7202 163.9821 415.6607 147 415.6607 c
139.4026 415.6607 131.5598 416.6397 124.5116 418.5183 C
123 411.3272 L
130.2815 409.3283 138.4027 408.3272 147 408.3272 c
168.7666 408.3272 183 419.5959 183 432.9939 c
183 446.6776 174.0372 454.9939 156 454.9939 c
138.613 454.9939 125.0598 449.0019 117.6666 439.6606 C
125.0668 436.5938 L
f
126.75 337.05 m
133.0838 343.4686 142.5968 347 156 347 c
167.7138 347 173 342.2877 173 334.5 c
173 324.6297 162.7861 317.5 147 317.5 c
139.6313 317.5 131.3961 318.5264 124.3587 320.3432 C
122.5 311 L
129.891 309.0017 138.4413 308 147 308 c
169.1495 308 183.5 319.2994 183.5 334 c
183.5 347.8936 174.2466 356.5 156 356.5 c
138.6469 356.5 124.2575 350.1699 117 341 C
126.75 337.05 L
f
128.4334 236.4969 m
134.5124 242.2079 143.4086 245.3302 156 245.3302 c
166.3645 245.3302 170.9999 241.177 170.9999 234.6636 c
170.9999 225.5302 161.5897 219.3303 147 219.3303 c
139.8601 219.3303 131.2324 220.4041 124.2058 222.1592 C
122 210.6636 L
129.5005 208.6659 138.4799 207.6636 147 207.6636 c
169.5325 207.6636 184 218.9937 184 233.9969 c
184 248.1004 174.4561 256.9969 156 256.9969 c
138.6809 256.9969 123.4551 250.3288 116.3333 241.3303 C
128.4334 236.4969 L
f
130.1166 135.953 m
135.9409 140.9565 144.2203 143.6697 156 143.6697 c
165.0153 143.6697 169.0001 140.0756 169.0001 134.8364 c
169.0001 126.4398 160.3933 121.1696 147 121.1696 c
140.0888 121.1696 131.0687 122.2908 124.0529 123.9841 C
121.5 110.3364 L
129.1101 108.3393 138.5186 107.3364 147 107.3364 c
169.9153 107.3364 184.5 118.6972 184.5 134.003 c
184.5 148.3164 174.6656 157.503 156 157.503 c
138.7149 157.503 122.6528 150.4967 115.6667 141.6697 C
130.1166 135.953 L
f
U
131.8 35.4 m
137.3695 39.6958 145.0322 42 156 42 c
163.666 42 167 38.9649 167 35 c
167 27.3403 159.1969 23 147 23 c
140.3176 23 130.905 24.1685 123.9 25.8 C
121 10 L
128.7196 8.0035 138.5572 7 147 7 c
170.2983 7 185 18.3916 185 34 c
185 48.5232 174.8751 58 156 58 c
138.7489 58 121.8504 50.6556 115 42 C
131.8 35.4 L
f
u
186.3333 570.8302 m
186.3333 575.9969 L
109.3333 575.9969 L
109.3333 570.8302 L
186.3333 570.8302 L
f
U
u
184.6666 468.6605 m
184.6666 475.9939 L
108.6666 475.9939 L
108.6666 468.6605 L
184.6666 468.6605 L
f
181 369.5 m
181 379 L
108 379 L
108 369.5 L
181 369.5 L
f
U
u
180 268.3348 m
180 280.0015 L
107.3333 280.0015 L
107.3333 268.3348 L
180 268.3348 L
f
179 167.1651 m
179 180.9985 L
106.6667 180.9985 L
106.6667 167.1651 L
179 167.1651 L
f
U
178 66 m
178 82 L
106 82 L
106 66 L
178 66 L
f
u
281.5833 547.4167 m
281.5833 526.9335 267.7576 516.75 225.25 516.75 C
225.25 511.25 L
271.0359 511.25 287.4167 523.4338 287.4167 547.5833 c
287.4167 564.4788 274.0131 575.9167 250.5833 575.9167 c
235.9889 575.9167 220.7477 573.4342 207.25 568.9167 C
208.8167 563.6 L
221.9278 567.9926 236.5371 570.4166 250.5833 570.4166 c
270.7073 570.4166 281.5833 561.0709 281.5833 547.4167 c
f
279.1667 446.8333 m
279.1667 427.6851 266.406 418.5 224.5 418.5 C
224.5 410.5 L
271.3946 410.5 287.8334 422.686 287.8334 447.1667 c
287.8334 464.2248 274.2091 475.8333 250.1667 475.8333 c
235.5899 475.8333 220.1598 473.3427 206.5 468.8333 C
208.6334 461.1 L
221.7005 465.4207 236.415 467.8333 250.1667 467.8333 c
269.2261 467.8333 279.1667 459.3878 279.1667 446.8333 c
f
276.75 346.25 m
276.75 328.4367 265.0543 320.2501 223.75 320.2501 C
223.75 309.75 L
271.7533 309.75 288.25 321.9382 288.25 346.75 c
288.25 363.9708 274.405 375.75 249.75 375.75 c
235.1909 375.75 219.5719 373.2511 205.75 368.75 C
208.45 358.6 L
221.4733 362.8488 236.2929 365.25 249.75 365.25 c
267.7449 365.25 276.75 357.7047 276.75 346.25 c
f
U
u
274.3333 245.6667 m
274.3333 229.1884 263.7027 222.0001 223 222.0001 C
223 209 L
272.1119 209 288.6667 221.1904 288.6667 246.3333 c
288.6667 263.7167 274.601 275.6667 249.3334 275.6667 c
234.7918 275.6667 218.984 273.1596 205 268.6667 C
208.2667 256.1 L
221.246 260.2769 236.1708 262.6666 249.3334 262.6666 c
266.2637 262.6666 274.3333 256.0216 274.3333 245.6667 c
f
273.1667 147.1697 m
273.1667 132.0262 263.6011 125.8363 223.5 125.8363 C
223.5 110.3364 L
273.7205 110.3364 290.3333 122.529 290.3333 148.003 c
290.3333 165.5491 276.0469 177.6697 250.1667 177.6697 c
235.6427 177.6697 219.6461 175.1543 205.5 170.6697 C
209.3333 155.6864 L
222.2687 159.7915 237.2987 162.1698 250.1667 162.1698 c
266.0325 162.1698 273.1667 156.425 273.1667 147.1697 c
f
U
209.4 53.6 m
222.2915 57.6332 237.4266 60 250 60 c
264.8013 60 271 55.1555 271 47 c
271 33.1915 262.4994 28 223 28 C
223 10 L
274.3292 10 291 22.1948 291 48 c
291 65.7087 276.4929 78 250 78 c
235.4937 78 219.3082 75.4764 205 71 C
209.4 53.6 L
f
u
437.6667 554.1636 m
434.5006 566.13 431.6234 579.3911 429.6667 591.1636 C
424.0333 590.2636 L
426.0278 578.264 428.9834 564.9079 432.1833 552.8136 C
437.6667 554.1636 L
f
439.3334 454.3272 m
436.1673 466.2936 433.2901 479.5547 431.3334 491.3272 C
423.0666 490.0272 L
425.071 477.9678 428.0354 464.5399 431.2666 452.3272 C
439.3334 454.3272 L
f
441 354.5 m
437.8339 366.4664 434.9567 379.7275 433 391.5 C
422.1 389.8 L
424.1143 377.6808 427.0874 364.181 430.35 351.85 C
441 354.5 L
f
442.6667 254.6636 m
439.5006 266.63 436.6234 279.8911 434.6667 291.6636 C
421.1333 289.5636 L
423.1576 277.3845 426.1394 263.813 429.4333 251.3636 C
442.6667 254.6636 L
f
444.3333 154.8364 m
441.1672 166.8028 438.29 180.0639 436.3333 191.8364 C
420.1667 189.3364 L
422.2009 177.0975 425.1915 163.4541 428.5167 150.8864 C
444.3333 154.8364 L
f
U
446 55 m
442.8339 66.9664 439.9567 80.2275 438 92 C
419.2 89.1 L
421.2442 76.8013 424.2435 63.0861 427.6 50.4 C
446 55 L
f
u
479.35 567.4969 m
427.0314 557.1991 412.8333 545.56 412.8333 531.1636 c
412.8333 518.3864 424.3621 509.6636 447.3333 509.6636 c
460.4378 509.6636 468.8021 510.4344 480.8334 512.6636 C
480.05 517.9803 L
468.1662 515.7763 460.0357 514.997 447.3333 514.997 c
428.1573 514.997 418.6667 521.6754 418.6667 531.1636 c
418.6667 542.742 432.0203 552.6844 480.5167 562.1969 C
479.35 567.4969 L
f
479.7 467.9939 m
426.4853 457.2442 412.6667 445.799 412.6667 431.3272 c
412.6667 417.9349 423.982 409.3272 447.6667 409.3272 c
460.7522 409.3272 469.6042 410.1189 481.6667 412.3272 C
480.6 419.9607 L
468.8841 417.8123 460.2571 416.994 447.6667 416.994 c
429.6025 416.994 421.3335 422.7871 421.3335 431.3272 c
421.3335 441.8322 433.3461 450.752 481.3334 460.3938 C
479.7 467.9939 L
f
480.05 368.5 m
425.9392 357.2984 412.5 346.047 412.5 331.5 c
412.5 317.4925 423.6018 309 448 309 c
461.0666 309 470.4062 309.8125 482.5 312 C
481.15 321.95 L
469.6019 319.8573 460.4784 319 448 319 c
431.0477 319 424 323.9077 424 331.5 c
424 340.9315 434.6718 348.829 482.15 358.6 C
480.05 368.5 L
f
480.4 268.9969 m
425.3931 257.3435 412.3333 246.286 412.3333 231.6636 c
412.3333 217.0409 423.2217 208.6636 448.3333 208.6636 c
461.3811 208.6636 471.2084 209.4969 483.3334 211.6636 C
481.7 223.9303 L
470.3198 221.8933 460.6997 220.997 448.3333 220.997 c
432.493 220.997 426.6667 225.0194 426.6667 231.6636 c
426.6667 240.0217 435.9976 246.8966 482.9667 256.7969 C
480.4 268.9969 L
f
480.75 169.503 m
424.847 157.3977 412.1667 146.5341 412.1667 131.8364 c
412.1667 116.5986 422.8415 108.3364 448.6667 108.3364 c
461.6954 108.3364 472.0104 109.1905 484.1666 111.3364 C
482.25 125.9196 L
471.0376 123.9383 460.921 123.003 448.6667 123.003 c
433.9381 123.003 429.3332 126.1401 429.3332 131.8364 c
429.3332 139.1211 437.3233 144.9736 483.7833 155.0031 C
480.75 169.503 L
f
U
481.1 70 m
424.3009 57.4428 412 46.773 412 32 c
412 16.147 422.4614 8 449 8 c
462.0099 8 472.8125 8.875 485 11 C
482.8 27.9 L
471.7555 25.9743 461.1424 25 449 25 c
435.3834 25 432 27.2517 432 32 c
432 38.2112 438.6491 43.0412 484.6 53.2 C
481.1 70 L
f
u
12.0334 508.7469 m
20.3338 534.3067 27.4207 563.45 32.1667 593.5969 C
26.6667 594.1636 L
22.055 564.8704 15.2444 536.4661 6.6667 510.0969 C
12.0334 508.7469 L
f
14.1668 408.3939 m
22.5048 434.1818 29.5454 463.2907 34.3335 493.5939 C
26.3333 494.3272 L
21.6689 464.8086 14.9263 436.6822 6.3333 410.1939 C
14.1668 408.3939 L
f
16.3 308.05 m
24.6755 334.0661 31.6698 363.1405 36.5 393.6 C
26 394.5 L
21.2829 364.7559 14.6082 336.9074 6 310.3 C
16.3 308.05 L
f
18.4334 207.6969 m
26.8465 233.9412 33.7945 262.9812 38.6667 293.5969 C
25.6667 294.6636 L
20.8969 264.694 14.2901 237.1235 5.6667 210.3969 C
18.4334 207.6969 L
f
20.5666 107.3531 m
29.0172 133.8255 35.9189 162.831 40.8333 193.603 C
25.3333 194.8364 L
20.5109 164.6414 13.972 137.3488 5.3333 110.503 C
20.5666 107.3531 L
f
U
22.7 7 m
31.1882 33.7006 38.0436 62.6717 43 93.6 C
25 95 L
20.1249 64.5795 13.6539 37.5649 5 10.6 C
22.7 7 L
f
u
64.5833 580.6659 m
9.6667 580.6659 L
9.6667 575.4992 L
64.5833 575.4992 L
64.5833 580.6659 L
f
65.1667 481.3318 m
9.3333 481.3318 L
9.3333 473.9984 L
65.1667 473.9984 L
65.1667 481.3318 L
f
65.75 381.9977 m
9 381.9977 L
9 372.4977 L
65.75 372.4977 L
65.75 381.9977 L
f
U
u
66.3334 282.6636 m
8.6667 282.6636 L
8.6667 270.9969 L
66.3334 270.9969 L
66.3334 282.6636 L
f
69.1666 183.3363 m
8.3333 183.3363 L
8.3333 169.5031 L
69.1666 169.5031 L
69.1666 183.3363 L
f
U
69 84 m
8 84 L
8 68 L
69 68 L
69 84 L
f
u
50.3333 540.3303 m
42.559 535.4292 39 530.0537 39 525.3303 c
39 515.7236 47.5262 509.6636 67.5 509.6636 c
74.3665 509.6636 80.9896 510.3823 87.6667 511.6636 C
86.9167 516.8137 L
80.3194 515.5476 73.9352 514.8303 67.5 514.8303 c
51.1857 514.8303 44.5001 519.0228 44.5001 525.6636 C
44.5001 529.0053 47.4298 533.2693 53.9833 537.3636 C
50.3333 540.3303 L
f
49.6666 440.6606 m
42.3472 435.823 39 430.4896 39 425.6606 c
39 415.5868 47.6811 409.3272 68 409.3272 c
75.0265 409.3272 81.4792 410.0147 88.3334 411.3272 C
87.3334 418.6273 L
80.5913 417.3362 74.3749 416.6607 68 416.6607 c
52.7763 416.6607 47.0001 420.297 47.0001 426.3273 C
47.0001 429.5424 49.5989 433.5268 55.2667 437.2272 C
49.6666 440.6606 L
f
49 341 m
42.1353 336.2259 39 330.9346 39 326 c
39 315.4591 47.836 309 68.5 309 c
75.6864 309 81.9687 309.6562 89 311 C
87.75 320.45 L
80.8631 319.1337 74.8145 318.5 68.5 318.5 c
54.3667 318.5 49.5 321.5802 49.5 327 C
49.5 330.0886 51.7678 333.7934 56.55 337.1 C
49 341 L
f
48.3333 241.3303 m
41.9235 236.6197 39 231.3706 39 226.3303 c
39 215.3223 47.9909 208.6636 69 208.6636 c
76.3464 208.6636 82.4583 209.2886 89.6667 210.6636 C
88.1667 222.2637 L
81.135 220.9223 75.2541 220.3303 69 220.3303 c
55.9573 220.3303 52.0001 222.8544 52.0001 227.6636 C
52.0001 230.6257 53.9369 234.0509 57.8334 236.9636 C
48.3333 241.3303 L
f
47.6667 141.6697 m
41.7116 137.0227 39 131.8156 39 126.6697 c
39 115.1946 48.1459 108.3364 69.5 108.3364 c
77.0063 108.3364 82.9479 108.9301 90.3333 110.3364 C
88.5833 124.0863 L
81.4069 122.7198 75.6937 122.1696 69.5 122.1696 c
57.5478 122.1696 54.4999 124.1377 54.4999 128.3363 C
54.4999 131.1719 56.1059 134.3175 59.1166 136.8364 C
47.6667 141.6697 L
f
U
47 42 m
41.4998 37.4165 39 32.2515 39 27 c
39 15.0578 48.3008 8 70 8 c
77.6663 8 83.4375 8.5625 91 10 C
89 25.9 L
81.6788 24.5084 76.1334 24 70 24 c
59.1384 24 57 25.4119 57 29 C
57 31.709 58.275 34.575 60.4 36.7 C
47 42 L
f
u
83.6667 553.3302 m
83.6667 558.4969 L
46.3333 558.4969 L
46.3333 553.3302 L
83.6667 553.3302 L
f
84.3334 451.6604 m
84.3334 458.9939 L
46.6667 458.9939 L
46.6667 451.6604 L
84.3334 451.6604 L
f
85 350 m
85 359.5 L
47 359.5 L
47 350 L
85 350 L
f
85.6667 248.3302 m
85.6667 259.9969 L
47.3333 259.9969 L
47.3333 248.3302 L
85.6667 248.3302 L
f
86.3333 146.6697 m
86.3333 160.503 L
47.6667 160.503 L
47.6667 146.6697 L
86.3333 146.6697 L
f
U
87 45 m
87 61 L
48 61 L
48 45 L
87 45 L
f
u
333.5001 544.3303 m
333.5001 562.6634 350.558 579.9969 369.6667 579.9969 C
389.3333 579.9969 L
389.3333 585.3303 L
308.6667 585.3303 L
308.6667 579.9969 L
359.1667 579.9969 L
359.0333 583.5636 L
341.1953 578.5342 327.8333 561.6612 327.8333 543.9969 c
327.8333 522.4046 340.934 510.6636 364.1667 510.6636 C
367.6804 510.6636 370.6042 510.9865 373.8334 511.6636 C
373.0667 516.8803 L
370.0867 516.2503 367.494 515.997 364.5 515.997 c
344.1819 515.997 333.5001 525.7008 333.5001 544.3303 c
f
336.0001 444.6606 m
336.0001 461.8624 351.9738 477.9938 370.3334 477.9938 C
389.6667 477.9938 L
389.6667 485.6606 L
308.3333 485.6606 L
308.3333 477.9938 L
359.3333 477.9938 L
359.0667 483.5272 L
340.8955 478.4039 327.6667 461.6729 327.6667 443.9939 c
327.6667 422.1689 340.9862 410.3272 364.3333 410.3272 C
368.0669 410.3272 371.2709 410.6605 374.6667 411.3272 C
373.7334 418.8607 L
370.7069 418.2592 367.9957 417.994 365 417.994 c
345.9526 417.994 336.0001 427.0278 336.0001 444.6606 c
f
338.5 345 m
338.5 361.0706 353.3894 376 371 376 C
390 376 L
390 386 L
308 386 L
308 376 L
359.5 376 L
359.1 383.5 L
340.5957 378.2827 327.5 361.6937 327.5 344 c
327.5 321.9425 341.0383 310 364.5 310 C
368.4533 310 371.9375 310.3437 375.5 311 C
374.4 320.85 L
371.327 320.277 368.4974 320 365.5 320 c
347.7232 320 338.5 328.3638 338.5 345 c
f
341.0001 245.3303 m
341.0001 260.2695 354.8052 273.9969 371.6667 273.9969 C
390.3333 273.9969 L
390.3333 286.3303 L
307.6667 286.3303 L
307.6667 273.9969 L
359.6667 273.9969 L
359.1333 283.4636 L
340.2959 278.1524 327.3333 261.7053 327.3333 243.9969 c
327.3333 221.7069 341.0905 209.6636 364.6667 209.6636 C
368.8398 209.6636 372.6042 210.0178 376.3334 210.6636 C
375.0667 222.8303 L
371.9472 222.2858 368.9992 221.997 366 221.997 c
349.4939 221.997 341.0001 229.6908 341.0001 245.3303 c
f
343.4999 145.6697 m
343.4999 159.4777 356.2209 172.0031 372.3333 172.0031 C
390.6667 172.0031 L
390.6667 186.6697 L
307.3333 186.6697 L
307.3333 172.0031 L
359.8333 172.0031 L
359.1667 183.4364 L
339.9961 178.0312 327.1667 161.7261 327.1667 144.003 c
327.1667 121.4804 341.1426 109.3364 364.8333 109.3364 C
369.2262 109.3364 373.2708 109.701 377.1666 110.3364 C
375.7333 124.8196 L
372.5673 124.3036 369.5008 124.003 366.5 124.003 c
351.2644 124.003 343.4999 131.0268 343.4999 145.6697 c
f
U
359.2 83.4 m
339.6963 77.9009 327 61.7378 327 44 c
327 21.2448 341.1948 9 365 9 c
369.6127 9 373.9375 9.375 378 10 C
376.4 26.8 L
373.1875 26.3125 370.0026 26 367 26 c
353.0352 26 346 32.3538 346 46 c
346 58.6767 357.6367 70 373 70 C
391 70 L
391 87 L
307 87 L
307 70 L
360 70 L
359.2 83.4 L
f
u
90.6667 580.3303 m
87.4175 585.6928 84.4838 589.9547 80.6667 594.8303 C
76.9667 592.3969 L
80.748 587.5811 83.6159 583.4129 86.7667 578.2136 C
90.6667 580.3303 L
f
92.3334 480.6606 m
89.0851 486.1356 86.0926 490.6595 82.3334 495.6606 C
77.3333 492.5939 L
81.0064 487.7304 83.9754 483.2475 87.1333 477.9272 C
92.3334 480.6606 L
f
94 381 m
90.7525 386.5875 87.7012 391.3733 84 396.5 C
77.7 392.8 L
81.2647 387.8888 84.335 383.0912 87.5 377.65 C
94 381 L
f
95.6667 281.3303 m
92.42 287.0303 89.31 292.078 85.6667 297.3303 C
78.0666 292.9969 L
81.523 288.038 84.6946 282.9258 87.8666 277.3636 C
95.6667 281.3303 L
f
97.3333 181.6697 m
94.0874 187.4823 90.9187 192.7919 87.3333 198.1697 C
78.4333 193.203 L
81.7813 188.1964 85.0541 182.7696 88.2333 177.0864 C
97.3333 181.6697 L
f
U
99 82 m
95.755 87.9251 92.5275 93.4966 89 99 C
78.8 93.4 L
82.0397 88.3457 85.4137 82.6042 88.6 76.8 C
99 82 L
f
u
78.5667 577.037 m
75.4728 582.1004 72.5953 586.2154 68.9334 590.897 C
65.2673 588.4823 L
68.8769 583.8807 71.718 579.7319 74.7013 574.8543 C
78.5667 577.037 L
f
79.5334 477.3739 m
76.4223 482.586 73.4877 486.97 69.8667 491.7939 C
64.9346 488.7646 L
68.4573 484.0927 71.3915 479.6483 74.4026 474.6086 C
79.5334 477.3739 L
f
80.5 377.72 m
77.3716 383.0807 74.3799 387.7337 70.8 392.7 C
64.602 389.056 L
68.0377 384.3138 71.065 379.5738 74.104 374.372 C
80.5 377.72 L
f
81.4667 278.057 m
78.3211 283.5663 75.2723 288.4884 71.7333 293.597 C
64.2693 289.3383 L
67.6181 284.5257 70.7385 279.4902 73.8053 274.1263 C
81.4667 278.057 L
f
82.4333 178.4031 m
79.2704 184.0611 76.1645 189.2521 72.6666 194.503 C
63.9366 189.6298 L
67.1986 184.7468 70.412 179.4158 73.5067 173.8898 C
82.4333 178.4031 L
f
U
83.4 78.7401 m
80.2199 84.5467 77.0569 90.0067 73.6 95.4 C
63.604 89.9121 L
66.779 84.9588 70.0855 79.3322 73.208 73.6441 C
83.4 78.7401 L
f
u
197.5 584 m
194.2508 589.3625 191.3171 593.6244 187.5 598.5 C
183.8 596.0666 L
187.5813 591.2508 190.4491 587.0825 193.6 581.8833 C
197.5 584 L
f
U
u
198 483.9999 m
194.7517 489.475 191.7592 493.9988 188 499 C
182.9999 495.9333 L
186.6729 491.0697 189.642 486.5868 192.7999 481.2666 C
198 483.9999 L
f
198 383 m
194.7525 388.5875 191.7012 393.3733 188 398.5 C
181.7 394.8 L
185.2647 389.8888 188.335 385.0912 191.5 379.65 C
198 383 L
f
198.3333 282.6636 m
195.0867 288.3637 191.9767 293.4113 188.3333 298.6636 C
180.7333 294.3303 L
184.1896 289.3713 187.3612 284.2591 190.5333 278.6969 C
198.3333 282.6636 L
f
198.6667 182.3364 m
195.4208 188.149 192.2521 193.4585 188.6667 198.8364 C
179.7667 193.8697 L
183.1147 188.8631 186.3875 183.4363 189.5667 177.7531 C
198.6667 182.3364 L
f
U
199 82 m
195.755 87.9251 192.5275 93.4966 189 99 C
178.8 93.4 L
182.0397 88.3457 185.4137 82.6042 188.6 76.8 C
199 82 L
f
u
185.4 580.7066 m
182.3061 585.7701 179.4286 589.8851 175.7666 594.5666 C
172.1006 592.152 L
175.7102 587.5504 178.5513 583.4015 181.5346 578.524 C
185.4 580.7066 L
f
U
u
185.1999 480.7133 m
182.0888 485.9254 179.1542 490.3094 175.5333 495.1333 C
170.6012 492.104 L
174.1239 487.4321 177.058 482.9876 180.0692 477.9479 C
185.1999 480.7133 L
f
184.5 379.72 m
181.3716 385.0807 178.3799 389.7337 174.8 394.7 C
168.602 391.056 L
172.0377 386.3138 175.065 381.5738 178.104 376.372 C
184.5 379.72 L
f
184.1333 279.3903 m
180.9877 284.8997 177.9389 289.8217 174.4 294.9303 C
166.9359 290.6717 L
170.2848 285.8591 173.4051 280.8236 176.4719 275.4596 C
184.1333 279.3903 L
f
183.7667 179.0698 m
180.6038 184.7278 177.4979 189.9187 174 195.1697 C
165.27 190.2965 L
168.5319 185.4135 171.7454 180.0825 174.84 174.5565 C
183.7667 179.0698 L
f
U
183.4 78.7401 m
180.2199 84.5467 177.0569 90.0067 173.6 95.4 C
163.604 89.9121 L
166.779 84.9588 170.0855 79.3322 173.208 73.6441 C
183.4 78.7401 L
f
u
291.25 579.5 m
288.0008 584.8625 285.0671 589.1244 281.25 594 C
277.55 591.5666 L
281.3313 586.7508 284.1992 582.5826 287.35 577.3833 C
291.25 579.5 L
f
292.5 480 m
289.2517 485.475 286.2592 489.9988 282.5 495 C
277.5 491.9333 L
281.173 487.0698 284.1421 482.5869 287.3 477.2666 C
292.5 480 L
f
293.75 380.5 m
290.5025 386.0875 287.4512 390.8733 283.75 396 C
277.4499 392.3 L
281.0146 387.3888 284.085 382.5912 287.25 377.15 C
293.75 380.5 L
f
U
u
295 281 m
291.7533 286.7 288.6433 291.7477 285 297 C
277.3999 292.6666 L
280.8563 287.7077 284.0278 282.5955 287.1999 277.0333 C
295 281 L
f
295.8333 179.8364 m
292.5874 185.649 289.4187 190.9585 285.8333 196.3363 C
276.9333 191.3697 L
280.2813 186.3631 283.5541 180.9363 286.7333 175.253 C
295.8333 179.8364 L
f
U
297 80 m
293.755 85.9251 290.5275 91.4966 287 97 C
276.8 91.4 L
280.0397 86.3457 283.4137 80.6042 286.6 74.8 C
297 80 L
f
u
279.15 576.2066 m
276.0561 581.2701 273.1786 585.3851 269.5167 590.0666 C
265.8506 587.652 L
269.4602 583.0504 272.3013 578.9016 275.2846 574.024 C
279.15 576.2066 L
f
279.7 476.7133 m
276.5889 481.9254 273.6543 486.3094 270.0333 491.1333 C
265.1013 488.104 L
268.624 483.4321 271.5581 478.9877 274.5693 473.948 C
279.7 476.7133 L
f
280.25 377.22 m
277.1216 382.5807 274.1299 387.2337 270.55 392.2 C
264.3519 388.556 L
267.7877 383.8138 270.8149 379.0738 273.8539 373.872 C
280.25 377.22 L
f
U
u
280.8 277.7267 m
277.6544 283.236 274.6055 288.158 271.0666 293.2667 C
263.6026 289.008 L
266.9514 284.1954 270.0717 279.1599 273.1386 273.796 C
280.8 277.7267 L
f
280.9333 176.5698 m
277.7705 182.2277 274.6645 187.4187 271.1666 192.6697 C
262.4367 187.7965 L
265.6986 182.9135 268.912 177.5825 272.0067 172.0565 C
280.9333 176.5698 L
f
U
281.4 76.7401 m
278.2199 82.5467 275.0569 88.0067 271.6 93.4 C
261.604 87.9121 L
264.779 82.9588 268.0855 77.3322 271.208 71.6441 C
281.4 76.7401 L
f
u
390.5 553.1636 m
387.0425 558.6303 383.4838 563.6213 379.6667 568.4969 C
375.9666 566.0636 L
379.8745 561.0928 383.4582 556.0682 386.6833 550.9636 C
390.5 553.1636 L
f
391 452.3272 m
387.585 457.8855 384.0925 462.9927 380.3334 467.9938 C
375.3333 464.9271 L
379.1075 459.9396 382.6492 454.7717 385.8666 449.5271 C
391 452.3272 L
f
391.5 351.5 m
388.1275 357.15 384.7012 362.3733 381 367.5 C
374.7 363.8 L
378.3406 358.7958 381.8404 353.4845 385.05 348.1 C
391.5 351.5 L
f
392 250.6636 m
388.67 256.4053 385.31 261.7446 381.6667 266.9969 C
374.0666 262.6636 L
377.5736 257.6427 381.0315 252.188 384.2333 246.6636 C
392 250.6636 L
f
392.5 149.8364 m
389.2125 155.6698 385.9187 161.1252 382.3333 166.503 C
373.4333 161.5364 L
376.8067 156.4988 380.2226 150.9007 383.4167 145.2364 C
392.5 149.8364 L
f
U
393 49 m
389.755 54.9251 386.5275 60.4966 383 66 C
372.8 60.4 L
376.0397 55.3457 379.4137 49.6042 382.6 43.8 C
393 49 L
f
u
377.4 549.2036 m
374.1053 554.3566 370.7245 559.0947 367.1 563.7303 C
363.434 561.3156 L
367.0243 556.7376 370.4225 552.0098 373.6179 547.0209 C
377.4 549.2036 L
f
377.4 448.5072 m
374.1282 453.7909 370.791 458.6734 367.2 463.4605 C
362.2679 460.4312 L
365.7752 455.7782 369.1551 450.8706 372.3359 445.7418 C
377.4 448.5072 L
f
377.4 347.82 m
374.1511 353.2345 370.8574 358.2613 367.3 363.2 C
361.102 359.556 L
364.5262 354.8279 367.8877 349.7406 371.054 344.472 C
377.4 347.82 L
f
377.4 247.1237 m
374.174 252.6688 370.9239 257.8401 367.4 262.9303 C
359.9359 258.6716 L
363.2771 253.8685 366.6203 248.6014 369.7719 243.1929 C
377.4 247.1237 L
f
377.4 146.4365 m
374.197 152.1123 370.9904 157.428 367.5 162.6697 C
358.77 157.7965 L
362.0281 152.9183 365.3529 147.4714 368.49 141.9232 C
377.4 146.4365 L
f
U
377.4 45.7401 m
374.2199 51.5467 371.0569 57.0067 367.6 62.4 C
357.604 56.9121 L
360.779 51.9588 364.0855 46.3322 367.208 40.6441 C
377.4 45.7401 L
f
u
485 578.9969 m
481.7509 584.3594 478.8171 588.6214 475 593.4969 C
471.3 591.0636 L
475.0813 586.2478 477.9492 582.0795 481.1 576.8802 C
485 578.9969 L
f
486.0001 478.9939 m
482.7517 484.4689 479.7592 488.9928 476.0001 493.9939 C
471 490.9272 L
474.673 486.0637 477.6421 481.5808 480.8 476.2605 C
486.0001 478.9939 L
f
487 379 m
483.7525 384.5875 480.7012 389.3733 477 394.5 C
470.7 390.8 L
474.2647 385.8888 477.335 381.0912 480.5 375.65 C
487 379 L
f
488 278.9969 m
484.7533 284.697 481.6434 289.7447 478 294.9969 C
470.4 290.6636 L
473.8563 285.7047 477.0279 280.5925 480.2 275.0303 C
488 278.9969 L
f
489 179.003 m
485.7541 184.8156 482.5854 190.1252 479 195.503 C
470.1 190.5364 L
473.448 185.5298 476.7208 180.1029 479.9 174.4197 C
489 179.003 L
f
U
490 79 m
486.755 84.9251 483.5275 90.4966 480 96 C
469.8 90.4 L
473.0397 85.3457 476.4137 79.6042 479.6 73.8 C
490 79 L
f
u
472.9 575.7036 m
469.8061 580.767 466.9286 584.8821 463.2667 589.5636 C
459.6006 587.1489 L
463.2102 582.5474 466.0513 578.3985 469.0346 573.5209 C
472.9 575.7036 L
f
473.2 475.7072 m
470.0889 480.9193 467.1543 485.3033 463.5333 490.1272 C
458.6013 487.0979 L
462.1239 482.426 465.0581 477.9816 468.0693 472.9419 C
473.2 475.7072 L
f
473.5 375.72 m
470.3716 381.0807 467.3799 385.7337 463.8 390.7 C
457.602 387.056 L
461.0377 382.3138 464.065 377.5738 467.104 372.372 C
473.5 375.72 L
f
473.8 275.7237 m
470.6544 281.233 467.6056 286.155 464.0667 291.2636 C
456.6026 287.005 L
459.9514 282.1924 463.0718 277.1569 466.1386 271.793 C
473.8 275.7237 L
f
474.1 175.7364 m
470.9371 181.3944 467.8312 186.5854 464.3333 191.8363 C
455.6033 186.9631 L
458.8653 182.0802 462.0787 176.7491 465.1734 171.2231 C
474.1 175.7364 L
f
U
474.4 75.7401 m
471.2199 81.5467 468.0569 87.0067 464.6 92.4 C
454.604 86.9121 L
457.779 81.9588 461.0855 76.3322 464.208 70.6441 C
474.4 75.7401 L
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
