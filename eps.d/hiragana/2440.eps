%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (2440.eps)
%%CreationDate: (1/31/04) (12:58 AM)
%%BoundingBox: 0 0 500 500
%%HiResBoundingBox: 0 0 500 500
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 256.5 244.5 256.5
%AI3_TileBox: -41.5 -119.5 534.5 642.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -139.5 520.5 1 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -119.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
1 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
0 Ap
0 O
0 g
328 444 m
328 422.4565 341.0698 410.2 361 410.2 c
364.375 410.2 367.0848 410.3929 370.4 410.8 C
370 415.8 L
366.5668 415.3784 363.8922 415.2 361 415.2 c
343.1265 415.2 333.2 425.5581 333.2 444 c
333.2 463.9118 350.5196 480.8 373.8 480.8 C
387 480.8 L
387 485.8 L
307.4 485.8 L
307.4 480.8 L
353.5724 480.8 L
337.3466 473.2218 328 459.1389 328 444 c
f
250.6 472 m
271.9321 472 283 462.3002 283 448.8 c
283 426.623 268.6423 416 225.2 416 C
225.2 410.8 L
271.6311 410.8 288.4 423.18 288.4 448.8 c
288.4 465.4445 274.4745 477.2 250.6 477.2 c
235.6287 477.2 220.2935 474.3111 206.8 469.2 C
208.6 464.2 L
221.6455 469.1415 236.5885 472 250.6 472 c
f
250.6 370.1 m
270.4298 370.1 280.6 361.0019 280.6 348.6 c
280.6 327.779 266.9398 317.7 224.9 317.7 C
225.1 310.3 L
271.517 310.3 288.5 322.9246 288.5 348.6 c
288.5 365.4528 274.2799 377.5 250.6 377.5 c
235.5491 377.5 220.0202 374.5833 206.6 369.5 C
209.1 362.3 L
222.1227 367.2328 237.022 370.1 250.6 370.1 c
f
250.6 268.2 m
268.9274 268.2 278.2 259.7035 278.2 248.4 c
278.2 228.9351 265.2373 219.4 224.6 219.4 C
225 209.8 L
271.4029 209.8 288.6 222.6691 288.6 248.4 c
288.6 265.4611 274.0854 277.8 250.6 277.8 c
235.4695 277.8 219.7469 274.8556 206.4 269.8 C
209.6 260.4 L
222.5998 265.3242 237.4555 268.2 250.6 268.2 c
f
250.6 166.3 m
267.4251 166.3 275.8 158.4052 275.8 148.2 c
275.8 130.0912 263.5348 121.1 224.3 121.1 C
224.9 109.3 L
271.2888 109.3 288.7 122.4137 288.7 148.2 c
288.7 158.2459 283.681 166.7156 274.9039 172.0488 C
281 176.3 L
276.8804 182.1509 271.9669 188.7527 267.8 194.1 C
260.1 188.8 L
263.5355 184.3914 267.6425 178.9517 271.2419 173.9965 C
265.518 176.6247 258.5547 178.1 250.6 178.1 c
235.39 178.1 219.4736 175.1278 206.2 170.1 C
210.1 158.5 L
223.077 163.4156 237.8889 166.3 250.6 166.3 c
f
275.3166 71.9377 m
280.6 75.6 L
276.3622 81.6189 271.0405 88.7583 266.8 94.2 C
257.9 88.1 L
260.6898 84.52 264.0536 80.0803 267.2162 75.7988 C
262.332 77.475 256.7532 78.4 250.6 78.4 c
235.3104 78.4 219.2003 75.4001 206 70.4 C
210.6 56.6 L
223.5542 61.5069 238.3224 64.4 250.6 64.4 c
265.9228 64.4 273.4 57.1069 273.4 48 c
273.4 31.2473 261.8324 22.8 224 22.8 C
224.8 8.8 L
271.1747 8.8 288.8 22.1583 288.8 48 c
288.8 57.9904 283.8584 66.4868 275.3166 71.9377 C
f
118 439.2 m
122.5 436.9 L
129.6312 445.3572 141.4898 450.6 157 450.6 c
171.7987 450.6 178.6 444.6785 178.6 433 c
178.6 421.8708 167.6693 413 148.2 413 c
139.8215 413 132.3578 413.9785 125.5 416 C
124.2 411.4 L
131.4439 409.2647 139.2572 408.2 148.2 408.2 c
170.3657 408.2 183.6 419.1243 183.6 433 c
183.6 447.1898 174.4759 455.4 157 455.4 c
145.2623 455.4 135.1847 452.6023 127.405 447.6257 C
130.9825 456.3715 133.624 465.3717 135.5277 475.2 C
166.2 475.2 L
166.2 480 L
136.3861 480 L
137.1161 484.4111 137.7206 488.9876 138.2 493.8 C
133.2 493.8 L
132.7117 488.899 132.099 484.3336 131.3676 480 C
110.2 480 L
110.2 475.2 L
130.4891 475.2 L
127.8043 461.7193 123.7566 450.5402 118 439.2 C
f
116.7 339.7 m
123.4 336.9 L
130.1865 344.5275 141.6828 349.3 156.8 349.3 c
170.4654 349.3 176.5 344.0696 176.5 333.3 c
176.5 323.186 166.1048 315 148 315 c
139.838 315 132.0998 316.0251 125.4 318 C
123.7 311.3 L
130.9439 309.1647 139.0572 308.1 148 308.1 c
170.3489 308.1 183.9 319.3827 183.9 333.3 c
183.9 347.5315 174.5009 356.2 156.8 356.2 c
146.3884 356.2 136.9051 353.8668 129.2526 349.8305 C
132.2946 357.4885 134.6107 365.2567 136.3517 373.6 C
164.9 373.6 L
164.9 380.4 L
137.6209 380.4 L
138.3376 384.7099 138.9301 389.1833 139.4 393.9 C
132 393.9 L
131.5213 389.0948 130.9244 384.6337 130.2095 380.4 C
109.9 380.4 L
109.9 373.6 L
128.9098 373.6 L
126.2648 361.2969 122.3514 350.8328 116.7 339.7 C
f
115.4 240.2 m
124.3 236.9 L
130.7416 243.6979 141.8759 248 156.6 248 c
169.1322 248 174.4 243.4607 174.4 233.6 c
174.4 224.5012 164.5403 217 147.8 217 c
139.8545 217 131.8418 218.0717 125.3 220 C
123.2 211.2 L
130.4439 209.0647 138.8572 208 147.8 208 c
170.332 208 184.2 219.6412 184.2 233.6 c
184.2 247.8732 174.5258 257 156.6 257 c
147.2815 257 138.4036 255.0302 130.9402 251.6777 C
133.5217 258.3065 135.5567 264.9629 137.1407 272 C
163.6 272 L
163.6 280.8 L
138.8567 280.8 L
139.5596 285.0088 140.1397 289.3796 140.6 294 C
130.8 294 L
130.3309 289.2907 129.7498 284.9338 129.0515 280.8 C
109.6 280.8 L
109.6 272 L
127.3037 272 L
124.7011 260.8286 120.9073 251.0488 115.4 240.2 C
f
114.1 140.7 m
125.2 136.9 L
131.2969 142.8682 142.0689 146.7 156.4 146.7 c
167.7989 146.7 172.3 142.8518 172.3 133.9 c
172.3 125.8164 162.9758 119 147.6 119 c
139.8711 119 131.5838 120.1182 125.2 122 C
122.7 111.1 L
129.9439 108.9647 138.6572 107.9 147.6 107.9 c
170.3152 107.9 184.5 119.8997 184.5 133.9 c
184.5 148.2149 174.5508 157.8 156.4 157.8 c
148.0235 157.8 139.7594 156.129 132.5508 153.309 C
134.712 158.9379 136.4701 164.5532 137.8909 170.4 C
162.3 170.4 L
162.3 181.2 L
140.0936 181.2 L
140.7822 185.3079 141.3494 189.5768 141.8 194.1 C
129.6 194.1 L
129.1404 189.4867 128.5753 185.234 127.8935 181.2 C
109.3 181.2 L
109.3 170.4 L
125.6332 170.4 L
123.076 160.3158 119.4172 151.1744 114.1 140.7 C
f
156.2 58.6 m
148.6583 58.6 141.0053 57.1912 134.1127 54.8054 C
135.8766 59.4488 137.3575 64.062 138.6003 68.8 C
161 68.8 L
161 80.1129 L
163.9091 76.2538 166.9045 72.1952 169.4 68.7 C
178.2 74.8 L
173.9622 80.8189 168.6405 87.9583 164.4 93.4 C
155.5 87.3 L
156.8505 85.567 158.3422 83.6215 159.875 81.6 C
141.3316 81.6 L
142.0055 85.6071 142.5591 89.7749 143 94.2 C
128.4 94.2 L
127.9499 89.6828 127.4006 85.5341 126.7355 81.6 C
109 81.6 L
109 68.8 L
123.9194 68.8 L
121.4114 59.7368 117.8843 51.2157 112.8 41.2 C
126.1 36.9 L
131.8521 42.0386 142.2619 45.4 156.2 45.4 c
166.4657 45.4 170.2 42.2429 170.2 34.2 c
170.2 27.1316 161.4112 21 147.4 21 c
139.8876 21 131.3258 22.1648 125.1 24 C
122.2 11 L
129.4439 8.8647 138.4572 7.8 147.4 7.8 c
170.2984 7.8 184.8 20.1581 184.8 34.2 c
184.8 48.5566 174.5757 58.6 156.2 58.6 c
f
447.6 409.8 m
461.4333 409.8 470.5625 410.425 482.8 412.4 C
482.2 417.2 L
470.4391 415.3019 461.585 414.6 447.6 414.6 c
425.51 414.6 417.8 421.1003 417.8 433 c
417.8 444.2481 431.3974 454.5111 482 464.2 C
481 469 L
462.5978 465.4765 448.7804 461.8306 438.5701 457.97 C
435.2368 468.9084 432.8159 479.5619 431.2 490.2 C
426.2 489.4 L
427.9452 477.9108 430.5968 466.8881 433.9152 456.0831 C
418.1441 449.2457 412.8 441.7143 412.8 433 c
412.8 418.034 422.8365 409.8 447.6 409.8 c
f
447.1 309.5 m
461.0271 309.5 470.3563 310.1401 482.5 312.1 C
481.6 319 L
469.9224 317.1154 460.9127 316.4 447.1 316.4 c
426.4908 316.4 419.6 322.1083 419.6 332.9 c
419.6 343.0396 432.78 352.6567 482.1 362.1 C
480.7 369 L
463.2037 365.65 449.8453 362.1927 439.7568 358.551 C
436.5544 369.133 434.1053 379.9315 432.5 390.5 C
425.1 389.3 L
426.8218 377.9643 429.5372 366.6249 432.8454 355.8163 C
417.364 349.0166 412.1 341.5377 412.1 332.9 c
412.1 317.934 422.3365 309.5 447.1 309.5 c
f
446.6 209.2 m
460.6208 209.2 470.1501 209.8553 482.2 211.8 C
481 220.8 L
469.4057 218.9288 460.2404 218.2 446.6 218.2 c
427.4717 218.2 421.4 223.1163 421.4 232.8 c
421.4 241.8311 434.1625 250.8022 482.2 260 C
480.4 268.9999 L
463.7955 265.8206 450.8792 262.5496 440.9476 259.1194 C
437.8675 269.3741 435.3944 280.3031 433.8 290.8 C
424 289.2 L
425.6994 278.0123 428.4769 266.3642 431.7784 255.5408 C
416.5956 248.7812 411.4 241.3583 411.4 232.8 c
411.4 217.834 421.8365 209.2 446.6 209.2 c
f
446.1 108.9 m
460.2146 108.9 469.944 109.5704 481.9 111.5 C
480.4 122.6 L
468.889 120.7422 459.5681 120 446.1 120 c
428.4526 120 423.2 124.1243 423.2 132.7 c
423.2 140.6227 435.545 148.9477 482.3 157.9 C
480.1 168.9999 L
464.348 165.9839 451.8957 162.8887 442.1478 159.657 C
439.1794 169.6171 436.6841 180.6704 435.1 191.1 C
422.9 189.1 L
424.5771 178.0582 427.4149 166.1124 430.7113 155.2662 C
415.8212 148.5471 410.7 141.1794 410.7 132.7 c
410.7 117.7341 421.3366 108.9 446.1 108.9 c
f
482.4 55.8 m
479.8 68.9999 L
464.8734 66.1419 452.8925 63.216 443.3547 60.1733 C
440.4895 69.8661 437.9741 81.0363 436.4 91.4 C
421.8 89 L
423.4555 78.1005 426.3517 65.8649 429.6454 54.9875 C
415.0496 48.3104 410 40.9995 410 32.6 c
410 17.6341 420.8367 8.6 445.6 8.6 c
459.8084 8.6 469.7378 9.2856 481.6 11.2 C
479.8 24.4 L
468.3723 22.5557 458.8958 21.8 445.6 21.8 c
429.4334 21.8 425 25.1323 425 32.6 c
425 39.4142 436.9276 47.0933 482.4 55.8 C
f
11.4 409.4 m
18.8623 431.3159 24.5256 452.6716 28.876 475.2 C
65.6 475.2 L
65.6 480 L
29.7799 480 L
30.6378 484.6751 31.4471 489.3993 32.2 494.2 C
27.2 494.8 L
26.4122 489.7771 25.5646 484.8544 24.6645 480 C
11.2 480 L
11.2 475.2 L
23.7501 475.2 L
19.3994 452.9221 13.7919 432.1214 6.6 411 C
11.4 409.4 L
f
40.2 425.8 m
40.2 415.6905 49.767 408.2 68.8 408.2 c
75.714 408.2 80.8129 408.7029 89.6 410.8 C
88.6 415.6 L
80.3701 413.6359 75.4978 413 68.8 413 c
52.953 413 45.2 418.5713 45.2 425.8 c
45.2 429.5204 47.418 433.2711 53 437.1 C
50 440.8 L
42.9777 435.9832 40.2 431.049 40.2 425.8 c
f
85.8 459.2 m
48.2 459.2 L
48.2 454.4 L
85.8 454.4 L
85.8 459.2 L
f
30.4801 373.7 m
64.4 373.7 L
64.4 380.6 L
31.7864 380.6 L
32.6051 385.0825 33.3798 389.6082 34.1 394.2 C
26.7 394.9 L
25.94 390.0541 25.1233 385.2972 24.2589 380.6 C
10.7 380.6 L
10.7 373.7 L
22.9446 373.7 L
18.6381 351.9568 13.123 331.5255 6.1 310.9 C
13.2 308.8 L
20.4325 330.2278 26.102 351.4129 30.4801 373.7 C
f
32.0825 272.2 m
63.2 272.2 L
63.2 281.2 L
33.7939 281.2 L
34.5736 285.4891 35.3125 289.8165 36 294.2 C
26.2 295 L
25.4676 290.3306 24.6821 285.7392 23.8529 281.2 C
10.2 281.2 L
10.2 272.2 L
22.1315 272.2 L
17.8714 250.9836 12.4541 230.9294 5.6 210.8 C
15 208.2 L
22.009 229.1512 27.6786 250.1511 32.0825 272.2 C
f
33.6672 170.7 m
62 170.7 L
62 181.8 L
35.7966 181.8 L
36.5375 185.8962 37.2449 190.0229 37.9 194.2 C
25.7 195.1 L
24.9952 190.6063 24.241 186.1803 23.4466 181.8 C
9.7 181.8 L
9.7 170.7 L
21.3118 170.7 L
17.1008 150.0032 11.7854 130.3339 5.1 110.7 C
16.8 107.6 L
23.5905 128.0819 29.2402 148.8911 33.6672 170.7 C
f
48 352.6 m
85.9 352.6 L
85.9 359.6 L
48 359.6 L
48 352.6 L
f
47.8 250.8 m
86 250.8 L
86 260 L
47.8 260 L
47.8 250.8 L
f
47.6 149 m
86.1 149 L
86.1 160.4 L
47.6 160.4 L
47.6 149 L
f
39.9 325.8 m
39.9 315.6905 49.767 308.1 68.8 308.1 c
75.9021 308.1 81.1009 308.6478 89.7 310.7 C
88.4 317.7 L
80.2662 315.7831 75.2015 315.1 68.8 315.1 c
54.1502 315.1 47.2 319.942 47.2 326.4 c
47.2 330.0026 49.1939 333.4661 54.2 336.9 C
49.4 341 L
42.7111 336.4118 39.9 331.4454 39.9 325.8 c
f
39.6 225.8 m
39.6 215.6907 49.767 208 68.8 208 c
76.0901 208 81.3889 208.5926 89.8 210.6 C
88.2 219.8 L
80.1622 217.9304 74.9053 217.2 68.8 217.2 c
55.3474 217.2 49.2 221.3128 49.2 227 c
49.2 230.4847 50.9698 233.6612 55.4 236.7 C
48.8 241.2 L
42.4443 236.8404 39.6 231.8417 39.6 225.8 c
f
39.3 125.8 m
39.3 115.6907 49.767 107.9 68.8 107.9 c
76.2783 107.9 81.6768 108.5375 89.9 110.5 C
88 121.9 L
80.0583 120.0776 74.6091 119.3 68.8 119.3 c
56.5446 119.3 51.2 122.6835 51.2 127.6 c
51.2 130.9669 52.7457 133.8563 56.6 136.5 C
48.2 141.4 L
42.1777 137.269 39.3 132.2381 39.3 125.8 c
f
60.8 69.2 m
60.8 80.379 L
63.7711 76.4416 66.8474 72.2752 69.4 68.7 C
78.2 74.8 L
73.9622 80.8189 68.6405 87.9583 64.4 93.4 C
55.5 87.3 L
56.6719 85.7962 57.95 84.1326 59.268 82.4 C
37.8114 82.4 L
38.5133 86.2998 39.1775 90.2316 39.8 94.2 C
25.2 95.2 L
24.5227 90.8814 23.7999 86.6207 23.0399 82.4 C
9.2 82.4 L
9.2 69.2 L
20.494 69.2 L
16.334 49.0139 11.1176 29.7411 4.6 10.6 C
18.6 7 L
25.1783 27.025 30.8096 47.6277 35.2573 69.2 C
60.8 69.2 L
f
68.8 21.4 m
57.7418 21.4 53.2 24.0543 53.2 28.2 c
53.2 31.449 54.5216 34.0513 57.8 36.3 C
47.6 41.6 L
41.911 37.6977 39 32.6345 39 25.8 c
39 15.6908 49.767 7.8 68.8 7.8 c
76.4663 7.8 81.9648 8.4824 90 10.4 C
87.8 24 L
79.9543 22.2249 74.3128 21.4 68.8 21.4 c
f
47.4 47.2 m
86.2 47.2 L
86.2 60.8 L
47.4 60.8 L
47.4 47.2 L
f
326.7 344 m
326.7 322.6926 340.117 310.1 360.2 310.1 c
363.575 310.1 366.8761 310.3572 370.2 310.8 C
369.6 318 L
366.1501 317.5431 363.1716 317.3 360.2 317.3 c
343.6577 317.3 334.4 326.7587 334.4 344 c
334.4 363.0258 350.8393 378.7 373 378.7 C
387.1 378.7 L
387.1 385.9 L
307.3 385.9 L
307.3 378.7 L
349.0138 378.7 L
334.7091 370.7211 326.7 357.6665 326.7 344 c
f
325.4 244 m
325.4 222.9287 339.1643 210 359.4 210 c
362.775 210 366.6674 210.3214 370 210.8 C
369.2 220.2 L
365.7334 219.7079 362.451 219.4 359.4 219.4 c
344.189 219.4 335.6 227.9592 335.6 244 c
335.6 262.1398 351.1591 276.6 372.2 276.6 C
387.2 276.6 L
387.2 286 L
307.2 286 L
307.2 276.6 L
344.945 276.6 L
332.3065 268.4698 325.4 256.372 325.4 244 c
f
324.1 144 m
324.1 123.1649 338.2115 109.9 358.6 109.9 c
361.975 109.9 366.4587 110.2857 369.8 110.8 C
368.8 122.4 L
365.3167 121.8727 361.7303 121.5 358.6 121.5 c
344.7202 121.5 336.8 129.1598 336.8 144 c
336.8 161.2538 351.4788 174.5 371.4 174.5 C
387.3 174.5 L
387.3 186.1 L
307.1 186.1 L
307.1 174.5 L
341.2164 174.5 L
330.0649 166.3946 324.1 155.2057 324.1 144 c
f
357.8 23.6 m
345.2514 23.6 338 30.3604 338 44 c
338 60.3678 351.7985 72.4 370.6 72.4 C
387.4 72.4 L
387.4 86.2 L
307 86.2 L
307 72.4 L
337.7673 72.4 L
327.9599 64.4516 322.8 54.1411 322.8 44 c
322.8 23.401 337.2587 9.8 357.8 9.8 c
361.175 9.8 366.25 10.25 369.6 10.8 C
368.4 24.6 L
364.9 24.0375 361.0097 23.6 357.8 23.6 c
f
91.8 482.4 m
88.0352 487.747 84.3462 492.736 80.4 497.8 C
76.3 494.9 L
80.233 489.853 84.1549 484.677 87.8 479.5 C
91.8 482.4 L
f
78.6 477.6 m
74.8352 482.947 71.1462 487.936 67.2 493 C
63.1 490.1 L
67.033 485.053 70.955 479.8769 74.6 474.7 C
78.6 477.6 L
f
78.5 376.9 m
74.6169 382.415 70.5198 387.9416 66.5 393.1 C
61.2 389.4 L
65.2033 384.2628 69.5287 378.5358 73.3 373.2 C
78.5 376.9 L
f
78.4 276.2 m
74.3987 281.8829 69.8934 287.9471 65.8 293.2 C
59.3 288.7 L
63.3736 283.4725 68.1025 277.1947 72 271.7 C
78.4 276.2 L
f
78.3 175.5 m
74.1805 181.3509 69.2669 187.9527 65.1 193.3 C
57.4 188 L
61.5439 182.6823 66.6763 175.8536 70.7 170.2 C
78.3 175.5 L
f
75.3 394.2 m
79.3033 389.0627 83.6287 383.3359 87.4 378 C
92.6 381.7 L
88.717 387.215 84.6197 392.7416 80.6 397.9 C
75.3 394.2 L
f
74.3 293.5 m
78.3736 288.2725 83.1025 281.9947 87 276.5 C
93.4 281 L
89.3987 286.6829 84.8934 292.7471 80.8 298 C
74.3 293.5 L
f
81 198.1 m
73.3 192.8 L
77.4439 187.4823 82.5762 180.6536 86.6 175 C
94.2 180.3 L
90.0804 186.1509 85.1669 192.7527 81 198.1 C
f
72.3 92.1 m
76.5142 86.6921 82.05 79.3125 86.2 73.5 C
95 79.6 L
90.7622 85.6189 85.4405 92.7583 81.2 98.2 C
72.3 92.1 L
f
296.6 483.2 m
292.8352 488.547 289.1462 493.536 285.2 498.6 C
281.1 495.7 L
285.033 490.653 288.9549 485.477 292.6 480.3 C
296.6 483.2 L
f
282.2 478.4 m
278.4352 483.747 274.7462 488.736 270.8 493.8 C
266.7 490.9 L
270.633 485.853 274.555 480.6769 278.2 475.5 C
282.2 478.4 L
f
279.8 395 m
283.8033 389.8627 288.1287 384.1358 291.9 378.8 C
297.1 382.5 L
293.2169 388.0149 289.1197 393.5415 285.1 398.7 C
279.8 395 L
f
278.5 294.3 m
282.5736 289.0725 287.3024 282.7947 291.2 277.3 C
297.6 281.8 L
293.5987 287.4829 289.0933 293.5471 285 298.8 C
278.5 294.3 L
f
277.2 193.6 m
281.3439 188.2823 286.4762 181.4536 290.5 175.8 C
298.1 181.1 L
293.9804 186.9509 289.0669 193.5527 284.9 198.9 C
277.2 193.6 L
f
264.5 390.2 m
268.5033 385.0628 272.8287 379.3358 276.6 374 C
281.8 377.7 L
277.9169 383.2149 273.8198 388.7416 269.8 393.9 C
264.5 390.2 L
f
262.3 289.5 m
266.3736 284.2725 271.1025 277.9947 275 272.5 C
281.4 277 L
277.3987 282.6829 272.8933 288.7471 268.8 294 C
262.3 289.5 L
f
275.9 92.9 m
280.1142 87.4921 285.65 80.1125 289.8 74.3 C
298.6 80.4 L
294.3622 86.4189 289.0405 93.5583 284.8 99 C
275.9 92.9 L
f
172.3 92.1 m
176.5142 86.6921 182.05 79.3125 186.2 73.5 C
195 79.6 L
190.7622 85.6189 185.4405 92.7583 181.2 98.2 C
172.3 92.1 L
f
488.8 480.8 m
485.0352 486.147 481.3462 491.136 477.4 496.2 C
473.3 493.3 L
477.233 488.253 481.1549 483.077 484.8 477.9 C
488.8 480.8 L
f
474.4 476 m
470.6352 481.347 466.9462 486.336 463 491.4 C
458.9 488.5 L
462.833 483.453 466.755 478.2769 470.4 473.1 C
474.4 476 L
f
457.2 388.2 m
461.2033 383.0627 465.5287 377.3358 469.3 372 C
474.5 375.7 L
470.6169 381.215 466.5198 386.7416 462.5 391.9 C
457.2 388.2 L
f
455.5 287.9 m
459.5736 282.6725 464.3025 276.3947 468.2 270.9 C
474.6 275.4 L
470.5987 281.0829 466.0934 287.1472 462 292.4 C
455.5 287.9 L
f
453.8 187.6 m
457.9439 182.2823 463.0762 175.4536 467.1 169.8 C
474.7 175.1 L
470.5804 180.9509 465.6669 187.5527 461.5 192.9 C
453.8 187.6 L
f
472.5 393 m
476.5033 387.8628 480.8287 382.1359 484.6 376.8 C
489.8 380.5 L
485.9169 386.0149 481.8198 391.5416 477.8 396.7 C
472.5 393 L
f
471.7 292.7 m
475.7736 287.4725 480.5024 281.1948 484.4 275.7 C
490.8 280.2 L
486.7987 285.8829 482.2933 291.9471 478.2 297.2 C
471.7 292.7 L
f
491.8 179.9 m
487.6805 185.7509 482.7669 192.3527 478.6 197.7 C
470.9 192.4 L
475.0439 187.0823 480.1762 180.2536 484.2 174.6 C
491.8 179.9 L
f
479 98.2 m
470.1 92.1 L
474.3142 86.6921 479.85 79.3125 484 73.5 C
492.8 79.6 L
488.5622 85.6189 483.2405 92.7583 479 98.2 C
f
474.8 74.8 m
470.5622 80.8189 465.2405 87.9583 461 93.4 C
452.1 87.3 L
456.3142 81.8921 461.85 74.5125 466 68.7 C
474.8 74.8 L
f
378.3 467.7 m
382.233 462.653 386.1549 457.477 389.8 452.3 C
393.8 455.2 L
390.0352 460.547 386.3462 465.536 382.4 470.6 C
378.3 467.7 L
f
363.9 462.9 m
367.833 457.853 371.755 452.6769 375.4 447.5 C
379.4 450.4 L
375.6352 455.747 371.9462 460.736 368 465.8 C
363.9 462.9 L
f
377 366.3 m
381.0033 361.1627 385.3287 355.4358 389.1 350.1 C
394.3 353.8 L
390.4169 359.315 386.3198 364.8415 382.3 370 C
377 366.3 L
f
375.7 264.9 m
379.7736 259.6725 384.5025 253.3947 388.4 247.9 C
394.8 252.4 L
390.7987 258.0829 386.2933 264.1471 382.2 269.4 C
375.7 264.9 L
f
395.3 151 m
391.1804 156.8509 386.2669 163.4527 382.1 168.8 C
374.4 163.5 L
378.5439 158.1823 383.6762 151.3536 387.7 145.7 C
395.3 151 L
f
361.7 361.5 m
365.7033 356.3628 370.0288 350.6358 373.8 345.3 C
379 349 L
375.1169 354.5149 371.0198 360.0416 367 365.2 C
361.7 361.5 L
f
359.5 260.1 m
363.5736 254.8725 368.3025 248.5947 372.2 243.1 C
378.6 247.6 L
374.5987 253.2829 370.0933 259.3471 366 264.6 C
359.5 260.1 L
f
357.3 158.7 m
361.4439 153.3823 366.5763 146.5536 370.6 140.9 C
378.2 146.2 L
374.0805 152.0509 369.1669 158.6527 365 164 C
357.3 158.7 L
f
373.1 62.1 m
377.3142 56.6921 382.85 49.3125 387 43.5 C
395.8 49.6 L
391.5622 55.6189 386.2405 62.7583 382 68.2 C
373.1 62.1 L
f
355.1 57.3 m
359.3142 51.8921 364.85 44.5125 369 38.7 C
377.8 44.8 L
373.5622 50.8189 368.2405 57.9583 364 63.4 C
355.1 57.3 L
f
157.4 188 m
161.5439 182.6823 166.6763 175.8536 170.7 170.2 C
178.3 175.5 L
174.1805 181.3509 169.2669 187.9527 165.1 193.3 C
157.4 188 L
f
159.3 288.7 m
163.3736 283.4725 168.1025 277.1947 172 271.7 C
178.4 276.2 L
174.3987 281.8829 169.8934 287.9471 165.8 293.2 C
159.3 288.7 L
f
161.2 389.4 m
165.2033 384.2628 169.5287 378.5358 173.3 373.2 C
178.5 376.9 L
174.6169 382.415 170.5198 387.9416 166.5 393.1 C
161.2 389.4 L
f
194.2 180.3 m
190.0804 186.1509 185.1669 192.7527 181 198.1 C
173.3 192.8 L
177.4439 187.4823 182.5762 180.6536 186.6 175 C
194.2 180.3 L
f
174.3 293.5 m
178.3736 288.2725 183.1025 281.9947 187 276.5 C
193.4 281 L
189.3987 286.6829 184.8934 292.7471 180.8 298 C
174.3 293.5 L
f
175.3 394.2 m
179.3033 389.0627 183.6287 383.3359 187.4 378 C
192.6 381.7 L
188.717 387.215 184.6197 392.7416 180.6 397.9 C
175.3 394.2 L
f
191.8 482.4 m
188.0352 487.747 184.3462 492.736 180.4 497.8 C
176.3 494.9 L
180.233 489.853 184.1549 484.677 187.8 479.5 C
191.8 482.4 L
f
178.6 477.6 m
174.8352 482.947 171.1462 487.936 167.2 493 C
163.1 490.1 L
167.033 485.053 170.955 479.8769 174.6 474.7 C
178.6 477.6 L
f
U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
