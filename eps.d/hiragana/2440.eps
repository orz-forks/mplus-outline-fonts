%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (2440.eps)
%%CreationDate: (9/1/04) (11:30 AM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
500 600 m
500 700 L
400 700 L
400 600 L
500 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
400 600 m
400 700 L
300 700 L
300 600 L
400 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
500 500 m
500 600 L
400 600 L
400 500 L
500 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
400 500 m
400 600 L
300 600 L
300 500 L
400 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
0 O
0 g
1 D
10.9 609.1 m
19.1629 634.4316 26.2961 663.6094 31 693.6 C
28 694 L
23.441 664.9323 16.5625 636.25 8 610 C
10.9 609.1 L
f
65 679 m
11 679 L
11 676 L
65 676 L
65 679 L
f
52 640 m
43.7709 635.0354 40 629.6178 40 625 c
40 615.8605 48.3713 610 68 610 c
74.7066 610 81.5 610.75 88 612 C
87.5 615 L
81.0475 613.7591 74.4956 613 68 613 c
50.5951 613 43 617.7486 43 625 c
43 628.4682 46.2607 633.0119 53.7 637.5 C
52 640 L
f
84 654 m
84 657 L
47 657 L
47 654 L
84 654 L
f
121.7 639.7 m
128.7982 648.2415 140.1614 653 156 653 c
171.7617 653 179 646.6106 179 635 c
179 622.9191 166.3753 613 147 613 c
138.9451 613 131.8872 613.8843 124.8174 615.8865 C
124 613 L
131.0625 611 138.3255 610 147 610 c
168.0008 610 182 621.2072 182 635 c
182 648.264 173.6182 656 156 656 c
138.545 656 126.6646 650.6843 119 641 C
121.7 639.7 L
f
177 675 m
177 678 L
110 678 L
110 675 L
177 675 L
f
121.7 639.7 m
130.5583 657.1501 134.9837 672.7622 137 693 C
134 693 L
132.0014 672.9397 127.5987 657.9387 119 641 C
121.7 639.7 L
f
284 649 m
284 627.1819 269.1093 616 226 616 c
226 613 L
270.6773 613 287 625.1816 287 649 c
287 665.7328 273.8171 677 251 677 c
236.388 677 221.3356 674.5258 208 670 C
209 667.1 L
222.155 671.5645 236.6592 674 251 674 c
272.1885 674 284 663.754 284 649 c
f
418 631 m
418 643.6519 432.6945 654.6168 481.7 664 C
481 667 L
429.5776 657.154 415 645.3211 415 631 c
415 618.838 426.7423 610 449 610 c
462.1234 610 470 610.75 482 613 C
481.5 616 L
469.4483 613.7403 461.8144 613 449 613 c
428.712 613 418 620.5638 418 631 c
f
438 654 m
434.8339 665.9664 431.9567 679.2275 430 691 C
427 690.5 L
428.9845 678.5603 431.9314 665.276 435.1 653.3 C
438 654 L
f
390 653.2 m
386.785 659.185 383.9486 664.2073 380.5 670 C
377.9 668.5 L
381.2869 662.811 384.0736 657.8061 387.3 651.8 C
390 653.2 L
f
377.2 650.5 m
374.0841 656.3994 371.3797 661.3231 368 667 C
365.4222 665.4654 L
368.8053 659.7828 371.4187 655.0223 374.5473 649.0989 C
377.2 650.5 L
f
484 675.2 m
480.785 681.185 477.9486 686.2073 474.5 692 C
471.9 690.5 L
475.2869 684.811 478.0736 679.8061 481.3 673.8 C
484 675.2 L
f
471.2 672.5 m
468.0841 678.3994 465.3797 683.3231 462 689 C
459.4222 687.4654 L
462.8053 681.7828 465.4187 677.0223 468.5473 671.0989 C
471.2 672.5 L
f
91 677 m
87.9719 682.7331 85.2844 687.4831 82 693 C
79.4 691.5 L
82.7848 685.8145 85.4289 681.0359 88.3 675.6 C
91 677 L
f
67.4 688.5 m
70.5265 683.2484 73.1108 678.5595 76.1 672.9 C
78.8 674.3 L
75.8325 679.9184 73.2187 684.5935 70 690 C
67.4 688.5 L
f
193 675 m
189.9719 680.7331 187.2844 685.4831 184 691 C
181.4 689.5 L
184.7848 683.8145 187.4289 679.0359 190.3 673.6 C
193 675 L
f
169.4 686.5 m
172.5265 681.2484 175.1108 676.5595 178.1 670.9 C
180.8 672.3 L
177.8325 677.9184 175.2187 682.5935 172 688 C
169.4 686.5 L
f
291 679 m
287.9719 684.7331 285.2844 689.4831 282 695 C
279.4 693.5 L
282.7848 687.8145 285.4289 683.0359 288.3 677.6 C
291 679 L
f
267.4 690.5 m
270.5265 685.2484 273.1108 680.5595 276.1 674.9 C
278.8 676.3 L
275.8325 681.9184 273.2187 686.5935 270 692 C
267.4 690.5 L
f
u
91.8334 576.9969 m
88.7058 582.8579 85.7236 588.0471 82.3334 593.6636 C
78.2833 591.347 L
81.7452 585.6051 84.6682 580.4167 87.65 574.8303 C
91.8334 576.9969 L
f
92.6667 476.9939 m
89.4396 482.9826 86.1628 488.611 82.6667 494.3273 C
77.1666 491.1939 L
80.7056 485.3957 83.9075 479.7974 87 474.0605 C
92.6667 476.9939 L
f
93.5 377 m
90.1735 383.1165 86.602 389.1841 83 395 C
76.05 391.05 L
79.6662 385.1955 83.1469 379.1874 86.35 373.3 C
93.5 377 L
f
95.3334 276.9969 m
91.9073 283.2413 88.0412 289.748 84.3334 295.6636 C
75.9333 290.8969 L
79.6266 284.9861 83.3861 278.5682 86.7 272.5303 C
95.3334 276.9969 L
f
95.1667 177.003 m
91.6411 183.3752 87.4803 190.3211 83.6667 196.3364 C
73.8167 190.753 L
77.5871 184.7859 81.6255 177.9582 85.0501 171.7697 C
95.1667 177.003 L
f
U
72.7 90.6 m
76.5475 84.5765 80.8648 77.339 84.4 71 C
96 77 L
92.375 83.5 87.9195 90.8851 84 97 C
72.7 90.6 L
f
u
65.4833 588.197 m
68.7171 582.8368 71.5815 577.7485 74.65 571.9969 C
78.8 574.147 L
75.735 579.8906 72.8224 584.9928 69.5 590.497 C
65.4833 588.197 L
f
63.5666 487.8939 m
66.9077 482.4252 70.0523 476.9376 73.1999 471.0939 C
78.8 473.9939 L
75.6375 479.8628 72.4262 485.3921 69 490.9939 C
63.5666 487.8939 L
f
61.65 387.6 m
65.0985 382.0227 68.5232 376.1358 71.75 370.2 C
78.8 373.85 L
75.54 379.8442 72.0299 385.8004 68.5 391.5 C
61.65 387.6 L
f
60.7333 287.2969 m
64.2891 281.6111 67.9939 275.3249 71.3 269.2969 C
79.8 273.6969 L
76.4425 279.8164 72.6336 286.1997 69 291.997 C
60.7333 287.2969 L
f
57.8168 187.003 m
61.4799 181.2086 65.4648 174.5231 68.8501 168.4031 C
78.8 173.5531 L
75.345 179.7978 71.2374 186.6081 67.5 192.503 C
57.8168 187.003 L
f
U
55.9 86.7 m
59.6705 80.797 63.9355 73.7122 67.4 67.5 C
78.8 73.4 L
75.2475 79.77 70.8411 87.0074 67 93 C
55.9 86.7 L
f
u
193.8334 574.6636 m
190.7058 580.5245 187.7236 585.7137 184.3333 591.3303 C
180.2833 589.0136 L
183.7452 583.2718 186.6682 578.0833 189.65 572.4969 C
193.8334 574.6636 L
f
194.6667 474.3272 m
191.4396 480.316 188.1628 485.9443 184.6667 491.6606 C
179.1666 488.5272 L
182.7056 482.729 185.9075 477.1307 189 471.3938 C
194.6667 474.3272 L
f
195.5 374 m
192.1734 380.1165 188.602 386.1841 185 392 C
178.05 388.05 L
181.6661 382.1955 185.1468 376.1874 188.35 370.3 C
195.5 374 L
f
196.3334 274.6636 m
192.9073 280.908 189.0411 287.4147 185.3334 293.3303 C
176.9333 288.5636 L
180.6266 282.6528 184.3861 276.2348 187.7 270.1969 C
196.3334 274.6636 L
f
U
u
197.1667 173.8318 m
193.6411 180.204 189.4803 187.1499 185.6667 193.1651 C
175.8166 187.5818 L
179.587 181.6146 183.6255 174.7869 187.05 168.5984 C
197.1667 173.8318 L
f
U
174.7 86.6 m
178.5475 80.5765 182.8648 73.339 186.4 67 C
198 73 L
194.375 79.5 189.9195 86.8851 186 93 C
174.7 86.6 L
f
u
167.4833 585.8636 m
170.7171 580.5034 173.5815 575.4152 176.6499 569.6636 C
180.8 571.8136 L
177.735 577.5573 174.8224 582.6594 171.5 588.1636 C
167.4833 585.8636 L
f
165.5666 485.2272 m
168.9077 479.7585 172.0523 474.2709 175.1999 468.4272 C
180.8 471.3272 L
177.6375 477.1962 174.4261 482.7254 171 488.3273 C
165.5666 485.2272 L
f
163.65 384.6 m
167.0985 379.0227 170.5232 373.1358 173.75 367.2 C
180.8 370.85 L
177.54 376.8442 174.0299 382.8004 170.5 388.5 C
163.65 384.6 L
f
163.8833 281.3303 m
167.4391 275.6444 171.1439 269.3582 174.45 263.3303 C
182.95 267.7303 L
179.5925 273.8498 175.7836 280.2331 172.15 286.0303 C
163.8833 281.3303 L
f
163.8833 281.3303 m
167.4391 275.6444 171.1439 269.3582 174.45 263.3303 C
182.95 267.7303 L
179.5925 273.8498 175.7836 280.2331 172.15 286.0303 C
163.8833 281.3303 L
f
U
u
160.8916 182.0151 m
164.5548 176.2207 168.5397 169.5352 171.925 163.4151 C
181.875 168.5651 L
178.42 174.8099 174.3123 181.6202 170.575 187.5151 C
160.8916 182.0151 L
f
U
157.9 82.7 m
161.6705 76.797 165.9355 69.7122 169.4 63.5 C
180.8 69.4 L
177.2475 75.77 172.8411 83.0074 169 89 C
157.9 82.7 L
f
u
291.8334 578.8303 m
288.7058 584.6912 285.7236 589.8804 282.3333 595.497 C
278.2833 593.1803 L
281.7452 587.4385 284.6682 582.25 287.65 576.6636 C
291.8334 578.8303 L
f
290.6667 477.6606 m
287.4396 483.6493 284.1628 489.2777 280.6667 494.9939 C
275.1666 491.8605 L
278.7056 486.0624 281.9075 480.4641 285 474.7272 C
290.6667 477.6606 L
f
292.5 377.5 m
289.1734 383.6165 285.602 389.6841 282 395.5 C
275.05 391.55 L
278.6661 385.6955 282.1468 379.6874 285.35 373.8 C
292.5 377.5 L
f
293.3334 277.3303 m
289.9073 283.5746 286.0411 290.0814 282.3334 295.997 C
273.9333 291.2303 L
277.6266 285.3194 281.3861 278.9015 284.7 272.8636 C
293.3334 277.3303 L
f
295.1667 177.1697 m
291.6411 183.5419 287.4803 190.4878 283.6667 196.503 C
273.8167 190.9197 L
277.5871 184.9525 281.6255 178.1248 285.05 171.9364 C
295.1667 177.1697 L
f
U
272.7 91.6 m
276.5475 85.5765 280.8648 78.339 284.4 72 C
296 78 L
292.375 84.5 287.9195 91.8851 284 98 C
272.7 91.6 L
f
u
265.4833 590.0303 m
268.7171 584.6701 271.5815 579.5819 274.6499 573.8303 C
278.8 575.9803 L
275.735 581.724 272.8224 586.8261 269.5 592.3303 C
265.4833 590.0303 L
f
261.5666 488.5605 m
264.9077 483.0918 268.0523 477.6042 271.1999 471.7605 C
276.8 474.6605 L
273.6375 480.5295 270.4261 486.0587 267 491.6606 C
261.5666 488.5605 L
f
260.65 388.1 m
264.0985 382.5227 267.5232 376.6358 270.75 370.7 C
277.8 374.35 L
274.54 380.3442 271.0299 386.3004 267.5 392 C
260.65 388.1 L
f
258.7333 287.6303 m
262.2891 281.9444 265.9939 275.6582 269.3 269.6303 C
277.8 274.0303 L
274.4425 280.1497 270.6336 286.533 267 292.3303 C
258.7333 287.6303 L
f
257.8168 187.1697 m
261.4799 181.3753 265.4648 174.6898 268.8501 168.5697 C
278.8 173.7197 L
275.345 179.9644 271.2374 186.7748 267.5 192.6697 C
257.8168 187.1697 L
f
U
255.9 87.7 m
259.6705 81.797 263.9355 74.7122 267.4 68.5 C
278.8 74.4 L
275.2475 80.77 270.8411 88.0074 267 94 C
255.9 87.7 L
f
u
390.6667 552.1636 m
387.3833 558.2344 384.2771 563.6505 380.75 569.4969 C
376.7 567.1802 L
380.1636 561.4355 383.2054 556.0585 386.4833 549.9969 C
390.6667 552.1636 L
f
391.3334 451.1272 m
387.9817 457.2838 384.6056 463.0937 381 468.9939 C
375.4999 465.8605 L
379.0404 460.06 382.3373 454.3109 385.6666 448.1938 C
391.3334 451.1272 L
f
392 350.1 m
388.58 356.3425 384.9341 362.5462 381.25 368.5 C
374.3 364.55 L
377.9172 358.6937 381.4692 352.5725 384.85 346.4 C
392 350.1 L
f
392.6667 249.0636 m
389.1783 255.3919 385.2625 261.9894 381.5 267.9969 C
373.1 263.2302 L
376.7939 257.3182 380.601 250.8249 384.0333 244.5969 C
392.6667 249.0636 L
f
393.3333 148.0364 m
389.7766 154.4506 385.591 161.4418 381.75 167.5031 C
371.9 161.9197 L
375.6707 155.952 379.733 149.0866 383.2167 142.8031 C
393.3333 148.0364 L
f
U
370.7 60.6 m
374.5475 54.5765 378.8648 47.339 382.4 41 C
394 47 L
390.375 53.5 385.9195 60.8851 382 67 C
370.7 60.6 L
f
u
377.1333 549.3136 m
373.9447 555.2914 370.9566 560.6008 367.5 566.3303 C
363.5018 564.0014 L
366.9495 558.282 369.8381 553.1342 373.0227 547.1627 C
377.1333 549.3136 L
f
377.0667 448.1272 m
373.8052 454.1834 370.5334 459.8784 367 465.6605 C
361.5814 462.5374 L
365.0936 456.7813 368.2575 451.2461 371.4981 445.2264 C
377.0667 448.1272 L
f
377 346.95 m
373.6658 353.0847 370.1104 359.1653 366.5 365 C
359.6611 361.0827 L
363.2379 355.2899 366.6771 349.3672 369.9737 343.2994 C
377 346.95 L
f
376.9333 245.7636 m
373.5263 251.9767 369.6873 258.4429 366 264.3303 C
357.7407 259.6187 L
361.3821 253.7891 365.0965 247.4791 368.449 241.3632 C
376.9333 245.7636 L
f
376.8666 144.5864 m
373.3869 150.8779 369.2642 157.7298 365.5 163.6697 C
355.8204 158.164 L
359.5264 152.2977 363.5161 145.6003 366.9246 139.4363 C
376.8666 144.5864 L
f
U
353.9 56.7 m
357.6705 50.797 361.9355 43.7122 365.4 37.5 C
376.8 43.4 L
373.2475 49.77 368.8411 57.0074 365 63 C
353.9 56.7 L
f
u
485 575.6636 m
481.7167 581.7344 478.6105 587.1505 475.0834 592.997 C
471.0333 590.6803 L
474.497 584.9355 477.5388 579.5585 480.8167 573.497 C
485 575.6636 L
f
486.0001 476.1273 m
482.6484 482.2839 479.2723 488.0938 475.6667 493.994 C
470.1666 490.8606 L
473.707 485.0601 477.004 479.311 480.3333 473.1939 C
486.0001 476.1273 L
f
487 376.6 m
483.58 382.8425 479.9341 389.0462 476.25 395 C
469.3 391.05 L
472.9172 385.1937 476.4692 379.0725 479.85 372.9 C
487 376.6 L
f
488 277.0636 m
484.5117 283.3919 480.5959 289.9894 476.8334 295.997 C
468.4333 291.2303 L
472.1273 285.3183 475.9344 278.825 479.3666 272.5969 C
488 277.0636 L
f
489 177.5364 m
485.4433 183.9505 481.2577 190.9418 477.4167 197.003 C
467.5667 191.4197 L
471.3374 185.4519 475.3996 178.5865 478.8834 172.3031 C
489 177.5364 L
f
U
466.7 91.6 m
470.5475 85.5765 474.8648 78.339 478.4 72 C
490 78 L
486.375 84.5 481.9195 91.8851 478 98 C
466.7 91.6 L
f
u
471.4667 572.8136 m
468.278 578.7914 465.2899 584.1008 461.8333 589.8303 C
457.8351 587.5014 L
461.2828 581.7821 464.1714 576.6342 467.356 570.6627 C
471.4667 572.8136 L
f
471.7334 473.1273 m
468.4719 479.1835 465.2001 484.8785 461.6667 490.6606 C
456.2481 487.5375 L
459.7603 481.7814 462.9242 476.2462 466.1648 470.2265 C
471.7334 473.1273 L
f
472 373.45 m
468.6658 379.5847 465.1104 385.6653 461.5 391.5 C
454.6611 387.5827 L
458.2379 381.7899 461.6771 375.8672 464.9737 369.7994 C
472 373.45 L
f
472.2667 273.7636 m
468.8597 279.9767 465.0206 286.443 461.3333 292.3303 C
453.074 287.6187 L
456.7154 281.7892 460.4299 275.4792 463.7824 269.3632 C
472.2667 273.7636 L
f
472.5333 174.0864 m
469.0536 180.3779 464.9308 187.2297 461.1667 193.1697 C
451.4871 187.6639 L
455.193 181.7977 459.1827 175.1003 462.5913 168.9362 C
472.5333 174.0864 L
f
U
449.9 87.7 m
453.6705 81.797 457.9355 74.7122 461.4 68.5 C
472.8 74.4 L
469.2475 80.77 464.8411 88.0074 461 94 C
449.9 87.7 L
f
u
12.8667 508.9136 m
21.1671 534.4734 28.2541 563.6167 33.0001 593.7636 C
27.5 594.3303 L
22.8883 565.0371 16.0777 536.6328 7.5 510.2636 C
12.8667 508.9136 L
f
14.8334 408.7272 m
23.1714 434.5152 30.212 463.6241 35.0001 493.9272 C
27 494.6606 L
22.3356 465.1419 15.5929 437.0156 7 410.5272 C
14.8334 408.7272 L
f
16.8 308.55 m
25.1755 334.5661 32.1698 363.6405 37 394.1 C
26.5 395 L
21.7829 365.2559 15.1082 337.4074 6.5 310.8 C
16.8 308.55 L
f
18.7667 208.3636 m
27.1798 234.6079 34.1278 263.6479 39.0001 294.2636 C
26 295.3303 L
21.2302 265.3607 14.6234 237.7902 6 211.0636 C
18.7667 208.3636 L
f
20.7333 108.1864 m
29.1839 134.6588 36.0856 163.6644 40.9999 194.4364 C
25.5 195.6697 L
20.6776 165.4747 14.1387 138.1821 5.5 111.3364 C
20.7333 108.1864 L
f
U
22.7 8 m
31.1882 34.7006 38.0436 63.6717 43 94.6 C
25 96 L
20.1249 65.5795 13.6539 38.5649 5 11.6 C
22.7 8 L
f
u
64.3333 579.6636 m
10.5 579.6636 L
10.5 574.4969 L
64.3333 574.4969 L
64.3333 579.6636 L
f
63.6666 480.3273 m
10 480.3273 L
10 472.9938 L
63.6666 472.9938 L
63.6666 480.3273 L
f
62 381 m
9.5 381 L
9.5 371.5 L
62 371.5 L
62 381 L
f
61.3333 281.6636 m
9 281.6636 L
9 269.9969 L
61.3333 269.9969 L
61.3333 281.6636 L
f
62.6667 182.3364 m
8.5 182.3364 L
8.5 168.5031 L
62.6667 168.5031 L
62.6667 182.3364 L
f
U
61 83 m
8 83 L
8 67 L
61 67 L
61 83 L
f
u
51.1666 540.497 m
43.3923 535.5959 39.8333 530.2204 39.8333 525.497 c
39.8333 515.8903 48.3595 509.8303 68.3333 509.8303 c
75.1999 509.8303 81.8229 510.549 88.5 511.8303 C
87.75 516.9803 L
81.1527 515.7143 74.7686 514.997 68.3333 514.997 c
52.019 514.997 45.3334 519.1895 45.3334 525.8303 C
45.3334 529.172 48.2631 533.436 54.8167 537.5303 C
51.1666 540.497 L
f
50.3333 440.9939 m
43.0138 436.1564 39.6666 430.823 39.6666 425.9939 c
39.6666 415.9201 48.3478 409.6606 68.6667 409.6606 c
75.6932 409.6606 82.1458 410.348 89 411.6606 C
88 418.9607 L
81.2579 417.6695 75.0415 416.994 68.6667 416.994 c
53.4429 416.994 47.6668 420.6304 47.6668 426.6606 C
47.6668 429.8757 50.2656 433.8602 55.9334 437.5606 C
50.3333 440.9939 L
f
49.5 341.5 m
42.6353 336.7259 39.5 331.4346 39.5 326.5 c
39.5 315.9591 48.336 309.5 69 309.5 c
76.1864 309.5 82.4687 310.1562 89.5 311.5 C
88.25 320.95 L
81.3631 319.6337 75.3145 319 69 319 c
54.8667 319 50 322.0802 50 327.5 C
50 330.5886 52.2678 334.2934 57.05 337.6 C
49.5 341.5 L
f
48.6666 241.997 m
42.2568 237.2864 39.3333 232.0372 39.3333 226.997 c
39.3333 215.989 48.3243 209.3303 69.3333 209.3303 c
76.6797 209.3303 82.7917 209.9553 90 211.3303 C
88.5 222.9303 L
81.4683 221.589 75.5875 220.997 69.3333 220.997 c
56.2907 220.997 52.3334 223.5211 52.3334 228.3303 C
52.3334 231.2924 54.2703 234.7176 58.1667 237.6303 C
48.6666 241.997 L
f
47.8334 142.503 m
41.8783 137.856 39.1667 132.6489 39.1667 127.503 c
39.1667 116.0279 48.3125 109.1697 69.6667 109.1697 c
77.173 109.1697 83.1146 109.7635 90.5 111.1697 C
88.75 124.9197 L
81.5736 123.5532 75.8604 123.003 69.6667 123.003 c
57.7145 123.003 54.6666 124.971 54.6666 129.1697 C
54.6666 132.0052 56.2725 135.1509 59.2833 137.6697 C
47.8334 142.503 L
f
U
47 43 m
41.4998 38.4165 39 33.2515 39 28 c
39 16.0578 48.3008 9 70 9 c
77.6663 9 83.4375 9.5625 91 11 C
89 26.9 L
81.6788 25.5084 76.1334 25 70 25 c
59.1384 25 57 26.4119 57 30 C
57 32.709 58.275 35.575 60.4 37.7 C
47 43 L
f
u
84.5 552.6636 m
84.5 557.8303 L
47.1667 557.8303 L
47.1667 552.6636 L
84.5 552.6636 L
f
85 451.3272 m
85 458.6606 L
47.3333 458.6606 L
47.3333 451.3272 L
85 451.3272 L
f
85.5 350 m
85.5 359.5 L
47.5 359.5 L
47.5 350 L
85.5 350 L
f
86 248.6636 m
86 260.3303 L
47.6667 260.3303 L
47.6667 248.6636 L
86 248.6636 L
f
86.5 147.3364 m
86.5 161.1697 L
47.8333 161.1697 L
47.8333 147.3364 L
86.5 147.3364 L
f
U
87 46 m
87 62 L
48 62 L
48 46 L
87 46 L
f
u
123.3834 539.1469 m
132.3954 557.1818 136.7941 572.6947 138.85 593.3303 C
133.3333 593.3303 L
131.342 573.3433 127.0624 558.7963 118.3333 541.3303 C
123.3834 539.1469 L
f
125.0668 438.5939 m
134.2326 457.2136 138.6045 472.6273 140.7001 493.6606 C
132.6666 493.6606 L
130.6826 473.7469 126.5262 459.6539 117.6666 441.6606 C
125.0668 438.5939 L
f
126.75 338.05 m
136.0696 357.2544 140.4148 372.5689 142.55 394 C
132 394 L
130.0233 374.1595 125.99 360.5206 117 342 C
126.75 338.05 L
f
128.4334 237.4969 m
137.9067 257.2862 142.2252 272.5015 144.4 294.3303 C
131.3333 294.3303 L
129.3639 274.5631 125.4537 261.3782 116.3333 242.3303 C
128.4334 237.4969 L
f
U
u
130.1167 136.9484 m
139.7438 157.3225 144.0355 172.4386 146.25 194.6651 C
130.6667 194.6651 L
128.7045 174.9712 124.9175 162.2403 115.6667 142.6651 C
130.1167 136.9484 L
f
U
131.8 36.4 m
141.5809 57.3588 145.8459 72.3757 148.1 95 C
130 95 L
128.0452 75.3794 124.3813 63.1025 115 43 C
131.8 36.4 L
f
u
123.3834 539.1469 m
130.2268 546.9808 140.9732 551.3302 156 551.3302 c
170.4123 551.3302 176.9999 545.4999 176.9999 535.1636 c
176.9999 523.8196 165.1788 514.8303 147 514.8303 c
139.1738 514.8303 131.7235 515.762 124.6645 517.7024 C
123.5 512.6636 L
130.672 510.6642 138.3641 509.6636 147 509.6636 c
168.3837 509.6636 182.5 520.9015 182.5 534.9969 c
182.5 548.4708 173.8277 556.497 156 556.497 c
138.579 556.497 125.8622 550.8431 118.3333 541.3303 C
123.3834 539.1469 L
f
125.0668 438.5939 m
131.6554 445.7201 141.785 449.6605 156 449.6605 c
169.063 449.6605 174.9999 444.3892 174.9999 435.3273 c
174.9999 424.7201 163.9824 416.6607 147 416.6607 c
139.4026 416.6607 131.5598 417.6397 124.5116 419.5183 C
123 412.3272 L
130.2815 410.3284 138.4027 409.3272 147 409.3272 c
168.7666 409.3272 183 420.5959 183 434.9939 c
183 448.6776 174.0372 456.9939 156 456.9939 c
138.6129 456.9939 125.0598 451.002 117.6666 441.6606 C
125.0668 438.5939 L
f
126.75 338.05 m
133.0838 344.4686 142.5968 348 156 348 c
167.7138 348 173 343.2877 173 335.5 c
173 325.6297 162.7861 318.5 147 318.5 c
139.6313 318.5 131.3961 319.5264 124.3587 321.3432 C
122.5 312 L
129.891 310.0017 138.4413 309 147 309 c
169.1495 309 183.5 320.2994 183.5 335 c
183.5 348.8936 174.2466 357.5 156 357.5 c
138.6469 357.5 124.2575 351.1699 117 342 C
126.75 338.05 L
f
128.4334 237.4969 m
134.5124 243.2079 143.4086 246.3302 156 246.3302 c
166.3645 246.3302 170.9999 242.177 170.9999 235.6636 c
170.9999 226.5302 161.5896 220.3303 147 220.3303 c
139.8601 220.3303 131.2324 221.4041 124.2058 223.1592 C
122 211.6636 L
129.5005 209.6659 138.4799 208.6636 147 208.6636 c
169.5325 208.6636 184 219.9937 184 234.9969 c
184 249.1004 174.4561 257.997 156 257.997 c
138.6809 257.997 123.4551 251.3288 116.3333 242.3303 C
128.4334 237.4969 L
f
U
u
130.1167 136.9484 m
135.9409 141.9518 144.2204 144.6651 156 144.6651 c
165.0152 144.6651 169 141.0709 169 135.8318 c
169 127.4352 160.3932 122.1651 147 122.1651 c
140.0888 122.1651 131.0687 123.2863 124.0529 124.9796 C
121.5 111.3318 L
129.11 109.3347 138.5185 108.3318 147 108.3318 c
169.9154 108.3318 184.5 119.6926 184.5 134.9984 c
184.5 149.3117 174.6656 158.4985 156 158.4985 c
138.7149 158.4985 122.6528 151.4922 115.6667 142.6651 C
130.1167 136.9484 L
f
U
131.8 36.4 m
137.3695 40.6958 145.0322 43 156 43 c
163.666 43 167 39.9649 167 36 c
167 28.3403 159.1969 24 147 24 c
140.3176 24 130.905 25.1685 123.9 26.8 C
121 11 L
128.7196 9.0035 138.5572 8 147 8 c
170.2983 8 185 19.3916 185 35 c
185 49.5231 174.8751 59 156 59 c
138.7489 59 121.8504 51.6556 115 43 C
131.8 36.4 L
f
u
175.8333 573.6636 m
175.8333 578.8303 L
109.6667 578.8303 L
109.6667 573.6636 L
175.8333 573.6636 L
f
174.6666 472.3272 m
174.6666 479.6606 L
109.3333 479.6606 L
109.3333 472.3272 L
174.6666 472.3272 L
f
173.5 371 m
173.5 380.5 L
109 380.5 L
109 371 L
173.5 371 L
f
173.4833 269.6636 m
173.4833 281.3303 L
108.6667 281.3303 L
108.6667 269.6636 L
173.4833 269.6636 L
f
U
u
171.7416 168.3318 m
171.7416 182.1651 L
108.3333 182.1651 L
108.3333 168.3318 L
171.7416 168.3318 L
f
U
170 67 m
170 83 L
108 83 L
108 67 L
170 67 L
f
u
281.8333 548.4969 m
281.8333 528.0138 268.0076 517.8303 225.5 517.8303 C
225.5 512.3303 L
271.2859 512.3303 287.6667 524.5141 287.6667 548.6636 c
287.6667 565.5591 274.2631 576.9969 250.8333 576.9969 c
236.2389 576.9969 220.9977 574.5145 207.5 569.9969 C
209.0667 564.6802 L
222.1777 569.0728 236.7871 571.4969 250.8333 571.4969 c
270.9572 571.4969 281.8333 562.1512 281.8333 548.4969 c
f
279.6665 447.9939 m
279.6665 428.8457 266.9059 419.6607 225 419.6607 C
225 411.6605 L
271.8946 411.6605 288.3334 423.8465 288.3334 448.3272 c
288.3334 465.3853 274.709 476.9939 250.6666 476.9939 c
236.0899 476.9939 220.6598 474.5032 207 469.9939 C
209.1333 462.2604 L
222.2005 466.5812 236.915 468.9938 250.6666 468.9938 c
269.726 468.9938 279.6665 460.5483 279.6665 447.9939 c
f
277.5 347.5 m
277.5 329.6867 265.8043 321.5 224.5 321.5 C
224.5 311 L
272.5032 311 289 323.1882 289 348 c
289 365.2207 275.155 377 250.5 377 c
235.9408 377 220.3219 374.5011 206.5 370 C
209.2 359.85 L
222.2232 364.0988 237.0429 366.5 250.5 366.5 c
268.4949 366.5 277.5 358.9548 277.5 347.5 c
f
275.3333 246.9969 m
275.3333 230.5186 264.7026 223.3303 224 223.3303 C
224 210.3303 L
273.1119 210.3303 289.6667 222.5207 289.6667 247.6636 c
289.6667 265.047 275.601 276.9969 250.3333 276.9969 c
235.7918 276.9969 219.984 274.4898 206 269.9969 C
209.2667 257.4302 L
222.246 261.6072 237.1708 263.9969 250.3333 263.9969 c
267.2636 263.9969 275.3333 257.3519 275.3333 246.9969 c
f
273.1667 146.5031 m
273.1667 131.3596 263.6011 125.1697 223.5 125.1697 C
223.5 109.6697 L
273.7205 109.6697 290.3333 121.8623 290.3333 147.3364 c
290.3333 164.8824 276.0469 177.003 250.1667 177.003 c
235.6427 177.003 219.6461 174.4877 205.5 170.003 C
209.3333 155.0198 L
222.2687 159.1249 237.2987 161.5031 250.1667 161.5031 c
266.0325 161.5031 273.1667 155.7583 273.1667 146.5031 c
f
U
209.4 52.6 m
222.2915 56.6332 237.4266 59 250 59 c
264.8013 59 271 54.1555 271 46 c
271 32.1915 262.4994 27 223 27 C
223 9 L
274.3292 9 291 21.1948 291 47 c
291 64.7087 276.4929 77 250 77 c
235.4937 77 219.3082 74.4764 205 70 C
209.4 52.6 L
f
u
439.3334 554.1636 m
436.1672 566.13 433.2901 579.3911 431.3334 591.1636 C
425.6999 590.2636 L
427.6944 578.2641 430.65 564.908 433.8499 552.8136 C
439.3334 554.1636 L
f
440.6667 454.3273 m
437.5006 466.2937 434.6234 479.5548 432.6667 491.3273 C
424.3999 490.0272 L
426.4043 477.9678 429.3687 464.5399 432.5999 452.3272 C
440.6667 454.3273 L
f
442 354.5 m
438.8339 366.4664 435.9567 379.7275 434 391.5 C
423.1 389.8 L
425.1143 377.6808 428.0874 364.181 431.35 351.85 C
442 354.5 L
f
443.3334 254.6636 m
440.1673 266.63 437.2901 279.8911 435.3334 291.6636 C
421.8 289.5636 L
423.8242 277.3846 426.8061 263.813 430.0999 251.3636 C
443.3334 254.6636 L
f
444.6666 154.8364 m
441.5005 166.8028 438.6233 180.0639 436.6666 191.8364 C
420.5 189.3364 L
422.5343 177.0975 425.5249 163.4541 428.85 150.8864 C
444.6666 154.8364 L
f
U
446 55 m
442.8339 66.9664 439.9567 80.2275 438 92 C
419.2 89.1 L
421.2442 76.8013 424.2435 63.0861 427.6 50.4 C
446 55 L
f
u
481.0167 567.497 m
428.6981 557.1991 414.5 545.5601 414.5 531.1636 c
414.5 518.3865 426.0288 509.6636 449 509.6636 c
462.1045 509.6636 470.4687 510.4344 482.5 512.6636 C
481.7167 517.9803 L
469.8328 515.7763 461.7024 514.997 449 514.997 c
429.8239 514.997 420.3334 521.6755 420.3334 531.1636 c
420.3334 542.742 433.6869 552.6844 482.1833 562.1969 C
481.0167 567.497 L
f
481.0333 467.9939 m
427.8186 457.2442 414 445.799 414 431.3273 c
414 417.9349 425.3153 409.3272 449 409.3272 c
462.0856 409.3272 470.9375 410.1189 483 412.3272 C
481.9333 419.9607 L
470.2174 417.8123 461.5904 416.994 449 416.994 c
430.9358 416.994 422.6668 422.7871 422.6668 431.3273 c
422.6668 441.8322 434.6794 450.7521 482.6667 460.3938 C
481.0333 467.9939 L
f
481.05 368.5 m
426.9392 357.2984 413.5 346.047 413.5 331.5 c
413.5 317.4925 424.6018 309 449 309 c
462.0666 309 471.4062 309.8125 483.5 312 C
482.15 321.95 L
470.6019 319.8573 461.4784 319 449 319 c
432.0477 319 425 323.9077 425 331.5 c
425 340.9315 435.6718 348.829 483.15 358.6 C
481.05 368.5 L
f
481.0666 268.997 m
426.0598 257.3435 413 246.286 413 231.6636 c
413 217.0409 423.8883 208.6636 449 208.6636 c
462.0477 208.6636 471.875 209.4969 484 211.6636 C
482.3667 223.9303 L
470.9864 221.8933 461.3664 220.997 449 220.997 c
433.1596 220.997 427.3334 225.0194 427.3334 231.6636 c
427.3334 240.0217 436.6642 246.8966 483.6333 256.7969 C
481.0666 268.997 L
f
481.0833 169.503 m
425.1804 157.3977 412.5 146.5341 412.5 131.8364 c
412.5 116.5986 423.1749 108.3364 449 108.3364 c
462.0288 108.3364 472.3437 109.1905 484.5 111.3364 C
482.5833 125.9197 L
471.3709 123.9383 461.2544 123.003 449 123.003 c
434.2714 123.003 429.6666 126.1401 429.6666 131.8364 c
429.6666 139.1211 437.6566 144.9736 484.1166 155.0031 C
481.0833 169.503 L
f
U
481.1 70 m
424.3009 57.4428 412 46.773 412 32 c
412 16.147 422.4614 8 449 8 c
462.0099 8 472.8125 8.875 485 11 C
482.8 27.9 L
471.7555 25.9743 461.1424 25 449 25 c
435.3834 25 432 27.2517 432 32 c
432 38.2112 438.6491 43.0412 484.6 53.2 C
481.1 70 L
f
333 644 m
333 663.4645 351.1422 682 371 682 c
389 682 L
389 685 L
309 685 L
309 682 L
361 682 L
361 683.6 L
343.4951 678.6645 330 661.6496 330 644 c
330 622.6402 342.8819 611 366 611 C
369.294 611 371.9375 611.3125 375 612 C
374.4 614.9 L
371.4665 614.2415 368.9923 614 366 614 c
344.4112 614 333 624.3738 333 644 c
f
u
335.1667 544.3303 m
335.1667 562.6634 352.2246 579.9969 371.3334 579.9969 C
389.3334 579.9969 L
389.3334 585.3303 L
308.6667 585.3303 L
308.6667 579.9969 L
360.8333 579.9969 L
360.7 583.5636 L
342.8619 578.5342 329.5 561.6612 329.5 543.9969 c
329.5 522.4046 342.6007 510.6636 365.8333 510.6636 C
369.3471 510.6636 372.2708 510.9865 375.5 511.6636 C
374.7333 516.8803 L
371.7533 516.2503 369.1607 515.997 366.1667 515.997 c
345.8486 515.997 335.1667 525.7008 335.1667 544.3303 c
f
337.3335 444.6606 m
337.3335 461.8624 353.3071 477.9938 371.6667 477.9938 C
389.6667 477.9938 L
389.6667 485.6606 L
308.3333 485.6606 L
308.3333 477.9938 L
360.6667 477.9938 L
360.4 483.5272 L
342.2288 478.4039 329 461.6729 329 443.9939 c
329 422.1689 342.3195 410.3272 365.6667 410.3272 C
369.4002 410.3272 372.6042 410.6605 376 411.3272 C
375.0667 418.8607 L
372.0402 418.2592 369.3291 417.994 366.3333 417.994 c
347.2859 417.994 337.3335 427.0278 337.3335 444.6606 c
f
339.5 345 m
339.5 361.0706 354.3895 376 372 376 C
390 376 L
390 386 L
308 386 L
308 376 L
360.5 376 L
360.1 383.5 L
341.5957 378.2827 328.5 361.6937 328.5 344 c
328.5 321.9425 342.0384 310 365.5 310 C
369.4533 310 372.9375 310.3437 376.5 311 C
375.4 320.85 L
372.327 320.277 369.4975 320 366.5 320 c
348.7232 320 339.5 328.3638 339.5 345 c
f
341.6667 245.3303 m
341.6667 260.2695 355.4719 273.9969 372.3334 273.9969 C
390.3334 273.9969 L
390.3334 286.3303 L
307.6667 286.3303 L
307.6667 273.9969 L
360.3333 273.9969 L
359.8 283.4636 L
340.9626 278.1524 328 261.7053 328 243.9969 c
328 221.7069 341.7572 209.6636 365.3333 209.6636 C
369.5065 209.6636 373.2708 210.0178 377 210.6636 C
375.7333 222.8303 L
372.6138 222.2858 369.6658 221.997 366.6667 221.997 c
350.1606 221.997 341.6667 229.6908 341.6667 245.3303 c
f
343.8333 145.6697 m
343.8333 159.4777 356.5543 172.0031 372.6667 172.0031 C
390.6667 172.0031 L
390.6667 186.6697 L
307.3334 186.6697 L
307.3334 172.0031 L
360.1667 172.0031 L
359.5 183.4364 L
340.3294 178.0312 327.5 161.7261 327.5 144.003 c
327.5 121.4804 341.476 109.3364 365.1667 109.3364 C
369.5596 109.3364 373.6042 109.701 377.5 110.3364 C
376.0667 124.8196 L
372.9007 124.3036 369.8342 124.003 366.8333 124.003 c
351.5978 124.003 343.8333 131.0268 343.8333 145.6697 c
f
U
359.2 83.4 m
339.6963 77.9009 327 61.7378 327 44 c
327 21.2448 341.1948 9 365 9 c
369.6127 9 373.9375 9.375 378 10 C
376.4 26.8 L
373.1875 26.3125 370.0026 26 367 26 c
353.0352 26 346 32.3538 346 46 c
346 58.6767 357.6367 70 373 70 C
391 70 L
391 87 L
307 87 L
307 70 L
360 70 L
359.2 83.4 L
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
