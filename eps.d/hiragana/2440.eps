%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (2440.eps)
%%CreationDate: (4/23/04) (11:35 AM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
1 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
500 600 m
500 700 L
400 700 L
400 600 L
500 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
400 600 m
400 700 L
300 700 L
300 600 L
400 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
500 500 m
500 600 L
400 600 L
400 500 L
500 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
400 500 m
400 600 L
300 600 L
300 500 L
400 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
0 Ap
0 O
0 g
1 D
10.9 609.1 m
19.1629 634.4316 26.2961 663.6094 31 693.6 C
28 694 L
23.441 664.9323 16.5625 636.25 8 610 C
10.9 609.1 L
f
65 680 m
11 680 L
11 677 L
65 677 L
65 680 L
f
52 640 m
43.7709 635.0354 40 629.6178 40 625 c
40 615.8605 48.3713 610 68 610 c
74.7066 610 81.5 610.75 88 612 C
87.5 615 L
81.0475 613.7591 74.4956 613 68 613 c
50.5951 613 43 617.7486 43 625 c
43 628.4682 46.2607 633.0119 53.7 637.5 C
52 640 L
f
84 655 m
84 658 L
47 658 L
47 655 L
84 655 L
f
93 679 m
89.2352 684.347 85.875 688.9375 82 694 C
79.6 692.2 L
83.375 687.25 86.5417 682.9218 90.5 677.3 C
93 679 L
f
79 675 m
75.2352 680.347 71.875 684.9375 68 690 C
65.6 688.2 L
69.375 683.25 72.5417 678.9218 76.5 673.3 C
79 675 L
f
121.7 639.7 m
128.7982 648.2415 140.1614 653 156 653 c
171.7617 653 179 646.6106 179 635 c
179 622.9191 166.3753 613 147 613 c
138.9451 613 131.8872 613.8843 124.8174 615.8865 C
124 613 L
131.0625 611 138.3255 610 147 610 c
168.0008 610 182 621.2072 182 635 c
182 648.264 173.6182 656 156 656 c
138.545 656 126.6646 650.6843 119 641 C
121.7 639.7 L
f
176 676 m
176 679 L
110 679 L
110 676 L
176 676 L
f
121.7 639.7 m
130.5583 657.1501 134.9837 672.7622 137 693 C
134 693 L
132.0014 672.9397 127.5987 657.9387 119 641 C
121.7 639.7 L
f
194 678 m
190.2352 683.347 186.875 687.9375 183 693 C
180.6 691.2 L
184.375 686.25 187.5417 681.9218 191.5 676.3 C
194 678 L
f
180 674 m
176.2352 679.347 172.875 683.9375 169 689 C
166.6 687.2 L
170.375 682.25 173.5417 677.9218 177.5 672.3 C
180 674 L
f
0 D
284 649 m
284 627.1819 269.1093 616 226 616 c
226 613 L
270.6773 613 287 625.1816 287 649 c
287 665.7328 273.8171 677 251 677 c
236.388 677 221.3356 674.5258 208 670 C
209 667.1 L
222.155 671.5645 236.6592 674 251 674 c
272.1885 674 284 663.754 284 649 c
f
292.5 679.3 m
288.5417 684.9218 285.375 689.25 281.6 694.2 C
284 696 L
287.875 690.9375 291.2352 686.347 295 681 C
292.5 679.3 L
f
277.5 675.3 m
273.5417 680.9218 270.375 685.25 266.6 690.2 C
269 692 L
272.875 686.9375 276.2352 682.347 280 677 C
277.5 675.3 L
f
360 683.6 m
342.4951 678.6645 329 661.6496 329 644 c
329 622.9736 341.5482 611 361 611 C
364.294 611 366.9375 611.3125 370 612 C
369.4 614.9 L
366.4665 614.2415 363.9923 614 361 614 c
342.8411 614 332 625.2149 332 644 c
332 663.4645 350.1422 682 370 682 c
388 682 L
388 685 L
308 685 L
308 682 L
360 682 L
360 683.6 L
f
393.5 654.3 m
389.5417 659.9218 386.375 664.25 382.6 669.2 C
385 671 L
388.875 665.9375 392.2352 661.347 396 656 C
393.5 654.3 L
f
377.5 650.3 m
373.5417 655.9218 370.375 660.25 366.6 665.2 C
369 667 L
372.875 661.9375 376.2352 657.347 380 652 C
377.5 650.3 L
f
1 D
418 631 m
418 643.6519 432.6945 654.6168 481.7 664 C
481 667 L
429.5776 657.154 415 645.3211 415 631 c
415 618.838 426.7423 610 449 610 c
462.1234 610 470 610.75 482 613 C
481.5 616 L
469.4483 613.7403 461.8144 613 449 613 c
428.712 613 418 620.5638 418 631 c
f
438 654 m
434.8339 665.9664 431.9567 679.2275 430 691 C
427 690.5 L
428.9845 678.5603 431.9314 665.276 435.1 653.3 C
438 654 L
f
489 680 m
485.2352 685.347 481.875 689.9375 478 695 C
475.6 693.2 L
479.375 688.25 482.5417 683.9218 486.5 678.3 C
489 680 L
f
474 676 m
470.2352 681.347 466.875 685.9375 463 691 C
460.6 689.2 L
464.375 684.25 467.5417 679.9218 471.5 674.3 C
474 676 L
f
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
12.8667 508.9136 m
21.1672 534.4734 28.2541 563.6167 33.0001 593.7636 C
27.5 594.3303 L
22.8883 565.0371 16.0777 536.6328 7.5 510.2636 C
12.8667 508.9136 L
f
14.8334 408.7272 m
23.1714 434.5152 30.212 463.624 35.0001 493.9272 C
27 494.6606 L
22.3356 465.1419 15.5929 437.0155 7 410.5272 C
14.8334 408.7272 L
f
16.8 308.55 m
25.1755 334.5661 32.1699 363.6405 37 394.1 C
26.5 395 L
21.783 365.2559 15.1082 337.4074 6.5 310.8 C
16.8 308.55 L
f
18.7667 208.3636 m
27.1798 234.6079 34.1278 263.6479 39.0001 294.2636 C
26 295.3303 L
21.2302 265.3607 14.6234 237.7902 6 211.0636 C
18.7667 208.3636 L
f
20.7333 108.1864 m
29.1839 134.6588 36.0856 163.6643 41 194.4364 C
25.5 195.6697 L
20.6776 165.4747 14.1387 138.1821 5.5 111.3364 C
20.7333 108.1864 L
f
U
u
64.3333 580.6636 m
10.5 580.6636 L
10.5 575.4969 L
64.3333 575.4969 L
64.3333 580.6636 L
f
63.6666 481.3273 m
10 481.3273 L
10 473.9938 L
63.6666 473.9938 L
63.6666 481.3273 L
f
62 382 m
9.5 382 L
9.5 372.5 L
62 372.5 L
62 382 L
f
64.3333 282.6636 m
9 282.6636 L
9 270.9969 L
64.3333 270.9969 L
64.3333 282.6636 L
f
62.6667 183.3364 m
8.5 183.3364 L
8.5 169.5031 L
62.6667 169.5031 L
62.6667 183.3364 L
f
U
u
84.5 553.4969 m
84.5 558.6636 L
47.1667 558.6636 L
47.1667 553.4969 L
84.5 553.4969 L
f
85 451.9938 m
85 459.3273 L
47.3333 459.3273 L
47.3333 451.9938 L
85 451.9938 L
f
85.5 350.5 m
85.5 360 L
47.5 360 L
47.5 350.5 L
85.5 350.5 L
f
86 248.9969 m
86 260.6636 L
47.6667 260.6636 L
47.6667 248.9969 L
86 248.9969 L
f
86.5 147.5031 m
86.5 161.3364 L
47.8333 161.3364 L
47.8333 147.5031 L
86.5 147.5031 L
f
U
u
51.1667 540.497 m
43.3924 535.5959 39.8333 530.2204 39.8333 525.497 c
39.8333 515.8903 48.3595 509.8303 68.3334 509.8303 c
75.1999 509.8303 81.8229 510.549 88.5 511.8303 C
87.75 516.9803 L
81.1527 515.7143 74.7686 514.997 68.3334 514.997 c
52.019 514.997 45.3334 519.1895 45.3334 525.8303 C
45.3334 529.172 48.2631 533.436 54.8167 537.5303 C
51.1667 540.497 L
f
50.3333 440.9939 m
43.0138 436.1564 39.6667 430.823 39.6667 425.9939 c
39.6667 415.9201 48.3478 409.6606 68.6667 409.6606 c
75.6932 409.6606 82.1459 410.348 89 411.6606 C
88 418.9607 L
81.2579 417.6695 75.0415 416.994 68.6667 416.994 c
53.4429 416.994 47.6668 420.6304 47.6668 426.6606 C
47.6668 429.8757 50.2656 433.8602 55.9334 437.5606 C
50.3333 440.9939 L
f
49.5 341.5 m
42.6353 336.7259 39.5 331.4346 39.5 326.5 c
39.5 315.9591 48.3361 309.5 69 309.5 c
76.1864 309.5 82.4687 310.1562 89.5 311.5 C
88.25 320.95 L
81.3631 319.6337 75.3145 319 69 319 c
54.8667 319 50 322.0802 50 327.5 C
50 330.5886 52.2678 334.2934 57.05 337.6 C
49.5 341.5 L
f
48.6667 241.997 m
42.2568 237.2864 39.3333 232.0372 39.3333 226.997 c
39.3333 215.989 48.3243 209.3303 69.3334 209.3303 c
76.6797 209.3303 82.7917 209.9553 90 211.3303 C
88.5 222.9303 L
81.4683 221.589 75.5875 220.997 69.3334 220.997 c
56.2907 220.997 52.3334 223.5211 52.3334 228.3303 C
52.3334 231.2924 54.2703 234.7176 58.1667 237.6303 C
48.6667 241.997 L
f
47.8334 142.503 m
41.8783 137.856 39.1667 132.6489 39.1667 127.503 c
39.1667 116.0279 48.3125 109.1697 69.6667 109.1697 c
77.173 109.1697 83.1146 109.7635 90.5 111.1697 C
88.75 124.9196 L
81.5736 123.5531 75.8604 123.003 69.6667 123.003 c
57.7145 123.003 54.6666 124.971 54.6666 129.1697 C
54.6666 132.0052 56.2725 135.1508 59.2833 137.6697 C
47.8334 142.503 L
f
U
u
79.1667 574.9969 m
75.321 580.4632 71.6354 585.4866 67.6667 590.6636 C
63.8666 587.947 L
67.7604 582.8615 71.2485 578.101 75.25 572.4136 C
79.1667 574.9969 L
f
79.3333 474.9939 m
75.4068 480.5794 71.3958 486.0356 67.3333 491.3273 C
62.1332 487.6939 L
66.1457 482.473 69.9554 477.2802 73.9999 471.5272 C
79.3333 474.9939 L
f
79.5 375 m
75.4926 380.7047 71.1562 386.5937 67 392 C
60.4 387.45 L
64.5312 382.0937 68.6623 376.4686 72.75 370.65 C
79.5 375 L
f
79.6667 274.9969 m
75.5784 280.8209 70.9167 287.1428 66.6667 292.6636 C
58.6666 287.1969 L
62.9166 281.7053 67.3692 275.6478 71.5 269.7636 C
79.6667 274.9969 L
f
79.8333 175.003 m
75.6642 180.9463 70.6771 187.7009 66.3334 193.3364 C
56.9334 186.953 L
61.3021 181.326 66.0761 174.8363 70.25 168.8864 C
79.8333 175.003 L
f
U
u
93.8334 578.9969 m
89.9877 584.4632 86.3021 589.4866 82.3334 594.6636 C
78.5333 591.947 L
82.427 586.8615 85.9152 582.101 89.9167 576.4136 C
93.8334 578.9969 L
f
94.6667 478.9939 m
90.7402 484.5794 86.7292 490.0356 82.6667 495.3273 C
77.4666 491.6939 L
81.4791 486.473 85.2888 481.2802 89.3333 475.5272 C
94.6667 478.9939 L
f
95.5 379 m
91.4926 384.7047 87.1562 390.5937 83 396 C
76.4 391.45 L
80.5312 386.0937 84.6623 380.4686 88.75 374.65 C
95.5 379 L
f
96.3334 278.9969 m
92.2451 284.8209 87.5833 291.1428 83.3334 296.6636 C
75.3333 291.1969 L
79.5833 285.7053 84.0358 279.6478 88.1667 273.7636 C
96.3334 278.9969 L
f
97.1667 179.003 m
92.9975 184.9463 88.0104 191.7009 83.6667 197.3364 C
74.2667 190.953 L
78.6354 185.326 83.4094 178.8363 87.5834 172.8864 C
97.1667 179.003 L
f
U
22.7 8 m
31.1882 34.7006 38.0436 63.6717 43 94.6 C
25 96 L
20.1249 65.5795 13.6539 38.5649 5 11.6 C
22.7 8 L
f
61 84 m
8 84 L
8 68 L
61 68 L
61 84 L
f
47 43 m
41.4998 38.4165 39 33.2515 39 28 c
39 16.0578 48.3008 9 70 9 c
77.6663 9 83.4375 9.5625 91 11 C
89 26.9 L
81.6788 25.5084 76.1334 25 70 25 c
59.1384 25 57 26.4119 57 30 C
57 32.709 58.275 35.575 60.4 37.7 C
47 43 L
f
87 46 m
87 62 L
48 62 L
48 46 L
87 46 L
f
98 79 m
93.75 85.0625 88.4375 92.25 84 98 C
73.2 90.7 L
77.6875 84.9375 82.7829 78.0155 87 72 C
98 79 L
f
80 75 m
75.75 81.0625 70.4375 88.25 66 94 C
55.2 86.7 L
59.6875 80.9375 64.7829 74.0155 69 68 C
80 75 L
f
u
174.8333 574.6636 m
174.8333 579.8303 L
109.8333 579.8303 L
109.8333 574.6636 L
174.8333 574.6636 L
f
173.6666 473.3272 m
173.6666 480.6606 L
109.6667 480.6606 L
109.6667 473.3272 L
173.6666 473.3272 L
f
172.5 372 m
172.5 381.5 L
109.5 381.5 L
109.5 372 L
172.5 372 L
f
171.3333 270.6636 m
171.3333 282.3303 L
109.3333 282.3303 L
109.3333 270.6636 L
171.3333 270.6636 L
f
170.1667 169.3364 m
170.1667 183.1697 L
109.1667 183.1697 L
109.1667 169.3364 L
170.1667 169.3364 L
f
U
u
123.55 539.1469 m
132.5621 557.1818 136.9608 572.6947 139.0167 593.3303 C
133.5 593.3303 L
131.5087 573.3433 127.2291 558.7963 118.5 541.3303 C
123.55 539.1469 L
f
125.4001 438.5939 m
134.5659 457.2136 138.9379 472.6273 141.0334 493.6606 C
133 493.6606 L
131.016 473.7469 126.8595 459.6539 118 441.6606 C
125.4001 438.5939 L
f
127.25 338.05 m
136.5696 357.2544 140.9148 372.5689 143.05 394 C
132.5 394 L
130.5233 374.1595 126.49 360.5206 117.5 342 C
127.25 338.05 L
f
129.1 237.4969 m
138.5734 257.2862 142.8919 272.5015 145.0667 294.3303 C
132 294.3303 L
130.0306 274.5631 126.1204 261.3782 117 242.3303 C
129.1 237.4969 L
f
130.9499 136.9531 m
140.5771 157.3271 144.8688 172.4431 147.0833 194.6697 C
131.5 194.6697 L
129.5379 174.9758 125.7509 162.2449 116.5 142.6697 C
130.9499 136.9531 L
f
U
u
123.55 539.1469 m
130.7176 547.2308 141.1769 551.4969 156.1667 551.4969 c
170.5791 551.4969 177.1666 545.6666 177.1666 535.1636 c
177.1666 523.8196 165.3455 514.8303 147.1667 514.8303 c
139.3405 514.8303 131.8902 515.762 124.8312 517.7024 C
123.6667 512.6636 L
130.8387 510.6642 138.5308 509.6636 147.1667 509.6636 c
168.5504 509.6636 182.6667 520.9015 182.6667 534.9969 c
182.6667 548.6375 173.9944 556.6636 156.1667 556.6636 c
138.7364 556.6636 126.2048 551.0654 118.5 541.3303 C
123.55 539.1469 L
f
125.4001 438.5939 m
132.6369 446.2201 142.1923 449.9938 156.3333 449.9938 c
169.3964 449.9938 175.3332 444.7225 175.3332 435.3273 c
175.3332 424.7201 164.3157 416.6607 147.3333 416.6607 c
139.7359 416.6607 131.8931 417.6397 124.8449 419.5183 C
123.3333 412.3272 L
130.6148 410.3284 138.736 409.3272 147.3333 409.3272 c
169.1 409.3272 183.3334 420.5959 183.3334 434.9939 c
183.3334 449.011 174.3705 457.3273 156.3333 457.3273 c
138.9278 457.3273 125.7449 451.4464 118 441.6606 C
125.4001 438.5939 L
f
127.25 338.05 m
134.5561 345.2186 143.2077 348.5 156.5 348.5 c
168.2139 348.5 173.5 343.7877 173.5 335.5 c
173.5 325.6297 163.2861 318.5 147.5 318.5 c
140.1313 318.5 131.8961 319.5264 124.8587 321.3432 C
123 312 L
130.391 310.0017 138.9413 309 147.5 309 c
169.6495 309 184 320.2994 184 335 c
184 349.3936 174.7466 358 156.5 358 c
139.1193 358 125.2852 351.8366 117.5 342 C
127.25 338.05 L
f
129.1 237.4969 m
136.4755 244.2079 144.2232 246.9969 156.6667 246.9969 c
167.0313 246.9969 171.6666 242.8437 171.6666 235.6636 c
171.6666 226.5302 162.2563 220.3303 147.6667 220.3303 c
140.5268 220.3303 131.8991 221.4041 124.8725 223.1591 C
122.6667 211.6636 L
130.1672 209.6659 139.1466 208.6636 147.6667 208.6636 c
170.1991 208.6636 184.6667 219.9937 184.6667 234.9969 c
184.6667 249.7671 175.1228 258.6636 156.6667 258.6636 c
139.3107 258.6636 124.8253 252.2176 117 242.3303 C
129.1 237.4969 L
f
130.9499 136.9531 m
138.3947 143.2064 145.2386 145.5031 156.8333 145.5031 c
165.8487 145.5031 169.8334 141.9089 169.8334 135.8364 c
169.8334 127.4398 161.2267 122.1697 147.8333 122.1697 c
140.9222 122.1697 131.902 123.2908 124.8862 124.9841 C
122.3334 111.3364 L
129.9434 109.3393 139.3519 108.3364 147.8333 108.3364 c
170.7487 108.3364 185.3333 119.6972 185.3333 135.003 c
185.3333 150.1497 175.4989 159.3364 156.8333 159.3364 c
139.5021 159.3364 124.3655 152.6078 116.5 142.6697 C
130.9499 136.9531 L
f
U
u
180 573.6636 m
176.1543 579.1299 172.4687 584.1532 168.5 589.3303 C
164.6999 586.6136 L
168.5937 581.5282 172.0819 576.7677 176.0833 571.0802 C
180 573.6636 L
f
180 473.3272 m
176.0735 478.9127 172.0625 484.3689 168 489.6606 C
162.7999 486.0272 L
166.8124 480.8063 170.622 475.6135 174.6666 469.8605 C
180 473.3272 L
f
180 373 m
175.9926 378.7047 171.6562 384.5937 167.5 390 C
160.9 385.45 L
165.0312 380.0937 169.1623 374.4686 173.25 368.65 C
180 373 L
f
180 272.6636 m
175.9117 278.4876 171.25 284.8095 167 290.3303 C
159 284.8636 L
163.2499 279.3719 167.7025 273.3145 171.8333 267.4302 C
180 272.6636 L
f
180 173.3364 m
175.8309 179.2796 170.8438 186.0343 166.5 191.6697 C
157.1001 185.2864 L
161.4688 179.6593 166.2428 173.1696 170.4167 167.2198 C
180 173.3364 L
f
U
u
194.6667 577.6636 m
190.821 583.1299 187.1354 588.1532 183.1667 593.3303 C
179.3666 590.6136 L
183.2604 585.5282 186.7486 580.7677 190.75 575.0802 C
194.6667 577.6636 L
f
195.3334 477.3272 m
191.4068 482.9127 187.3959 488.3689 183.3333 493.6606 C
178.1333 490.0272 L
182.1458 484.8063 185.9554 479.6135 190 473.8605 C
195.3334 477.3272 L
f
196 377 m
191.9926 382.7047 187.6562 388.5937 183.5 394 C
176.9 389.45 L
181.0312 384.0937 185.1623 378.4686 189.25 372.65 C
196 377 L
f
196.6667 276.6636 m
192.5784 282.4876 187.9167 288.8095 183.6667 294.3303 C
175.6666 288.8636 L
179.9166 283.3719 184.3692 277.3145 188.5 271.4302 C
196.6667 276.6636 L
f
197.3333 177.3364 m
193.1642 183.2796 188.1771 190.0343 183.8333 195.6697 C
174.4334 189.2864 L
178.8021 183.6593 183.5761 177.1696 187.75 171.2198 C
197.3333 177.3364 L
f
U
132.8 36.4 m
142.5809 57.3588 146.8459 72.3757 149.1 95 C
131 95 L
129.0452 75.3794 125.3813 63.1025 116 43 C
132.8 36.4 L
f
132.8 36.4 m
140.3141 42.1957 146.2541 44 157 44 c
164.6661 44 168 40.9649 168 36 c
168 28.3403 160.1969 24 148 24 c
141.3176 24 131.905 25.1685 124.9 26.8 C
122 11 L
129.7196 9.0035 139.5572 8 148 8 c
171.2983 8 186 19.3916 186 35 c
186 50.5232 175.8751 60 157 60 c
139.6935 60 123.9057 52.9889 116 43 C
132.8 36.4 L
f
169 68 m
169 84 L
109 84 L
109 68 L
169 68 L
f
198 76 m
193.75 82.0625 188.4375 89.25 184 95 C
173.2 87.7 L
177.6875 81.9375 182.7829 75.0155 187 69 C
198 76 L
f
180 72 m
175.75 78.0625 170.4375 85.25 166 91 C
155.2 83.7 L
159.6875 77.9375 164.7829 71.0155 169 65 C
180 72 L
f
u
0 D
207.5 569.9969 m
220.9977 574.5145 236.2389 576.9969 250.8333 576.9969 c
274.2631 576.9969 287.6667 565.559 287.6667 548.6636 c
287.6667 524.5141 271.2859 512.3303 225.5 512.3303 C
225.5 517.8303 L
268.0076 517.8303 281.8333 528.0138 281.8333 548.4969 c
281.8333 562.1511 270.9572 571.4969 250.8333 571.4969 c
236.7871 571.4969 222.1777 569.0728 209.0667 564.6802 C
207.5 569.9969 L
f
207 469.9939 m
220.6598 474.5032 236.0899 476.9939 250.6667 476.9939 c
274.7091 476.9939 288.3334 465.3853 288.3334 448.3272 c
288.3334 423.8465 271.8946 411.6605 225 411.6605 C
225 419.6607 L
266.9059 419.6607 279.6665 428.8457 279.6665 447.9939 c
279.6665 460.5483 269.726 468.9938 250.6667 468.9938 c
236.915 468.9938 222.2005 466.5811 209.1333 462.2604 C
207 469.9939 L
f
206.5 370 m
220.3219 374.5011 235.9409 377 250.5 377 c
275.1551 377 289 365.2207 289 348 c
289 323.1882 272.5032 311 224.5 311 C
224.5 321.5 L
265.8043 321.5 277.5 329.6867 277.5 347.5 c
277.5 358.9547 268.4949 366.5 250.5 366.5 c
237.0429 366.5 222.2232 364.0988 209.2 359.85 C
206.5 370 L
f
206 269.9969 m
219.984 274.4898 235.7918 276.9969 250.3333 276.9969 c
275.601 276.9969 289.6667 265.0469 289.6667 247.6636 c
289.6667 222.5206 273.1119 210.3303 224 210.3303 C
224 223.3303 L
264.7026 223.3303 275.3333 230.5186 275.3333 246.9969 c
275.3333 257.3519 267.2637 263.9969 250.3333 263.9969 c
237.1708 263.9969 222.246 261.6072 209.2667 257.4302 C
206 269.9969 L
f
205.5 170.003 m
219.6461 174.4877 235.6427 177.003 250.1667 177.003 c
276.047 177.003 290.3333 164.8824 290.3333 147.3364 c
290.3333 121.8623 273.7205 109.6697 223.5 109.6697 C
223.5 125.1697 L
263.601 125.1697 273.1667 131.3596 273.1667 146.5031 c
273.1667 155.7583 266.0326 161.5031 250.1667 161.5031 c
237.2987 161.5031 222.2687 159.1249 209.3333 155.0198 C
205.5 170.003 L
f
U
u
275.75 574.0802 m
271.7485 579.7677 268.2603 584.5282 264.3666 589.6136 C
268.1667 592.3303 L
272.1354 587.1532 275.821 582.1299 279.6667 576.6636 C
275.75 574.0802 L
f
273.9999 473.8605 m
269.9553 479.6135 266.1457 484.8063 262.1332 490.0272 C
267.3333 493.6606 L
271.3958 488.3689 275.4068 482.9127 279.3333 477.3272 C
273.9999 473.8605 L
f
272.25 370.65 m
268.1623 376.4686 264.0312 382.0937 259.9 387.45 C
266.5 392 L
270.6562 386.5937 274.9926 380.7047 279 375 C
272.25 370.65 L
f
270.5 270.4302 m
266.3691 276.3145 261.9166 282.3719 257.6666 287.8636 C
265.6667 293.3303 L
269.9166 287.8095 274.5784 281.4876 278.6667 275.6636 C
270.5 270.4302 L
f
268.7501 169.2198 m
264.5761 175.1696 259.8022 181.6593 255.4334 187.2864 C
264.8334 193.6697 L
269.1771 188.0343 274.1642 181.2796 278.3334 175.3364 C
268.7501 169.2198 L
f
U
u
291.5833 578.0802 m
287.5819 583.7677 284.0937 588.5282 280.2 593.6136 C
284 596.3303 L
287.9687 591.1532 291.6543 586.1299 295.5 580.6636 C
291.5833 578.0802 L
f
290.6666 477.8605 m
286.6221 483.6135 282.8124 488.8063 278.7999 494.0272 C
284 497.6606 L
288.0625 492.3689 292.0735 486.9127 296 481.3272 C
290.6666 477.8605 L
f
289.75 375.65 m
285.6623 381.4686 281.5312 387.0937 277.4 392.45 C
284 397 L
288.1562 391.5937 292.4926 385.7047 296.5 380 C
289.75 375.65 L
f
288.8333 274.4302 m
284.7025 280.3145 280.25 286.3719 276 291.8636 C
284 297.3303 L
288.25 291.8095 292.9117 285.4876 297 279.6636 C
288.8333 274.4302 L
f
287.9167 173.2198 m
283.7428 179.1696 278.9688 185.6593 274.6 191.2864 C
284 197.6697 L
288.3437 192.0343 293.3309 185.2796 297.5 179.3364 C
287.9167 173.2198 L
f
U
205 70 m
219.3082 74.4764 235.4937 77 250 77 c
276.4929 77 291 64.7086 291 47 c
291 21.1948 274.3292 9 223 9 C
223 27 L
262.4994 27 271 32.1915 271 46 c
271 54.1555 264.8013 59 250 59 c
237.4266 59 222.2915 56.6332 209.4 52.6 C
205 70 L
f
287 72 m
282.7829 78.0155 277.6875 84.9375 273.2 90.7 C
284 98 L
288.4375 92.25 293.75 85.0625 298 79 C
287 72 L
f
267 68 m
262.7829 74.0155 257.6875 80.9375 253.2 86.7 C
264 94 L
268.4375 88.25 273.75 81.0625 278 75 C
267 68 L
f
u
359.8667 583.5636 m
342.0286 578.5342 328.6667 561.6613 328.6667 543.9969 c
328.6667 522.738 341.4337 510.4969 361 510.4969 C
364.5138 510.4969 367.4375 510.8199 370.6667 511.4969 C
369.9 516.7137 L
366.92 516.0837 364.3274 515.8303 361.3334 515.8303 c
344.5402 515.8303 334.3334 526.3461 334.3334 544.3303 c
334.3334 562.6635 351.3913 579.9969 370.5 579.9969 C
388.5 579.9969 L
388.5 585.3303 L
307.8333 585.3303 L
307.8333 579.9969 L
360 579.9969 L
359.8667 583.5636 L
f
359.7333 483.5272 m
341.5621 478.4039 328.3333 461.6729 328.3333 443.9939 c
328.3333 422.5023 341.3193 409.9939 361 409.9939 C
364.7336 409.9939 367.9375 410.3272 371.3334 410.9939 C
370.4 418.5273 L
367.3735 417.9258 364.6624 417.6607 361.6667 417.6607 c
346.2392 417.6607 336.6668 427.4774 336.6668 444.6606 c
336.6668 461.8624 352.6404 477.9938 371 477.9938 C
389 477.9938 L
389 485.6606 L
307.6667 485.6606 L
307.6667 477.9938 L
360 477.9938 L
359.7333 483.5272 L
f
359.6 383.5 m
341.0957 378.2827 328 361.6937 328 344 c
328 322.2759 341.2048 309.5 361 309.5 C
364.9533 309.5 368.4375 309.8437 372 310.5 C
370.9 320.35 L
367.827 319.777 364.9974 319.5 362 319.5 c
347.9381 319.5 339 328.6176 339 345 c
339 361.0706 353.8894 376 371.5 376 C
389.5 376 L
389.5 386 L
307.5 386 L
307.5 376 L
360 376 L
359.6 383.5 L
f
359.4667 283.4636 m
340.6292 278.1524 327.6667 261.7053 327.6667 243.9969 c
327.6667 222.0402 341.0904 208.9969 361 208.9969 C
365.1731 208.9969 368.9375 209.3511 372.6667 209.9969 C
371.4 222.1636 L
368.2805 221.6192 365.3325 221.3303 362.3334 221.3303 c
349.6372 221.3303 341.3334 229.7489 341.3334 245.3303 c
341.3334 260.2695 355.1386 273.9969 372 273.9969 C
390 273.9969 L
390 286.3303 L
307.3333 286.3303 L
307.3333 273.9969 L
360 273.9969 L
359.4667 283.4636 L
f
359.3333 183.4364 m
340.1628 178.0312 327.3334 161.7261 327.3334 144.003 c
327.3334 121.8138 340.9759 108.5031 361 108.5031 C
365.3929 108.5031 369.4375 108.8676 373.3333 109.5031 C
371.9 123.9863 L
368.734 123.4703 365.6675 123.1697 362.6667 123.1697 c
351.3361 123.1697 343.6666 130.8891 343.6666 145.6697 c
343.6666 159.4777 356.3876 172.0031 372.5 172.0031 C
390.5 172.0031 L
390.5 186.6697 L
307.1667 186.6697 L
307.1667 172.0031 L
360 172.0031 L
359.3333 183.4364 L
f
U
u
376.0833 547.9135 m
372.0819 553.601 368.5937 558.3615 364.6999 563.4469 C
368.5 566.1636 L
372.4687 560.9865 376.1543 555.9632 380 550.4969 C
376.0833 547.9135 L
f
374.6666 445.5271 m
370.622 451.2801 366.8124 456.4729 362.7999 461.6938 C
368 465.3272 L
372.0625 460.0355 376.0735 454.5793 380 448.9938 C
374.6666 445.5271 L
f
373.25 343.15 m
369.1623 348.9686 365.0312 354.5937 360.9 359.95 C
367.5 364.5 L
371.6562 359.0937 375.9926 353.2047 380 347.5 C
373.25 343.15 L
f
371.8333 240.7635 m
367.7025 246.6478 363.2499 252.7052 359 258.1969 C
367 263.6636 L
371.25 258.1428 375.9117 251.8209 380 245.9969 C
371.8333 240.7635 L
f
370.4167 138.3865 m
366.2428 144.3363 361.4688 150.826 357.1001 156.4531 C
366.5 162.8364 L
370.8438 157.201 375.8309 150.4463 380 144.5031 C
370.4167 138.3865 L
f
U
u
392.4166 552.2469 m
388.4152 557.9343 384.927 562.6948 381.0333 567.7803 C
384.8333 570.4969 L
388.8021 565.3199 392.4877 560.2965 396.3334 554.8302 C
392.4166 552.2469 L
f
391.3333 450.1938 m
387.2887 455.9468 383.4791 461.1396 379.4666 466.3605 C
384.6667 469.9939 L
388.7292 464.7022 392.7402 459.246 396.6667 453.6605 C
391.3333 450.1938 L
f
390.25 348.15 m
386.1623 353.9686 382.0312 359.5937 377.9 364.95 C
384.5 369.5 L
388.6562 364.0937 392.9926 358.2047 397 352.5 C
390.25 348.15 L
f
389.1666 246.0969 m
385.0358 251.9811 380.5833 258.0386 376.3333 263.5302 C
384.3333 268.9969 L
388.5833 263.4761 393.2451 257.1542 397.3334 251.3302 C
389.1666 246.0969 L
f
388.0834 144.0531 m
383.9094 150.003 379.1355 156.4927 374.7667 162.1197 C
384.1667 168.5031 L
388.5104 162.8676 393.4975 156.113 397.6667 150.1697 C
388.0834 144.0531 L
f
U
359.2 83.4 m
339.6963 77.9009 327 61.7378 327 44 c
327 21.5781 340.8615 8 361 8 c
365.6127 8 369.9375 8.375 374 9 C
372.4 25.8 L
369.1875 25.3125 366.0026 25 363 25 c
353.0352 25 346 32.0204 346 46 c
346 58.6767 357.6367 70 373 70 C
391 70 L
391 87 L
307 87 L
307 70 L
360 70 L
359.2 83.4 L
f
387 42 m
382.7829 48.0155 377.6875 54.9375 373.2 60.7 C
384 68 L
388.4375 62.25 393.75 55.0625 398 49 C
387 42 L
f
369 36 m
364.7829 42.0155 359.6875 48.9375 355.2 54.7 C
366 62 L
370.4375 56.25 375.75 49.0625 380 43 C
369 36 L
f
u
1 D
439 554.1636 m
435.8339 566.13 432.9567 579.3911 431 591.1636 C
425.3666 590.2636 L
427.3611 578.2641 430.3167 564.908 433.5166 552.8136 C
439 554.1636 L
f
440.0001 454.3273 m
436.8339 466.2937 433.9568 479.5548 432.0001 491.3273 C
423.7332 490.0272 L
425.7376 477.9678 428.702 464.5399 431.9332 452.3272 C
440.0001 454.3273 L
f
441 354.5 m
437.8339 366.4664 434.9567 379.7275 433 391.5 C
422.1 389.8 L
424.1143 377.6808 427.0874 364.181 430.35 351.85 C
441 354.5 L
f
442 254.6636 m
438.8339 266.63 435.9567 279.8911 434 291.6636 C
420.4666 289.5636 L
422.4909 277.3846 425.4727 263.813 428.7666 251.3636 C
442 254.6636 L
f
443 154.8364 m
439.8339 166.8028 436.9567 180.0639 435 191.8364 C
418.8334 189.3364 L
420.8676 177.0975 423.8582 163.4541 427.1834 150.8864 C
443 154.8364 L
f
U
u
480.6833 567.3303 m
428.3648 557.0324 414.1667 545.3934 414.1667 530.9969 c
414.1667 518.2198 425.6954 509.4969 448.6667 509.4969 c
461.7711 509.4969 470.1354 510.2678 482.1667 512.4969 C
481.3833 517.8137 L
469.4995 515.6097 461.369 514.8303 448.6667 514.8303 c
429.4906 514.8303 420.0001 521.5088 420.0001 530.9969 c
420.0001 542.5754 433.3536 552.5178 481.85 562.0302 C
480.6833 567.3303 L
f
480.3666 467.6606 m
427.152 456.9108 413.3333 445.4656 413.3333 430.9939 c
413.3333 417.6015 424.6486 408.9939 448.3333 408.9939 c
461.4189 408.9939 470.2708 409.7855 482.3333 411.9939 C
481.2667 419.6273 L
469.5507 417.479 460.9237 416.6607 448.3333 416.6607 c
430.2692 416.6607 422.0001 422.4537 422.0001 430.9939 c
422.0001 441.4988 434.0127 450.4187 482 460.0605 C
480.3666 467.6606 L
f
480.05 368 m
425.9393 356.7984 412.5 345.547 412.5 331 c
412.5 316.9925 423.6018 308.5 448 308.5 c
461.0666 308.5 470.4062 309.3125 482.5 311.5 C
481.15 321.45 L
469.6019 319.3573 460.4784 318.5 448 318.5 c
431.0477 318.5 424 323.4077 424 331 c
424 340.4315 434.6718 348.329 482.15 358.1 C
480.05 368 L
f
479.7333 268.3303 m
424.7264 256.6768 411.6667 245.6193 411.6667 230.9969 c
411.6667 216.3743 422.555 207.9969 447.6667 207.9969 c
460.7144 207.9969 470.5417 208.8303 482.6667 210.9969 C
481.0333 223.2637 L
469.6531 221.2266 460.033 220.3303 447.6667 220.3303 c
431.8263 220.3303 426.0001 224.3527 426.0001 230.9969 c
426.0001 239.355 435.3309 246.2299 482.3 256.1302 C
479.7333 268.3303 L
f
479.4167 168.6697 m
423.5137 156.5644 410.8334 145.7007 410.8334 131.003 c
410.8334 115.7652 421.5083 107.5031 447.3334 107.5031 c
460.3621 107.5031 470.6771 108.3572 482.8333 110.5031 C
480.9167 125.0863 L
469.7043 123.1049 459.5877 122.1697 447.3334 122.1697 c
432.6048 122.1697 428 125.3067 428 131.003 c
428 138.2877 435.99 144.1402 482.45 154.1698 C
479.4167 168.6697 L
f
U
u
473.5 575.6636 m
469.6543 581.1299 465.9687 586.1532 462 591.3303 C
458.1999 588.6136 L
462.0937 583.5282 465.5818 578.7677 469.5833 573.0802 C
473.5 575.6636 L
f
473 475.3272 m
469.0734 480.9127 465.0625 486.3689 460.9999 491.6606 C
455.7998 488.0272 L
459.8124 482.8063 463.622 477.6135 467.6665 471.8605 C
473 475.3272 L
f
472.5 375 m
468.4926 380.7047 464.1562 386.5937 460 392 C
453.4 387.45 L
457.5312 382.0937 461.6623 376.4686 465.75 370.65 C
472.5 375 L
f
472 274.6636 m
467.9117 280.4876 463.25 286.8095 459 292.3303 C
450.9999 286.8636 L
455.2499 281.3719 459.7024 275.3145 463.8333 269.4302 C
472 274.6636 L
f
471.5 174.3364 m
467.3309 180.2796 462.3438 187.0343 458 192.6697 C
448.6001 186.2864 L
452.9688 180.6593 457.7427 174.1696 461.9167 168.2198 C
471.5 174.3364 L
f
U
u
489.3334 579.8303 m
485.4877 585.2965 481.8021 590.3199 477.8333 595.497 C
474.0333 592.7803 L
477.927 587.6949 481.4152 582.9344 485.4166 577.2469 C
489.3334 579.8303 L
f
489.6667 479.6606 m
485.7402 485.2461 481.7292 490.7023 477.6667 495.9939 C
472.4666 492.3605 L
476.4791 487.1397 480.2887 481.9469 484.3333 476.1938 C
489.6667 479.6606 L
f
490 379.5 m
485.9926 385.2047 481.6562 391.0937 477.5 396.5 C
470.9 391.95 L
475.0312 386.5937 479.1623 380.9686 483.25 375.15 C
490 379.5 L
f
490.3334 279.3303 m
486.2451 285.1543 481.5833 291.4761 477.3333 296.997 C
469.3333 291.5303 L
473.5833 286.0386 478.0358 279.9812 482.1666 274.0969 C
490.3334 279.3303 L
f
490.6667 179.1697 m
486.4975 185.113 481.5104 191.8676 477.1667 197.503 C
467.7667 191.1197 L
472.1355 185.4926 476.9094 179.003 481.0834 173.0531 C
490.6667 179.1697 L
f
U
444 55 m
440.8339 66.9664 437.9567 80.2275 436 92 C
417.2 89.1 L
419.2442 76.8013 422.2435 63.0861 425.6 50.4 C
444 55 L
f
479.1 69 m
422.3009 56.4428 410 45.773 410 31 c
410 15.147 420.4614 7 447 7 c
460.0099 7 470.8125 7.875 483 10 C
480.8 26.9 L
469.7555 24.9743 459.1424 24 447 24 c
433.3834 24 430 26.2517 430 31 c
430 37.2112 436.6491 42.0411 482.6 52.2 C
479.1 69 L
f
491 79 m
486.75 85.0625 481.4375 92.25 477 98 C
466.2 90.7 L
470.6875 84.9375 475.7829 78.0155 480 72 C
491 79 L
f
471 74 m
466.75 80.0625 461.4375 87.25 457 93 C
446.2 85.7 L
450.6875 79.9375 455.7829 73.0155 460 67 C
471 74 L
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
