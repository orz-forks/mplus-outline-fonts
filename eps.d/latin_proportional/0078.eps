%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (0078.eps)
%%CreationDate: (1/20/05) (2:57 PM)
%%BoundingBox: 0 0 800 1050
%%HiResBoundingBox: 0 0 800 1050
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 394.5 530 394.5 530
%AI3_TileBox: -180.5 -228 971.5 1302
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 1188 1680
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -373.5 1058 -2 794 557 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%AI5_ViewPalette: 0 1 -2 4331 4334 0 1 5 whole view
%%PageOrigin:-180.5 -228
%%AI3_PaperRect:-19 1615 1171 -68
%%AI3_Margin:19 -85 -19 68
%AI7_GridSettings: 0.5 10 0.5 10 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 0 79 128 255 Lb
(\203\214\203C\203\204\201[1) Ln
0 A
u
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 900 m
100 1050 L
0 1050 L
0 900 L
100 900 L
n
200 900 m
200 1050 L
100 1050 L
100 900 L
200 900 L
n
300 900 m
300 1050 L
200 1050 L
200 900 L
300 900 L
n
400 900 m
400 1050 L
300 1050 L
300 900 L
400 900 L
n
500 900 m
500 1050 L
400 1050 L
400 900 L
500 900 L
n
600 900 m
600 1050 L
500 1050 L
500 900 L
600 900 L
n
700 900 m
700 1050 L
600 1050 L
600 900 L
700 900 L
n
800 900 m
800 1050 L
700 1050 L
700 900 L
800 900 L
n
100 750 m
100 900 L
0 900 L
0 750 L
100 750 L
n
200 750 m
200 900 L
100 900 L
100 750 L
200 750 L
n
300 750 m
300 900 L
200 900 L
200 750 L
300 750 L
n
400 750 m
400 900 L
300 900 L
300 750 L
400 750 L
n
500 750 m
500 900 L
400 900 L
400 750 L
500 750 L
n
600 750 m
600 900 L
500 900 L
500 750 L
600 750 L
n
700 750 m
700 900 L
600 900 L
600 750 L
700 750 L
n
800 750 m
800 900 L
700 900 L
700 750 L
800 750 L
n
100 600 m
100 750 L
0 750 L
0 600 L
100 600 L
n
200 600 m
200 750 L
100 750 L
100 600 L
200 600 L
n
300 600 m
300 750 L
200 750 L
200 600 L
300 600 L
n
400 600 m
400 750 L
300 750 L
300 600 L
400 600 L
n
500 600 m
500 750 L
400 750 L
400 600 L
500 600 L
n
600 600 m
600 750 L
500 750 L
500 600 L
600 600 L
n
700 600 m
700 750 L
600 750 L
600 600 L
700 600 L
n
800 600 m
800 750 L
700 750 L
700 600 L
800 600 L
n
100 450 m
100 600 L
0 600 L
0 450 L
100 450 L
n
200 450 m
200 600 L
100 600 L
100 450 L
200 450 L
n
300 450 m
300 600 L
200 600 L
200 450 L
300 450 L
n
400 450 m
400 600 L
300 600 L
300 450 L
400 450 L
n
500 450 m
500 600 L
400 600 L
400 450 L
500 450 L
n
600 450 m
600 600 L
500 600 L
500 450 L
600 450 L
n
700 450 m
700 600 L
600 600 L
600 450 L
700 450 L
n
800 450 m
800 600 L
700 600 L
700 450 L
800 450 L
n
100 300 m
100 450 L
0 450 L
0 300 L
100 300 L
n
200 300 m
200 450 L
100 450 L
100 300 L
200 300 L
n
300 300 m
300 450 L
200 450 L
200 300 L
300 300 L
n
400 300 m
400 450 L
300 450 L
300 300 L
400 300 L
n
500 300 m
500 450 L
400 450 L
400 300 L
500 300 L
n
600 300 m
600 450 L
500 450 L
500 300 L
600 300 L
n
700 300 m
700 450 L
600 450 L
600 300 L
700 300 L
n
800 300 m
800 450 L
700 450 L
700 300 L
800 300 L
n
100 150 m
100 300 L
0 300 L
0 150 L
100 150 L
n
200 150 m
200 300 L
100 300 L
100 150 L
200 150 L
n
300 150 m
300 300 L
200 300 L
200 150 L
300 150 L
n
400 150 m
400 300 L
300 300 L
300 150 L
400 150 L
n
500 150 m
500 300 L
400 300 L
400 150 L
500 150 L
n
600 150 m
600 300 L
500 300 L
500 150 L
600 150 L
n
700 150 m
700 300 L
600 300 L
600 150 L
700 150 L
n
800 150 m
800 300 L
700 300 L
700 150 L
800 150 L
n
100 0 m
100 150 L
0 150 L
0 0 L
100 0 L
n
200 0 m
200 150 L
100 150 L
100 0 L
200 0 L
n
300 0 m
300 150 L
200 150 L
200 0 L
300 0 L
n
400 0 m
400 150 L
300 150 L
300 0 L
400 0 L
n
500 0 m
500 150 L
400 150 L
400 0 L
500 0 L
n
600 0 m
600 150 L
500 150 L
500 0 L
600 0 L
n
700 0 m
700 150 L
600 150 L
600 0 L
700 0 L
n
800 0 m
800 150 L
700 150 L
700 0 L
800 0 L
n
U
0 O
0 g
1 D
405 1022 m
402 1022 L
402 934 L
405 934 L
405 1022 L
f
27.1 965.2639 m
48.1 940 L
52 940 L
28.95 967.5987 L
51 994 L
47.1 994 L
27.1 969.9335 L
26.9 969.9335 L
6.9 994 L
3 994 L
25.05 967.5987 L
2 940 L
5.9 940 L
26.9 965.2639 L
27.1 965.2639 L
f
129.6 944.4 m
105.4 994 L
102 994 L
128.1 940.4 L
120.8131 922.3641 117.755 920 111 920 c
108.8784 920 106.4375 920.625 103.8 921.9 C
103 919 L
106.0625 917.625 108.6817 917 111 917 c
119.4826 917 123.1002 919.9947 131.1828 940 C
153 994 L
149.8 994 L
129.8 944.4 L
129.6 944.4 L
f
240 990.8 m
202 943 L
202 940 L
244 940 L
244 943 L
206 943 L
206 943.2 L
244 991 L
244 994 L
202 994 L
202 991 L
240 991 L
240 990.8 L
f
316 987.5 m
316 1008 L
316 1015.8599 319.1401 1019 325 1019 c
331 1019 L
331 1022 L
325 1022 L
317.4773 1022 313 1017.5229 313 1008 C
313 987.5 L
313 980.8069 308.8597 976.5 304 976.5 C
302 976.5 L
302 973.5 L
304 973.5 L
308.8597 973.5 313 969.1931 313 962.5 C
313 942 L
313 932.4771 317.4773 928 325 928 C
331 928 L
331 931 L
325 931 l
319.1401 931 316 934.1401 316 942 C
316 962.5 L
316 969.2495 313.1874 973.0529 308.2488 975 C
313.1874 976.9471 316 980.7505 316 987.5 C
f
524.7512 975 m
519.8126 973.0529 517 969.2495 517 962.5 C
517 942 L
517 934.1401 513.8599 931 508 931 c
502 931 L
502 928 L
508 928 L
515.5227 928 520 932.4771 520 942 C
520 962.5 L
520 969.1931 524.1403 973.5 529 973.5 C
531 973.5 L
531 976.5 L
529 976.5 L
524.1403 976.5 520 980.8069 520 987.5 C
520 1008 L
520 1017.5229 515.5227 1022 508 1022 C
502 1022 L
502 1019 L
508 1019 l
513.8599 1019 517 1015.8599 517 1008 C
517 987.5 L
517 980.7505 519.8126 976.9471 524.7512 975 C
f
628.7127 969.9104 m
633.5923 965.2069 638.363 963.3365 644.1815 963.8456 c
649.5874 964.3185 653.7459 966.6572 657.5073 971.3807 C
655.9367 974.27 L
652.4575 969.4905 648.8637 967.2667 643.92 966.8342 c
638.9764 966.4016 635.0511 967.9676 630.7947 972.0703 c
625.915 976.7737 621.1443 978.6442 615.3258 978.1351 c
609.92 977.6621 605.7614 975.3235 602 970.6 C
603.5706 967.7107 L
607.0499 972.4902 610.6436 974.714 615.5873 975.1465 c
620.5309 975.579 624.4563 974.0131 628.7127 969.9104 c
f
130 797.1622 m
108.1667 843.9954 L
102 843.9954 L
127.3448 790.4311 L
120.7935 774.0854 117.9521 771.8955 111.5 771.8955 c
109.2528 771.8955 106.6354 772.5371 103.95 773.8121 C
103 768.9954 L
106.2708 767.6204 109.141 766.9954 112 766.9954 c
121.2207 766.9954 125.1763 770.2156 133.0433 789.9954 C
154.5001 843.9954 L
148.5 843.9954 L
130.2 797.1622 L
130 797.1622 L
f
130.4 649.9243 m
110.9335 693.9908 L
102 693.9908 L
126.5897 640.4621 L
120.774 625.8067 118.1492 623.791 112 623.791 c
109.6273 623.791 106.8333 624.4493 104.1 625.7243 C
103 618.9908 L
106.4792 617.6158 109.6003 616.9908 113.0001 616.9908 c
122.9588 616.9908 127.2525 620.4365 134.9039 639.9908 C
156.0001 693.9908 L
147.1999 693.9908 L
130.6 649.9243 L
130.4 649.9243 L
f
130.8 502.7 m
113.7 544 L
102 544 L
125.8346 490.5069 L
120.7545 477.5416 118.3462 475.7 112.5 475.7 c
110.0017 475.7 107.0312 476.375 104.2499 477.65 C
103 469 L
106.6875 467.625 110.0596 467 114 467 c
124.6968 467 129.3285 470.6711 136.7643 490 C
157.5 544 L
145.9 544 L
131 502.7 L
130.8 502.7 L
f
131.2 355.4622 m
116.4667 393.9954 L
102 393.9954 L
125.0794 340.538 L
120.7349 329.263 118.5433 327.5955 113 327.5955 c
110.3762 327.5955 107.2292 328.2871 104.3999 329.5621 C
103 318.9954 L
106.8958 317.6204 110.5189 316.9954 115 316.9954 c
126.4349 316.9954 131.4046 320.8921 138.6248 339.9954 C
159.0001 393.9954 L
144.6 393.9954 L
131.4 355.4622 L
131.2 355.4622 L
f
131.6 208.2378 m
119.2333 244.0046 L
102 244.0046 L
124.3244 190.5827 L
120.7153 180.9979 118.7404 179.5045 113.5 179.5045 c
110.7506 179.5045 107.4271 180.2129 104.5499 181.4879 C
103 169.0046 L
107.1042 167.6296 110.9782 167.0046 116 167.0046 c
128.1729 167.0046 133.4806 171.1267 140.4852 190.0046 C
160.5 244.0046 L
143.3 244.0046 L
131.8 208.2378 L
131.6 208.2378 L
f
132 61 m
122 94 L
102 94 L
123.5692 40.6138 L
120.6958 32.7192 118.9375 31.4 114 31.4 c
111.1251 31.4 107.625 32.125 104.6999 33.4 C
103 19 L
107.3125 17.625 111.4375 17 117 17 c
129.911 17 135.5568 21.3476 142.3458 40 C
162 94 L
142 94 L
132.2 61 L
132 61 L
f
238 839.1287 m
202 794.6621 L
202 789.9954 L
245.3334 789.9954 L
245.3334 794.6621 L
209.3334 794.6621 L
209.3334 794.8621 L
245.3334 839.3287 L
245.3334 843.9954 L
202 843.9954 L
202 839.3287 L
238 839.3287 L
238 839.1287 L
f
235.9999 687.4574 m
202 646.3243 L
202 639.9908 L
246.6667 639.9908 L
246.6667 646.3243 L
212.6669 646.3243 L
212.6669 646.5243 L
246.6667 687.6574 L
246.6667 693.9908 L
202 693.9908 L
202 687.6574 L
235.9999 687.6574 L
235.9999 687.4574 L
f
234 535.8 m
202 498 L
202 490 L
248 490 L
248 498 L
216 498 L
216 498.2 L
248 536 L
248 544 L
202 544 L
202 536 L
234 536 L
234 535.8 L
f
232 384.1287 m
202 349.6621 L
202 339.9954 L
249.3334 339.9954 L
249.3334 349.6621 L
219.3334 349.6621 L
219.3334 349.8621 L
249.3334 384.3287 L
249.3334 393.9954 L
202 393.9954 L
202 384.3287 L
232 384.3287 L
232 384.1287 L
f
230.0001 232.4713 m
202 201.3379 L
202 190.0046 L
250.6666 190.0046 L
250.6666 201.3379 L
222.6666 201.3379 L
222.6666 201.5379 L
250.6666 232.6713 L
250.6666 244.0046 L
202 244.0046 L
202 232.6713 L
230.0001 232.6713 L
230.0001 232.4713 L
f
226 53.2 m
252 81 L
252 94 L
202 94 L
202 81 L
228 81 L
228 80.8 L
202 53 L
202 40 L
252 40 L
252 53 L
226 53 L
226 53.2 L
f
628.7432 818.7922 m
633.7882 813.8796 638.8278 811.8924 644.887 812.4281 c
650.6023 812.9336 655.045 815.4991 658.9795 820.5921 C
656.7845 825.4439 L
653.0991 820.4935 649.115 817.986 644.4483 817.5752 c
639.9273 817.1777 636.3031 818.5658 632.2363 822.5121 c
627.1913 827.4245 622.1516 829.4118 616.0925 828.8761 c
610.3772 828.3705 605.9345 825.8051 602 820.7121 C
604.195 815.8603 L
607.8804 820.8107 611.8645 823.3182 616.5311 823.729 c
621.0521 824.1264 624.6764 822.7384 628.7432 818.7922 c
f
628.7737 667.6739 m
633.984 662.5523 639.2927 660.4483 645.5925 661.0106 c
651.6172 661.5488 656.344 664.341 660.4516 669.8035 C
657.6322 676.6178 L
653.7408 671.4966 649.3662 668.7053 644.9766 668.3162 c
640.8782 667.9539 637.5551 669.1639 633.678 672.9538 c
628.4676 678.0754 623.1589 680.1794 616.8591 679.6171 c
610.8345 679.0789 606.1075 676.2868 602 670.8242 C
604.8194 664.01 L
608.7109 669.1311 613.0854 671.9225 617.475 672.3115 c
621.5734 672.6738 624.8965 671.4638 628.7737 667.6739 c
f
628.8041 516.5695 m
634.1799 511.2388 639.7575 509.018 646.2979 509.6069 c
652.632 510.1778 657.643 513.1967 661.9237 519.0287 C
658.4799 527.8053 L
654.3824 522.5133 649.6175 519.4382 645.5048 519.0708 c
641.8291 518.7436 638.807 519.7758 635.1195 523.4092 c
629.7438 528.7399 624.1661 530.9607 617.6257 530.3718 c
611.2917 529.8009 606.2806 526.7821 602 520.95 C
605.4438 512.1735 L
609.5413 517.4654 614.3062 520.5405 618.4188 520.9079 c
622.0946 521.235 625.1166 520.203 628.8041 516.5695 c
f
628.8346 365.4513 m
634.3757 359.9115 640.2223 357.5739 647.0034 358.1894 c
653.6469 358.7929 658.9421 362.0386 663.3958 368.2402 C
659.3276 378.9792 L
655.024 373.5164 649.8687 370.1575 646.0331 369.8118 c
642.78 369.5198 640.059 370.374 636.5611 373.851 c
631.02 379.3907 625.1734 381.7283 618.3924 381.1128 c
611.7489 380.5093 606.4537 377.2637 602 371.0621 C
606.0681 360.3231 L
610.3718 365.7859 615.527 369.1448 619.3627 369.4904 c
622.6158 369.7824 625.3368 368.9283 628.8346 365.4513 c
f
628.8651 214.3468 m
634.5715 208.598 640.6871 206.1437 647.7088 206.7858 c
654.6617 207.422 660.241 210.8943 664.8678 217.4654 C
660.1752 230.1667 L
655.6656 224.533 650.1199 220.8904 646.5613 220.5665 c
643.7308 220.3096 641.3109 220.9858 638.0027 224.3064 c
632.2962 230.0552 626.1806 232.5096 619.1589 231.8675 c
612.2061 231.2313 606.6267 227.7591 602 221.1879 C
606.6925 208.4867 L
611.2023 214.1202 616.7478 217.7629 620.3064 218.0868 c
623.137 218.3437 625.5569 217.6675 628.8651 214.3468 c
f
628.8956 63.2286 m
634.7674 57.2707 641.152 54.6996 648.4143 55.3683 c
655.6766 56.0371 661.5401 59.7362 666.34 66.6768 c
661.023 81.3406 l
656.3072 75.5361 650.3712 71.6097 647.0896 71.3075 c
644.6817 71.0857 642.5629 71.584 639.4443 74.7482 c
633.5725 80.7061 627.1879 83.2772 619.9256 82.6085 c
612.6633 81.9397 606.7998 78.2407 602 71.3 c
607.3169 56.6363 l
612.0328 62.4407 617.9687 66.3671 621.2503 66.6693 c
623.6582 66.8911 625.777 66.3929 628.8956 63.2286 c
f
407.3334 872.9954 m
402 872.9954 L
402 783.9954 L
407.3334 783.9954 L
407.3334 872.9954 L
f
409.6668 723.9909 m
402 723.9909 L
402 633.9908 L
409.6668 633.9908 L
409.6668 723.9909 L
f
412 575 m
402 575 L
402 484 L
412 484 L
412 575 L
f
414.3334 425.9954 m
402 425.9954 L
402 333.9954 L
414.3334 333.9954 L
414.3334 425.9954 L
f
416.6666 277.0045 m
402 277.0045 L
402 184.0046 L
416.6666 184.0046 L
416.6666 277.0045 L
f
419 128 m
402 128 L
402 34 L
419 34 L
419 128 L
f
28.0167 813.3819 m
47.0833 789.9954 L
53.8334 789.9954 L
31.2917 817.4943 L
52.8334 843.9954 L
46.0833 843.9954 L
28.0167 821.7734 L
27.8167 821.7734 L
9.7501 843.9954 L
3 843.9954 L
24.5416 817.4943 L
2 789.9954 L
8.7501 789.9954 L
27.8167 813.3819 L
28.0167 813.3819 L
f
28.9334 661.5 m
46.0666 639.9908 L
55.6668 639.9908 L
33.6335 667.39 L
54.6668 693.9908 L
45.0666 693.9908 L
28.9334 673.6133 L
28.7334 673.6133 L
12.6002 693.9908 L
3 693.9908 L
24.0333 667.39 L
2 639.9908 L
11.6002 639.9908 L
28.7334 661.5 L
28.9334 661.5 L
f
29.85 509.6319 m
45.05 490 L
57.5 490 L
35.975 517.2993 L
56.5 544 L
44.05 544 L
29.85 525.4667 L
29.65 525.4667 L
15.45 544 L
3 544 L
23.525 517.2993 L
2 490 L
14.45 490 L
29.65 509.6319 L
29.85 509.6319 L
f
30.7667 357.75 m
44.0333 339.9954 L
59.3334 339.9954 L
38.3167 367.195 L
58.3334 393.9954 L
43.0333 393.9954 L
30.7667 377.3066 L
30.5667 377.3066 L
18.3001 393.9954 L
3 393.9954 L
23.0166 367.195 L
2 339.9954 L
17.3001 339.9954 L
30.5667 357.75 L
30.7667 357.75 L
f
31.6833 205.8819 m
43.0167 190.0046 L
61.1666 190.0046 L
40.6583 217.1044 L
60.1666 244.0046 L
42.0167 244.0046 L
31.6833 229.1601 L
31.4833 229.1601 L
21.1499 244.0046 L
3 244.0046 L
22.5084 217.1044 L
2 190.0046 L
20.1499 190.0046 L
31.4833 205.8819 L
31.6833 205.8819 L
f
32.6 54 m
42 40 L
63 40 L
43 67 L
62 94 L
41 94 L
32.6 81 L
32.4 81 L
24 94 L
3 94 L
22 67 L
2 40 L
23 40 L
32.4 54 L
32.6 54 L
f
302 822.7454 m
304 822.7454 L
308.9708 822.7454 313 818.5496 313 811.7454 C
313 791.4954 L
313 781.9725 317.4773 777.4954 325.3334 777.4954 C
333.0001 777.4954 L
333.0001 781.9954 L
327.3334 781.9954 l
321.1179 781.9954 318.3334 784.78 318.3334 792.6621 C
318.3334 812.2454 L
318.3334 819.1304 315.3229 823.2062 310.0822 825.2454 C
315.3229 827.2847 318.3334 831.3604 318.3334 838.2454 C
318.3334 857.8287 L
318.3334 865.7109 321.1179 868.4954 327.3334 868.4954 c
333.0001 868.4954 L
333.0001 872.9954 L
325.3334 872.9954 L
317.4773 872.9954 313 868.5183 313 858.9954 C
313 838.7454 L
313 831.9412 308.9708 827.7454 304 827.7454 C
302 827.7454 L
302 822.7454 L
f
302 671.9908 m
304 671.9908 L
309.0819 671.9908 313 667.9061 313 660.9908 C
313 640.9908 L
313 631.4679 317.4773 626.9908 325.6667 626.9908 C
335.0001 626.9908 L
335.0001 632.9909 L
329.6668 632.9909 l
323.0958 632.9909 320.6668 635.4199 320.6668 643.3242 C
320.6668 661.9908 L
320.6668 669.0113 317.4584 673.3594 311.9156 675.4909 C
317.4584 677.6223 320.6668 681.9704 320.6668 688.9909 C
320.6668 707.6575 L
320.6668 715.5619 323.0958 717.9908 329.6668 717.9908 c
335.0001 717.9908 L
335.0001 723.9909 L
325.6667 723.9909 L
317.4773 723.9909 313 719.5138 313 709.9909 C
313 689.9909 L
313 683.0756 309.0819 678.9909 304 678.9909 C
302 678.9909 L
302 671.9908 L
f
302 521.25 m
304 521.25 L
309.193 521.25 313 517.2764 313 510.25 C
313 490.5 L
313 480.9771 317.4773 476.5 326 476.5 C
337 476.5 L
337 484 L
332 484 l
325.0735 484 323 486.0734 323 494 C
323 511.75 L
323 518.906 319.5937 523.5264 313.7488 525.75 C
319.5937 527.9735 323 532.594 323 539.75 C
323 557.5 L
323 565.4266 325.0735 567.5 332 567.5 c
337 567.5 L
337 575 L
326 575 L
317.4773 575 313 570.5229 313 561 C
313 541.25 L
313 534.2236 309.193 530.25 304 530.25 C
302 530.25 L
302 521.25 L
f
302 370.4954 m
304 370.4954 L
309.3041 370.4954 313 366.6329 313 359.4954 C
313 339.9954 L
313 330.4725 317.4774 325.9954 326.3334 325.9954 C
339.0001 325.9954 L
339.0001 334.9954 L
334.3334 334.9954 l
327.0513 334.9954 325.3334 336.7133 325.3334 344.6621 C
325.3334 361.4954 L
325.3334 368.7869 321.7292 373.6797 315.5822 375.9954 C
321.7292 378.3111 325.3334 383.2039 325.3334 390.4954 C
325.3334 407.3287 L
325.3334 415.2776 327.0513 416.9954 334.3334 416.9954 c
339.0001 416.9954 L
339.0001 425.9954 L
326.3334 425.9954 L
317.4774 425.9954 313 421.5183 313 411.9954 C
313 392.4954 L
313 385.358 309.3041 381.4954 304 381.4954 C
302 381.4954 L
302 370.4954 L
f
302 219.7546 m
304 219.7546 L
309.4152 219.7546 313 216.0032 313 208.7546 C
313 189.5046 L
313 179.9817 317.4774 175.5046 326.6667 175.5046 C
341 175.5046 L
341 186.0045 L
336.6666 186.0045 l
329.0289 186.0045 327.6666 187.3668 327.6666 195.3379 C
327.6666 211.2546 L
327.6666 218.6816 323.8645 223.8467 317.4154 226.2546 C
323.8645 228.6624 327.6666 233.8276 327.6666 241.2545 C
327.6666 257.1712 L
327.6666 265.1423 329.0289 266.5046 336.6666 266.5046 c
341 266.5046 L
341 277.0045 L
326.6667 277.0045 L
317.4774 277.0045 313 272.5274 313 263.0045 C
313 243.7545 L
313 236.5059 309.4152 232.7545 304 232.7545 C
302 232.7545 L
302 219.7546 L
f
302 69 m
304 69 L
309.5263 69 313 65.3597 313 58 C
313 39 L
313 29.4771 317.4774 25 327 25 C
343 25 L
343 37 L
339 37 l
331.0068 37 330 38.0067 330 46 C
330 61 L
330 68.5625 326 74 319.2488 76.5 C
326 79 330 84.4375 330 92 C
330 107 L
330 114.9933 331.0068 116 339 116 c
343 116 L
343 128 L
327 128 L
317.4774 128 313 123.5229 313 114 C
313 95 L
313 87.6403 309.5263 84 304 84 C
302 84 L
302 69 L
f
524.9179 825.2454 m
519.6772 823.2062 516.6667 819.1304 516.6667 812.2454 C
516.6667 792.6621 L
516.6667 784.78 513.8821 781.9954 507.6667 781.9954 c
502 781.9954 L
502 777.4954 L
509.6667 777.4954 L
517.5227 777.4954 522.0001 781.9725 522.0001 791.4954 C
522.0001 811.7454 L
522.0001 818.5496 526.0292 822.7454 531.0001 822.7454 C
533.0001 822.7454 L
533.0001 827.7454 L
531.0001 827.7454 L
526.0292 827.7454 522.0001 831.9412 522.0001 838.7454 C
522.0001 858.9954 L
522.0001 868.5183 517.5227 872.9954 509.6667 872.9954 C
502 872.9954 L
502 868.4954 L
507.6667 868.4954 l
513.8821 868.4954 516.6667 865.7109 516.6667 857.8287 C
516.6667 838.2454 L
516.6667 831.3604 519.6772 827.2847 524.9179 825.2454 C
f
525.0845 675.4909 m
519.5417 673.3594 516.3333 669.0113 516.3333 661.9908 C
516.3333 643.3242 L
516.3333 635.4199 513.9043 632.9909 507.3333 632.9909 c
502 632.9909 L
502 626.9908 L
511.3334 626.9908 L
519.5228 626.9908 524.0001 631.4679 524.0001 640.9908 C
524.0001 660.9908 L
524.0001 667.9061 527.9182 671.9908 533.0001 671.9908 C
535.0001 671.9908 L
535.0001 678.9909 L
533.0001 678.9909 L
527.9182 678.9909 524.0001 683.0756 524.0001 689.9909 C
524.0001 709.9909 L
524.0001 719.5138 519.5228 723.9909 511.3334 723.9909 C
502 723.9909 L
502 717.9908 L
507.3333 717.9908 l
513.9043 717.9908 516.3333 715.5619 516.3333 707.6575 C
516.3333 688.9909 L
516.3333 681.9704 519.5417 677.6223 525.0845 675.4909 C
f
525.2512 525.75 m
519.4063 523.5264 516 518.906 516 511.75 C
516 494 L
516 486.0734 513.9265 484 507 484 c
502 484 L
502 476.5 L
513 476.5 L
521.5227 476.5 526 480.9771 526 490.5 C
526 510.25 L
526 517.2764 529.807 521.25 535 521.25 C
537 521.25 L
537 530.25 L
535 530.25 L
529.807 530.25 526 534.2236 526 541.25 C
526 561 L
526 570.5229 521.5227 575 513 575 C
502 575 L
502 567.5 L
507 567.5 l
513.9265 567.5 516 565.4266 516 557.5 C
516 539.75 L
516 532.594 519.4063 527.9735 525.2512 525.75 C
f
525.4179 375.9954 m
519.2709 373.6797 515.6667 368.7869 515.6667 361.4954 C
515.6667 344.6621 L
515.6667 336.7133 513.9488 334.9954 506.6667 334.9954 c
502 334.9954 L
502 325.9954 L
514.6667 325.9954 L
523.5227 325.9954 528.0001 330.4725 528.0001 339.9954 C
528.0001 359.4954 L
528.0001 366.6329 531.6959 370.4954 537.0001 370.4954 C
539.0001 370.4954 L
539.0001 381.4954 L
537.0001 381.4954 L
531.6959 381.4954 528.0001 385.358 528.0001 392.4954 C
528.0001 411.9954 L
528.0001 421.5183 523.5227 425.9954 514.6667 425.9954 C
502 425.9954 L
502 416.9954 L
506.6667 416.9954 l
513.9488 416.9954 515.6667 415.2776 515.6667 407.3287 C
515.6667 390.4954 L
515.6667 383.2039 519.2709 378.3111 525.4179 375.9954 C
f
525.5845 226.2546 m
519.1354 223.8467 515.3334 218.6816 515.3334 211.2546 C
515.3334 195.3379 L
515.3334 187.3668 513.971 186.0045 506.3334 186.0045 c
502 186.0045 L
502 175.5046 L
516.3333 175.5046 L
525.5225 175.5046 530 179.9817 530 189.5046 C
530 208.7546 L
530 216.0032 533.5847 219.7546 539 219.7546 C
541 219.7546 L
541 232.7545 L
539 232.7545 L
533.5847 232.7545 530 236.5059 530 243.7545 C
530 263.0045 L
530 272.5274 525.5225 277.0045 516.3333 277.0045 C
502 277.0045 L
502 266.5046 L
506.3334 266.5046 l
513.971 266.5046 515.3334 265.1423 515.3334 257.1712 C
515.3334 241.2545 L
515.3334 233.8276 519.1354 228.6624 525.5845 226.2546 C
f
543 84 m
541 84 L
535.4737 84 532 87.6403 532 95 C
532 114 L
532 123.5229 527.5226 128 518 128 C
502 128 L
502 116 L
506 116 l
513.9932 116 515 114.9933 515 107 C
515 92 L
515 84.4375 519 79 525.7512 76.5 C
519 74 515 68.5625 515 61 C
515 46 L
515 38.0067 513.9932 37 506 37 c
502 37 L
502 25 L
518 25 L
527.5226 25 532 29.4771 532 39 C
532 58 L
532 65.3597 535.4737 69 541 69 C
543 69 L
543 84 L
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
