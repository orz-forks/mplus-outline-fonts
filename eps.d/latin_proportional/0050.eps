%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (0050.eps)
%%CreationDate: (1/20/05) (4:45 PM)
%%BoundingBox: 0 0 800 1050
%%HiResBoundingBox: 0 0 800 1050
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 394.5 530 394.5 530
%AI3_TileBox: -180.5 -228 971.5 1302
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 1188 1680
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -373.5 1058 -2 794 557 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%AI5_ViewPalette: 0 1 -2 4331 4334 0 1 5 whole view
%%PageOrigin:-180.5 -228
%%AI3_PaperRect:-19 1615 1171 -68
%%AI3_Margin:19 -85 -19 68
%AI7_GridSettings: 0.5 10 0.5 10 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 0 79 128 255 Lb
(\203\214\203C\203\204\201[1) Ln
0 A
u
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 900 m
100 1050 L
0 1050 L
0 900 L
100 900 L
n
200 900 m
200 1050 L
100 1050 L
100 900 L
200 900 L
n
300 900 m
300 1050 L
200 1050 L
200 900 L
300 900 L
n
400 900 m
400 1050 L
300 1050 L
300 900 L
400 900 L
n
500 900 m
500 1050 L
400 1050 L
400 900 L
500 900 L
n
600 900 m
600 1050 L
500 1050 L
500 900 L
600 900 L
n
700 900 m
700 1050 L
600 1050 L
600 900 L
700 900 L
n
800 900 m
800 1050 L
700 1050 L
700 900 L
800 900 L
n
100 750 m
100 900 L
0 900 L
0 750 L
100 750 L
n
200 750 m
200 900 L
100 900 L
100 750 L
200 750 L
n
300 750 m
300 900 L
200 900 L
200 750 L
300 750 L
n
400 750 m
400 900 L
300 900 L
300 750 L
400 750 L
n
500 750 m
500 900 L
400 900 L
400 750 L
500 750 L
n
600 750 m
600 900 L
500 900 L
500 750 L
600 750 L
n
700 750 m
700 900 L
600 900 L
600 750 L
700 750 L
n
800 750 m
800 900 L
700 900 L
700 750 L
800 750 L
n
100 600 m
100 750 L
0 750 L
0 600 L
100 600 L
n
200 600 m
200 750 L
100 750 L
100 600 L
200 600 L
n
300 600 m
300 750 L
200 750 L
200 600 L
300 600 L
n
400 600 m
400 750 L
300 750 L
300 600 L
400 600 L
n
500 600 m
500 750 L
400 750 L
400 600 L
500 600 L
n
600 600 m
600 750 L
500 750 L
500 600 L
600 600 L
n
700 600 m
700 750 L
600 750 L
600 600 L
700 600 L
n
800 600 m
800 750 L
700 750 L
700 600 L
800 600 L
n
100 450 m
100 600 L
0 600 L
0 450 L
100 450 L
n
200 450 m
200 600 L
100 600 L
100 450 L
200 450 L
n
300 450 m
300 600 L
200 600 L
200 450 L
300 450 L
n
400 450 m
400 600 L
300 600 L
300 450 L
400 450 L
n
500 450 m
500 600 L
400 600 L
400 450 L
500 450 L
n
600 450 m
600 600 L
500 600 L
500 450 L
600 450 L
n
700 450 m
700 600 L
600 600 L
600 450 L
700 450 L
n
800 450 m
800 600 L
700 600 L
700 450 L
800 450 L
n
100 300 m
100 450 L
0 450 L
0 300 L
100 300 L
n
200 300 m
200 450 L
100 450 L
100 300 L
200 300 L
n
300 300 m
300 450 L
200 450 L
200 300 L
300 300 L
n
400 300 m
400 450 L
300 450 L
300 300 L
400 300 L
n
500 300 m
500 450 L
400 450 L
400 300 L
500 300 L
n
600 300 m
600 450 L
500 450 L
500 300 L
600 300 L
n
700 300 m
700 450 L
600 450 L
600 300 L
700 300 L
n
800 300 m
800 450 L
700 450 L
700 300 L
800 300 L
n
100 150 m
100 300 L
0 300 L
0 150 L
100 150 L
n
200 150 m
200 300 L
100 300 L
100 150 L
200 150 L
n
300 150 m
300 300 L
200 300 L
200 150 L
300 150 L
n
400 150 m
400 300 L
300 300 L
300 150 L
400 150 L
n
500 150 m
500 300 L
400 300 L
400 150 L
500 150 L
n
600 150 m
600 300 L
500 300 L
500 150 L
600 150 L
n
700 150 m
700 300 L
600 300 L
600 150 L
700 150 L
n
800 150 m
800 300 L
700 300 L
700 150 L
800 150 L
n
100 0 m
100 150 L
0 150 L
0 0 L
100 0 L
n
200 0 m
200 150 L
100 150 L
100 0 L
200 0 L
n
300 0 m
300 150 L
200 150 L
200 0 L
300 0 L
n
400 0 m
400 150 L
300 150 L
300 0 L
400 0 L
n
500 0 m
500 150 L
400 150 L
400 0 L
500 0 L
n
600 0 m
600 150 L
500 150 L
500 0 L
600 0 L
n
700 0 m
700 150 L
600 150 L
600 0 L
700 0 L
n
800 0 m
800 150 L
700 150 L
700 0 L
800 0 L
n
U
0 O
0 g
1 D
505 966 m
505 1016 L
502 1016 L
502 966 L
502 949.4957 513.3126 939 530.5 939 c
547.6873 939 559 949.4957 559 966 C
559 1016 L
556 1016 L
556 966 l
556 951.1963 546.229 942 530.5 942 c
514.771 942 505 951.1963 505 966 c
f
5 1013 m
27 1013 l
44.3224 1013 52 1006.7787 52 995 c
52 983.2213 44.3224 977 27 977 c
5 977 L
5 974 L
27 974 l
46.2773 974 55 981.6933 55 995 c
55 1008.3067 46.2773 1016 27 1016 C
2 1016 L
2 940 L
5 940 L
5 1013 L
f
234.8 978.1 m
247.5 980.375 255 987.7348 255 997 c
255 1009.1729 246.9438 1016 227 1016 C
202 1016 L
202 940 L
205 940 L
205 1013 L
227 1013 L
245.1583 1013 252 1007.4493 252 997 c
252 987.6496 242.1526 980 227 980 C
205 980 L
205 977 L
214 977 L
240.1648 977 240.3765 976.8748 253.8 940 C
257 940 L
247.7023 965.5451 244.375 974.875 234.8 977.9 C
234.8 978.1 L
f
353 1010 m
346.375 1014.8125 339.0806 1017 328 1017 c
310.8725 1017 302 1009.9049 302 999 c
302 989.7339 307.2335 984.7127 327.5 979 c
347.1248 973.4682 352 968.4358 352 959 c
352 947.7518 344.9915 942 327 942 c
317.2775 942 308.7801 945.1823 303 951.1 C
302 948 L
307.25 942.625 316.9693 939 327 939 c
346.4982 939 355 945.8966 355 959 c
355 969.3547 350.375 975.75 327.5 982.1 c
309.9357 986.9759 305 991.4409 305 999 c
305 1008.0326 312.7165 1014 328 1014 c
338.6378 1014 344.7977 1012.2318 352 1007 C
353 1010 L
f
402 1016 m
402 1016 L
402 1013 L
431 1013 L
431 940 L
434 940 L
434 1013 L
463 1013 L
463 1016 L
402 1016 L
f
634.9 943.1 m
605.3 1016 L
602 1016 L
633 940 L
637 940 L
668 1016 L
664.7 1016 L
635.1 943.1 L
634.9 943.1 L
f
745.6 1011.4 m
764 940 L
768 940 L
789 1016 L
785.9 1016 L
766.1 944.6 L
765.9 944.6 L
747.5 1016 L
743.5 1016 L
725.1 944.6 L
724.9 944.6 L
705.1 1016 L
702 1016 L
723 940 L
727 940 L
745.4 1011.4 L
745.6 1011.4 L
f
149.4 941.5 m
162.6249 945.2218 172 959.1015 172 978 c
172 1001.5049 157.7434 1017 137 1017 c
116.2566 1017 102 1001.5049 102 978 c
102 954.4951 117.2566 939 137 939 C
137 942 L
118.8598 942 105 956.4673 105 978 c
105 999.5327 117.8598 1014 137 1014 c
156.1402 1014 169 999.5327 169 978 c
169 956.4673 156.1402 942 137 942 C
137 939 L
157.043 939 163.2951 936.3633 172.1 926 C
176 926 L
167.181 936.7134 161.741 939.8884 149.4 941.3 C
149.4 941.5 L
f
636.5667 796.8122 m
609.2501 865.9954 L
603 865.9954 L
633.1667 789.9954 L
640.1668 789.9954 L
670.3334 865.9954 L
664.0833 865.9954 L
636.7667 796.8122 L
636.5667 796.8122 L
f
638.2334 650.5244 m
613.2002 715.9908 L
604.0001 715.9908 L
633.3333 639.9908 L
643.3335 639.9908 L
672.6668 715.9908 L
663.4666 715.9908 L
638.4334 650.5244 L
638.2334 650.5244 L
f
639.9 504.25 m
617.15 566 L
605 566 L
633.5 490 L
646.5 490 L
675 566 L
662.85 566 L
640.1 504.25 L
639.9 504.25 L
f
641.5667 357.9622 m
621.1001 415.9954 L
606 415.9954 L
633.6667 339.9954 L
649.6668 339.9954 L
677.3334 415.9954 L
662.2333 415.9954 L
641.7667 357.9622 L
641.5667 357.9622 L
f
643.2333 211.6878 m
625.0499 266.0046 L
607 266.0046 L
633.8333 190.0046 L
652.8332 190.0046 L
679.6666 266.0046 L
661.6167 266.0046 L
643.4333 211.6878 L
643.2333 211.6878 L
f
644.9 65.4 m
629 116 L
608 116 L
634 40 L
656 40 l
682 116 L
661 116 L
645.1 65.4 L
644.9 65.4 L
f
746.0167 856.1619 m
762.8333 789.9954 L
769.8334 789.9954 L
789.8334 865.9954 L
783.9166 865.9954 L
766.1 798.8955 L
765.9 798.8955 L
749.4167 865.9954 L
742.4166 865.9954 L
725.9333 798.8955 L
725.7333 798.8955 L
707.9167 865.9954 L
702 865.9954 L
722 789.9954 L
729.0001 789.9954 L
745.8167 856.1619 L
746.0167 856.1619 L
f
746.4333 700.9239 m
761.6666 639.9908 L
771.6668 639.9908 L
790.6667 715.9908 L
781.9332 715.9908 L
766.1 653.1911 L
765.9 653.1911 L
751.3334 715.9908 L
741.3333 715.9908 L
726.7667 653.1911 L
726.5667 653.1911 L
710.7335 715.9908 L
702 715.9908 L
720.9999 639.9908 L
731.0001 639.9908 L
746.2333 700.9239 L
746.4333 700.9239 L
f
746.85 545.7 m
760.5 490 L
773.5 490 L
791.5 566 L
779.95 566 L
766.1 507.5 L
765.9 507.5 L
753.25 566 L
740.25 566 L
727.6 507.5 L
727.4 507.5 L
713.55 566 L
702 566 L
720 490 L
733 490 L
746.65 545.7 L
746.85 545.7 L
f
747.2667 390.4619 m
759.3333 339.9954 L
775.3334 339.9954 L
792.3334 415.9954 L
777.9666 415.9954 L
766.1 361.7956 L
765.9 361.7956 L
755.1667 415.9954 L
739.1666 415.9954 L
728.4333 361.7956 L
728.2333 361.7956 L
716.3668 415.9954 L
702 415.9954 L
719 339.9954 L
735.0001 339.9954 L
747.0667 390.4619 L
747.2667 390.4619 L
f
747.6833 235.2381 m
758.1667 190.0046 L
777.1666 190.0046 L
793.1667 266.0046 L
775.9834 266.0046 L
766.1 216.1045 L
765.9 216.1045 L
757.0833 266.0046 L
738.0834 266.0046 L
729.2666 216.1045 L
729.0666 216.1045 L
719.1833 266.0046 L
702 266.0046 L
718 190.0046 L
737 190.0046 L
747.4833 235.2381 L
747.6833 235.2381 L
f
748.1 80 m
757 40 L
779 40 L
794 116 L
774 116 L
766.1 70.4 L
765.9 70.4 L
759 116 L
737 116 L
730.1 70.4 L
729.9 70.4 L
722 116 L
702 116 L
717 40 L
739 40 L
747.9 80 L
748.1 80 L
f
507.8334 816.9954 m
507.8334 865.9954 L
502 865.9954 L
502 816.6621 L
502 799.38 513.2214 788.9954 531.0834 788.9954 c
548.9452 788.9954 560.1667 799.38 560.1667 816.6621 C
560.1667 865.9954 L
554.3333 865.9954 L
554.3333 816.9954 l
554.3333 802.6169 545.6074 794.3288 531.0834 794.3288 c
516.5592 794.3288 507.8334 802.6169 507.8334 816.9954 c
f
510.6668 667.9909 m
510.6668 715.9908 L
502 715.9908 L
502 667.3242 L
502 649.2644 513.1302 638.9908 531.6667 638.9908 c
550.2031 638.9908 561.3334 649.2644 561.3334 667.3242 C
561.3334 715.9908 L
552.6666 715.9908 L
552.6666 667.9909 l
552.6666 654.0375 544.9859 646.6576 531.6667 646.6576 c
518.3475 646.6576 510.6668 654.0375 510.6668 667.9909 c
f
513.5 519 m
513.5 566 L
502 566 L
502 518 L
502 499.1624 513.039 489 532.25 489 c
551.4608 489 562.5 499.1624 562.5 518 C
562.5 566 L
551 566 L
551 519 l
551 505.4716 544.3645 499 532.25 499 c
520.1355 499 513.5 505.4716 513.5 519 c
f
516.3334 369.9954 m
516.3334 415.9954 L
502 415.9954 L
502 368.6621 L
502 349.0468 512.9478 338.9954 532.8334 338.9954 c
552.7187 338.9954 563.6667 349.0468 563.6667 368.6621 C
563.6667 415.9954 L
549.3333 415.9954 L
549.3333 369.9954 l
549.3333 356.8922 543.7429 351.3288 532.8334 351.3288 c
521.9238 351.3288 516.3334 356.8922 516.3334 369.9954 c
f
519.1666 221.0045 m
519.1666 266.0046 L
502 266.0046 L
502 219.3379 L
502 198.9449 512.8567 189.0046 533.4167 189.0046 c
553.9765 189.0046 564.8333 198.9449 564.8333 219.3379 C
564.8333 266.0046 L
547.6667 266.0046 L
547.6667 221.0045 l
547.6667 208.3264 543.1214 203.6712 533.4167 203.6712 c
523.7118 203.6712 519.1666 208.3264 519.1666 221.0045 c
f
522 72 m
522 116 L
502 116 L
502 70 L
502 48.8292 512.7655 39 534 39 c
555.2344 39 566 48.8292 566 70 C
566 116 L
546 116 L
546 72 l
546 59.747 542.4999 56 534 56 c
525.5001 56 522 59.747 522 72 c
f
354.5001 859.9954 m
347.8608 864.7142 340.0585 866.9954 329 866.9954 c
311.1921 866.9954 302 859.4891 302 848.1621 c
302 838.4018 307.3927 833.1474 328.25 827.3287 c
346.0908 822.3224 350.5 817.8013 350.5 809.4954 c
350.5 799.3808 344.0204 794.1622 327.3334 794.1622 c
317.9561 794.1622 309.4105 797.4287 303.5 803.3621 C
302 797.9954 L
307.3737 792.6991 317.5235 788.9954 327.5 788.9954 c
347.5489 788.9954 356.5001 796.1756 356.5001 809.6621 c
356.5001 820.4376 351.6851 826.7386 328.25 833.1288 c
312.4897 837.4743 308.0001 841.5396 308.0001 848.3287 c
308.0001 856.3893 314.9825 861.8287 329.1667 861.8287 c
339.3294 861.8287 345.8285 859.9107 353 854.712 C
354.5001 859.9954 L
f
356.0001 709.9908 m
349.3467 714.6158 341.0363 716.9908 330.0001 716.9908 c
311.5117 716.9908 302 709.0734 302 697.3241 c
302 687.0697 307.5519 681.5821 329 675.6574 c
345.0569 671.1767 348.9999 667.1668 348.9999 659.9909 c
348.9999 651.0098 343.0494 646.3243 327.6667 646.3243 c
318.6347 646.3243 310.0409 649.675 304 655.6243 C
302 647.9908 L
307.4975 642.7733 318.0777 638.9908 328 638.9908 c
348.5997 638.9908 358.0001 646.4545 358.0001 660.3242 c
358.0001 671.5205 352.9953 677.7271 329 684.1576 c
315.0437 687.9726 311.0002 691.6384 311.0002 697.6575 c
311.0002 704.7459 317.2486 709.6574 330.3334 709.6574 c
340.021 709.6574 346.8593 707.5897 354.0001 702.424 C
356.0001 709.9908 L
f
357.5 560 m
350.8324 564.5312 342.0141 567 331 567 c
311.8313 567 302 558.6714 302 546.5 c
302 535.7514 307.7111 530.0306 329.75 524 c
344.0231 520.0448 347.5 516.546 347.5 510.5 c
347.5 502.6524 342.0784 498.5 328 498.5 c
319.3132 498.5 310.6713 501.9349 304.5 507.9 C
302 498 L
307.6212 492.8611 318.6318 489 328.5 489 c
349.6503 489 359.5 496.7472 359.5 511 c
359.5 522.6171 354.3053 528.7293 329.75 535.2 c
317.5974 538.4847 314 541.7509 314 547 c
314 553.1165 319.5144 557.5 331.5 557.5 c
340.7125 557.5 347.89 555.2825 355 550.15 C
357.5 560 L
f
359.0001 409.9954 m
352.3182 414.4329 342.9919 416.9954 332 416.9954 c
312.151 416.9954 302 408.2556 302 395.6621 c
302 384.4194 307.8704 378.4653 330.5 372.3287 c
342.9891 368.8991 346 365.9115 346 360.9954 c
346 354.2814 341.1074 350.6622 328.3334 350.6622 c
319.9918 350.6622 311.3017 354.1813 305 360.1622 C
302 347.9954 L
307.745 342.9353 319.186 338.9954 329 338.9954 c
350.7011 338.9954 361.0001 347.0262 361.0001 361.6621 c
361.0001 373.7 355.6155 379.7179 330.5 386.2288 c
320.1514 388.9831 317.0001 391.8497 317.0001 396.3287 c
317.0001 401.4732 321.7805 405.3287 332.6667 405.3287 c
341.4041 405.3287 348.9208 402.9615 356 397.862 C
359.0001 409.9954 L
f
360.5 260.0046 m
353.804 264.3483 343.9697 267.0046 333 267.0046 c
312.4706 267.0046 302 257.8537 302 244.8379 c
302 233.1011 308.0296 226.9138 331.25 220.6713 c
341.9553 217.7671 344.5001 215.2908 344.5001 211.5046 c
344.5001 205.924 340.1364 202.8378 328.6667 202.8378 c
320.6703 202.8378 311.9321 206.4411 305.5 212.4378 C
302 198.0046 L
307.8687 193.0232 319.7402 189.0046 329.5 189.0046 c
351.7517 189.0046 362.5 197.3188 362.5 212.3379 c
362.5 224.7966 356.9255 230.72 331.25 237.2712 c
322.7052 239.4951 319.9999 241.9622 319.9999 245.6713 c
319.9999 249.8437 324.0463 253.1713 333.8333 253.1713 c
342.0957 253.1713 349.9516 250.6544 357 245.588 C
360.5 260.0046 L
f
358 93.3 m
362 110 L
355.2898 114.25 344.9476 117 334 117 c
312.7902 117 302 107.4379 302 94 c
302 81.769 308.1888 75.3485 332 69 c
340.9214 66.6214 343 64.6563 343 62 c
343 57.553 339.1654 55 329 55 c
321.3489 55 312.5625 58.6875 306 64.7 C
302 48 L
307.9925 43.0973 320.2944 39 330 39 c
352.8025 39 364 47.5978 364 63 c
364 75.8795 358.2357 81.7086 332 88.3 c
325.2592 89.9935 323 92.0609 323 95 c
323 98.2004 326.3124 101 335 101 c
342.7873 101 350.9824 98.3333 358 93.3 C
f
402 865.9954 m
402 865.9954 L
402 860.8287 L
429.8333 860.8287 L
429.8333 789.9954 L
435.6667 789.9954 L
435.6667 860.8287 L
463.5 860.8287 L
463.5 865.9954 L
402 865.9954 L
f
402 715.9908 m
402 715.9908 L
402 708.6574 L
428.6666 708.6574 L
428.6666 639.9908 L
437.3334 639.9908 L
437.3334 708.6574 L
464 708.6574 L
464 715.9908 L
402 715.9908 L
f
402 566 m
402 566 L
402 556.5 L
427.5 556.5 L
427.5 490 L
439 490 L
439 556.5 L
464.5 556.5 L
464.5 566 L
402 566 L
f
402 415.9954 m
402 415.9954 L
402 404.3287 L
426.3333 404.3287 L
426.3333 339.9954 L
440.6667 339.9954 L
440.6667 404.3287 L
465 404.3287 L
465 415.9954 L
402 415.9954 L
f
402 266.0046 m
402 266.0046 L
402 252.1713 L
425.1667 252.1713 L
425.1667 190.0046 L
442.3333 190.0046 L
442.3333 252.1713 L
465.5 252.1713 L
465.5 266.0046 L
402 266.0046 L
f
402 116 m
402 116 L
402 100 L
424 100 L
424 40 L
444 40 L
444 100 L
466 100 L
466 116 L
402 116 L
f
7.8334 860.8287 m
27.58 860.8287 l
43.7964 860.8287 50.6666 855.2385 50.6666 844.3287 c
50.6666 833.4189 43.7964 827.8288 27.58 827.8288 c
7.8334 827.8288 L
7.8334 822.662 L
28.2467 822.662 L
47.7043 822.662 56.5001 830.4607 56.5001 844.3287 c
56.5001 858.1967 47.7043 865.9954 28.2467 865.9954 C
2 865.9954 L
2 789.9954 L
7.8334 789.9954 L
7.8334 860.8287 L
f
10.6668 708.6574 m
28.16 708.6574 l
43.2704 708.6574 49.3332 703.6983 49.3332 693.6575 c
49.3332 683.6166 43.2704 678.6576 28.16 678.6576 c
10.6668 678.6576 L
10.6668 671.3241 L
29.4934 671.3241 L
49.1313 671.3241 58.0001 679.2282 58.0001 693.6575 c
58.0001 708.0868 49.1313 715.9908 29.4934 715.9908 C
2 715.9908 L
2 639.9908 L
10.6668 639.9908 L
10.6668 708.6574 L
f
13.5 556.5 m
28.7399 556.5 l
42.7444 556.5 48 552.172 48 543 c
48 533.8279 42.7444 529.5 28.7399 529.5 c
13.5 529.5 L
13.5 520 L
30.7399 520 L
50.5581 520 59.5 528.0094 59.5 543 c
59.5 557.9906 50.5581 566 30.7399 566 C
2 566 L
2 490 L
13.5 490 L
13.5 556.5 L
f
16.3334 404.3287 m
29.3199 404.3287 l
42.2184 404.3287 46.6666 400.6319 46.6666 392.3287 c
46.6666 384.0256 42.2184 380.3288 29.3199 380.3288 c
16.3334 380.3288 L
16.3334 368.662 L
31.9866 368.662 L
51.9851 368.662 61.0001 376.7769 61.0001 392.3287 c
61.0001 407.8807 51.9851 415.9954 31.9866 415.9954 C
2 415.9954 L
2 339.9954 L
16.3334 339.9954 L
16.3334 404.3287 L
f
19.1666 252.1713 m
29.8999 252.1713 l
41.6925 252.1713 45.3334 249.1056 45.3334 241.6713 c
45.3334 234.2369 41.6925 231.1712 29.8999 231.1712 c
19.1666 231.1712 L
19.1666 217.3379 L
33.2332 217.3379 L
53.4119 217.3379 62.5 225.5582 62.5 241.6713 c
62.5 257.7845 53.4119 266.0046 33.2332 266.0046 C
2 266.0046 L
2 190.0046 L
19.1666 190.0046 L
19.1666 252.1713 L
f
22 100 m
30.4799 100 l
41.1665 100 44 97.5654 44 91 c
44 84.4346 41.1665 82 30.4799 82 c
22 82 L
22 66 L
34.4799 66 L
54.8389 66 64 74.3256 64 91 c
64 107.6745 54.8389 116 34.4799 116 C
2 116 L
2 40 L
22 40 L
22 100 L
f
237.5667 827.212 m
249.4376 829.6933 256.5001 837.0967 256.5001 846.3287 c
256.5001 859.113 248.4541 865.9954 228.2467 865.9954 C
202 865.9954 L
202 789.9954 L
207.8334 789.9954 L
207.8334 860.8287 L
227.58 860.8287 L
244.5484 860.8287 250.6666 855.8807 250.6666 846.3287 c
250.6666 837.4425 241.9882 830.6621 227.58 830.6621 C
207.8334 830.6621 L
207.8334 825.4954 L
216.0001 825.4954 L
239.7415 825.4954 239.9412 825.3753 252.3333 789.9954 C
258.5001 789.9954 L
249.4043 815.7661 246.3897 823.9805 237.5667 827.0121 C
237.5667 827.212 L
f
240.3335 676.3241 m
251.3752 679.0116 258.0001 686.4585 258.0001 695.6575 c
258.0001 709.0532 249.9644 715.9908 229.4934 715.9908 C
202 715.9908 L
202 639.9908 L
210.6668 639.9908 L
210.6668 708.6574 L
228.16 708.6574 L
243.9385 708.6574 249.3332 704.3121 249.3332 695.6575 c
249.3332 687.2354 241.8238 681.3242 228.16 681.3242 C
210.6668 681.3242 L
210.6668 673.9907 L
218.0001 673.9907 L
239.3183 673.9907 239.5059 673.8757 250.8666 639.9908 C
260.0001 639.9908 L
251.1064 665.9871 248.4044 673.0861 240.3335 676.1241 C
240.3335 676.3241 L
f
243.1 525.45 m
253.3127 528.3437 259.5 535.8342 259.5 545 c
259.5 559.007 251.4746 566 230.7399 566 C
202 566 L
202 490 L
213.5 490 L
213.5 556.5 L
228.7399 556.5 L
243.3287 556.5 248 552.7574 248 545 c
248 537.0421 241.6595 532 228.7399 532 C
213.5 532 L
213.5 522.5 L
220 522.5 L
238.8951 522.5 239.0706 522.39 249.4 490 C
261.5 490 L
252.8083 516.2217 250.4189 522.2054 243.1 525.25 C
243.1 525.45 L
f
245.8667 374.5621 m
255.2503 377.6621 261.0001 385.1961 261.0001 394.3287 c
261.0001 408.9472 252.9849 415.9954 231.9866 415.9954 C
202 415.9954 L
202 339.9954 L
216.3334 339.9954 L
216.3334 404.3287 L
229.3199 404.3287 L
242.7189 404.3287 246.6666 401.1888 246.6666 394.3287 c
246.6666 386.835 241.4951 382.6621 229.3199 382.6621 C
216.3334 382.6621 L
216.3334 370.9954 L
222.0001 370.9954 L
238.4718 370.9954 238.6353 370.8905 247.9333 339.9954 C
263.0001 339.9954 L
254.5103 366.4427 252.4336 371.311 245.8667 374.3621 C
245.8667 374.5621 L
f
248.6332 223.6879 m
257.1878 226.9942 262.5 234.5717 262.5 243.6713 c
262.5 258.9011 254.4951 266.0046 233.2332 266.0046 C
202 266.0046 L
202 190.0046 L
219.1666 190.0046 L
219.1666 252.1713 L
229.8999 252.1713 L
242.1091 252.1713 245.3334 249.6341 245.3334 243.6713 c
245.3334 236.6417 241.3308 233.3379 229.8999 233.3379 C
219.1666 233.3379 L
219.1666 219.5046 L
224 219.5046 L
238.0486 219.5046 238.2 219.4048 246.4667 190.0046 C
264.5 190.0046 L
256.2122 216.6774 254.4481 220.4304 248.6332 223.4879 C
248.6332 223.6879 L
f
251.4 72.8 m
259.1254 76.3125 264 83.9336 264 93 c
264 108.8412 256.0054 116 234.4799 116 C
202 116 L
202 40 L
222 40 L
222 100 L
230.4799 100 L
241.4992 100 244 98.0655 244 93 c
244 86.4346 241.1664 84 230.4799 84 C
222 84 L
222 68 L
226 68 L
237.6254 68 237.7647 67.9053 245 40 C
266 40 L
257.9143 66.8984 256.4628 69.5359 251.4 72.6 C
251.4 72.8 L
f
151.9001 792.5621 m
164.1979 796.3886 173 809.8774 173 827.9954 c
173 851.5003 158.5397 866.9954 137.5 866.9954 c
116.4603 866.9954 102 851.5003 102 827.9954 c
102 804.4905 117.2936 788.9954 137.5 788.9954 C
137.5 794.3288 L
120.5206 794.3288 107.8334 807.7235 107.8334 827.9954 c
107.8334 848.2674 119.6872 861.662 137.5 861.662 c
155.3127 861.662 167.1666 848.2674 167.1666 827.9954 c
167.1666 807.7235 155.3127 794.3288 137.5 794.3288 C
137.5 788.9954 L
156.8048 788.9954 162.0574 786.7662 170.75 775.9954 C
177.3334 775.9954 L
168.6715 787.2977 163.2421 790.8246 151.9001 792.3621 C
151.9001 792.5621 L
f
154.4001 643.6242 m
165.7709 647.5554 174.0001 660.6534 174.0001 677.9908 c
174.0001 701.4957 159.3361 716.9908 138 716.9908 c
116.664 716.9908 102 701.4957 102 677.9908 c
102 654.4859 117.3306 638.9908 138 638.9908 C
138 646.6576 L
122.1813 646.6576 110.6668 658.9797 110.6668 677.9908 c
110.6668 697.0021 121.5147 709.324 138 709.324 c
154.4853 709.324 165.3332 697.0021 165.3332 677.9908 c
165.3332 658.9797 154.4853 646.6576 138 646.6576 C
138 638.9908 L
156.5666 638.9908 160.8196 637.169 169.3999 625.9908 C
178.6667 625.9908 L
170.1621 637.882 164.7431 641.7608 154.4001 643.4242 C
154.4001 643.6242 L
f
156.9 494.7 m
167.3438 498.7359 175 511.443 175 528 c
175 551.5049 160.1324 567 138.5 567 c
116.8676 567 102 551.5049 102 528 c
102 504.4951 117.3676 489 138.5 489 C
138.5 499 L
123.842 499 113.5 510.2495 113.5 528 c
113.5 545.7506 123.342 557 138.5 557 c
153.6579 557 163.5 545.7506 163.5 528 c
163.5 510.2495 153.6579 499 138.5 499 C
138.5 489 L
156.3283 489 159.582 487.5855 168.05 476 C
180 476 L
171.6525 488.4799 166.244 492.7107 156.9 494.5 C
156.9 494.7 L
f
159.4001 345.7621 m
168.9168 349.9027 176 362.219 176 377.9954 c
176 401.5003 160.9287 416.9954 139 416.9954 c
117.0713 416.9954 102 401.5003 102 377.9954 c
102 354.4905 117.4047 338.9954 139 338.9954 C
139 351.3288 L
125.5028 351.3288 116.3334 361.5058 116.3334 377.9954 c
116.3334 394.4854 125.1694 404.662 139 404.662 c
152.8304 404.662 161.6666 394.4854 161.6666 377.9954 c
161.6666 361.5058 152.8304 351.3288 139 351.3288 C
139 338.9954 L
156.0901 338.9954 158.3443 337.9884 166.7 325.9954 C
181.3334 325.9954 L
173.143 339.0642 167.7451 343.6469 159.4001 345.5621 C
159.4001 345.7621 L
f
161.8999 196.8379 m
170.4897 201.0832 177 213.0086 177 228.0046 c
177 251.5095 161.7249 267.0046 139.5 267.0046 c
117.275 267.0046 102 251.5095 102 228.0046 c
102 204.4997 117.4417 189.0046 139.5 189.0046 C
139.5 203.6712 L
127.1634 203.6712 119.1666 212.7756 119.1666 228.0046 c
119.1666 243.2339 126.9967 252.338 139.5 252.338 c
152.003 252.338 159.8334 243.2339 159.8334 228.0046 c
159.8334 212.7756 152.003 203.6712 139.5 203.6712 C
139.5 189.0046 L
155.8519 189.0046 157.1067 188.4049 165.35 176.0046 C
182.6666 176.0046 L
174.6334 189.6622 169.246 194.5968 161.8999 196.6379 C
161.8999 196.8379 L
f
140 39 m
155.6137 39 155.869 38.8078 164 26 C
184 26 L
176.124 40.2465 170.7471 45.533 164.4 47.7 C
164.4 47.9 L
172.0627 52.25 178 63.7846 178 78 c
178 101.5049 162.5213 117 140 117 c
117.4787 117 102 101.5049 102 78 c
102 54.4951 117.4787 39 140 39 C
140 56 L
128.8242 56 122 64.0318 122 78 c
122 91.9686 128.8242 100 140 100 c
151.1756 100 158 91.9686 158 78 c
158 64.0318 151.1756 56 140 56 C
140 39 L
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
