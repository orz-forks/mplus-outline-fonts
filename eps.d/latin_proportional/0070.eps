%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (0070.eps)
%%CreationDate: (1/20/05) (2:30 PM)
%%BoundingBox: 0 0 800 1050
%%HiResBoundingBox: 0 0 800 1050
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 394.5 530 394.5 530
%AI3_TileBox: -180.5 -228 971.5 1302
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 1188 1680
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -373.5 1058 -2 794 557 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%AI5_ViewPalette: 0 1 -2 4331 4334 0 1 5 whole view
%%PageOrigin:-180.5 -228
%%AI3_PaperRect:-19 1615 1171 -68
%%AI3_Margin:19 -85 -19 68
%AI7_GridSettings: 0.5 10 0.5 10 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 0 79 128 255 Lb
(\203\214\203C\203\204\201[1) Ln
0 A
u
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 900 m
100 1050 L
0 1050 L
0 900 L
100 900 L
n
200 900 m
200 1050 L
100 1050 L
100 900 L
200 900 L
n
300 900 m
300 1050 L
200 1050 L
200 900 L
300 900 L
n
400 900 m
400 1050 L
300 1050 L
300 900 L
400 900 L
n
500 900 m
500 1050 L
400 1050 L
400 900 L
500 900 L
n
600 900 m
600 1050 L
500 1050 L
500 900 L
600 900 L
n
700 900 m
700 1050 L
600 1050 L
600 900 L
700 900 L
n
800 900 m
800 1050 L
700 1050 L
700 900 L
800 900 L
n
100 750 m
100 900 L
0 900 L
0 750 L
100 750 L
n
200 750 m
200 900 L
100 900 L
100 750 L
200 750 L
n
300 750 m
300 900 L
200 900 L
200 750 L
300 750 L
n
400 750 m
400 900 L
300 900 L
300 750 L
400 750 L
n
500 750 m
500 900 L
400 900 L
400 750 L
500 750 L
n
600 750 m
600 900 L
500 900 L
500 750 L
600 750 L
n
700 750 m
700 900 L
600 900 L
600 750 L
700 750 L
n
800 750 m
800 900 L
700 900 L
700 750 L
800 750 L
n
100 600 m
100 750 L
0 750 L
0 600 L
100 600 L
n
200 600 m
200 750 L
100 750 L
100 600 L
200 600 L
n
300 600 m
300 750 L
200 750 L
200 600 L
300 600 L
n
400 600 m
400 750 L
300 750 L
300 600 L
400 600 L
n
500 600 m
500 750 L
400 750 L
400 600 L
500 600 L
n
600 600 m
600 750 L
500 750 L
500 600 L
600 600 L
n
700 600 m
700 750 L
600 750 L
600 600 L
700 600 L
n
800 600 m
800 750 L
700 750 L
700 600 L
800 600 L
n
100 450 m
100 600 L
0 600 L
0 450 L
100 450 L
n
200 450 m
200 600 L
100 600 L
100 450 L
200 450 L
n
300 450 m
300 600 L
200 600 L
200 450 L
300 450 L
n
400 450 m
400 600 L
300 600 L
300 450 L
400 450 L
n
500 450 m
500 600 L
400 600 L
400 450 L
500 450 L
n
600 450 m
600 600 L
500 600 L
500 450 L
600 450 L
n
700 450 m
700 600 L
600 600 L
600 450 L
700 450 L
n
800 450 m
800 600 L
700 600 L
700 450 L
800 450 L
n
100 300 m
100 450 L
0 450 L
0 300 L
100 300 L
n
200 300 m
200 450 L
100 450 L
100 300 L
200 300 L
n
300 300 m
300 450 L
200 450 L
200 300 L
300 300 L
n
400 300 m
400 450 L
300 450 L
300 300 L
400 300 L
n
500 300 m
500 450 L
400 450 L
400 300 L
500 300 L
n
600 300 m
600 450 L
500 450 L
500 300 L
600 300 L
n
700 300 m
700 450 L
600 450 L
600 300 L
700 300 L
n
800 300 m
800 450 L
700 450 L
700 300 L
800 300 L
n
100 150 m
100 300 L
0 300 L
0 150 L
100 150 L
n
200 150 m
200 300 L
100 300 L
100 150 L
200 150 L
n
300 150 m
300 300 L
200 300 L
200 150 L
300 150 L
n
400 150 m
400 300 L
300 300 L
300 150 L
400 150 L
n
500 150 m
500 300 L
400 300 L
400 150 L
500 150 L
n
600 150 m
600 300 L
500 300 L
500 150 L
600 150 L
n
700 150 m
700 300 L
600 300 L
600 150 L
700 150 L
n
800 150 m
800 300 L
700 300 L
700 150 L
800 150 L
n
100 0 m
100 150 L
0 150 L
0 0 L
100 0 L
n
200 0 m
200 150 L
100 150 L
100 0 L
200 0 L
n
300 0 m
300 150 L
200 150 L
200 0 L
300 0 L
n
400 0 m
400 150 L
300 150 L
300 0 L
400 0 L
n
500 0 m
500 150 L
400 150 L
400 0 L
500 0 L
n
600 0 m
600 150 L
500 150 L
500 0 L
600 0 L
n
700 0 m
700 150 L
600 150 L
600 0 L
700 0 L
n
800 0 m
800 150 L
700 150 L
700 0 L
800 0 L
n
U
0 O
0 g
1 D
25 992 m
38.8145 992 47 983.419 47 968 c
47 951.2198 38.816 942 26 942 C
26 939 L
40.3116 939 50 949.3034 50 968 c
50 985.1968 40.5448 995 25 995 c
15.8679 995 8.4871 990.2707 5.2 983 C
5 983 L
5 994 L
2 994 L
2 918 L
5 918 L
5 951 L
5.2 951 L
8.6377 943.396 16.2173 939 26 939 C
26 942 L
12.5541 942 5 949.8489 5 967 c
5 983.485 12.054 992 25 992 c
f
147 967 m
147 949.8489 139.4459 942 126 942 C
126 939 L
135.7827 939 143.3623 943.396 146.8 951 C
147 951 L
147 918 L
150 918 L
150 994 L
147 994 L
147 983 L
146.8 983 L
143.5129 990.2707 136.1321 995 127 995 c
111.4552 995 102 985.1968 102 968 c
102 949.3034 111.6884 939 126 939 C
126 942 L
113.184 942 105 951.2198 105 968 c
105 983.419 113.1855 992 127 992 c
139.946 992 147 983.485 147 967 c
f
627.9 943.6 m
605.36 994 L
602 994 L
626.33 940 L
629.67 940 L
654 994 L
650.64 994 L
628.1 943.6 L
627.9 943.6 L
f
742.6 989.6 m
759.3301 940 L
762.67 940 L
783 994 L
779.84 994 L
761.13 944.3 L
760.93 944.3 L
744.16 994 L
740.84 994 L
724.07 944.3 L
723.8701 944.3 L
705.16 994 L
702 994 L
722.33 940 L
725.67 940 L
742.4 989.6 L
742.6 989.6 L
f
505 994 m
502 994 L
502 967 L
502 945.5699 508.279 939 521 939 c
529.9654 939 538.9375 944 542.9 951 C
543 951 L
543 940 L
546 940 L
546 994 L
543 994 L
543 963 L
543 950.0334 532.8724 942 521 942 c
509.7 942 505 947.7574 505 967 c
505 994 L
f
205.1 982 m
205 982 L
205 994 L
202 994 L
202 940 L
205 940 L
205 970 L
205 982.4665 213.9612 992 226 992 c
228.525 992 230.399 991.7566 233.6 991 C
234.5 994 L
230.8272 994.7622 228.65 995 226 995 c
216.375 995 208.4375 989.875 205.1 982 C
f
418 991 m
440 991 L
440 994 L
418 994 L
418 1012 L
415 1012 L
415 994 L
402 994 L
402 991 L
415 991 L
415 958 L
415 943.1616 418.8619 939 429 939 c
433.3182 939 436.4375 939.625 440 941 C
439.2 943.9 L
435.8464 942.6056 432.618 942 429 942 c
421.0227 942 418 944.5786 418 958 c
418 991 L
f
343 988.8 m
337.75 992.875 331.1375 995 323.2 995 c
309.7163 995 303 989.2322 303 981.5 c
303 973.4918 307.8044 969.0462 323 966.3 c
337.46 963.6868 341 960.1081 341 953.8 c
341 946.3066 335.5821 942 322.2 942 c
314.7058 942 307.875 944.8125 303.2 949.5 C
302 946.5 L
307.263 941.7021 314.5316 939 322.2 939 c
337.332 939 344 944.4795 344 953.8 c
344 961.5533 339.6688 966.3363 323.5335 969.2522 c
309.6743 971.7568 306 975.3039 306 981.5 c
306 987.7414 311.7632 992 323.2 992 c
330.9817 992 337.4993 989.7292 341.8 985.9 C
343 988.8 L
f
26.0447 839.8287 m
38.5167 839.8287 46 831.9099 46 817.8287 c
46 802.5632 38.3458 794.1621 26.8781 794.1621 C
27.8031 788.9954 L
41.7955 788.9954 51.5001 799.3544 51.5001 817.8287 c
51.5001 835.1422 42.0788 844.9954 26.9698 844.9954 c
18.3304 844.9954 10.906 840.5335 7.5334 833.8288 C
7.3334 833.8288 L
7.3334 843.9954 L
2 843.9954 L
2 767.9954 L
7.5001 767.9954 L
7.5001 799.9954 L
7.7001 799.9954 L
11.2919 793.065 18.6982 788.9954 27.8031 788.9954 C
26.8781 794.1621 L
14.7566 794.1621 7.6668 801.4434 7.6668 816.9954 c
7.6668 831.9368 14.2565 839.8287 26.0447 839.8287 c
f
27.0895 687.6575 m
38.219 687.6575 44.9999 680.4009 44.9999 667.6575 c
44.9999 653.9067 37.8756 646.3243 27.7561 646.3243 C
29.6062 638.9908 L
43.2795 638.9908 53.0001 649.4054 53.0001 667.6575 c
53.0001 685.0876 43.6128 694.9908 28.9395 694.9908 c
20.7928 694.9908 13.3249 690.7963 9.8668 684.6576 C
9.6668 684.6576 L
9.6668 693.9908 L
2 693.9908 L
2 617.9908 L
10.0001 617.9908 L
10.0001 648.9908 L
10.2001 648.9908 L
13.9461 642.734 21.1792 638.9908 29.6062 638.9908 C
27.7561 646.3243 L
16.9591 646.3243 10.3335 653.038 10.3335 666.9908 c
10.3335 680.3887 16.459 687.6575 27.0895 687.6575 c
f
28.1342 535.5001 m
37.9213 535.5001 44 528.9057 44 517.5 c
44 505.2638 37.4054 498.5 28.6342 498.5 C
31.4091 489 L
44.7633 489 54.5 499.4701 54.5 517.5 c
54.5 535.0467 45.1466 545 30.9091 545 c
23.2551 545 15.7435 541.0728 12.2 535.5 C
12 535.5 L
12 544 L
2 544 L
2 468 L
12.5 468 L
12.5 498 L
12.7 498 L
16.6001 492.4167 23.6599 489 31.4091 489 C
28.6342 498.5 L
19.1614 498.5 13 504.6461 13 517 c
13 528.8544 18.6613 535.5001 28.1342 535.5001 c
f
29.1789 383.3288 m
37.6235 383.3288 43 377.3967 43 367.3287 c
43 356.6072 36.9352 350.6621 29.5122 350.6621 C
33.2122 338.9954 L
46.2472 338.9954 56.0001 349.5211 56.0001 367.3287 c
56.0001 384.9922 46.6806 394.9954 32.8789 394.9954 c
25.7176 394.9954 18.1624 391.3357 14.5334 386.3288 C
14.3334 386.3288 L
14.3334 393.9954 L
2 393.9954 L
2 317.9954 L
15.0001 317.9954 L
15.0001 346.9954 L
15.2001 346.9954 L
19.2543 342.0858 26.1408 338.9954 33.2122 338.9954 C
29.5122 350.6621 L
21.3639 350.6621 15.6668 356.2407 15.6668 366.9954 c
15.6668 377.3062 20.8639 383.3288 29.1789 383.3288 c
f
30.2236 231.1715 m
37.3258 231.1715 42 225.9015 42 217.1712 c
42 207.9643 36.465 202.8378 30.3902 202.8378 C
35.0151 189.0046 L
47.731 189.0046 57.5 199.5858 57.5 217.1712 c
57.5 234.9513 48.2145 245.0046 34.8484 245.0046 c
28.1798 245.0046 20.5811 241.6122 16.8666 237.1712 C
16.6666 237.1712 L
16.6666 244.0046 L
2 244.0046 L
2 168.0046 L
17.4999 168.0046 L
17.4999 196.0046 L
17.6999 196.0046 L
21.9083 191.7685 28.6215 189.0046 35.0151 189.0046 C
30.3902 202.8378 L
23.5662 202.8378 18.3333 207.8488 18.3333 217.0046 c
18.3333 225.7719 23.0662 231.1715 30.2236 231.1715 c
f
19 94 m
2 94 L
2 18 L
20 18 L
20 45 L
20.2 45 L
24.5625 41.4375 31.1025 39 36.8182 39 C
31.2683 54.9999 L
25.7687 54.9999 21 59.4434 21 67 c
21 74.2238 25.2687 79.0002 31.2683 79.0002 c
37.0281 79.0002 41 74.3925 41 67 c
41 59.3078 35.9948 54.9999 31.2683 54.9999 C
36.8182 39 L
49.215 39 59 49.6368 59 67 c
59 84.8967 49.7485 95 36.8182 95 c
30.6423 95 23 91.875 19.2 88 C
19 88 L
19 94 L
f
146.1667 833.8288 m
145.9666 833.8288 L
142.5941 840.5335 135.1697 844.9954 126.5303 844.9954 c
111.4212 844.9954 102 835.1422 102 817.8287 c
102 799.3544 111.7045 788.9954 125.697 788.9954 C
126.622 794.1621 L
115.1542 794.1621 107.5001 802.5632 107.5001 817.8287 c
107.5001 831.9099 114.9833 839.8287 127.4553 839.8287 c
139.2435 839.8287 145.8333 831.9368 145.8333 816.9954 c
145.8333 801.4434 138.7434 794.1621 126.622 794.1621 C
125.697 788.9954 L
134.8018 788.9954 142.2081 793.065 145.8 799.9954 C
146 799.9954 L
146 767.9954 L
151.5001 767.9954 L
151.5001 843.9954 L
146.1667 843.9954 L
146.1667 833.8288 L
f
145.3333 684.6576 m
145.1333 684.6576 L
141.6752 690.7963 134.2072 694.9908 126.0606 694.9908 c
111.3873 694.9908 102 685.0876 102 667.6575 c
102 649.4054 111.7206 638.9908 125.3939 638.9908 C
127.2439 646.3243 L
117.1245 646.3243 110.0001 653.9067 110.0001 667.6575 c
110.0001 680.4009 116.7811 687.6575 127.9106 687.6575 c
138.5411 687.6575 144.6666 680.3887 144.6666 666.9908 c
144.6666 653.038 138.041 646.3243 127.2439 646.3243 C
125.3939 638.9908 L
133.8209 638.9908 141.054 642.734 144.7999 648.9908 C
144.9999 648.9908 L
144.9999 617.9908 L
153.0001 617.9908 L
153.0001 693.9908 L
145.3333 693.9908 L
145.3333 684.6576 L
f
144.5 535.5 m
144.3 535.5 L
140.7565 541.0728 133.2449 545 125.5909 545 c
111.3533 545 102 535.0467 102 517.5 c
102 499.4701 111.7367 489 125.0909 489 C
127.8658 498.5 L
119.0946 498.5 112.5 505.2638 112.5 517.5 c
112.5 528.9057 118.5787 535.5001 128.3658 535.5001 c
137.8386 535.5001 143.5 528.8544 143.5 517 c
143.5 504.6461 137.3386 498.5 127.8658 498.5 C
125.0909 489 L
132.8401 489 139.8999 492.4167 143.8 498 C
144 498 L
144 468 L
154.5 468 L
154.5 544 L
144.5 544 L
144.5 535.5 L
f
143.6667 386.3288 m
143.4666 386.3288 L
139.8376 391.3357 132.2825 394.9954 125.1212 394.9954 c
111.3194 394.9954 102 384.9922 102 367.3287 c
102 349.5211 111.7528 338.9954 124.7879 338.9954 C
128.4878 350.6621 L
121.0648 350.6621 115.0001 356.6072 115.0001 367.3287 c
115.0001 377.3967 120.3765 383.3288 128.8211 383.3288 c
137.1362 383.3288 142.3333 377.3062 142.3333 366.9954 c
142.3333 356.2407 136.6361 350.6621 128.4878 350.6621 C
124.7879 338.9954 L
131.8592 338.9954 138.7457 342.0858 142.8 346.9954 C
143 346.9954 L
143 317.9954 L
156.0001 317.9954 L
156.0001 393.9954 L
143.6667 393.9954 L
143.6667 386.3288 L
f
142.8334 237.1712 m
142.6333 237.1712 L
138.9188 241.6122 131.3201 245.0046 124.6515 245.0046 c
111.2854 245.0046 102 234.9513 102 217.1712 c
102 199.5858 111.7689 189.0046 124.4848 189.0046 C
129.1097 202.8378 L
123.0349 202.8378 117.4999 207.9643 117.4999 217.1712 c
117.4999 225.9015 122.1741 231.1715 129.2764 231.1715 c
136.4338 231.1715 141.1667 225.7719 141.1667 217.0046 c
141.1667 207.8488 135.9337 202.8378 129.1097 202.8378 C
124.4848 189.0046 L
130.8784 189.0046 137.5917 191.7685 141.8 196.0046 C
142 196.0046 L
142 168.0046 L
157.5 168.0046 L
157.5 244.0046 L
142.8334 244.0046 L
142.8334 237.1712 L
f
142 88 m
141.8 88 L
138 91.875 130.3577 95 124.1818 95 c
111.2515 95 102 84.8967 102 67 c
102 49.6368 111.785 39 124.1818 39 C
129.7317 54.9999 L
125.0052 54.9999 120 59.3078 120 67 c
120 74.3925 123.9719 79.0002 129.7317 79.0002 c
135.7313 79.0002 140 74.2238 140 67 c
140 59.4434 135.2313 54.9999 129.7317 54.9999 C
124.1818 39 L
129.8975 39 136.4375 41.4375 140.8 45 C
141 45 L
141 18 L
159 18 L
159 94 L
142 94 L
142 88 L
f
507.5001 843.9954 m
502 843.9954 L
502 816.9954 L
502 796.0431 508.5244 788.9954 521.197 788.9954 c
529.6233 788.9954 538.0729 793.6308 541.8833 800.1621 C
542 800.1621 L
542 789.9954 L
547.3334 789.9954 L
547.3334 843.9954 L
541.8333 843.9954 L
541.8333 813.6621 L
541.8333 801.486 532.8766 794.1621 522.122 794.1621 c
511.8565 794.1621 507.5001 799.5612 507.5001 816.9954 C
507.5001 843.9954 L
f
510.0001 693.9908 m
502 693.9908 L
502 666.9908 L
502 646.5163 508.7698 638.9908 521.3939 638.9908 c
529.2812 638.9908 537.2083 643.2617 540.8666 649.3241 C
540.9999 649.3241 L
540.9999 639.9908 L
548.6667 639.9908 L
548.6667 693.9908 L
540.6666 693.9908 L
540.6666 664.3242 L
540.6666 652.9387 532.8809 646.3242 523.244 646.3242 c
514.013 646.3242 510.0001 651.365 510.0001 666.9908 C
510.0001 693.9908 L
f
512.5 544 m
502 544 L
502 517 L
502 497.0032 509.0152 489 521.5909 489 c
528.9391 489 536.3437 492.9062 539.85 498.5 C
540 498.5 L
540 490 L
550 490 L
550 544 L
539.5 544 L
539.5 515 L
539.5 504.4049 532.8851 498.4999 524.3658 498.4999 c
516.1693 498.4999 512.5 503.1824 512.5 517 C
512.5 544 L
f
515.0001 393.9954 m
502 393.9954 L
502 366.9954 L
502 347.4764 509.2607 338.9954 521.7879 338.9954 c
528.597 338.9954 535.4791 342.5371 538.8333 347.6621 C
539 347.6621 L
539 339.9954 L
551.3334 339.9954 L
551.3334 393.9954 L
538.3333 393.9954 L
538.3333 365.6621 L
538.3333 355.8575 532.8893 350.662 525.4878 350.662 c
518.3258 350.662 515.0001 354.9863 515.0001 366.9954 C
515.0001 393.9954 L
f
517.4999 244.0046 m
502 244.0046 L
502 217.0046 L
502 197.9633 509.5061 189.0046 521.9848 189.0046 c
528.2549 189.0046 534.6146 192.1817 537.8167 196.8379 C
538 196.8379 L
538 190.0046 L
552.6666 190.0046 L
552.6666 244.0046 L
537.1667 244.0046 L
537.1667 216.3379 L
537.1667 207.3238 532.8936 202.8377 526.6097 202.8377 c
520.4821 202.8377 517.4999 206.8037 517.4999 217.0046 C
517.4999 244.0046 L
f
502 67 m
502 48.4365 509.7515 39 522.1818 39 c
527.9128 39 533.75 41.8125 536.8 46 C
537 46 L
537 40 L
554 40 L
554 94 L
536 94 L
536 67 L
536 58.7764 532.8978 54.9998 527.7317 54.9998 c
522.6386 54.9998 520 58.6075 520 67 C
520 94 L
502 94 L
502 67 L
f
742.6833 836.662 m
757.675 789.9954 L
764.4584 789.9954 L
783.1667 843.9954 L
777.3666 843.9954 L
760.8417 796.9122 L
760.6416 796.9122 L
745.8 843.9954 L
739.3666 843.9954 L
724.525 796.9122 L
724.3251 796.9122 L
707.8001 843.9954 L
702 843.9954 L
720.7083 789.9954 L
727.4917 789.9954 L
742.4833 836.662 L
742.6833 836.662 L
f
742.7667 683.724 m
756.02 639.9908 L
766.2468 639.9908 L
783.3333 693.9908 L
774.8932 693.9908 L
760.5533 649.5243 L
760.3533 649.5243 L
747.4401 693.9908 L
737.8932 693.9908 L
724.98 649.5243 L
724.7801 649.5243 L
710.4402 693.9908 L
702 693.9908 L
719.0865 639.9908 L
729.3134 639.9908 L
742.5667 683.724 L
742.7667 683.724 L
f
742.85 530.8 m
754.365 490 L
768.035 490 L
783.5 544 L
772.42 544 L
760.265 502.15 L
760.065 502.15 L
749.08 544 L
736.42 544 L
725.435 502.15 L
725.235 502.15 L
713.08 544 L
702 544 L
717.465 490 L
731.135 490 L
742.65 530.8 L
742.85 530.8 L
f
742.9333 377.862 m
752.71 339.9954 L
769.8234 339.9954 L
783.6667 393.9954 L
769.9466 393.9954 L
759.9766 354.7622 L
759.7767 354.7622 L
750.72 393.9954 L
734.9466 393.9954 L
725.89 354.7622 L
725.69 354.7622 L
715.7201 393.9954 L
702 393.9954 L
715.8433 339.9954 L
732.9567 339.9954 L
742.7333 377.862 L
742.9333 377.862 L
f
743.0166 224.938 m
751.055 190.0046 L
771.6116 190.0046 L
783.8333 244.0046 L
767.4734 244.0046 L
759.6883 207.3878 L
759.4883 207.3878 L
752.36 244.0046 L
733.4734 244.0046 L
726.345 207.3878 L
726.145 207.3878 L
718.3599 244.0046 L
702 244.0046 L
714.2217 190.0046 L
734.7783 190.0046 L
742.8167 224.938 L
743.0166 224.938 L
f
743.1 72 m
749.4 40 L
773.4 40 L
784 94 L
765 94 L
759.4 60 L
759.2 60 L
754 94 L
732 94 L
726.8 60 L
726.6 60 L
721 94 L
702 94 L
712.6 40 L
736.6 40 L
742.9 72 L
743.1 72 L
f
632.0584 789.9954 m
655 843.9954 L
649.0333 843.9954 L
628.6 795.4955 L
628.4 795.4955 L
607.9667 843.9954 L
602 843.9954 L
624.9416 789.9954 L
632.0584 789.9954 L
f
634.4468 639.9908 m
656.0001 693.9908 L
647.4266 693.9908 L
629.1 647.391 L
628.9 647.391 L
610.5735 693.9908 L
602 693.9908 L
623.5532 639.9908 L
634.4468 639.9908 L
f
636.835 490 m
657 544 L
645.82 544 L
629.6 499.3 L
629.4 499.3 L
613.18 544 L
602 544 L
622.165 490 L
636.835 490 L
f
639.2234 339.9954 m
658 393.9954 L
644.2133 393.9954 L
630.1 351.1955 L
629.9 351.1955 L
615.7867 393.9954 L
602 393.9954 L
620.7766 339.9954 L
639.2234 339.9954 L
f
641.6116 190.0046 m
659 244.0046 L
642.6067 244.0046 L
630.6 203.1045 L
630.4 203.1045 L
618.3933 244.0046 L
602 244.0046 L
619.3884 190.0046 L
641.6116 190.0046 L
f
644 40 m
660 94 L
641 94 L
631.1 55 L
630.9 55 L
621 94 L
602 94 L
618 40 L
644 40 L
f
227.6667 839.9954 m
230.1873 839.9954 232.277 839.6814 235.3334 838.8954 C
236.4167 843.8287 L
232.678 844.6931 230.2706 844.9954 227.3334 844.9954 c
218.3574 844.9954 210.7501 840.2454 207.4501 832.9954 C
207.3334 832.9954 L
207.3334 843.9954 L
202 843.9954 L
202 789.9954 L
207.5001 789.9954 L
207.5001 819.4954 L
207.5001 831.4214 215.6552 839.9954 227.6667 839.9954 c
f
229.3334 687.9907 m
231.8496 687.9907 234.155 687.6062 237.0668 686.7907 C
238.3334 693.6575 L
234.5288 694.624 231.8912 694.9908 228.6667 694.9908 c
220.3398 694.9908 213.0626 690.6159 209.8001 683.9909 C
209.6668 683.9909 L
209.6668 693.9908 L
202 693.9908 L
202 639.9908 L
210.0001 639.9908 L
210.0001 668.9908 L
210.0001 680.3763 217.3492 687.9907 229.3334 687.9907 c
f
231 536 m
233.5117 536 236.0328 535.5449 238.8 534.7 C
240.25 543.5 L
236.3795 544.5686 233.5117 545 230 545 c
222.322 545 215.375 541 212.15 535 C
212 535 L
212 544 L
202 544 L
202 490 L
212.5 490 L
212.5 518.5 L
212.5 529.345 219.0431 536 231 536 c
f
232.6667 383.9954 m
235.174 383.9954 237.9108 383.4698 240.5334 382.5954 C
242.1667 393.3287 L
238.2303 394.4995 235.1324 394.9954 231.3334 394.9954 c
224.3044 394.9954 217.6876 391.3704 214.5001 385.9954 C
214.3334 385.9954 L
214.3334 393.9954 L
202 393.9954 L
202 339.9954 L
215.0001 339.9954 L
215.0001 367.9954 L
215.0001 378.3 220.7371 383.9954 232.6667 383.9954 c
f
234.3333 232.0046 m
236.8362 232.0046 239.7887 231.4085 242.2666 230.5046 C
244.0833 243.1712 L
240.081 244.4441 236.7528 245.0046 232.6666 245.0046 c
226.2866 245.0046 219.9999 241.7546 216.8499 237.0045 C
216.6666 237.0045 L
216.6666 244.0046 L
202 244.0046 L
202 190.0046 L
217.4999 190.0046 L
217.4999 217.5046 L
217.4999 227.2687 222.431 232.0046 234.3333 232.0046 c
f
236 80 m
238.4985 80 241.6667 79.3333 244 78.4 C
246 93 L
241.9318 94.375 238.3735 95 234 95 c
228.269 95 222.3125 92.125 219.2 88 C
219 88 L
219 94 L
202 94 L
202 40 L
220 40 L
220 67 L
220 76.2236 224.125 80 236 80 c
f
344.1667 838.9954 m
338.8537 842.8998 331.8949 844.9954 323.9167 844.9954 c
309.9376 844.9954 303 839.0746 303 830.9954 c
303 822.7639 307.8196 818.1991 323.6167 815.1954 c
336.5804 812.8092 339.6666 809.6161 339.6666 804.0954 c
339.6666 797.5133 334.8393 793.7455 322.5334 793.7455 c
315.2187 793.7455 308.3438 796.4746 303.5 801.0288 C
302 796.3287 L
307.3442 791.6847 314.9196 788.9954 322.6667 788.9954 c
338.1863 788.9954 345.1667 794.6132 345.1667 804.1954 c
345.1667 812.1914 340.758 817.0266 324.0613 820.1556 c
311.7475 822.4072 308.5001 825.5297 308.5001 831.0287 c
308.5001 836.4851 313.6494 840.2454 324.0334 840.2454 c
331.5211 840.2454 338.0828 838.0822 342.6667 834.3787 C
344.1667 838.9954 L
f
345.3334 689.1908 m
339.9574 692.9246 332.6523 694.9908 324.6334 694.9908 c
310.1589 694.9908 303 688.9171 303 680.4908 c
303 672.036 307.8349 667.3521 324.2334 664.0908 c
335.7007 661.9316 338.3332 659.1242 338.3332 654.3908 c
338.3332 648.7201 334.0965 645.4909 322.8667 645.4909 c
315.7315 645.4909 308.8125 648.1368 303.8 652.5576 C
302 646.1575 L
307.4253 641.6672 315.3077 638.9908 323.1334 638.9908 c
339.0406 638.9908 346.3334 644.7469 346.3334 654.5908 c
346.3334 662.8294 341.8471 667.7169 324.589 671.059 c
313.8206 673.0576 311.0001 675.7555 311.0001 680.5575 c
311.0001 685.2288 315.5356 688.4907 324.8667 688.4907 c
332.0605 688.4907 338.6662 686.4352 343.5334 682.8574 C
345.3334 689.1908 L
f
346.5 539.4 m
341.0609 542.9631 333.4097 545 325.35 545 c
310.3802 545 303 538.7732 303 530 c
303 521.3219 307.8501 516.5189 324.85 513 c
334.8212 511.0678 337 508.646 337 504.7 c
337 499.9404 333.3538 497.25 323.2 497.25 c
316.2444 497.25 309.2812 499.8125 304.1 504.1 C
302 496 L
307.5065 491.6635 315.6957 489 323.6 489 c
339.8948 489 347.5 494.8944 347.5 505 c
347.5 513.4812 342.9362 518.4209 325.1168 521.9761 c
315.8936 523.7216 313.5 525.995 313.5 530.1 c
313.5 533.9863 317.4217 536.75 325.7 536.75 c
332.5998 536.75 339.2496 534.8021 344.4 531.35 C
346.5 539.4 L
f
347.6667 389.5954 m
342.1646 392.9879 334.1671 394.9954 326.0667 394.9954 c
310.6016 394.9954 303 388.6157 303 379.4954 c
303 370.594 307.8653 365.6719 325.4667 361.8954 c
333.9416 360.1902 335.6666 358.1541 335.6666 354.9954 c
335.6666 351.1472 332.611 348.9955 323.5334 348.9955 c
316.7572 348.9955 309.75 351.4746 304.4 355.6288 C
302 345.8287 L
307.5877 341.6461 316.0837 338.9954 324.0667 338.9954 c
340.7491 338.9954 348.6667 345.0281 348.6667 355.3954 c
348.6667 364.1193 344.0254 369.1113 325.6445 372.8795 c
317.9668 374.372 316.0001 376.2209 316.0001 379.6287 c
316.0001 382.7301 319.3079 384.9954 326.5334 384.9954 c
333.1392 384.9954 339.8331 383.1551 345.2667 379.8287 C
347.6667 389.5954 L
f
348.8333 239.8046 m
343.2682 243.0265 334.9245 245.0046 326.7833 245.0046 c
310.8229 245.0046 303 238.4719 303 229.0046 c
303 219.8799 307.8806 214.8386 326.0833 210.8046 c
333.062 209.3264 334.3334 207.6759 334.3334 205.3046 c
334.3334 202.3676 331.8683 200.7545 323.8666 200.7545 c
317.27 200.7545 310.2187 203.1504 304.7 207.1712 C
302 195.6712 L
307.6688 191.6424 316.4717 189.0046 324.5333 189.0046 c
341.6033 189.0046 349.8333 195.1756 349.8333 205.8046 c
349.8333 214.771 345.1144 219.8153 326.1722 223.7966 c
320.0397 225.0361 318.4999 226.4604 318.4999 229.1713 c
318.4999 231.4876 321.1939 233.2546 327.3666 233.2546 c
333.6785 233.2546 340.4165 231.522 346.1333 228.3213 C
348.8333 239.8046 L
f
347 76.8 m
350 90 L
344.3719 93.0513 335.6819 95 327.5 95 c
311.0442 95 303 88.3143 303 78.5 c
303 69.152 307.8958 63.9916 326.7 59.7 c
332.1824 58.4488 333 57.184 333 55.6 c
333 53.5743 331.1255 52.5 324.2 52.5 c
317.7829 52.5 310.6875 54.8125 305 58.7 C
302 45.5 L
307.75 41.625 316.8597 39 325 39 c
342.4576 39 351 45.3093 351 56.2 c
351 65.4091 346.2036 70.5056 326.7 74.7 c
322.1129 75.6865 321 76.6862 321 78.7 c
321 80.2313 323.0801 81.5 328.2 81.5 c
334.2179 81.5 341 79.875 347 76.8 C
f
420.0001 861.9954 m
414.5 861.9954 L
414.5 843.9954 L
402 843.9954 L
402 839.3287 L
414.5 839.3287 L
414.5 808.6621 L
414.5 793.6047 418.963 788.9954 430 788.9954 c
434.536 788.9954 437.75 789.5996 441.5001 790.9954 C
440.55 795.8121 L
437.0908 794.4376 433.89 793.8288 430.1667 793.8288 c
422.696 793.8288 420.0001 796.1618 420.0001 808.6621 C
420.0001 839.3287 L
441.5001 839.3287 L
441.5001 843.9954 L
420.0001 843.9954 L
420.0001 861.9954 L
f
422.0001 711.9908 m
414 711.9908 L
414 693.9908 L
402 693.9908 L
402 687.6574 L
414 687.6574 L
414 659.3242 L
414 644.0478 419.0641 638.9908 431.0001 638.9908 c
435.7539 638.9908 439.0626 639.5742 443.0001 640.9908 C
441.9001 647.7243 L
438.3352 646.2697 435.1621 645.6576 431.3334 645.6576 c
424.3694 645.6576 422.0001 647.745 422.0001 659.3242 C
422.0001 687.6574 L
443.0001 687.6574 L
443.0001 693.9908 L
422.0001 693.9908 L
422.0001 711.9908 L
f
424 562 m
413.5 562 L
413.5 544 L
402 544 L
402 536 L
413.5 536 L
413.5 510 L
413.5 494.5046 419.1652 489 432 489 c
436.9716 489 440.375 489.5625 444.5 491 C
443.25 499.65 L
439.5794 498.1153 436.434 497.5 432.5 497.5 c
426.0426 497.5 424 499.3418 424 510 C
424 536 L
444.5 536 L
444.5 544 L
424 544 L
424 562 L
f
426.0001 411.9954 m
413 411.9954 L
413 393.9954 L
402 393.9954 L
402 384.3287 L
413 384.3287 L
413 360.6621 L
413 344.9478 419.2662 338.9954 433 338.9954 c
438.1894 338.9954 441.6875 339.5371 446.0001 340.9954 C
444.6 351.5621 L
440.8238 349.9473 437.706 349.3288 433.6667 349.3288 c
427.7159 349.3288 426.0001 350.9251 426.0001 360.6621 C
426.0001 384.3287 L
446.0001 384.3287 L
446.0001 393.9954 L
426.0001 393.9954 L
426.0001 411.9954 L
f
428 262.0046 m
412.5 262.0046 L
412.5 244.0046 L
402 244.0046 L
402 232.6713 L
412.5 232.6713 L
412.5 211.3379 L
412.5 195.4046 419.3673 189.0046 434 189.0046 c
439.4072 189.0046 443 189.5254 447.5 191.0046 C
445.9499 203.4879 L
442.0681 201.7929 438.978 201.1712 434.8333 201.1712 c
429.3891 201.1712 428 202.5219 428 211.3379 C
428 232.6713 L
447.5 232.6713 L
447.5 244.0046 L
428 244.0046 L
428 262.0046 L
f
430 112 m
412 112 L
412 94 L
402 94 L
402 81 L
412 81 L
412 62 L
412 45.8477 419.4684 39 435 39 c
440.625 39 444.3125 39.5 449 41 C
447.3 55.4 L
443.3125 53.625 440.25 53 436 53 c
431.0625 53 430 54.1051 430 62 C
430 81 L
449 81 L
449 94 L
430 94 L
430 112 L
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
