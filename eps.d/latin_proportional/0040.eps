%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (0040.eps)
%%CreationDate: (1/20/05) (4:23 PM)
%%BoundingBox: 0 0 800 1050
%%HiResBoundingBox: 0 0 800 1050
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 394.5 530 394.5 530
%AI3_TileBox: -180.5 -228 971.5 1302
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 1188 1680
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -373.5 1058 -2 794 557 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%AI5_ViewPalette: 0 1 -2 4331 4334 0 1 5 whole view
%%PageOrigin:-180.5 -228
%%AI3_PaperRect:-19 1615 1171 -68
%%AI3_Margin:19 -85 -19 68
%AI7_GridSettings: 0.5 10 0.5 10 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 0 79 128 255 Lb
(\203\214\203C\203\204\201[1) Ln
0 A
u
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 900 m
100 1050 L
0 1050 L
0 900 L
100 900 L
n
200 900 m
200 1050 L
100 1050 L
100 900 L
200 900 L
n
300 900 m
300 1050 L
200 1050 L
200 900 L
300 900 L
n
400 900 m
400 1050 L
300 1050 L
300 900 L
400 900 L
n
500 900 m
500 1050 L
400 1050 L
400 900 L
500 900 L
n
600 900 m
600 1050 L
500 1050 L
500 900 L
600 900 L
n
700 900 m
700 1050 L
600 1050 L
600 900 L
700 900 L
n
800 900 m
800 1050 L
700 1050 L
700 900 L
800 900 L
n
100 750 m
100 900 L
0 900 L
0 750 L
100 750 L
n
200 750 m
200 900 L
100 900 L
100 750 L
200 750 L
n
300 750 m
300 900 L
200 900 L
200 750 L
300 750 L
n
400 750 m
400 900 L
300 900 L
300 750 L
400 750 L
n
500 750 m
500 900 L
400 900 L
400 750 L
500 750 L
n
600 750 m
600 900 L
500 900 L
500 750 L
600 750 L
n
700 750 m
700 900 L
600 900 L
600 750 L
700 750 L
n
800 750 m
800 900 L
700 900 L
700 750 L
800 750 L
n
100 600 m
100 750 L
0 750 L
0 600 L
100 600 L
n
200 600 m
200 750 L
100 750 L
100 600 L
200 600 L
n
300 600 m
300 750 L
200 750 L
200 600 L
300 600 L
n
400 600 m
400 750 L
300 750 L
300 600 L
400 600 L
n
500 600 m
500 750 L
400 750 L
400 600 L
500 600 L
n
600 600 m
600 750 L
500 750 L
500 600 L
600 600 L
n
700 600 m
700 750 L
600 750 L
600 600 L
700 600 L
n
800 600 m
800 750 L
700 750 L
700 600 L
800 600 L
n
100 450 m
100 600 L
0 600 L
0 450 L
100 450 L
n
200 450 m
200 600 L
100 600 L
100 450 L
200 450 L
n
300 450 m
300 600 L
200 600 L
200 450 L
300 450 L
n
400 450 m
400 600 L
300 600 L
300 450 L
400 450 L
n
500 450 m
500 600 L
400 600 L
400 450 L
500 450 L
n
600 450 m
600 600 L
500 600 L
500 450 L
600 450 L
n
700 450 m
700 600 L
600 600 L
600 450 L
700 450 L
n
800 450 m
800 600 L
700 600 L
700 450 L
800 450 L
n
100 300 m
100 450 L
0 450 L
0 300 L
100 300 L
n
200 300 m
200 450 L
100 450 L
100 300 L
200 300 L
n
300 300 m
300 450 L
200 450 L
200 300 L
300 300 L
n
400 300 m
400 450 L
300 450 L
300 300 L
400 300 L
n
500 300 m
500 450 L
400 450 L
400 300 L
500 300 L
n
600 300 m
600 450 L
500 450 L
500 300 L
600 300 L
n
700 300 m
700 450 L
600 450 L
600 300 L
700 300 L
n
800 300 m
800 450 L
700 450 L
700 300 L
800 300 L
n
100 150 m
100 300 L
0 300 L
0 150 L
100 150 L
n
200 150 m
200 300 L
100 300 L
100 150 L
200 150 L
n
300 150 m
300 300 L
200 300 L
200 150 L
300 150 L
n
400 150 m
400 300 L
300 300 L
300 150 L
400 150 L
n
500 150 m
500 300 L
400 300 L
400 150 L
500 150 L
n
600 150 m
600 300 L
500 300 L
500 150 L
600 150 L
n
700 150 m
700 300 L
600 300 L
600 150 L
700 150 L
n
800 150 m
800 300 L
700 300 L
700 150 L
800 150 L
n
100 0 m
100 150 L
0 150 L
0 0 L
100 0 L
n
200 0 m
200 150 L
100 150 L
100 0 L
200 0 L
n
300 0 m
300 150 L
200 150 L
200 0 L
300 0 L
n
400 0 m
400 150 L
300 150 L
300 0 L
400 0 L
n
500 0 m
500 150 L
400 150 L
400 0 L
500 0 L
n
600 0 m
600 150 L
500 150 L
500 0 L
600 0 L
n
700 0 m
700 150 L
600 150 L
600 0 L
700 0 L
n
800 0 m
800 150 L
700 150 L
700 0 L
800 0 L
n
U
0 O
0 g
1 D
136.1 1013 m
166.7 940 L
170 940 L
138 1016 L
134 1016 L
102 940 L
105.3 940 L
135.9 1013 L
136.1 1013 L
f
115 969 m
115 966 L
157 966 L
157 969 L
115 969 L
f
205 982 m
205 979 L
227 979 L
227 979 l
244.2066 979 252 972.674 252 962 c
252 949.4927 244.3732 943 227 943 c
205 943 L
205 940 L
227 940 l
245.9129 940 255 947.5685 255 962 c
255 971.7329 248.8125 978.9375 236.8 980.6 C
236.8 980.8 L
246.125 982.375 251 988.7695 251 997.5 c
251 1009.0758 243.0487 1016 227 1016 c
202 1016 l
202 940 L
205 940 L
205 1013 L
227 1013 l
241.2974 1013 248 1007.2604 248 997.5 c
248 987.5735 241.1308 982 227 982 c
227 982 L
205 982 L
f
549 982 m
549 982 L
505 982 L
505 1013 L
551 1013 L
551 1016 L
502 1016 l
502 940 L
551 940 L
551 943 L
505 943 L
505 979 L
549 979 L
549 982 L
f
649 982 m
649 982 L
605 982 L
605 1013 L
651 1013 L
651 1016 L
602 1016 l
602 940 L
605 940 L
605 979 L
649 979 L
649 982 L
f
419 943 m
405 943 L
405 940 L
419 940 l
444.6526 940 459 954.3473 459 978 c
459 1002.7197 445.7196 1016 419 1016 c
402 1016 l
402 940 L
405 940 L
405 1013 L
419 1013 l
443.5514 1013 456 1001.2243 456 978 c
456 955.757 442.514 943 419 943 c
f
71 979 m
71 967.6856 63.4202 959.1 53.9049 959.1 c
48.0422 959.1 45.7473 962.5254 48.4059 971.797 c
56.5216 1000.1001 L
53.5216 1000.1001 L
51.4581 992.9039 L
51.2581 992.9039 L
50.3117 999.1209 46.8085 1002.1 40.0951 1002.1 c
29.8196 1002.1 20.8879 994.4024 16.5 979.1 c
12.5426 965.2986 18.7724 956.1 28.9049 956.1 C
28.9049 959.1 L
20.626 959.1 16.0255 966.5613 19.3838 978.2731 c
23.179 991.5089 30.728 999.1 40.0951 999.1 c
47.8376 999.1 51.3744 993.0336 47.6162 979.9269 c
43.4386 965.358 36.4873 959.1 28.9049 959.1 C
28.9049 956.1 L
34.8623 956.1 40.9336 960.0378 44.4333 966.4666 C
44.6333 966.4666 L
43.1688 960.4543 47.1885 956.1 53.9049 956.1 c
64.5919 956.1 74 965.8178 74 979 c
74 999.7675 59.1006 1015 39 1015 c
18.5658 1015 2 998.4342 2 978 c
2 957.5658 18.5658 941 39 941 c
49.6166 941 59.6648 945.5598 66.8 953.6 C
63.6 954.4 L
57.1762 947.6982 48.2877 944 39 944 c
20.2226 944 5 959.2226 5 978 c
5 996.7774 20.2226 1012 39 1012 c
57.7774 1012 71 997.7774 71 979 c
f
766 945 m
766 982 L
734 982 L
734 979 L
763 979 L
763 946.9048 L
756.221 943.7866 747.6049 942 739 942 c
718.8302 942 705 956.3007 705 978 c
705 999.6993 718.8302 1014 739 1014 c
748.2003 1014 753.9016 1012.5462 762 1008.1 C
763 1011 L
755.4107 1015.1667 748.2506 1017 739 1017 c
717.0715 1017 702 1001.5049 702 978 c
702 954.4951 717.0715 939 739 939 c
749.1783 939 758.8451 941.3125 766 945 C
f
360 945 m
359 947.9 L
352.2147 943.6219 346.2031 942 339 942 c
318.8302 942 305 956.3007 305 978 c
305 999.6993 318.8302 1014 339 1014 c
346.2031 1014 352.2147 1012.3781 359 1008.1 C
360 1011 L
353.5138 1015.0895 346.7031 1017 339 1017 c
317.0715 1017 302 1001.5049 302 978 c
302 954.4951 317.0715 939 339 939 c
346.7031 939 353.5138 940.9105 360 945 C
f
136.7667 859.3286 m
165.0833 789.9954 L
171.3334 789.9954 L
140.1667 865.9954 L
133.1667 865.9954 L
102 789.9954 L
108.2501 789.9954 L
136.5667 859.3286 L
136.7667 859.3286 L
f
137.4334 705.6573 m
163.4666 639.9908 L
172.6667 639.9908 L
142.3335 715.9908 L
132.3333 715.9908 L
102 639.9908 L
111.2002 639.9908 L
137.2334 705.6573 L
137.4334 705.6573 L
f
138.1 552 m
161.85 490 L
174 490 L
144.5 566 L
131.5 566 L
102 490 L
114.15 490 L
137.9 552 L
138.1 552 L
f
138.7667 398.3286 m
160.2333 339.9954 L
175.3334 339.9954 L
146.6667 415.9954 L
130.6667 415.9954 L
102 339.9954 L
117.1001 339.9954 L
138.5667 398.3286 L
138.7667 398.3286 L
f
139.4333 244.6714 m
158.6167 190.0046 L
176.6666 190.0046 L
148.8333 266.0046 L
129.8334 266.0046 L
102 190.0046 L
120.0499 190.0046 L
139.2333 244.6714 L
139.4333 244.6714 L
f
140.1 91 m
157 40 L
178 40 L
151 116 L
129 116 l
102 40 L
123 40 L
139.9 91 L
140.1 91 L
f
158 813.9954 m
158 819.1621 L
115.3334 819.1621 L
115.3334 813.9954 L
158 813.9954 L
f
159.0001 661.9907 m
159.0001 669.3242 L
115.6667 669.3242 L
115.6667 661.9907 L
159.0001 661.9907 L
f
160 510 m
160 519.5 L
116 519.5 L
116 510 L
160 510 L
f
161 357.9954 m
161 369.6621 L
116.3334 369.6621 L
116.3334 357.9954 L
161 357.9954 L
f
162 206.0046 m
162 219.8379 L
116.6667 219.8379 L
116.6667 206.0046 L
162 206.0046 L
f
163 54 m
163 70 L
117 70 L
117 54 L
163 54 L
f
207.8334 832.8288 m
207.8334 827.662 L
227.8334 827.662 L
227.8334 827.662 l
243.6175 827.662 250.6666 821.9495 250.6666 812.3288 c
250.6666 801.0144 243.7375 795.1622 227.8334 795.1622 c
207.8334 795.1622 L
207.8334 789.9954 L
227.8334 789.9954 l
247.3851 789.9954 256.5001 797.5362 256.5001 811.9954 c
256.5001 821.5643 250.2292 828.9303 238.8 830.5121 C
238.8 830.7121 L
247.7083 832.2167 252.6667 838.7242 252.6667 847.4954 c
252.6667 859.099 244.7154 865.9954 228 865.9954 c
202 865.9954 l
202 789.9954 L
207.8334 789.9954 L
207.8334 860.8287 L
227.3334 860.8287 l
240.8405 860.8287 246.8333 855.7587 246.8333 846.8287 c
246.8333 837.833 240.6409 832.8288 227.3334 832.8288 c
227.3334 832.8288 L
207.8334 832.8288 L
f
210.6668 683.6576 m
210.6668 676.3241 L
228.6667 676.3241 L
228.6667 676.3241 l
243.0285 676.3241 249.3332 671.225 249.3332 662.6575 c
249.3332 652.5362 243.1018 647.3243 228.6667 647.3243 c
210.6668 647.3243 L
210.6668 639.9908 L
228.6667 639.9908 l
248.8573 639.9908 258.0001 647.5039 258.0001 661.9908 c
258.0001 671.3957 251.6458 678.9231 240.8001 680.4242 C
240.8001 680.6242 L
249.2916 682.0584 254.3334 688.679 254.3334 697.4908 c
254.3334 709.1222 246.382 715.9908 229.0001 715.9908 c
202 715.9908 l
202 639.9908 L
210.6668 639.9908 L
210.6668 708.6574 L
227.6667 708.6574 l
240.3837 708.6574 245.6666 704.2571 245.6666 696.1575 c
245.6666 688.0924 240.1509 683.6576 227.6667 683.6576 c
227.6667 683.6576 L
210.6668 683.6576 L
f
213.5 534.5 m
213.5 525 L
229.5 525 L
229.5 525 l
242.4395 525 248 520.5143 248 513 c
248 504.0715 242.4662 499.5 229.5 499.5 c
213.5 499.5 L
213.5 490 L
229.5 490 l
250.3293 490 259.5 497.4854 259.5 512 c
259.5 521.2408 253.0624 528.9297 242.8 530.35 C
242.8 530.55 L
250.8748 531.9138 256 538.6475 256 547.5 c
256 559.1591 248.0486 566 230 566 c
202 566 l
202 490 L
213.5 490 L
213.5 556.5 L
228 556.5 l
239.9268 556.5 244.5 552.7693 244.5 545.5 c
244.5 538.3656 239.6611 534.5 228 534.5 c
228 534.5 L
213.5 534.5 L
f
216.3334 385.3288 m
216.3334 373.662 L
230.3334 373.662 L
230.3334 373.662 l
241.8505 373.662 246.6666 369.7899 246.6666 363.3288 c
246.6666 355.5932 241.8306 351.6622 230.3334 351.6622 c
216.3334 351.6622 L
216.3334 339.9954 L
230.3334 339.9954 l
251.8015 339.9954 261.0001 347.4531 261.0001 361.9954 c
261.0001 371.0722 254.4791 378.9225 244.8 380.2621 C
244.8 380.4621 L
252.4581 381.7555 257.6667 388.6022 257.6667 397.4954 c
257.6667 409.1824 249.7153 415.9954 231 415.9954 c
202 415.9954 l
202 339.9954 L
216.3334 339.9954 L
216.3334 404.3287 L
228.3334 404.3287 l
239.47 404.3287 243.3333 401.2676 243.3333 394.8287 c
243.3333 388.6251 239.1711 385.3288 228.3334 385.3288 c
228.3334 385.3288 L
216.3334 385.3288 L
f
219.1666 236.1712 m
219.1666 222.3379 L
231.1667 222.3379 L
231.1667 222.3379 l
241.2615 222.3379 245.3334 219.0792 245.3334 213.6712 c
245.3334 207.1286 241.195 203.8378 231.1667 203.8378 c
219.1666 203.8378 L
219.1666 190.0046 L
231.1667 190.0046 l
253.2736 190.0046 262.5 197.4346 262.5 212.0046 c
262.5 220.9174 255.8956 228.9291 246.7999 230.1879 C
246.7999 230.3879 L
254.0413 231.611 259.3333 238.5708 259.3333 247.5046 c
259.3333 259.2193 251.3818 266.0046 232 266.0046 c
202 266.0046 l
202 190.0046 L
219.1666 190.0046 L
219.1666 252.1713 L
228.6667 252.1713 l
239.0131 252.1713 242.1667 249.7799 242.1667 244.1712 c
242.1667 238.8982 238.6812 236.1712 228.6667 236.1712 c
228.6667 236.1712 L
219.1666 236.1712 L
f
229 87 m
222 87 L
222 71 L
232 71 l
232 71 l
240.6725 71 244 68.3547 244 64 c
244 58.6503 240.5593 56 232 56 c
222 56 L
222 40 L
232 40 l
254.7458 40 264 47.4023 264 62 c
264 70.7488 257.3123 78.9219 248.8 80.1 C
248.8 80.3 L
255.6246 81.4527 261 88.5255 261 97.5 c
261 109.2425 253.0485 116 233 116 c
202 116 l
202 40 L
222 40 L
222 100 L
229 100 l
238.5563 100 241 98.2782 241 93.5 c
241 89.1577 238.1913 87 229 87 c
229 87 L
f
550.1667 832.8288 m
550.1667 832.8288 L
507.8334 832.8288 L
507.8334 860.8287 L
552.1667 860.8287 L
552.1667 865.9954 L
502 865.9954 l
502 789.9954 L
552.1667 789.9954 L
552.1667 795.1622 L
507.8334 795.1622 L
507.8334 827.662 L
550.1667 827.662 L
550.1667 832.8288 L
f
551.3334 683.6576 m
551.3334 683.6576 L
510.6668 683.6576 L
510.6668 708.6574 L
553.3334 708.6574 L
553.3334 715.9908 L
502 715.9908 l
502 639.9908 L
553.3334 639.9908 L
553.3334 647.3243 L
510.6668 647.3243 L
510.6668 676.3241 L
551.3334 676.3241 L
551.3334 683.6576 L
f
552.5 534.5 m
552.5 534.5 L
513.5 534.5 L
513.5 556.5 L
554.5 556.5 L
554.5 566 L
502 566 l
502 490 L
554.5 490 L
554.5 499.5 L
513.5 499.5 L
513.5 525 L
552.5 525 L
552.5 534.5 L
f
553.6667 385.3288 m
553.6667 385.3288 L
516.3334 385.3288 L
516.3334 404.3287 L
555.6667 404.3287 L
555.6667 415.9954 L
502 415.9954 l
502 339.9954 L
555.6667 339.9954 L
555.6667 351.6622 L
516.3334 351.6622 L
516.3334 373.662 L
553.6667 373.662 L
553.6667 385.3288 L
f
554.8333 236.1712 m
554.8333 236.1712 L
519.1666 236.1712 L
519.1666 252.1713 L
556.8333 252.1713 L
556.8333 266.0046 L
502 266.0046 l
502 190.0046 L
556.8333 190.0046 L
556.8333 203.8378 L
519.1666 203.8378 L
519.1666 222.3379 L
554.8333 222.3379 L
554.8333 236.1712 L
f
556 87 m
556 87 L
522 87 L
522 100 L
558 100 L
558 116 L
502 116 l
502 40 L
558 40 L
558 56 L
522 56 L
522 71 L
556 71 L
556 87 L
f
650.1667 832.4954 m
650.1667 832.4954 L
607.8334 832.4954 L
607.8334 860.8287 L
652.1667 860.8287 L
652.1667 865.9954 L
602 865.9954 l
602 789.9954 L
607.8334 789.9954 L
607.8334 827.3287 L
650.1667 827.3287 L
650.1667 832.4954 L
f
651.3334 682.9909 m
651.3334 682.9909 L
610.6668 682.9909 L
610.6668 708.6574 L
653.3334 708.6574 L
653.3334 715.9908 L
602 715.9908 l
602 639.9908 L
610.6668 639.9908 L
610.6668 675.6574 L
651.3334 675.6574 L
651.3334 682.9909 L
f
652.5 533.5 m
652.5 533.5 L
613.5 533.5 L
613.5 556.5 L
654.5 556.5 L
654.5 566 L
602 566 l
602 490 L
613.5 490 L
613.5 524 L
652.5 524 L
652.5 533.5 L
f
653.6667 383.9954 m
653.6667 383.9954 L
616.3334 383.9954 L
616.3334 404.3287 L
655.6667 404.3287 L
655.6667 415.9954 L
602 415.9954 l
602 339.9954 L
616.3334 339.9954 L
616.3334 372.3287 L
653.6667 372.3287 L
653.6667 383.9954 L
f
654.8333 234.5046 m
654.8333 234.5046 L
619.1666 234.5046 L
619.1666 252.1713 L
656.8333 252.1713 L
656.8333 266.0046 L
602 266.0046 l
602 190.0046 L
619.1666 190.0046 L
619.1666 220.6713 L
654.8333 220.6713 L
654.8333 234.5046 L
f
656 85 m
656 85 L
622 85 L
622 100 L
658 100 L
658 116 L
602 116 l
602 40 L
622 40 L
622 69 L
656 69 L
656 85 L
f
361 794.9954 m
359.3334 800.0788 L
352.6372 795.8262 346.6214 794.1622 339.5 794.1622 c
320.9511 794.1622 308.0001 807.6818 308.0001 827.9954 c
308.0001 848.309 320.9511 861.8287 339.5 861.8287 c
346.6214 861.8287 352.6372 860.1646 359.3334 855.912 C
361 860.9954 L
354.5579 865.0571 347.5479 866.9954 339.3334 866.9954 c
317.0901 866.9954 302 851.5373 302 827.9954 c
302 804.4535 317.0901 788.9954 339.3334 788.9954 c
347.459 788.9954 354.5579 790.9337 361 794.9954 C
f
362.0001 644.9908 m
359.6667 652.2576 L
353.0598 648.0306 347.0396 646.3243 340 646.3243 c
323.0721 646.3243 311.0002 659.0629 311.0002 677.9908 c
311.0002 696.9188 323.0721 709.6574 340 709.6574 c
347.0396 709.6574 353.0598 707.9511 359.6667 703.724 C
362.0001 710.9908 L
355.602 715.0248 348.3927 716.9908 339.6667 716.9908 c
317.1087 716.9908 302 701.5697 302 677.9908 c
302 654.412 317.1087 638.9908 339.6667 638.9908 c
348.2149 638.9908 355.602 640.9569 362.0001 644.9908 C
f
363 495 m
360 504.45 L
353.4823 500.2484 347.4579 498.5 340.5 498.5 c
325.1929 498.5 314 510.4576 314 528 c
314 545.5423 325.1929 557.5 340.5 557.5 c
347.4579 557.5 353.4823 555.7515 360 551.55 C
363 561 L
356.6459 565.0062 349.2374 567 340 567 c
317.1273 567 302 551.6158 302 528 c
302 504.3841 317.1273 489 340 489 c
348.9707 489 356.646 490.9938 363 495 C
f
364 344.9954 m
360.3334 356.6288 L
353.9049 352.4528 347.8762 350.6622 341 350.6622 c
327.3139 350.6622 317.0001 361.8388 317.0001 377.9954 c
317.0001 394.1521 327.3139 405.3287 341 405.3287 c
347.8762 405.3287 353.9049 403.5381 360.3334 399.362 C
364 410.9954 L
357.69 414.9739 350.0823 416.9954 340.3334 416.9954 c
317.146 416.9954 302 401.6483 302 377.9954 c
302 354.3426 317.146 338.9954 340.3334 338.9954 c
349.7266 338.9954 357.6901 341.0171 364 344.9954 C
f
365 195.0046 m
360.6667 208.8212 L
354.3274 204.6707 348.2944 202.8378 341.5 202.8378 c
329.4346 202.8378 319.9999 213.2335 319.9999 228.0046 c
319.9999 242.7757 329.4346 253.1713 341.5 253.1713 c
348.2944 253.1713 354.3274 251.3385 360.6667 247.188 C
365 261.0046 L
358.734 264.9553 350.927 267.0046 340.6667 267.0046 c
317.1646 267.0046 302 251.6944 302 228.0046 c
302 204.3148 317.1646 189.0046 340.6667 189.0046 c
350.4824 189.0046 358.7341 191.054 365 195.0046 C
f
302 78 m
302 54.2732 317.1832 39 341 39 c
351.2383 39 359.7782 41.0772 366 45 C
361 61 L
354.75 56.875 348.7127 55 342 55 c
331.5556 55 323 64.6146 323 78 c
323 91.3854 331.5556 101 342 101 c
348.7127 101 354.75 99.125 361 95 C
366 111 L
359.7781 114.9229 351.7718 117 341 117 c
317.1832 117 302 101.7268 302 78 c
f
420.5001 795.1622 m
407.8334 795.1622 L
407.8334 789.9954 L
420.5001 789.9954 l
446.0415 789.9954 460.5001 804.2316 460.5001 827.9954 c
460.5001 852.7429 447.1918 865.9954 420.5001 865.9954 c
402 865.9954 l
402 789.9954 L
407.8334 789.9954 L
407.8334 860.8287 L
420.5001 860.8287 l
443.2904 860.8287 454.6666 849.9542 454.6666 827.9954 c
454.6666 806.969 442.2703 795.1622 420.5001 795.1622 c
f
422.0001 647.3243 m
410.6668 647.3243 L
410.6668 639.9908 L
422.0001 639.9908 l
447.4305 639.9908 462.0001 654.1159 462.0001 677.9908 c
462.0001 702.7661 448.6641 715.9908 422.0001 715.9908 c
402 715.9908 l
402 639.9908 L
410.6668 639.9908 L
410.6668 708.6574 L
422.0001 708.6574 l
443.0294 708.6574 453.3332 698.684 453.3332 677.9908 c
453.3332 658.181 442.0267 647.3243 422.0001 647.3243 c
f
423.5 499.5 m
413.5 499.5 L
413.5 490 L
423.5 490 l
448.8193 490 463.5 504.014 463.5 528 c
463.5 552.8031 450.1362 566 423.5 566 c
402 566 l
402 490 L
413.5 490 L
413.5 556.5 L
423.5 556.5 l
442.7684 556.5 452 547.4277 452 528 c
452 509.4067 441.783 499.5 423.5 499.5 c
f
425.0001 351.6622 m
416.3334 351.6622 L
416.3334 339.9954 L
425.0001 339.9954 l
450.2082 339.9954 465.0001 353.8983 465.0001 377.9954 c
465.0001 402.8263 451.6084 415.9954 425.0001 415.9954 c
402 415.9954 l
402 339.9954 L
416.3334 339.9954 L
416.3334 404.3287 L
425.0001 404.3287 l
442.5074 404.3287 450.6666 396.1576 450.6666 377.9954 c
450.6666 360.6187 441.5394 351.6622 425.0001 351.6622 c
f
426.5 203.8378 m
419.1666 203.8378 L
419.1666 190.0046 L
426.5 190.0046 l
451.5971 190.0046 466.5 203.7964 466.5 228.0046 c
466.5 252.8632 453.0805 266.0046 426.5 266.0046 c
402 266.0046 l
402 190.0046 L
419.1666 190.0046 L
419.1666 252.1713 L
426.5 252.1713 l
442.2464 252.1713 449.3334 244.9013 449.3334 228.0046 c
449.3334 211.8444 441.2957 203.8378 426.5 203.8378 c
f
428 56 m
422 56 L
422 40 L
428 40 l
452.986 40 468 53.6807 468 78 c
468 102.8864 454.5528 116 428 116 c
402 116 l
402 40 L
422 40 L
422 100 L
428 100 l
441.9854 100 448 93.6312 448 78 c
448 63.0564 441.0521 56 428 56 c
f
734.3334 827.662 m
760.8333 827.662 L
760.8333 798.3688 L
754.6633 795.6926 746.8971 794.1622 739.3334 794.1622 c
720.7845 794.1622 707.8334 807.6818 707.8334 827.9954 c
707.8334 848.3368 720.7845 861.8287 739.5 861.8287 c
748.3755 861.8287 754.6963 860.2144 762.5 855.912 C
764 860.9954 L
756.5402 865.0614 748.6708 866.9954 739.1667 866.9954 c
717.0901 866.9954 702 851.5373 702 827.9954 c
702 804.4535 717.0901 788.9954 739.1667 788.9954 c
749.4994 788.9954 759.548 791.3288 766.6667 794.9954 C
766.6667 832.8288 L
734.3334 832.8288 L
734.3334 827.662 L
f
734.6667 676.3241 m
758.6665 676.3241 L
758.6665 649.8328 L
753.1056 647.5987 746.1893 646.3243 739.6667 646.3243 c
722.7388 646.3243 710.6668 659.0629 710.6668 677.9908 c
710.6668 696.9743 722.7388 709.6574 740 709.6574 c
748.5507 709.6574 755.4909 707.8826 763 703.724 C
765.0001 710.9908 L
757.6697 714.9561 749.091 716.9908 739.3333 716.9908 c
717.1087 716.9908 702 701.5697 702 677.9908 c
702 654.412 717.1087 638.9908 739.3333 638.9908 c
749.8205 638.9908 760.2509 641.345 767.3334 644.9908 C
767.3334 683.6576 L
734.6667 683.6576 L
734.6667 676.3241 L
f
735 525 m
756.5 525 L
756.5 501.3104 L
751.548 499.5183 745.4816 498.5 740 498.5 c
724.6929 498.5 713.5 510.4576 713.5 528 c
713.5 545.6257 724.6929 557.5 740.5 557.5 c
748.7259 557.5 756.2855 555.5647 763.5 551.55 C
766 561 L
758.7991 564.8646 749.5112 567 739.5 567 c
717.1273 567 702 551.6158 702 528 c
702 504.3841 717.1273 489 739.5 489 c
750.1416 489 760.9538 491.375 768 495 C
768 534.5 L
735 534.5 L
735 525 L
f
735.3334 373.662 m
754.3333 373.662 L
754.3333 352.7745 L
749.9903 351.4243 744.7738 350.6622 740.3334 350.6622 c
726.6472 350.6622 716.3334 361.8388 716.3334 377.9954 c
716.3334 394.2632 726.6472 405.3287 741 405.3287 c
748.9011 405.3287 757.0802 403.233 764 399.362 C
767 410.9954 L
759.9286 414.7593 749.9314 416.9954 739.6667 416.9954 c
717.1459 416.9954 702 401.6483 702 377.9954 c
702 354.3426 717.1459 338.9954 739.6667 338.9954 c
750.4627 338.9954 761.6567 341.3913 768.6667 344.9954 C
768.6667 385.3288 L
735.3334 385.3288 L
735.3334 373.662 L
f
735.6667 222.3379 m
752.1667 222.3379 L
752.1667 204.2521 L
748.4327 203.3439 744.0661 202.8378 740.6667 202.8378 c
728.6013 202.8378 719.1666 213.2335 719.1666 228.0046 c
719.1666 242.9146 728.6013 253.1713 741.5 253.1713 c
749.0763 253.1713 757.8748 250.9151 764.5 247.188 C
768 261.0046 L
761.058 264.6678 750.3516 267.0046 739.8333 267.0046 c
717.1645 267.0046 702 251.6944 702 228.0046 c
702 204.3148 717.1645 189.0046 739.8333 189.0046 c
750.7838 189.0046 762.3596 191.4212 769.3333 195.0046 C
769.3333 236.1712 L
735.6667 236.1712 L
735.6667 222.3379 L
f
736 71 m
750 71 L
750 55.7161 L
746.875 55.25 743.3583 55 741 55 c
730.5556 55 722 64.6146 722 78 c
722 91.5521 730.5556 101 742 101 c
749.2515 101 758.6695 98.5833 765 95 C
769 111 L
762.1875 114.5625 750.7718 117 740 117 c
717.1831 117 702 101.7268 702 78 c
702 54.2732 717.1831 39 740 39 c
751.1049 39 763.0625 41.4375 770 45 C
770 87 L
736 87 L
736 71 L
f
56.1425 57.0239 m
51.5075 53.4978 45.7712 51.5519 40 51.5519 c
25.4164 51.5519 13.5519 63.4164 13.5519 78 c
13.5519 92.5836 25.4164 104.4481 40 104.4481 c
54.038 104.4481 64.6241 93.862 64.6241 79.824 c
64.6241 71.4421 60.6831 66.125 55.5799 66.125 c
53.5671 66.125 52.6152 67.7298 53.7343 74.0767 C
57.8599 97.4749 L
45.51 97.4749 L
45.035 95.005 L
44.845 95.005 L
43.3487 96.5843 41.1909 97.4749 38.48 97.4749 c
28.1563 97.4749 20.1162 90.228 17.96 78 c
16.0788 67.3312 23.6602 57.8601 31.45 57.8601 C
34.7873 69.45 L
31.3583 69.45 29.1478 72.4864 30.12 78 c
31.0923 83.5137 34.0943 86.55 37.8027 86.55 c
41.4179 86.55 43.4143 83.3553 42.47 78 c
41.4698 72.3281 38.5233 69.45 34.7873 69.45 C
31.45 57.8601 L
37.6402 57.8601 41.2528 59.3084 43.99 62.6101 C
44.18 62.6101 L
45.5944 59.4772 48.8174 57.8601 53.6799 57.8601 c
67.3509 57.8601 76 65.99 76 80 c
76 100.4873 60.8598 116 40 116 c
19.0467 116 2 98.9533 2 78 c
2 57.0468 19.0467 40 40 40 c
49.491 40 58.6724 43.59 65.7 50 C
56.1425 57.0239 L
f
69.406 829.206 m
69.406 818.6247 62.7359 810.8562 54.3236 810.8562 c
49.4234 810.8562 47.4643 813.8265 49.738 822.3669 C
56.8562 849.4438 L
51.5187 849.4438 L
49.8523 843.4292 L
49.6548 843.4292 L
48.5709 848.4867 45.4041 850.9437 39.6913 850.9437 c
29.4038 850.9437 20.695 843.3588 16.865 828.825 c
13.4266 815.8068 19.9944 806.54 29.5412 806.54 C
30.3755 811.6875 L
23.3091 811.6875 19.3061 818.0426 22.0678 828.2048 c
25.1573 839.5101 31.5696 845.9625 39.522 845.9625 c
46.2327 845.9625 49.3844 840.614 46.3296 829.4452 c
42.9464 817.1005 36.9963 811.6875 30.3755 811.6875 C
29.5412 806.54 L
35.5568 806.54 41.0134 809.8554 44.3225 815.5025 C
44.52 815.5025 L
43.7752 810.21 47.5957 806.54 53.8486 806.54 c
65.2816 806.54 74.5 815.8608 74.5 829.25 c
74.5 849.9474 59.5404 865.25 39.25 865.25 c
18.686 865.25 2 848.564 2 828 c
2 807.436 18.686 790.75 39.25 790.75 c
49.5852 790.75 59.4167 795.0673 66.525 802.7 C
61.7356 805.056 L
55.759 799.1481 47.6586 795.888 39.25 795.888 c
21.521 795.888 7.138 810.2711 7.138 828 c
7.138 845.7289 21.521 860.112 39.25 860.112 c
56.8425 860.112 69.406 846.7985 69.406 829.206 c
f
67.8121 679.412 m
67.8121 669.5638 62.0516 662.6125 54.7424 662.6125 c
50.8047 662.6125 49.1813 665.1276 51.0701 672.9368 C
57.1907 698.7875 L
49.5158 698.7875 L
48.2465 693.9544 L
48.0515 693.9544 L
46.8302 697.8526 43.9997 699.7874 39.2875 699.7874 c
28.988 699.7874 20.5021 692.3152 17.23 678.55 c
14.3107 666.3149 21.2163 656.98 30.1775 656.98 C
31.8461 664.275 L
25.9922 664.275 22.5867 669.5238 24.7519 678.1365 c
27.1356 687.5113 32.4111 692.825 38.9489 692.825 c
44.6277 692.825 47.3943 688.1944 45.0431 678.9634 c
42.4542 668.843 37.5053 664.275 31.8461 664.275 C
30.1775 656.98 L
36.2512 656.98 41.0932 659.6731 44.2116 664.5383 C
44.4066 664.5383 L
44.3816 659.9657 48.003 656.98 53.7924 656.98 c
65.9714 656.98 75 665.9039 75 679.5 c
75 700.1274 59.9802 715.5 39.5 715.5 c
18.8062 715.5 2 698.6937 2 678 c
2 657.3063 18.8062 640.5 39.5 640.5 c
49.5538 640.5 59.1686 644.5749 66.25 651.8 C
59.8712 655.712 L
54.3419 650.598 47.0294 647.776 39.5 647.776 c
22.8195 647.776 9.276 661.3195 9.276 678 c
9.276 694.6805 22.8195 708.224 39.5 708.224 c
55.9077 708.224 67.8121 695.8197 67.8121 679.412 c
f
66.2181 529.618 m
66.2181 520.503 61.3674 514.3688 55.1611 514.3688 c
52.1859 514.3688 50.8982 516.4287 52.4022 523.5068 C
57.5253 548.1312 L
47.5129 548.1312 L
46.6408 544.4797 L
46.4483 544.4797 L
45.0894 547.2185 42.5953 548.6312 38.8838 548.6312 c
28.5721 548.6312 20.3091 541.2716 17.595 528.275 c
15.1947 516.8231 22.4382 507.4201 30.8137 507.4201 C
33.3167 516.8625 L
28.6752 516.8625 25.8672 521.0051 27.4359 528.0683 c
29.114 535.5125 33.2527 539.6875 38.3758 539.6875 c
43.0228 539.6875 45.4043 535.7749 43.7565 528.4817 c
41.962 520.5856 38.0143 516.8625 33.3167 516.8625 C
30.8137 507.4201 L
36.9457 507.4201 41.173 509.4908 44.1008 513.5742 C
44.2933 513.5742 L
44.988 509.7215 48.4102 507.4201 53.7361 507.4201 c
66.6611 507.4201 75.5 515.947 75.5 529.75 c
75.5 550.3073 60.42 565.75 39.75 565.75 c
18.9265 565.75 2 548.8235 2 528 c
2 507.1766 18.9265 490.25 39.75 490.25 c
49.5224 490.25 58.9205 494.0825 65.975 500.9 C
58.0069 506.3679 L
52.9247 502.0479 46.4003 499.6639 39.75 499.6639 c
24.1179 499.6639 11.4139 512.368 11.4139 528 c
11.4139 543.632 24.1179 556.3361 39.75 556.3361 c
54.9729 556.3361 66.2181 544.8409 66.2181 529.618 c
f
56.1425 357.0239 m
51.5075 353.4978 45.7712 351.5519 40 351.5519 c
25.4164 351.5519 13.5519 363.4164 13.5519 378 c
13.5519 392.5836 25.4164 404.4481 40 404.4481 c
54.038 404.4481 64.6241 393.862 64.6241 379.824 c
64.6241 371.4421 60.6831 366.125 55.5799 366.125 c
53.5671 366.125 52.6152 367.7298 53.7343 374.0767 C
57.8599 397.4749 L
45.51 397.4749 L
45.035 395.005 L
44.845 395.005 L
43.3487 396.5843 41.1909 397.4749 38.48 397.4749 c
28.1563 397.4749 20.1162 390.228 17.96 378 c
16.0788 367.3312 23.6602 357.8601 31.45 357.8601 C
34.7873 369.45 L
31.3583 369.45 29.1478 372.4864 30.12 378 c
31.0923 383.5137 34.0943 386.55 37.8027 386.55 c
41.4179 386.55 43.4143 383.3553 42.47 378 c
41.4698 372.3281 38.5233 369.45 34.7873 369.45 C
31.45 357.8601 L
37.6402 357.8601 41.2528 359.3084 43.99 362.6101 C
44.18 362.6101 L
45.5944 359.4772 48.8174 357.8601 53.6799 357.8601 c
67.3509 357.8601 76 365.99 76 380 c
76 400.4873 60.8598 416 40 416 c
19.0467 416 2 398.9533 2 378 c
2 357.0468 19.0467 340 40 340 c
49.491 340 58.6724 343.59 65.7 350 C
56.1425 357.0239 L
f
56.1425 207.0239 m
51.5075 203.4978 45.7712 201.5519 40 201.5519 c
25.4164 201.5519 13.5519 213.4164 13.5519 228 c
13.5519 242.5836 25.4164 254.4481 40 254.4481 c
54.038 254.4481 64.6241 243.862 64.6241 229.824 c
64.6241 221.4421 60.6831 216.125 55.5799 216.125 c
53.5671 216.125 52.6152 217.7298 53.7343 224.0767 C
57.8599 247.4749 L
45.51 247.4749 L
45.035 245.005 L
44.845 245.005 L
43.3487 246.5843 41.1909 247.4749 38.48 247.4749 c
28.1563 247.4749 20.1162 240.228 17.96 228 c
16.0788 217.3312 23.6602 207.8601 31.45 207.8601 C
34.7873 219.45 L
31.3583 219.45 29.1478 222.4864 30.12 228 c
31.0923 233.5137 34.0943 236.55 37.8027 236.55 c
41.4179 236.55 43.4143 233.3553 42.47 228 c
41.4698 222.3281 38.5233 219.45 34.7873 219.45 C
31.45 207.8601 L
37.6402 207.8601 41.2528 209.3084 43.99 212.6101 C
44.18 212.6101 L
45.5944 209.4772 48.8174 207.8601 53.6799 207.8601 c
67.3509 207.8601 76 215.99 76 230 c
76 250.4873 60.8598 266 40 266 c
19.0467 266 2 248.9533 2 228 c
2 207.0468 19.0467 190 40 190 c
49.491 190 58.6724 193.59 65.7 200 C
56.1425 207.0239 L
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
