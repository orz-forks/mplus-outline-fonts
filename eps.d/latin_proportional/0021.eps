%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (0021.eps)
%%CreationDate: (1/20/05) (3:25 PM)
%%BoundingBox: 0 0 800 1050
%%HiResBoundingBox: 0 0 800 1050
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 394.5 530 394.5 530
%AI3_TileBox: -180.5 -228 971.5 1302
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 1188 1680
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -373.5 1058 -2 794 557 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%AI5_ViewPalette: 0 1 -2 4331 4334 0 1 5 whole view
%%PageOrigin:-180.5 -228
%%AI3_PaperRect:-19 1615 1171 -68
%%AI3_Margin:19 -85 -19 68
%AI7_GridSettings: 0.5 10 0.5 10 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 0 79 128 255 Lb
(\203\214\203C\203\204\201[1) Ln
0 A
u
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 900 m
100 1050 L
0 1050 L
0 900 L
100 900 L
n
200 900 m
200 1050 L
100 1050 L
100 900 L
200 900 L
n
300 900 m
300 1050 L
200 1050 L
200 900 L
300 900 L
n
400 900 m
400 1050 L
300 1050 L
300 900 L
400 900 L
n
500 900 m
500 1050 L
400 1050 L
400 900 L
500 900 L
n
600 900 m
600 1050 L
500 1050 L
500 900 L
600 900 L
n
700 900 m
700 1050 L
600 1050 L
600 900 L
700 900 L
n
800 900 m
800 1050 L
700 1050 L
700 900 L
800 900 L
n
100 750 m
100 900 L
0 900 L
0 750 L
100 750 L
n
200 750 m
200 900 L
100 900 L
100 750 L
200 750 L
n
300 750 m
300 900 L
200 900 L
200 750 L
300 750 L
n
400 750 m
400 900 L
300 900 L
300 750 L
400 750 L
n
500 750 m
500 900 L
400 900 L
400 750 L
500 750 L
n
600 750 m
600 900 L
500 900 L
500 750 L
600 750 L
n
700 750 m
700 900 L
600 900 L
600 750 L
700 750 L
n
800 750 m
800 900 L
700 900 L
700 750 L
800 750 L
n
100 600 m
100 750 L
0 750 L
0 600 L
100 600 L
n
200 600 m
200 750 L
100 750 L
100 600 L
200 600 L
n
300 600 m
300 750 L
200 750 L
200 600 L
300 600 L
n
400 600 m
400 750 L
300 750 L
300 600 L
400 600 L
n
500 600 m
500 750 L
400 750 L
400 600 L
500 600 L
n
600 600 m
600 750 L
500 750 L
500 600 L
600 600 L
n
700 600 m
700 750 L
600 750 L
600 600 L
700 600 L
n
800 600 m
800 750 L
700 750 L
700 600 L
800 600 L
n
100 450 m
100 600 L
0 600 L
0 450 L
100 450 L
n
200 450 m
200 600 L
100 600 L
100 450 L
200 450 L
n
300 450 m
300 600 L
200 600 L
200 450 L
300 450 L
n
400 450 m
400 600 L
300 600 L
300 450 L
400 450 L
n
500 450 m
500 600 L
400 600 L
400 450 L
500 450 L
n
600 450 m
600 600 L
500 600 L
500 450 L
600 450 L
n
700 450 m
700 600 L
600 600 L
600 450 L
700 450 L
n
800 450 m
800 600 L
700 600 L
700 450 L
800 450 L
n
100 300 m
100 450 L
0 450 L
0 300 L
100 300 L
n
200 300 m
200 450 L
100 450 L
100 300 L
200 300 L
n
300 300 m
300 450 L
200 450 L
200 300 L
300 300 L
n
400 300 m
400 450 L
300 450 L
300 300 L
400 300 L
n
500 300 m
500 450 L
400 450 L
400 300 L
500 300 L
n
600 300 m
600 450 L
500 450 L
500 300 L
600 300 L
n
700 300 m
700 450 L
600 450 L
600 300 L
700 300 L
n
800 300 m
800 450 L
700 450 L
700 300 L
800 300 L
n
100 150 m
100 300 L
0 300 L
0 150 L
100 150 L
n
200 150 m
200 300 L
100 300 L
100 150 L
200 150 L
n
300 150 m
300 300 L
200 300 L
200 150 L
300 150 L
n
400 150 m
400 300 L
300 300 L
300 150 L
400 150 L
n
500 150 m
500 300 L
400 300 L
400 150 L
500 150 L
n
600 150 m
600 300 L
500 300 L
500 150 L
600 150 L
n
700 150 m
700 300 L
600 300 L
600 150 L
700 150 L
n
800 150 m
800 300 L
700 300 L
700 150 L
800 150 L
n
100 0 m
100 150 L
0 150 L
0 0 L
100 0 L
n
200 0 m
200 150 L
100 150 L
100 0 L
200 0 L
n
300 0 m
300 150 L
200 150 L
200 0 L
300 0 L
n
400 0 m
400 150 L
300 150 L
300 0 L
400 0 L
n
500 0 m
500 150 L
400 150 L
400 0 L
500 0 L
n
600 0 m
600 150 L
500 150 L
500 0 L
600 0 L
n
700 0 m
700 150 L
600 150 L
600 0 L
700 0 L
n
800 0 m
800 150 L
700 150 L
700 0 L
800 0 L
n
U
0 O
0 g
1 D
256 961 m
256 964 L
202 964 L
202 961 L
256 961 L
f
258.6 992 m
258.6 995 L
204.6 995 L
204.6 992 L
258.6 992 L
f
105 1016 m
102 1016 L
102 989 L
105 989 L
105 1016 L
f
120 1016 m
117 1016 L
117 989 L
120 989 L
120 1016 L
f
605 1016 m
602 1016 L
602 989 L
605 989 L
605 1016 L
f
417.04 940 m
420.51 940 L
464.96 1016 l
461.49 1016 L
417.04 940 L
f
2 956 m
5 956 L
5 1016 L
2 1016 L
2 956 L
f
2 940 m
5 940 L
5 947 L
2 947 L
2 940 L
f
224.1495 1016 m
221.1495 1016 L
214.5 940 L
217.5 940 L
224.1495 1016 L
f
246.1495 1016 m
243.1495 1016 L
236.5 940 L
239.5 940 L
246.1495 1016 L
f
328 1024 m
325 1024 L
325 932 L
328 932 L
328 1024 L
f
303 952.6 m
302 949.5 L
306.8537 944.4007 315.5596 941 325 941 c
343.0267 941 351 947.5686 351 960 c
351 970.3367 345.7674 976.2979 326.4 981.9 c
309.1706 986.8836 305 990.7972 305 998 c
305 1006.6812 311.8238 1012 326 1012 c
335.8449 1012 341.6069 1010.1655 348 1005.4 C
349 1008.4 L
342.875 1012.9657 336.2444 1015 326 1015 c
310.165 1015 302 1008.3456 302 998 c
302 989.2091 306.8629 984.4197 325.6 979 c
343.5951 973.7948 348 968.8867 348 960 c
348 949.3841 341.5522 944 325 944 c
315.9706 944 308.2366 947.0986 303 952.6 C
f
419 1014 m
427.3022 1014 433 1007.8193 433 997 c
433 986.1807 427.3022 980 419 980 C
419 977 L
429.1216 977 436 984.5071 436 997 c
436 1009.4929 429.1216 1017 419 1017 c
408.8784 1017 402 1009.4929 402 997 c
402 984.5071 408.8784 977 419 977 C
419 980 L
410.6978 980 405 986.1807 405 997 c
405 1007.8193 410.6978 1014 419 1014 c
f
463 976 m
471.3022 976 477 969.8193 477 959 c
477 948.1807 471.3022 942 463 942 C
463 939 L
473.1216 939 480 946.5071 480 959 c
480 971.4929 473.1216 979 463 979 c
452.8784 979 446 971.4929 446 959 c
446 946.5071 452.8784 939 463 939 C
463 942 L
454.6978 942 449 948.1807 449 959 c
449 969.8193 454.6978 976 463 976 c
f
505 959 m
505 966.0912 509.9929 972.4277 523.9999 979.2 c
540.0871 986.9779 546 994.2844 546 1003 c
546 1011.5427 539.746 1017 528 1017 c
516.7337 1017 510 1010.472 510 1002 c
510 997.3868 512.8324 991.5442 519.4094 984.4913 c
560.9 940 L
565 940 L
521.6035 986.5373 L
515.5431 993.0363 513 998.1678 513 1002 c
513 1008.8993 518.5296 1014 528 1014 c
538.1334 1014 543 1009.8334 543 1003 c
543 995.5097 537.8045 989.2065 522.6941 981.9009 c
507.4091 974.5107 502 967.1954 502 959 c
502 946.2301 510.1685 939 526 939 c
547.3634 939 561 952.2232 561 978 C
558 978 L
558 954.2852 546.1355 942 526 942 c
511.732 942 505 948.053 505 959 c
f
256.8334 810.1621 m
256.8334 815.1621 L
202 815.1621 L
202 810.1621 L
256.8334 810.1621 L
f
257.6667 659.3241 m
257.6667 666.3242 L
202 666.3242 L
202 659.3241 L
257.6667 659.3241 L
f
258.5 508.5 m
258.5 517.5 L
202 517.5 L
202 508.5 L
258.5 508.5 L
f
259.3334 357.6621 m
259.3334 368.6621 L
202 368.6621 L
202 357.6621 L
259.3334 357.6621 L
f
260.1667 206.8379 m
260.1667 219.8379 L
202 219.8379 L
202 206.8379 L
260.1667 206.8379 L
f
261 56 m
261 71 L
202 71 L
202 56 L
261 56 L
f
259.4167 840.8287 m
259.4167 845.8288 L
204.5833 845.8288 L
204.5833 840.8287 L
259.4167 840.8287 L
f
260.2334 689.6574 m
260.2334 696.6576 L
204.5667 696.6576 L
204.5667 689.6574 L
260.2334 689.6574 L
f
261.05 538.5 m
261.05 547.5 L
204.55 547.5 L
204.55 538.5 L
261.05 538.5 L
f
261.8667 387.3287 m
261.8667 398.3288 L
204.5333 398.3288 L
204.5333 387.3287 L
261.8667 387.3287 L
f
262.6833 236.1713 m
262.6833 249.1712 L
204.5167 249.1712 L
204.5167 236.1713 L
262.6833 236.1713 L
f
263.5 85 m
263.5 100 L
204.5 100 L
204.5 85 L
263.5 85 L
f
106.8334 865.9954 m
102 865.9954 L
102 838.6621 L
106.8334 838.6621 L
106.8334 865.9954 L
f
108.6668 715.9908 m
102 715.9908 L
102 688.3242 L
108.6668 688.3242 L
108.6668 715.9908 L
f
110.5 566 m
102 566 L
102 538 L
110.5 538 L
110.5 566 L
f
112.3334 415.9954 m
102 415.9954 L
102 387.6621 L
112.3334 387.6621 L
112.3334 415.9954 L
f
114.1666 266.0046 m
102 266.0046 L
102 237.3379 L
114.1666 237.3379 L
114.1666 266.0046 L
f
116 116 m
102 116 L
102 87 L
116 87 L
116 116 L
f
123.0001 865.9954 m
118.1667 865.9954 L
118.1667 838.6621 L
123.0001 838.6621 L
123.0001 865.9954 L
f
126.0002 715.9908 m
119.3334 715.9908 L
119.3334 688.3242 L
126.0002 688.3242 L
126.0002 715.9908 L
f
129 566 m
120.5 566 L
120.5 538 L
129 538 L
129 566 L
f
132.0001 415.9954 m
121.6667 415.9954 L
121.6667 387.6621 L
132.0001 387.6621 L
132.0001 415.9954 L
f
134.9999 266.0046 m
122.8333 266.0046 L
122.8333 237.3379 L
134.9999 237.3379 L
134.9999 266.0046 L
f
138 116 m
124 116 L
124 87 L
138 87 L
138 116 L
f
606.8334 865.9954 m
602 865.9954 L
602 838.6621 L
606.8334 838.6621 L
606.8334 865.9954 L
f
608.6668 715.9908 m
602 715.9908 L
602 688.3242 L
608.6668 688.3242 L
608.6668 715.9908 L
f
610.5 566 m
602 566 L
602 538 L
610.5 538 L
610.5 566 L
f
612.3334 415.9954 m
602 415.9954 L
602 387.6621 L
612.3334 387.6621 L
612.3334 415.9954 L
f
614.1666 266.0046 m
602 266.0046 L
602 237.3379 L
614.1666 237.3379 L
614.1666 266.0046 L
f
616 116 m
602 116 L
602 87 L
616 87 L
616 116 L
f
417.1625 789.9954 m
422.3876 789.9954 L
466.8376 865.9954 l
461.6125 865.9954 L
417.1625 789.9954 L
f
417.285 639.9908 m
424.2651 639.9908 L
468.7151 715.9908 l
461.735 715.9908 L
417.285 639.9908 L
f
417.4075 490 m
426.1425 490 L
470.5925 566 l
461.8575 566 L
417.4075 490 L
f
417.53 339.9954 m
428.02 339.9954 L
472.4701 415.9954 l
461.98 415.9954 L
417.53 339.9954 L
f
417.6525 190.0046 m
429.8974 190.0046 L
474.3474 266.0046 l
462.1025 266.0046 L
417.6525 190.0046 L
f
417.775 40 m
431.775 40 L
476.225 116 l
462.225 116 L
417.775 40 L
f
2 806.9954 m
7.8334 806.9954 L
7.8334 865.9954 L
2 865.9954 L
2 806.9954 L
f
2 657.9909 m
10.6668 657.9909 L
10.6668 715.9908 L
2 715.9908 L
2 657.9909 L
f
2 509 m
13.5 509 L
13.5 566 L
2 566 L
2 509 L
f
2 359.9954 m
16.3334 359.9954 L
16.3334 415.9954 L
2 415.9954 L
2 359.9954 L
f
2 211.0045 m
19.1666 211.0045 L
19.1666 266.0046 L
2 266.0046 L
2 211.0045 L
f
2 62 m
22 62 L
22 116 L
2 116 L
2 62 L
f
2 789.9954 m
7.8334 789.9954 L
7.8334 798.1621 L
2 798.1621 L
2 789.9954 L
f
2 639.9908 m
10.6668 639.9908 L
10.6668 649.3242 L
2 649.3242 L
2 639.9908 L
f
2 490 m
13.5 490 L
13.5 500.5 L
2 500.5 L
2 490 L
f
2 339.9954 m
16.3334 339.9954 L
16.3334 351.6621 L
2 351.6621 L
2 339.9954 L
f
2 190.0046 m
19.1666 190.0046 L
19.1666 202.8379 L
2 202.8379 L
2 190.0046 L
f
2 40 m
22 40 L
22 54 L
2 54 L
2 40 L
f
225.4662 865.9954 m
220.2995 865.9954 L
213.65 789.9954 L
218.8167 789.9954 L
225.4662 865.9954 L
f
226.7829 715.9908 m
219.4494 715.9908 L
212.8 639.9908 L
220.1334 639.9908 L
226.7829 715.9908 L
f
228.0995 566 m
218.5995 566 L
211.95 490 L
221.45 490 L
228.0995 566 L
f
229.4162 415.9954 m
217.7495 415.9954 L
211.1 339.9954 L
222.7667 339.9954 L
229.4162 415.9954 L
f
230.7328 266.0046 m
216.8995 266.0046 L
210.25 190.0046 L
224.0833 190.0046 L
230.7328 266.0046 L
f
232.0495 116 m
216.0495 116 L
209.4 40 L
225.4 40 L
232.0495 116 L
f
247.7995 865.9954 m
242.6328 865.9954 L
235.9833 789.9954 L
241.1501 789.9954 L
247.7995 865.9954 L
f
249.4496 715.9908 m
242.1161 715.9908 L
235.4666 639.9908 L
242.8001 639.9908 L
249.4496 715.9908 L
f
251.0995 566 m
241.5995 566 L
234.95 490 L
244.45 490 L
251.0995 566 L
f
252.7495 415.9954 m
241.0828 415.9954 L
234.4333 339.9954 L
246.1 339.9954 L
252.7495 415.9954 L
f
254.3994 266.0046 m
240.5662 266.0046 L
233.9167 190.0046 L
247.75 190.0046 L
254.3994 266.0046 L
f
256.0495 116 m
240.0495 116 L
233.4 40 L
249.4 40 L
256.0495 116 L
f
345.5 124 m
330.5 124 L
330.5 78 L
345.5 78 L
345.5 124 L
f
331.5 78 m
316.5 78 L
316.5 32 L
331.5 32 L
331.5 78 L
f
354.4 92.6 m
358.1 108.4 L
351.8227 112.4321 342.1413 115 331.9 115 c
312.0585 115 302 105.1488 302 92.8 c
302 81.1963 307.8249 75.1229 330.1 69.1 c
337.5456 67.0868 340 65.0102 340 63.2 c
340 59.3812 336.4093 57 327.3 57 c
321.0034 57 310.9781 60.3959 305.7 65.3 C
302 49.5 L
307.6059 44.8487 319.1205 41 328.2 41 c
349.6977 41 360 49.3546 360 64.2 c
360 75.6189 354.6431 81.1466 330.1 87.4 c
324.194 88.9048 322 91.0136 322 93.7 c
322 96.5031 325.5061 99 332.9 99 c
339.0851 99 348.9348 96.5753 354.4 92.6 C
f
419.5834 862.3954 m
427.0287 862.3954 432.1166 856.8033 432.1166 846.8287 c
432.1166 836.8542 427.0287 831.2621 419.5834 831.2621 C
419.5834 826.6621 L
430.1306 826.6621 437.1667 834.2748 437.1667 846.8287 c
437.1667 859.3827 430.1306 866.9954 419.5834 866.9954 c
409.0361 866.9954 402 859.3827 402 846.8287 c
402 834.2748 409.0361 826.6621 419.5834 826.6621 C
419.5834 831.2621 L
412.138 831.2621 407.0501 836.8542 407.0501 846.8287 c
407.0501 856.8033 412.138 862.3954 419.5834 862.3954 c
f
420.1667 710.7908 m
426.7551 710.7908 431.2333 705.7874 431.2333 696.6575 c
431.2333 687.5276 426.7551 682.5243 420.1667 682.5243 C
420.1667 676.3242 L
431.1396 676.3242 438.3334 684.0425 438.3334 696.6575 c
438.3334 709.2725 431.1396 716.9908 420.1667 716.9908 c
409.1938 716.9908 402 709.2725 402 696.6575 c
402 684.0425 409.1938 676.3242 420.1667 676.3242 C
420.1667 682.5243 L
413.5783 682.5243 409.1001 687.5276 409.1001 696.6575 c
409.1001 705.7874 413.5783 710.7908 420.1667 710.7908 c
f
420.75 559.2 m
426.4816 559.2 430.35 554.7852 430.35 546.5 c
430.35 538.2147 426.4816 533.8 420.75 533.8 C
420.75 526 L
432.1486 526 439.5 533.8239 439.5 546.5 c
439.5 559.176 432.1486 567 420.75 567 c
409.3514 567 402 559.176 402 546.5 c
402 533.8239 409.3514 526 420.75 526 C
420.75 533.8 L
415.0184 533.8 411.15 538.2147 411.15 546.5 c
411.15 554.7852 415.0184 559.2 420.75 559.2 c
f
421.3334 407.5954 m
426.208 407.5954 429.4666 403.7693 429.4666 396.3287 c
429.4666 388.8882 426.208 385.0621 421.3334 385.0621 C
421.3334 375.6621 L
433.1576 375.6621 440.6667 383.5916 440.6667 396.3287 c
440.6667 409.0659 433.1576 416.9954 421.3334 416.9954 c
409.5091 416.9954 402 409.0659 402 396.3287 c
402 383.5916 409.5091 375.6621 421.3334 375.6621 C
421.3334 385.0621 L
416.4586 385.0621 413.2001 388.8882 413.2001 396.3287 c
413.2001 403.7693 416.4586 407.5954 421.3334 407.5954 c
f
421.9167 256.0046 m
425.9345 256.0046 428.5834 252.7672 428.5834 246.1712 c
428.5834 239.5753 425.9345 236.3379 421.9167 236.3379 C
421.9167 225.3379 L
434.1665 225.3379 441.8333 233.3731 441.8333 246.1712 c
441.8333 258.9694 434.1665 267.0046 421.9167 267.0046 c
409.6668 267.0046 402 258.9694 402 246.1712 c
402 233.3731 409.6668 225.3379 421.9167 225.3379 C
421.9167 236.3379 L
417.8988 236.3379 415.2499 239.5753 415.2499 246.1712 c
415.2499 252.7672 417.8988 256.0046 421.9167 256.0046 c
f
422.5 104.4 m
425.661 104.4 427.7 101.7512 427.7 96 c
427.7 90.2488 425.661 87.6 422.5 87.6 C
422.5 75 L
435.1755 75 443 83.1408 443 96 c
443 108.8592 435.1755 117 422.5 117 c
409.8245 117 402 108.8592 402 96 c
402 83.1408 409.8245 75 422.5 75 C
422.5 87.6 L
419.339 87.6 417.3 90.2488 417.3 96 c
417.3 101.7512 419.339 104.4 422.5 104.4 c
f
464.4167 824.7287 m
471.862 824.7287 476.95 819.1367 476.95 809.1621 c
476.95 799.1875 471.862 793.5955 464.4167 793.5955 C
464.4167 788.9954 L
474.964 788.9954 482.0001 796.6081 482.0001 809.1621 c
482.0001 821.716 474.964 829.3288 464.4167 829.3288 c
453.8694 829.3288 446.8334 821.716 446.8334 809.1621 c
446.8334 796.6081 453.8694 788.9954 464.4167 788.9954 C
464.4167 793.5955 L
456.9714 793.5955 451.8834 799.1875 451.8834 809.1621 c
451.8834 819.1367 456.9714 824.7287 464.4167 824.7287 c
f
465.8334 673.4574 m
472.4218 673.4574 476.9 668.4541 476.9 659.3242 c
476.9 650.1943 472.4218 645.1909 465.8334 645.1909 C
465.8334 638.9908 L
476.8063 638.9908 484.0001 646.7092 484.0001 659.3242 c
484.0001 671.9392 476.8063 679.6575 465.8334 679.6575 c
454.8605 679.6575 447.6667 671.9392 447.6667 659.3242 c
447.6667 646.7092 454.8605 638.9908 465.8334 638.9908 C
465.8334 645.1909 L
459.245 645.1909 454.7668 650.1943 454.7668 659.3242 c
454.7668 668.4541 459.245 673.4574 465.8334 673.4574 c
f
467.25 522.2 m
472.9816 522.2 476.85 517.7852 476.85 509.5 c
476.85 501.2147 472.9816 496.8 467.25 496.8 C
467.25 489 L
478.6486 489 486 496.8239 486 509.5 c
486 522.176 478.6486 530 467.25 530 c
455.8514 530 448.5 522.176 448.5 509.5 c
448.5 496.8239 455.8514 489 467.25 489 C
467.25 496.8 L
461.5184 496.8 457.65 501.2147 457.65 509.5 c
457.65 517.7852 461.5184 522.2 467.25 522.2 c
f
468.6667 370.9287 m
473.5414 370.9287 476.8 367.1026 476.8 359.6621 c
476.8 352.2216 473.5414 348.3955 468.6667 348.3955 C
468.6667 338.9954 L
480.4909 338.9954 488.0001 346.925 488.0001 359.6621 c
488.0001 372.3992 480.4909 380.3288 468.6667 380.3288 c
456.8425 380.3288 449.3334 372.3992 449.3334 359.6621 c
449.3334 346.925 456.8425 338.9954 468.6667 338.9954 C
468.6667 348.3955 L
463.792 348.3955 460.5334 352.2216 460.5334 359.6621 c
460.5334 367.1026 463.792 370.9287 468.6667 370.9287 c
f
470.0833 219.6713 m
474.1012 219.6713 476.75 216.4338 476.75 209.8379 c
476.75 203.242 474.1012 200.0045 470.0833 200.0045 C
470.0833 189.0046 L
482.3331 189.0046 490 197.0398 490 209.8379 c
490 222.6361 482.3331 230.6712 470.0833 230.6712 c
457.8334 230.6712 450.1667 222.6361 450.1667 209.8379 c
450.1667 197.0398 457.8334 189.0046 470.0833 189.0046 C
470.0833 200.0045 L
466.0654 200.0045 463.4166 203.242 463.4166 209.8379 c
463.4166 216.4338 466.0654 219.6713 470.0833 219.6713 c
f
471.5 68.4 m
474.661 68.4 476.7 65.7512 476.7 60 c
476.7 54.2488 474.661 51.6 471.5 51.6 C
471.5 39 L
484.1755 39 492 47.1408 492 60 c
492 72.8592 484.1755 81 471.5 81 c
458.8245 81 451 72.8592 451 60 c
451 47.1408 458.8245 39 471.5 39 C
471.5 51.6 L
468.339 51.6 466.3 54.2488 466.3 60 c
466.3 65.7512 468.339 68.4 471.5 68.4 c
f
528.8334 862.0954 m
538.1384 862.0954 542.6667 858.2584 542.6667 851.8621 c
542.6667 845.0013 537.816 839.1732 523.1784 831.9628 c
507.246 824.0514 502 817.0258 502 808.9954 c
502 796.2707 510.4745 788.9954 527.1667 788.9954 c
548.4251 788.9954 562.6667 802.552 562.6667 827.9954 C
557.1667 827.9954 L
557.1667 805.5958 545.8608 793.8955 527.1667 793.8955 c
514.1753 793.8955 507.9063 799.2884 507.9063 809.2954 c
507.9063 815.7166 512.4153 821.4157 526.0333 828.062 c
542.7281 836.2387 548.5001 843.2956 548.5001 851.8287 c
548.5001 861.0402 541.6571 866.9954 528.8334 866.9954 c
516.576 866.9954 509.3333 860.148 509.3333 851.3287 c
509.3333 846.2931 511.9434 840.9285 519.2006 833.4516 c
560.8725 789.9954 L
568.1668 789.9954 L
524.5354 835.4911 L
517.2329 842.9349 515.0001 847.4189 515.0001 851.1954 c
515.0001 857.4633 520.1084 862.0954 528.8334 862.0954 c
f
529.6667 710.1907 m
538.1435 710.1907 542.3333 706.6834 542.3333 700.7241 c
542.3333 694.4929 537.8275 689.1399 523.6627 682.0248 c
507.0828 673.592 502 666.8563 502 658.9908 c
502 646.3112 510.7805 638.9908 528.3334 638.9908 c
549.4868 638.9908 564.3334 652.8809 564.3334 677.9908 C
556.3333 677.9908 L
556.3333 656.9064 545.5862 645.791 528.3334 645.791 c
516.6185 645.791 510.8127 650.5237 510.8127 659.5909 c
510.8127 665.3421 514.8376 670.4038 528.0667 676.9241 c
545.3692 685.4995 551.0001 692.3068 551.0001 700.6574 c
551.0001 710.5378 543.5681 716.9908 529.6667 716.9908 c
516.4183 716.9908 508.6666 709.824 508.6666 700.6575 c
508.6666 695.1995 511.0544 690.3128 518.9918 682.4119 c
560.845 639.9908 L
571.3335 639.9908 L
527.4674 684.445 L
518.9227 692.8334 517.0001 696.67 517.0001 700.3908 c
517.0001 706.0274 521.6872 710.1907 529.6667 710.1907 c
f
530.5 558.3 m
538.1485 558.3 542 555.1223 542 549.6 c
542 543.9982 537.839 539.1203 524.147 532.1004 c
506.9197 523.1464 502 516.7005 502 509 c
502 496.3655 511.0864 489 529.5 489 c
550.5484 489 566 503.2234 566 528 C
555.5 528 L
555.5 508.2305 545.3116 497.7 529.5 497.7 c
519.0616 497.7 513.7187 501.7727 513.7187 509.9 c
513.7187 514.9813 517.2598 519.4056 530.1 525.8 c
548.01 534.7741 553.5 541.3318 553.5 549.5 c
553.5 560.0491 545.479 567 530.5 567 c
516.2606 567 508 559.5138 508 550 c
508 544.1196 510.1655 539.7108 518.7831 531.386 c
560.8175 490 L
574.5 490 L
530.399 533.4127 L
520.6124 542.7457 519 545.9349 519 549.6 c
519 554.6053 523.2659 558.3 530.5 558.3 c
f
531.3334 406.3954 m
538.1536 406.3954 541.6667 403.5474 541.6667 398.4621 c
541.6667 393.4898 537.8505 389.087 524.6314 382.1624 c
506.7566 372.6871 502 366.5309 502 358.9954 c
502 346.4061 511.3924 338.9954 530.6667 338.9954 c
551.6101 338.9954 567.6667 353.5522 567.6667 377.9954 C
554.6667 377.9954 L
554.6667 359.5411 545.0369 349.5955 530.6667 349.5955 c
521.5049 349.5955 516.6251 353.0081 516.6251 360.1954 c
516.6251 364.6067 519.6822 368.3937 532.1334 374.6621 c
550.651 384.0349 556.0001 390.3431 556.0001 398.3287 c
556.0001 409.5466 547.3901 416.9954 531.3334 416.9954 c
516.1029 416.9954 507.3333 409.1898 507.3333 399.3287 c
507.3333 393.026 509.2765 389.0951 518.5743 380.3464 c
560.79 339.9954 L
577.6668 339.9954 L
533.331 382.3665 L
522.3022 392.6443 521.0001 395.1861 521.0001 398.7954 c
521.0001 403.1693 524.8447 406.3954 531.3334 406.3954 c
f
532.1667 254.5046 m
538.1586 254.5046 541.3334 251.9863 541.3334 247.3379 c
541.3334 242.9952 537.862 239.0674 525.1157 232.238 c
506.5935 222.2415 502 216.3751 502 209.0046 c
502 196.4604 511.6984 189.0046 531.8333 189.0046 c
552.6718 189.0046 569.3333 203.8948 569.3333 228.0046 C
553.8334 228.0046 L
553.8334 210.8653 544.7623 201.5045 531.8333 201.5045 c
523.9479 201.5045 519.5312 204.2571 519.5312 210.5046 c
519.5312 214.246 522.1043 217.3956 534.1666 223.538 c
553.2919 233.3095 558.4999 239.3681 558.4999 247.1713 c
558.4999 259.058 549.301 267.0046 532.1667 267.0046 c
515.9452 267.0046 506.6667 258.8796 506.6667 248.6713 c
506.6667 241.9462 508.3876 238.4932 518.3656 229.3205 c
560.7625 190.0046 L
580.8332 190.0046 L
536.2626 231.3342 L
523.9919 242.5566 523 244.451 523 248.0046 c
523 251.7473 526.4234 254.5046 532.1667 254.5046 c
f
533 102.6 m
538.1637 102.6 541 100.4113 541 96.2 c
541 92.4868 537.8735 89.0341 525.6 82.3 c
506.4304 71.7822 502 66.2056 502 59 c
502 46.501 512.0044 39 533 39 c
553.7335 39 571 54.2236 571 78 C
553 78 L
553 62.1759 544.4877 53.4 533 53.4 c
526.3912 53.4 522.4375 55.4925 522.4375 60.8 c
522.4375 63.8714 524.5267 66.3836 536.2 72.4 c
555.9329 82.5703 561 88.3793 561 96 c
561 108.5555 551.2121 117 533 117 c
515.7875 117 506 108.5556 506 98 c
506 90.8525 507.4986 87.8775 518.1568 78.2808 c
560.735 40 L
584 40 L
539.1946 80.2881 L
525.6817 92.4552 525 93.7021 525 97.2 c
525 100.3113 528.0022 102.6 533 102.6 c
f
349.0667 853.2619 m
350.5167 858.3954 L
344.3663 862.8721 337.2272 864.9953 326.9833 864.9953 c
310.4805 864.9953 302 857.8081 302 847.1287 c
302 837.8689 307.0232 832.8656 326.35 827.3453 c
342.5867 822.6721 346.6666 818.2359 346.6666 810.5287 c
346.6666 801.0457 340.6949 796.1622 325.3833 796.1622 c
316.8094 796.1622 308.6935 799.3102 303.45 804.7121 C
302 799.4953 L
306.979 794.4707 316.153 790.9953 325.5333 790.9953 c
344.1385 790.9953 352.5 797.8616 352.5 810.6954 c
352.5 821.2124 347.2467 827.1014 327.0166 832.812 c
311.6745 837.2158 307.8334 840.8286 307.8334 847.2787 c
307.8334 854.9801 314.1042 859.8286 327.15 859.8286 c
336.3849 859.8286 342.8282 857.8957 349.0667 853.2619 C
f
350.1334 701.124 m
352.0334 708.3908 L
345.8577 712.7786 338.2101 714.9908 327.9667 714.9908 c
310.7962 714.9908 302 707.2708 302 696.2574 c
302 686.5289 307.1836 681.3115 327.1 675.6907 c
341.5785 671.5495 345.3333 667.5853 345.3333 661.0575 c
345.3333 652.7074 339.8378 648.3243 325.7667 648.3243 c
317.6483 648.3243 309.1505 651.522 303.9 656.8243 C
302 649.4908 L
307.1044 644.5408 316.7466 640.9908 326.0667 640.9908 c
345.2504 640.9908 354.0001 648.1548 354.0001 661.3908 c
354.0001 672.0883 348.7261 677.905 327.6334 683.7242 c
314.1785 687.5481 310.6668 690.8601 310.6668 696.5574 c
310.6668 703.2792 316.3847 707.6573 328.3001 707.6573 c
336.925 707.6573 344.0496 705.6261 350.1334 701.124 C
f
351.2 549 m
353.55 558.4 L
347.3488 562.6989 339.1929 565 328.95 565 c
311.1118 565 302 556.7472 302 545.4 c
302 535.2027 307.3439 529.7713 327.85 524.05 c
340.5703 520.4408 344 516.9484 344 511.6 c
344 504.3827 338.9807 500.5 326.15 500.5 c
318.487 500.5 309.6073 503.7472 304.35 508.95 C
302 499.5 L
307.2298 494.6247 317.3401 491 326.6 491 c
346.3622 491 355.5 498.4616 355.5 512.1 c
355.5 522.9778 350.2053 528.7223 328.25 534.65 c
316.6823 537.8942 313.5 540.9054 313.5 545.85 c
313.5 551.5922 318.665 555.5 329.45 555.5 c
337.465 555.5 345.2709 553.3704 351.2 549 C
f
352.2666 396.8621 m
355.0667 408.3955 L
348.8401 412.6054 340.1756 414.9954 329.9333 414.9954 c
311.4273 414.9954 302 406.2098 302 394.5288 c
302 383.8626 307.5042 378.2172 328.6 372.3954 c
339.562 369.3182 342.6666 366.2978 342.6666 362.1288 c
342.6666 356.0444 338.1235 352.6622 326.5333 352.6622 c
319.3258 352.6622 310.0642 355.959 304.8 361.0622 C
302 349.4954 L
307.3551 344.6948 317.9335 340.9955 327.1333 340.9955 c
347.474 340.9955 357 348.7547 357 362.7955 c
357 373.8536 351.6845 379.5259 328.8666 385.5621 c
319.1862 388.2265 316.3334 390.9369 316.3334 395.1288 c
316.3334 399.8912 320.9454 403.3287 330.6 403.3287 c
338.005 403.3287 346.4921 401.1007 352.2666 396.8621 C
f
329.75 873.9953 m
324.75 873.9953 L
324.75 781.9953 L
329.75 781.9953 L
329.75 873.9953 L
f
331.5001 723.9908 m
324.5 723.9908 L
324.5 631.9908 L
331.5001 631.9908 L
331.5001 723.9908 L
f
333.25 574 m
324.25 574 L
324.25 482 L
333.25 482 L
333.25 574 L
f
338 423.9954 m
327 423.9954 L
327 377.9954 L
338 377.9954 L
338 423.9954 L
f
332 377.9954 m
321 377.9954 L
321 331.9955 L
332 331.9955 L
332 377.9954 L
f
353.3332 244.7381 m
356.5832 258.4047 L
350.3313 262.5256 341.1584 265.0047 330.9166 265.0047 c
311.7429 265.0047 302 255.6863 302 243.6714 c
302 232.5365 307.6645 226.6771 329.3499 220.7547 c
338.5538 218.2095 341.3333 215.6609 341.3333 212.6713 c
341.3333 207.7196 337.2664 204.8379 326.9166 204.8379 c
320.1645 204.8379 310.5211 208.1843 305.2499 213.1879 C
302 199.5046 L
307.4805 194.7787 318.527 191.0047 327.6666 191.0047 c
348.5858 191.0047 358.4999 199.0616 358.4999 213.5046 c
358.4999 224.7432 353.1637 230.3431 329.4833 236.488 c
321.6899 238.5726 319.1665 240.9822 319.1665 244.4214 c
319.1665 248.2042 323.2256 251.1714 331.7499 251.1714 c
338.545 251.1714 347.7134 248.8451 353.3332 244.7381 C
f
340.7499 274.0047 m
327.75 274.0047 L
327.75 228.0047 L
340.7499 228.0047 L
340.7499 274.0047 L
f
332.7499 228.0047 m
319.75 228.0047 L
319.75 182.0047 L
332.7499 182.0047 L
332.7499 228.0047 L
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
