%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (0060.eps)
%%CreationDate: (1/20/05) (1:56 PM)
%%BoundingBox: 0 0 800 1050
%%HiResBoundingBox: 0 0 800 1050
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 394.5 530 394.5 530
%AI3_TileBox: -180.5 -228 971.5 1302
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 1188 1680
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -373.5 1058 -2 794 557 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%AI5_ViewPalette: 0 1 -2 4331 4334 0 0 5 whole view
%%PageOrigin:-180.5 -228
%%AI3_PaperRect:-19 1615 1171 -68
%%AI3_Margin:19 -85 -19 68
%AI7_GridSettings: 0.5 10 0.5 10 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 0 79 128 255 Lb
(\203\214\203C\203\204\201[1) Ln
0 A
u
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 900 m
100 1050 L
0 1050 L
0 900 L
100 900 L
n
200 900 m
200 1050 L
100 1050 L
100 900 L
200 900 L
n
300 900 m
300 1050 L
200 1050 L
200 900 L
300 900 L
n
400 900 m
400 1050 L
300 1050 L
300 900 L
400 900 L
n
500 900 m
500 1050 L
400 1050 L
400 900 L
500 900 L
n
600 900 m
600 1050 L
500 1050 L
500 900 L
600 900 L
n
700 900 m
700 1050 L
600 1050 L
600 900 L
700 900 L
n
800 900 m
800 1050 L
700 1050 L
700 900 L
800 900 L
n
100 750 m
100 900 L
0 900 L
0 750 L
100 750 L
n
200 750 m
200 900 L
100 900 L
100 750 L
200 750 L
n
300 750 m
300 900 L
200 900 L
200 750 L
300 750 L
n
400 750 m
400 900 L
300 900 L
300 750 L
400 750 L
n
500 750 m
500 900 L
400 900 L
400 750 L
500 750 L
n
600 750 m
600 900 L
500 900 L
500 750 L
600 750 L
n
700 750 m
700 900 L
600 900 L
600 750 L
700 750 L
n
800 750 m
800 900 L
700 900 L
700 750 L
800 750 L
n
100 600 m
100 750 L
0 750 L
0 600 L
100 600 L
n
200 600 m
200 750 L
100 750 L
100 600 L
200 600 L
n
300 600 m
300 750 L
200 750 L
200 600 L
300 600 L
n
400 600 m
400 750 L
300 750 L
300 600 L
400 600 L
n
500 600 m
500 750 L
400 750 L
400 600 L
500 600 L
n
600 600 m
600 750 L
500 750 L
500 600 L
600 600 L
n
700 600 m
700 750 L
600 750 L
600 600 L
700 600 L
n
800 600 m
800 750 L
700 750 L
700 600 L
800 600 L
n
100 450 m
100 600 L
0 600 L
0 450 L
100 450 L
n
200 450 m
200 600 L
100 600 L
100 450 L
200 450 L
n
300 450 m
300 600 L
200 600 L
200 450 L
300 450 L
n
400 450 m
400 600 L
300 600 L
300 450 L
400 450 L
n
500 450 m
500 600 L
400 600 L
400 450 L
500 450 L
n
600 450 m
600 600 L
500 600 L
500 450 L
600 450 L
n
700 450 m
700 600 L
600 600 L
600 450 L
700 450 L
n
800 450 m
800 600 L
700 600 L
700 450 L
800 450 L
n
100 300 m
100 450 L
0 450 L
0 300 L
100 300 L
n
200 300 m
200 450 L
100 450 L
100 300 L
200 300 L
n
300 300 m
300 450 L
200 450 L
200 300 L
300 300 L
n
400 300 m
400 450 L
300 450 L
300 300 L
400 300 L
n
500 300 m
500 450 L
400 450 L
400 300 L
500 300 L
n
600 300 m
600 450 L
500 450 L
500 300 L
600 300 L
n
700 300 m
700 450 L
600 450 L
600 300 L
700 300 L
n
800 300 m
800 450 L
700 450 L
700 300 L
800 300 L
n
100 150 m
100 300 L
0 300 L
0 150 L
100 150 L
n
200 150 m
200 300 L
100 300 L
100 150 L
200 150 L
n
300 150 m
300 300 L
200 300 L
200 150 L
300 150 L
n
400 150 m
400 300 L
300 300 L
300 150 L
400 150 L
n
500 150 m
500 300 L
400 300 L
400 150 L
500 150 L
n
600 150 m
600 300 L
500 300 L
500 150 L
600 150 L
n
700 150 m
700 300 L
600 300 L
600 150 L
700 150 L
n
800 150 m
800 300 L
700 300 L
700 150 L
800 150 L
n
100 0 m
100 150 L
0 150 L
0 0 L
100 0 L
n
200 0 m
200 150 L
100 150 L
100 0 L
200 0 L
n
300 0 m
300 150 L
200 150 L
200 0 L
300 0 L
n
400 0 m
400 150 L
300 150 L
300 0 L
400 0 L
n
500 0 m
500 150 L
400 150 L
400 0 L
500 0 L
n
600 0 m
600 150 L
500 150 L
500 0 L
600 0 L
n
700 0 m
700 150 L
600 150 L
600 0 L
700 0 L
n
800 0 m
800 150 L
700 150 L
700 0 L
800 0 L
n
U
0 O
0 g
1 D
302 967 m
302 950.0764 312.9314 939 329 939 c
334.5462 939 341.1875 940.8125 346 943.6 C
345 946.5 L
340.0237 943.6176 333.9216 942 329 942 c
314.4205 942 305 951.8131 305 967 c
305 982.1869 314.4205 992 329 992 c
333.9216 992 340.0237 990.3824 345 987.5 C
346 990.4 L
341.1875 993.1875 334.5462 995 329 995 c
312.9314 995 302 983.9235 302 967 c
f
14.7378 1000 m
5.5 1016 L
2 1016 L
11.2378 1000 L
14.7378 1000 L
f
143 956 m
143 949.375 132.9004 942 121 942 C
121 939 L
131.0073 939 139.6875 943.5 143 949 C
143.2 949 L
143.3722 945.9414 143.6305 942.7141 144 940 C
147 940 L
146.4213 944.072 146 949.7898 146 954 C
146 976 l
146 989.34 140.0636 995 125 995 c
118.6644 995 110.2535 992.8542 105 990 C
106 987.1 L
111.1717 989.9097 118.9724 992 125 992 c
138.2897 992 143 987.8131 143 976 C
113.51 974.9703 102 966.5744 102 955 c
102 945.0059 109.0461 939 121 939 C
121 942 L
110.5246 942 105 946.6889 105 955 c
105 964.9499 115.9502 972.0555 143 973 C
143 956 l
f
546 943.6 m
545 946.5 L
540.0238 943.6177 533.9215 942 527 942 c
514.2134 942 505 951.9471 505 967 c
505 982.0529 514.2134 992 527 992 c
538.2012 992 545.9141 983.9784 546.881 970 C
504 970 L
504 967 L
550 967 L
550 984.4235 540.7346 995 527 995 c
512.598 995 502 983.5902 502 967 c
502 950.4098 512.598 939 527 939 c
534.5461 939 541.1876 940.8126 546 943.6 C
f
618 1002 m
618 1011.1043 620.8351 1014 628.5501 1014 c
630.7986 1014 632.7929 1013.4984 635 1012.4 C
636 1015.3 L
633.6663 1016.4614 631.3965 1017 628.5501 1017 c
618.7982 1017 615 1012.8398 615 1002 C
615 993 L
602 993 L
602 990 L
615 990 L
615 940 L
618 940 L
618 990 L
638 990 L
638 993 L
618 993 L
618 1002 l
f
225 992 m
238.8145 992 247 983.419 247 968 c
247 951.2198 238.816 942 226 942 C
226 939 L
240.3116 939 250 949.3034 250 968 c
250 985.1968 240.5448 995 225 995 c
215.8679 995 208.4871 990.2707 205.2 983 C
205 983 L
205 1016 L
202 1016 L
202 940 L
205 940 L
205 951 L
205.2 951 L
208.6377 943.396 216.2173 939 226 939 C
226 942 L
212.5541 942 205 949.8489 205 967 c
205 983.485 212.054 992 225 992 c
f
447 967 m
447 949.8489 439.4459 942 426 942 C
426 939 L
435.7827 939 443.3623 943.396 446.8 951 C
447 951 L
447 940 L
450 940 L
450 1016 L
447 1016 L
447 983 L
446.8 983 L
443.5129 990.2707 436.1321 995 427 995 c
411.4552 995 402 985.1968 402 968 c
402 949.3034 411.6884 939 426 939 C
426 942 L
413.184 942 405 951.2198 405 968 c
405 983.419 413.1855 992 427 992 c
439.946 992 447 983.485 447 967 c
f
747 944 m
747 928.5234 738.4766 920 723 920 c
717.0621 920 712.7165 920.8894 707.6 923 C
707 920 L
712 917.9375 716.8311 917 723 917 c
739.674 917 750 926.4947 750 944 C
750 994 L
747 994 L
747 983 L
746.8 983 L
743.5129 990.2707 736.1321 995 727 995 c
711.4552 995 702 985.1968 702 968 c
702 950.3036 711.6884 940 726 940 C
726 943 L
713.3508 943 705 952.0533 705 968 c
705 983.419 713.1855 992 727 992 c
739.946 992 747 983.485 747 967 c
747 950.8489 739.4457 943 726 943 C
726 940 L
735.7827 940 743.3623 944.396 746.8 952 C
747 952 L
747 944 L
f
302 816.9954 m
302 800.1274 313.0556 788.9954 329.6667 788.9954 c
335.3809 788.9954 342.2084 790.8079 347.1667 793.5954 C
345.6667 798.2621 L
340.5809 795.4 334.5749 793.8288 329.6667 793.8288 c
316.2743 793.8288 307.5001 802.9922 307.5001 816.9954 c
307.5001 830.9986 316.2743 840.162 329.6667 840.162 c
334.5749 840.162 340.5809 838.5908 345.6667 835.7287 C
347.1667 840.3954 L
342.2084 843.1829 335.3809 844.9954 329.6667 844.9954 c
313.0556 844.9954 302 833.8634 302 816.9954 c
f
302 666.9908 m
302 650.1784 313.1798 638.9908 330.3334 638.9908 c
336.2157 638.9908 343.2292 640.8033 348.3334 643.5908 C
346.3334 650.0243 L
341.1382 647.1825 335.2283 645.6576 330.3334 645.6576 c
318.128 645.6576 310.0001 654.1713 310.0001 666.9908 c
310.0001 679.8104 318.128 688.3241 330.3334 688.3241 c
335.2283 688.3241 341.1382 686.7992 346.3334 683.9574 C
348.3334 690.3908 L
343.2292 693.1783 336.2157 694.9908 330.3334 694.9908 c
313.1798 694.9908 302 683.8032 302 666.9908 c
f
302 517 m
302 500.2431 313.304 489 331 489 c
337.0504 489 344.25 490.8125 349.5 493.6 C
347 501.8 L
341.6954 498.9784 335.8816 497.5 331 497.5 c
319.9816 497.5 312.5 505.364 312.5 517 c
312.5 528.6359 319.9816 536.5 331 536.5 c
335.8816 536.5 341.6954 535.0215 347 532.2 C
349.5 540.4 L
344.25 543.1875 337.0504 545 331 545 c
313.304 545 302 533.7568 302 517 c
f
302 366.9954 m
302 350.2941 313.4283 338.9954 331.6667 338.9954 c
337.8851 338.9954 345.2709 340.8079 350.6667 343.5954 C
347.6667 353.5621 L
342.2526 350.7609 336.535 349.3288 331.6667 349.3288 c
321.8354 349.3288 315.0001 356.5432 315.0001 366.9954 c
315.0001 377.4477 321.8354 384.662 331.6667 384.662 c
336.535 384.662 342.2526 383.23 347.6667 380.4287 C
350.6667 390.3954 L
345.2709 393.1829 337.8851 394.9954 331.6667 394.9954 c
313.4283 394.9954 302 383.6967 302 366.9954 c
f
302 217.0046 m
302 200.3588 313.5525 189.0046 332.3333 189.0046 c
338.7198 189.0046 346.2916 190.8171 351.8333 193.6046 C
348.3333 205.3379 L
342.8098 202.5569 337.1883 201.1712 332.3333 201.1712 c
323.689 201.1712 317.4999 207.7359 317.4999 217.0046 c
317.4999 226.2733 323.689 232.838 332.3333 232.838 c
337.1883 232.838 342.8098 231.4523 348.3333 228.6713 C
351.8333 240.4046 L
346.2916 243.1921 338.7198 245.0046 332.3333 245.0046 c
313.5525 245.0046 302 233.6503 302 217.0046 c
f
302 67 m
302 50.4098 313.6767 39 333 39 c
339.5546 39 347.3125 40.8125 353 43.6 C
349 57.1 L
343.3671 54.3393 337.8417 53 333 53 c
325.5428 53 320 58.915 320 67 c
320 75.085 325.5428 81 333 81 c
337.8417 81 343.3671 79.6607 349 76.9 C
353 90.4 L
347.3125 93.1875 339.5546 95 333 95 c
313.6767 95 302 83.5902 302 67 c
f
16.6149 848.9954 m
8.2501 865.9954 L
2 865.9954 L
11.0315 848.9954 L
16.6149 848.9954 L
f
18.492 697.9908 m
11.0002 715.9908 L
2 715.9908 L
10.8252 697.9908 L
18.492 697.9908 L
f
20.3689 547 m
13.75 566 L
2 566 L
10.6189 547 L
20.3689 547 L
f
22.246 395.9954 m
16.5001 415.9954 L
2 415.9954 L
10.4126 395.9954 L
22.246 395.9954 L
f
24.1229 245.0046 m
19.2499 266.0046 L
2 266.0046 L
10.2063 245.0046 L
24.1229 245.0046 L
f
26 94 m
22 116 L
2 116 L
10 94 L
26 94 L
f
547 793.5954 m
545.6667 798.1455 L
540.5198 795.2081 534.6694 793.6621 527.8334 793.6621 c
515.8275 793.6621 507.5001 802.6315 507.5001 816.9954 c
507.5001 831.4149 515.6886 840.3287 527.5 840.3287 c
537.7515 840.3287 544.6325 833.1371 545.5008 820.4954 C
506.1667 820.4954 L
506.1667 815.9954 L
551 815.9954 L
551.3257 834.2369 541.946 844.9954 527.5 844.9954 c
512.6313 844.9954 502 833.6967 502 816.9954 c
502 800.3219 512.7702 788.9954 527.6667 788.9954 c
535.2847 788.9954 541.8861 790.7247 547 793.5954 C
f
548.0001 643.5908 m
546.3334 649.791 L
541.0159 646.7986 535.4174 645.3243 528.6667 645.3243 c
517.4415 645.3243 510.0001 653.316 510.0001 666.9908 c
510.0001 680.7768 517.1637 688.6574 528 688.6574 c
537.3018 688.6574 543.3508 682.2958 544.1206 670.9909 C
508.3335 670.9909 L
508.3335 664.9908 L
552.0001 664.9908 L
552.6514 684.0503 543.1574 694.9908 528 694.9908 c
512.6645 694.9908 502 683.8032 502 666.9908 c
502 650.234 512.9424 638.9908 528.3334 638.9908 c
536.0233 638.9908 542.5846 640.6368 548.0001 643.5908 C
f
549 493.6 m
547 501.45 L
541.5119 498.4026 536.1652 497 529.5 497 c
519.0554 497 512.5 504.0141 512.5 517 c
512.5 530.1526 518.6388 537 528.5 537 c
536.8522 537 542.0693 531.4683 542.7405 521.5 C
510.5 521.5 L
510.5 514 L
553 514 L
553.977 533.8774 544.3687 545 528.5 545 c
512.6978 545 502 533.9235 502 517 c
502 500.1598 513.1145 489 529 489 c
536.7618 489 543.283 490.5626 549 493.6 C
f
550 343.5954 m
547.6667 353.0955 L
542.0079 349.993 536.9132 348.6621 530.3334 348.6621 c
520.6695 348.6621 515.0001 354.6985 515.0001 366.9954 c
515.0001 379.5146 520.114 385.3287 529 385.3287 c
536.4025 385.3287 540.7877 380.6271 541.3603 371.9954 C
512.6667 371.9954 L
512.6667 362.9954 L
554 362.9954 L
555.3027 383.6908 545.5801 394.9954 529 394.9954 c
512.7311 394.9954 502 384.03 502 366.9954 c
502 350.0719 513.2867 338.9954 529.6667 338.9954 c
537.5004 338.9954 543.9815 340.4748 550 343.5954 C
f
551 193.6046 m
548.3333 204.7545 L
542.5039 201.5971 537.6611 200.3379 531.1667 200.3379 c
522.2834 200.3379 517.4999 205.3966 517.4999 217.0046 c
517.4999 228.8903 521.589 233.6713 529.5 233.6713 c
535.9529 233.6713 539.5061 229.7996 539.9802 222.5046 C
514.8333 222.5046 L
514.8333 212.0046 L
555 212.0046 L
556.6283 233.518 546.7914 245.0046 529.5 245.0046 c
512.7643 245.0046 502 234.1503 502 217.0046 c
502 199.9977 513.4589 189.0046 530.3333 189.0046 c
538.2389 189.0046 544.6799 190.4006 551 193.6046 C
f
517 61 m
556 61 L
557.954 83.3314 548.0028 95 530 95 c
512.7976 95 502 84.2568 502 67 c
502 49.9098 513.6311 39 531 39 c
538.9775 39 545.3784 40.3127 552 43.6 C
549 56.4 L
543 53.1875 538.409 52 532 52 c
523.8975 52 520 56.0811 520 67 c
520 78.2523 523.0642 82 530 82 c
535.5032 82 538.2245 78.9583 538.6 73 C
517 73 L
517 61 L
f
141.8333 806.8288 m
141.8333 800.5323 132.7399 793.8288 121.6667 793.8288 C
120.6667 788.9954 L
130.2686 788.9954 138.6041 793.1517 142.2056 798.4954 C
142.4056 798.4954 L
142.5601 795.6862 142.8066 792.5072 143.15 789.9954 C
148.3334 789.9954 L
147.747 794.0658 147.3334 799.7852 147.3334 803.9954 C
147.3334 825.9954 L
147.3334 839.2521 141.1775 844.9954 125.3334 844.9954 c
119.205 844.9954 110.6537 842.8496 105.1667 839.9954 C
106.3334 835.462 L
111.7298 838.2696 119.5324 840.3287 125.3334 840.3287 c
137.7135 840.3287 141.8333 836.6304 141.8333 825.9954 C
113.4359 824.993 102 816.5703 102 804.9954 c
102 794.9458 108.9184 788.9954 120.6667 788.9954 C
121.6667 793.8288 L
112.4161 793.8288 107.5001 797.9936 107.5001 805.3288 c
107.5001 814.1672 117.4326 820.6381 141.8333 821.4954 C
141.8333 806.8288 l
f
140.6666 657.6576 m
140.6666 651.6896 132.5794 645.6576 122.3334 645.6576 C
120.3333 638.9908 L
129.53 638.9908 137.5208 642.8033 141.4111 647.9908 C
141.6111 647.9908 L
141.7481 645.4309 141.9828 642.3002 142.2999 639.9908 C
149.6667 639.9908 L
149.0726 644.0597 148.6667 649.7806 148.6667 653.9908 C
148.6667 675.9908 L
148.6667 689.1642 142.2914 694.9908 125.6667 694.9908 c
119.7456 694.9908 111.0538 692.845 105.3333 689.9908 C
106.6667 683.8241 L
112.288 686.6295 120.0924 688.6574 125.6667 688.6574 c
137.1374 688.6574 140.6666 685.4476 140.6666 675.9908 C
113.3618 675.0157 102 666.5663 102 654.9908 c
102 644.8857 108.7907 638.9908 120.3333 638.9908 C
122.3334 645.6576 L
114.3076 645.6576 110.0001 649.2983 110.0001 655.6575 c
110.0001 663.3846 118.915 669.2207 140.6666 669.9907 C
140.6666 657.6576 l
f
139.5 508.5 m
139.5 502.8605 132.4189 497.5 123 497.5 C
120 489 L
128.7914 489 136.4375 492.4687 140.6168 497.5 C
140.8168 497.5 L
140.9361 495.1894 141.159 492.107 141.45 490 C
151 490 L
150.3981 494.0672 150 499.7898 150 504 C
150 526 L
150 539.09 143.4052 545 126 545 c
120.2862 545 111.4539 542.8542 105.5 540 C
107 532.2 L
112.8461 535.0032 120.6524 537 126 537 c
136.5614 537 139.5 534.2787 139.5 526 C
113.2877 525.0521 102 516.576 102 505 c
102 494.8393 108.6631 489 120 489 C
123 497.5 L
116.1989 497.5 112.5 500.6166 112.5 506 c
112.5 512.6157 120.3972 517.8171 139.5 518.5 C
139.5 508.5 l
f
138.3333 359.3288 m
138.3333 354.0179 132.2585 349.3288 123.6667 349.3288 C
119.6667 338.9954 L
128.0527 338.9954 135.3541 342.1204 139.8224 346.9954 C
140.0224 346.9954 L
140.124 344.9342 140.3351 341.9001 140.6 339.9954 C
152.3334 339.9954 L
151.7238 344.0611 151.3334 349.7852 151.3334 353.9954 C
151.3334 375.9954 L
151.3334 389.0021 144.5192 394.9954 126.3334 394.9954 c
120.8268 394.9954 111.8541 392.8496 105.6667 389.9954 C
107.3334 380.562 L
113.4042 383.3631 121.2124 385.3287 126.3334 385.3287 c
135.9852 385.3287 138.3333 383.096 138.3333 375.9954 C
113.2136 375.0749 102 366.5719 102 354.9954 c
102 344.7792 108.5354 338.9954 119.6667 338.9954 C
123.6667 349.3288 L
118.0904 349.3288 115.0001 351.9213 115.0001 356.3288 c
115.0001 361.8331 121.8796 366.3997 138.3333 366.9954 C
138.3333 359.3288 l
f
137.1667 210.1712 m
137.1667 205.1888 132.098 201.1712 124.3333 201.1712 C
119.3334 189.0046 L
127.3141 189.0046 134.2709 191.7858 139.028 196.5046 C
139.228 196.5046 L
139.3121 194.6927 139.5113 191.7069 139.75 190.0046 C
153.6666 190.0046 L
153.0493 194.0686 152.6666 199.7944 152.6666 204.0046 C
152.6666 226.0046 L
152.6666 238.928 145.633 245.0046 126.6667 245.0046 c
121.3674 245.0046 112.2542 242.8588 105.8333 240.0046 C
107.6667 228.938 L
113.9623 231.7369 121.7723 233.6713 126.6667 233.6713 c
135.4091 233.6713 137.1667 231.9271 137.1667 226.0046 C
113.1395 225.1113 102 216.5816 102 205.0046 c
102 194.7328 108.4077 189.0046 119.3334 189.0046 C
124.3333 201.1712 L
119.9818 201.1712 117.4999 203.2396 117.4999 206.6712 c
117.4999 211.0643 123.3619 214.9961 137.1667 215.5046 C
137.1667 210.1712 l
f
136 61 m
136 56.3461 131.9375 53 125 53 C
119 39 L
126.5755 39 133.1875 41.4375 138.2336 46 C
138.4336 46 L
138.5 44.4375 138.6875 41.5 138.9 40 C
155 40 L
154.375 44.0625 154 49.7898 154 54 C
154 76 L
154 88.8401 146.7469 95 127 95 c
121.908 95 112.6544 92.8542 106 90 C
108 77.3 L
114.5205 80.0968 122.3323 82 127 82 c
134.833 82 136 80.7444 136 76 C
113.0654 75.134 102 66.5776 102 55 c
102 44.6727 108.28 39 119 39 C
125 53 L
121.8733 53 120 54.5443 120 57 c
120 60.2816 124.8443 63.5787 136 64 C
136 61 l
f
226.0447 839.8287 m
238.5167 839.8287 246 831.9099 246 817.8287 c
246 802.5632 238.3458 794.1621 226.8781 794.1621 C
227.8031 788.9954 L
241.7955 788.9954 251.5001 799.3544 251.5001 817.8287 c
251.5001 835.1422 242.0788 844.9954 226.9698 844.9954 c
218.3953 844.9954 211.2497 840.6793 207.7001 833.9954 C
207.5001 833.9954 L
207.5001 865.9954 L
202 865.9954 L
202 789.9954 L
207.3334 789.9954 L
207.3334 800.1621 L
207.5334 800.1621 L
211.1356 793.1483 218.6982 788.9954 227.8031 788.9954 C
226.8781 794.1621 L
214.7566 794.1621 207.6668 801.4434 207.6668 816.9954 c
207.6668 831.9368 214.2565 839.8287 226.0447 839.8287 c
f
227.0895 687.6575 m
238.219 687.6575 244.9999 680.4009 244.9999 667.6575 c
244.9999 653.9067 237.8756 646.3243 227.7561 646.3243 C
229.6062 638.9908 L
243.2794 638.9908 253.0001 649.4054 253.0001 667.6575 c
253.0001 685.0876 243.6128 694.9908 228.9395 694.9908 c
220.9227 694.9908 214.0124 691.088 210.2001 684.9909 C
210.0001 684.9909 L
210.0001 715.9908 L
202 715.9908 L
202 639.9908 L
209.6668 639.9908 L
209.6668 649.3241 L
209.8668 649.3241 L
213.6336 642.9007 221.1792 638.9908 229.6062 638.9908 C
227.7561 646.3243 L
216.9591 646.3243 210.3335 653.038 210.3335 666.9908 c
210.3335 680.3887 216.459 687.6575 227.0895 687.6575 c
f
228.1342 535.5001 m
237.9213 535.5001 244 528.9057 244 517.5 c
244 505.2638 237.4054 498.5 228.6342 498.5 C
231.4091 489 L
244.7632 489 254.5 499.4701 254.5 517.5 c
254.5 535.0467 245.1466 545 230.9091 545 c
223.4498 545 216.7748 541.5103 212.7 536 C
212.5 536 L
212.5 566 L
202 566 L
202 490 L
212 490 L
212 498.5 L
212.2 498.5 L
216.1313 492.6667 223.6599 489 231.4091 489 C
228.6342 498.5 L
219.1614 498.5 213 504.6461 213 517 c
213 528.8544 218.6613 535.5001 228.1342 535.5001 c
f
229.1789 383.3288 m
237.6235 383.3288 243 377.3967 243 367.3287 c
243 356.6072 236.9352 350.6621 229.5122 350.6621 C
233.2122 338.9954 L
246.2471 338.9954 256.0001 349.5211 256.0001 367.3287 c
256.0001 384.9922 246.6806 394.9954 232.8789 394.9954 c
225.9772 394.9954 219.5374 391.919 215.2001 386.9954 C
215.0001 386.9954 L
215.0001 415.9954 L
202 415.9954 L
202 339.9954 L
214.3334 339.9954 L
214.3334 347.6621 L
214.5334 347.6621 L
218.6293 342.4191 226.1408 338.9954 233.2122 338.9954 C
229.5122 350.6621 L
221.3639 350.6621 215.6668 356.2407 215.6668 366.9954 c
215.6668 377.3062 220.8639 383.3288 229.1789 383.3288 c
f
230.2236 231.1715 m
237.3258 231.1715 242 225.9015 242 217.1712 c
242 207.9643 236.465 202.8378 230.3902 202.8378 C
235.0151 189.0046 L
247.7309 189.0046 257.5 199.5858 257.5 217.1712 c
257.5 234.9513 248.2145 245.0046 234.8484 245.0046 c
228.5044 245.0046 222.2998 242.3414 217.6999 238.0045 C
217.4999 238.0045 L
217.4999 266.0046 L
202 266.0046 L
202 190.0046 L
216.6666 190.0046 L
216.6666 196.8379 L
216.8666 196.8379 L
221.127 192.1852 228.6215 189.0046 235.0151 189.0046 C
230.3902 202.8378 L
223.5662 202.8378 218.3333 207.8488 218.3333 217.0046 c
218.3333 225.7719 223.0662 231.1715 230.2236 231.1715 c
f
220 116 m
202 116 L
202 40 L
219 40 L
219 46 L
219.2 46 L
223.625 41.9375 231.1025 39 236.8182 39 C
231.2683 54.9999 L
225.7687 54.9999 221 59.4434 221 67 c
221 74.2238 225.2687 79.0002 231.2683 79.0002 c
237.0281 79.0002 241 74.3925 241 67 c
241 59.3078 235.9948 54.9999 231.2683 54.9999 C
236.8182 39 L
249.2148 39 259 49.6368 259 67 c
259 84.8967 249.7485 95 236.8182 95 c
231.0318 95 225.0625 92.75 220.2 89 C
220 89 L
220 116 L
f
446 833.9954 m
445.8 833.9954 L
442.2503 840.6793 435.1047 844.9954 426.5303 844.9954 c
411.4212 844.9954 402 835.1422 402 817.8287 c
402 799.3544 411.7045 788.9954 425.697 788.9954 C
426.622 794.1621 L
415.1542 794.1621 407.5001 802.5632 407.5001 817.8287 c
407.5001 831.9099 414.9833 839.8287 427.4553 839.8287 c
439.2435 839.8287 445.8333 831.9368 445.8333 816.9954 c
445.8333 801.4434 438.7434 794.1621 426.622 794.1621 C
425.697 788.9954 L
434.8018 788.9954 442.3644 793.1483 445.9666 800.1621 C
446.1667 800.1621 L
446.1667 789.9954 L
451.5001 789.9954 L
451.5001 865.9954 L
446 865.9954 L
446 833.9954 L
f
444.9999 684.9909 m
444.7999 684.9909 L
440.9877 691.088 434.0774 694.9908 426.0606 694.9908 c
411.3873 694.9908 402 685.0876 402 667.6575 c
402 649.4054 411.7207 638.9908 425.3939 638.9908 C
427.2439 646.3243 L
417.1245 646.3243 410.0001 653.9067 410.0001 667.6575 c
410.0001 680.4009 416.7811 687.6575 427.9106 687.6575 c
438.5411 687.6575 444.6666 680.3887 444.6666 666.9908 c
444.6666 653.038 438.041 646.3243 427.2439 646.3243 C
425.3939 638.9908 L
433.8209 638.9908 441.3665 642.9007 445.1333 649.3241 C
445.3333 649.3241 L
445.3333 639.9908 L
453.0001 639.9908 L
453.0001 715.9908 L
444.9999 715.9908 L
444.9999 684.9909 L
f
444 536 m
443.8 536 L
439.7252 541.5103 433.0502 545 425.5909 545 c
411.3533 545 402 535.0467 402 517.5 c
402 499.4701 411.7368 489 425.0909 489 C
427.8658 498.5 L
419.0946 498.5 412.5 505.2638 412.5 517.5 c
412.5 528.9057 418.5787 535.5001 428.3658 535.5001 c
437.8386 535.5001 443.5 528.8544 443.5 517 c
443.5 504.6461 437.3386 498.5 427.8658 498.5 C
425.0909 489 L
432.8401 489 440.3686 492.6667 444.3 498.5 C
444.5 498.5 L
444.5 490 L
454.5 490 L
454.5 566 L
444 566 L
444 536 L
f
443 386.9954 m
442.8 386.9954 L
438.4626 391.919 432.0228 394.9954 425.1212 394.9954 c
411.3194 394.9954 402 384.9922 402 367.3287 c
402 349.5211 411.7529 338.9954 424.7879 338.9954 C
428.4878 350.6621 L
421.0648 350.6621 415.0001 356.6072 415.0001 367.3287 c
415.0001 377.3967 420.3765 383.3288 428.8211 383.3288 c
437.1362 383.3288 442.3333 377.3062 442.3333 366.9954 c
442.3333 356.2407 436.6361 350.6621 428.4878 350.6621 C
424.7879 338.9954 L
431.8592 338.9954 439.3707 342.4191 443.4666 347.6621 C
443.6667 347.6621 L
443.6667 339.9954 L
456.0001 339.9954 L
456.0001 415.9954 L
443 415.9954 L
443 386.9954 L
f
442 238.0045 m
441.8 238.0045 L
437.2001 242.3414 430.9955 245.0046 424.6515 245.0046 c
411.2854 245.0046 402 234.9513 402 217.1712 c
402 199.5858 411.7691 189.0046 424.4848 189.0046 C
429.1097 202.8378 L
423.0349 202.8378 417.4999 207.9643 417.4999 217.1712 c
417.4999 225.9015 422.1741 231.1715 429.2764 231.1715 c
436.4338 231.1715 441.1667 225.7719 441.1667 217.0046 c
441.1667 207.8488 435.9337 202.8378 429.1097 202.8378 C
424.4848 189.0046 L
430.8784 189.0046 438.3729 192.1852 442.6333 196.8379 C
442.8334 196.8379 L
442.8334 190.0046 L
457.5 190.0046 L
457.5 266.0046 L
442 266.0046 L
442 238.0045 L
f
441 89 m
440.8 89 L
435.9375 92.75 429.9682 95 424.1818 95 c
411.2515 95 402 84.8967 402 67 c
402 49.6368 411.7852 39 424.1818 39 C
429.7317 54.9999 L
425.0052 54.9999 420 59.3078 420 67 c
420 74.3925 423.9719 79.0002 429.7317 79.0002 c
435.7313 79.0002 440 74.2238 440 67 c
440 59.4434 435.2313 54.9999 429.7317 54.9999 C
424.1818 39 L
429.8975 39 437.375 41.9375 441.8 46 C
442 46 L
442 40 L
459 40 L
459 116 L
441 116 L
441 89 L
f
629.2918 866.9954 m
618.834 866.9954 614.5 862.275 614.5 850.662 C
614.5 842.8287 L
602 842.8287 L
602 838.162 L
614.5 838.162 L
614.5 789.9954 L
620.0001 789.9954 L
620.0001 838.162 L
638.8334 838.162 L
638.8334 842.8287 L
620.0001 842.8287 L
620.0001 850.662 L
620.0001 859.4556 622.586 862.162 629.9585 862.162 c
632.2486 862.162 634.4386 861.6329 636.6667 860.562 C
637.8334 865.2454 L
635.1282 866.4424 632.5177 866.9954 629.2918 866.9954 c
f
630.0334 716.9908 m
618.8699 716.9908 614 711.7101 614 699.3241 C
614 692.6575 L
602 692.6575 L
602 686.3241 L
614 686.3241 L
614 639.9908 L
622.0001 639.9908 L
622.0001 686.3241 L
639.6667 686.3241 L
639.6667 692.6575 L
622.0001 692.6575 L
622.0001 699.3241 L
622.0001 707.8069 624.3369 710.3241 631.3668 710.3241 c
633.6986 710.3241 636.0842 709.7674 638.3334 708.7241 C
639.6668 715.1908 L
636.5901 716.4234 633.6389 716.9908 630.0334 716.9908 c
f
630.7751 567 m
618.9057 567 613.5 561.1591 613.5 548 C
613.5 542.5 L
602 542.5 L
602 534.5 L
613.5 534.5 L
613.5 490 L
624 490 L
624 534.5 L
640.5 534.5 L
640.5 542.5 L
624 542.5 L
624 548 L
624 556.1721 626.0877 558.5 632.7751 558.5 c
635.1486 558.5 637.7298 557.9158 640 556.9 C
641.5 565.15 L
638.0519 566.4182 634.76 567 630.7751 567 c
f
631.5167 416.9954 m
618.9416 416.9954 613 410.5943 613 396.662 C
613 392.3287 L
602 392.3287 L
602 382.662 L
613 382.662 L
613 339.9954 L
626.0001 339.9954 L
626.0001 382.662 L
641.3334 382.662 L
641.3334 392.3287 L
626.0001 392.3287 L
626.0001 396.662 L
626.0001 404.5235 627.8386 406.662 634.1834 406.662 c
636.5986 406.662 639.3755 406.0504 641.6667 405.062 C
643.3334 415.0954 L
639.5138 416.3992 635.8812 416.9954 631.5167 416.9954 c
f
632.2583 267.0046 m
618.9774 267.0046 612.5 260.0432 612.5 245.3379 C
612.5 242.1712 L
602 242.1712 L
602 230.838 L
612.5 230.838 L
612.5 190.0046 L
628 190.0046 L
628 230.838 L
642.1667 230.838 L
642.1667 242.1712 L
628 242.1712 L
628 245.3379 L
628 252.8887 629.5894 254.838 635.5916 254.838 c
638.0485 254.838 641.021 254.1988 643.3333 253.238 C
645.1666 265.0546 L
640.9756 266.394 637.0023 267.0046 632.2583 267.0046 c
f
633 117 m
619.0133 117 612 109.4784 612 94 C
612 92 L
602 92 L
602 79 L
612 79 L
612 40 L
630 40 L
630 79 L
643 79 L
643 92 L
630 92 L
630 94 L
630 101.24 631.3403 103 637 103 c
639.4985 103 642.6667 102.3333 645 101.4 C
647 115 L
642.4375 116.375 638.1235 117 633 117 c
f
746 794.1621 m
746 780.6268 738.8972 771.8288 723.6628 771.8288 c
717.5868 771.8288 713.1235 772.7193 708 774.8288 C
707.1667 769.9954 L
712.3217 767.9329 717.3065 766.9954 723.6667 766.9954 c
740.9411 766.9954 751.5001 776.5735 751.5001 793.9954 C
751.5001 843.9954 L
746.3333 843.9954 L
746.3333 833.8288 L
746.1333 833.8288 L
742.8024 840.5231 735.3363 844.9954 726.697 844.9954 c
711.4213 844.9954 702 835.1422 702 817.8287 c
702 800.1879 711.7045 789.9954 725.697 789.9954 C
726.622 795.1621 L
715.2933 795.1621 707.5001 803.2578 707.5001 817.8287 c
707.5001 831.9099 714.9833 839.8287 727.4553 839.8287 c
739.2435 839.8287 745.8333 831.9368 745.8333 816.9954 c
745.8333 802.2768 738.7433 795.1621 726.622 795.1621 C
725.697 789.9954 L
734.8018 789.9954 742.2371 794.0615 745.8 800.9954 C
746 800.9954 L
746 794.1621 L
f
744.9999 644.3242 m
744.9999 632.7302 739.3178 623.6576 724.3256 623.6576 c
718.1115 623.6576 713.5306 624.5491 708.4 626.6576 C
707.3333 619.9908 L
712.6434 617.9283 717.7818 616.9908 724.3334 616.9908 c
742.2081 616.9908 753.0001 626.6522 753.0001 643.9908 C
753.0001 693.9908 L
745.6666 693.9908 L
745.6666 684.6576 L
745.4666 684.6576 L
742.0919 690.7755 734.5406 694.9908 726.3939 694.9908 c
711.3873 694.9908 702 685.0876 702 667.6575 c
702 650.0722 711.7206 639.9908 725.3939 639.9908 C
727.2439 647.3243 L
717.2357 647.3243 710.0001 654.4624 710.0001 667.6575 c
710.0001 680.4009 716.7811 687.6575 727.9106 687.6575 c
738.5411 687.6575 744.6666 680.3887 744.6666 666.9908 c
744.6666 653.7047 738.0408 647.3243 727.2439 647.3243 C
725.3939 639.9908 L
733.8209 639.9908 741.1119 643.727 744.7999 649.9908 C
744.9999 649.9908 L
744.9999 644.3242 L
f
744 494.5 m
744 484.8472 739.7383 475.5 724.9884 475.5 c
718.6362 475.5 713.9375 476.3926 708.8 478.5 C
707.5 470 L
712.9651 467.9375 718.2572 467 725 467 c
743.4751 467 754.5 476.7447 754.5 494 C
754.5 544 L
745 544 L
745 535.5 L
744.8 535.5 L
741.3815 541.0416 733.7449 545 726.0909 545 c
711.3534 545 702 535.0467 702 517.5 c
702 499.9702 711.7367 490 725.0909 490 C
727.8658 499.5 L
719.178 499.5 712.5 505.6805 712.5 517.5 c
712.5 528.9057 718.5787 535.5001 728.3658 535.5001 c
737.8386 535.5001 743.5 528.8544 743.5 517 c
743.5 505.1461 737.3385 499.5 727.8658 499.5 C
725.0909 490 L
732.8401 490 739.9869 493.4063 743.8 499 C
744 499 L
744 494.5 L
f
743 344.6621 m
743 336.9506 740.1589 327.3288 725.6512 327.3288 c
719.1609 327.3288 714.3446 328.2225 709.2 330.3288 C
707.6667 319.9954 L
713.2868 317.9329 718.7326 316.9954 725.6667 316.9954 c
744.7422 316.9954 756.0001 326.8235 756.0001 343.9954 C
756.0001 393.9954 L
744.3333 393.9954 L
744.3333 386.3288 L
744.1333 386.3288 L
740.6709 391.294 732.9491 394.9954 725.7879 394.9954 c
711.3195 394.9954 702 384.9922 702 367.3287 c
702 349.8545 711.7528 339.9954 724.7879 339.9954 C
728.4878 351.6621 L
721.1204 351.6621 715.0001 356.8851 715.0001 367.3287 c
715.0001 377.3967 720.3765 383.3288 728.8211 383.3288 c
737.1362 383.3288 742.3333 377.3062 742.3333 366.9954 c
742.3333 356.574 736.6361 351.6621 728.4878 351.6621 C
724.7879 339.9954 L
731.8592 339.9954 738.8617 343.0719 742.8 347.9954 C
743 347.9954 L
743 344.6621 L
f
742 194.8379 m
742 189.0676 740.5795 179.1712 726.314 179.1712 c
719.6856 179.1712 714.7516 180.0659 709.6 182.1712 C
707.8333 170.0046 L
713.6085 167.9421 719.2079 167.0046 726.3333 167.0046 c
746.0091 167.0046 757.5 176.9159 757.5 194.0046 C
757.5 244.0046 L
743.6667 244.0046 L
743.6667 237.1712 L
743.4667 237.1712 L
739.9605 241.5601 732.1534 245.0046 725.4848 245.0046 c
711.2855 245.0046 702 234.9513 702 217.1712 c
702 199.7525 711.7689 190.0046 724.4848 190.0046 C
729.1097 203.8378 L
723.0627 203.8378 717.4999 208.1033 717.4999 217.1712 c
717.4999 225.9015 722.1741 231.1715 729.2764 231.1715 c
736.4338 231.1715 741.1667 225.7719 741.1667 217.0046 c
741.1667 208.0155 735.9337 203.8378 729.1097 203.8378 C
724.4848 190.0046 L
730.8784 190.0046 737.7367 192.7512 741.8 197.0046 C
742 197.0046 L
742 194.8379 L
f
759 94 m
743 94 L
743 88 L
742.8 88 L
739.25 91.8125 731.3577 95 725.1818 95 c
711.2516 95 702 84.8967 702 67 c
702 49.6368 711.785 40 724.1818 40 C
729.7317 55.9999 L
725.0052 55.9999 720 59.3078 720 67 c
720 74.3925 723.9719 79.0002 729.7317 79.0002 c
735.7313 79.0002 740 74.2238 740 67 c
740 59.4434 735.2313 55.9999 729.7317 55.9999 C
724.1818 40 L
729.8975 40 736.6115 42.4167 740.8 46 C
741 46 L
741 45 L
741 41.171 741.0001 31 726.9768 31 c
720.2103 31 715.1586 31.8958 710 34 C
708 20 L
713.9302 17.9375 719.6833 17 727 17 c
747.2762 17 759 26.9947 759 44 C
759 94 L
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
