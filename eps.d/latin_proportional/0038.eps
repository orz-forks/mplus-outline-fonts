%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (0038.eps)
%%CreationDate: (1/20/05) (4:06 PM)
%%BoundingBox: 0 0 800 1050
%%HiResBoundingBox: 0 0 800 1050
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 394.5 530 394.5 530
%AI3_TileBox: -180.5 -228 971.5 1302
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 1188 1680
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -373.5 1058 -2 794 557 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%AI5_ViewPalette: 0 1 -2 4331 4334 0 1 5 whole view
%%PageOrigin:-180.5 -228
%%AI3_PaperRect:-19 1615 1171 -68
%%AI3_Margin:19 -85 -19 68
%AI7_GridSettings: 0.5 10 0.5 10 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 0 79 128 255 Lb
(\203\214\203C\203\204\201[1) Ln
0 A
u
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 900 m
100 1050 L
0 1050 L
0 900 L
100 900 L
n
200 900 m
200 1050 L
100 1050 L
100 900 L
200 900 L
n
300 900 m
300 1050 L
200 1050 L
200 900 L
300 900 L
n
400 900 m
400 1050 L
300 1050 L
300 900 L
400 900 L
n
500 900 m
500 1050 L
400 1050 L
400 900 L
500 900 L
n
600 900 m
600 1050 L
500 1050 L
500 900 L
600 900 L
n
700 900 m
700 1050 L
600 1050 L
600 900 L
700 900 L
n
800 900 m
800 1050 L
700 1050 L
700 900 L
800 900 L
n
100 750 m
100 900 L
0 900 L
0 750 L
100 750 L
n
200 750 m
200 900 L
100 900 L
100 750 L
200 750 L
n
300 750 m
300 900 L
200 900 L
200 750 L
300 750 L
n
400 750 m
400 900 L
300 900 L
300 750 L
400 750 L
n
500 750 m
500 900 L
400 900 L
400 750 L
500 750 L
n
600 750 m
600 900 L
500 900 L
500 750 L
600 750 L
n
700 750 m
700 900 L
600 900 L
600 750 L
700 750 L
n
800 750 m
800 900 L
700 900 L
700 750 L
800 750 L
n
100 600 m
100 750 L
0 750 L
0 600 L
100 600 L
n
200 600 m
200 750 L
100 750 L
100 600 L
200 600 L
n
300 600 m
300 750 L
200 750 L
200 600 L
300 600 L
n
400 600 m
400 750 L
300 750 L
300 600 L
400 600 L
n
500 600 m
500 750 L
400 750 L
400 600 L
500 600 L
n
600 600 m
600 750 L
500 750 L
500 600 L
600 600 L
n
700 600 m
700 750 L
600 750 L
600 600 L
700 600 L
n
800 600 m
800 750 L
700 750 L
700 600 L
800 600 L
n
100 450 m
100 600 L
0 600 L
0 450 L
100 450 L
n
200 450 m
200 600 L
100 600 L
100 450 L
200 450 L
n
300 450 m
300 600 L
200 600 L
200 450 L
300 450 L
n
400 450 m
400 600 L
300 600 L
300 450 L
400 450 L
n
500 450 m
500 600 L
400 600 L
400 450 L
500 450 L
n
600 450 m
600 600 L
500 600 L
500 450 L
600 450 L
n
700 450 m
700 600 L
600 600 L
600 450 L
700 450 L
n
800 450 m
800 600 L
700 600 L
700 450 L
800 450 L
n
100 300 m
100 450 L
0 450 L
0 300 L
100 300 L
n
200 300 m
200 450 L
100 450 L
100 300 L
200 300 L
n
300 300 m
300 450 L
200 450 L
200 300 L
300 300 L
n
400 300 m
400 450 L
300 450 L
300 300 L
400 300 L
n
500 300 m
500 450 L
400 450 L
400 300 L
500 300 L
n
600 300 m
600 450 L
500 450 L
500 300 L
600 300 L
n
700 300 m
700 450 L
600 450 L
600 300 L
700 300 L
n
800 300 m
800 450 L
700 450 L
700 300 L
800 300 L
n
100 150 m
100 300 L
0 300 L
0 150 L
100 150 L
n
200 150 m
200 300 L
100 300 L
100 150 L
200 150 L
n
300 150 m
300 300 L
200 300 L
200 150 L
300 150 L
n
400 150 m
400 300 L
300 300 L
300 150 L
400 150 L
n
500 150 m
500 300 L
400 300 L
400 150 L
500 150 L
n
600 150 m
600 300 L
500 300 L
500 150 L
600 150 L
n
700 150 m
700 300 L
600 300 L
600 150 L
700 150 L
n
800 150 m
800 300 L
700 300 L
700 150 L
800 150 L
n
100 0 m
100 150 L
0 150 L
0 0 L
100 0 L
n
200 0 m
200 150 L
100 150 L
100 0 L
200 0 L
n
300 0 m
300 150 L
200 150 L
200 0 L
300 0 L
n
400 0 m
400 150 L
300 150 L
300 0 L
400 0 L
n
500 0 m
500 150 L
400 150 L
400 0 L
500 0 L
n
600 0 m
600 150 L
500 150 L
500 0 L
600 0 L
n
700 0 m
700 150 L
600 150 L
600 0 L
700 0 L
n
800 0 m
800 150 L
700 150 L
700 0 L
800 0 L
n
U
0 O
0 g
1 D
745 999 m
745 978.0625 722 984.625 722 956 C
725 956 L
725 983 748 976 748 999 c
748 1009.7224 739.7496 1017 724 1017 c
715.8675 1017 707.8125 1014 702 1009 C
703 1006 L
709.1492 1011.2896 716.1942 1014 724 1014 c
737.8457 1014 745 1008.1993 745 999 c
f
149.9 977 m
145.9477 955.1498 133.2368 943.1792 113.6 942 C
114 939 L
138.6085 940.7209 154 957.7721 154 993 c
154 1007.0788 143.426 1017 128 1017 c
112.574 1017 102 1007.0788 102 993 c
102 975.788 113.574 966 128 966 C
128 969 L
114.8131 969 105 977.7465 105 993 c
105 1005.394 114.0765 1014 128 1014 c
141.9235 1014 151 1005.394 151 993 c
151 977.7465 142.1869 969 128 969 C
128 966 L
137.2673 966 145.1063 969.9725 149.7 977 C
149.9 977 L
f
51 999 m
51 989.3148 43.2958 983 29.5 983 C
29.5 980 L
45.1742 980 54 972.1901 54 960 c
54 949.7352 44.4251 942 29.5 942 C
29.5 939 L
46.019 939 57 947.967 57 960 c
57 971.2807 50.3125 979.6875 38.5 981.45 C
38.5 981.65 L
48.375 983.4375 54 989.9945 54 999 c
54 1009.2267 44.7501 1017 29.5 1017 c
14.2499 1017 5 1009.2267 5 999 c
5 989.9945 10.625 983.4375 20.5 981.65 C
20.5 981.45 L
8.6875 979.6875 2 971.2807 2 960 c
2 947.967 12.981 939 29.5 939 C
29.5 942 L
14.5749 942 5 949.7352 5 960 c
5 972.1901 13.8258 980 29.5 980 C
29.5 983 L
15.7042 983 8 989.3148 8 999 c
8 1007.472 15.9736 1014 29.5 1014 c
43.0264 1014 51 1007.472 51 999 c
f
207 989 m
207 994 L
202 994 L
202 989 L
207 989 L
f
207 940 m
207 945 L
202 945 L
202 940 L
207 940 L
f
725 940 m
725 947 L
722 947 L
722 940 L
725 940 L
f
312 989 m
312 994 L
307 994 L
307 989 L
312 989 L
f
305 928 m
312 945 L
307 945 L
302 928 L
305 928 L
f
405.6 967.1 m
456 991.64 L
456 995 L
402 968.67 L
402 965.33 L
456 939 L
456 942.36 L
405.6 966.9 L
405.6 967.1 L
f
652.4 966.9 m
602 942.36 L
602 939 L
656 965.33 L
656 968.67 L
602 995 L
602 991.64 L
652.4 967.1 L
652.4 966.9 L
f
556 975 m
556 978 L
502 978 L
502 975 L
556 975 L
f
556 956 m
556 959 L
502 959 L
502 956 L
556 956 L
f
743.6666 848.3287 m
743.6666 828.8809 721.1667 833.8496 721.1667 806.9954 C
727.0001 806.9954 L
727.0001 832.4537 749.5001 826.2871 749.5001 848.9954 c
749.5001 859.69 741.188 866.9954 725 866.9954 c
716.7176 866.9954 708.1959 864.117 702 859.3288 C
703.6667 854.1287 L
710.0769 859.2541 716.9899 861.8287 724.5 861.8287 c
737.2877 861.8287 743.6666 856.6522 743.6666 848.3287 c
f
742.3332 697.6575 m
742.3332 679.6992 720.3333 683.0741 720.3333 657.9909 C
729.0001 657.9909 L
729.0001 681.9075 751.0001 676.5742 751.0001 698.9908 c
751.0001 709.6577 742.6263 716.9908 726.0001 716.9908 c
717.5678 716.9908 708.5792 714.2339 702 709.6575 C
704.3334 702.2574 L
711.0046 707.2186 717.7857 709.6574 725 709.6574 c
736.7297 709.6574 742.3332 705.105 742.3332 697.6575 c
f
741 547 m
741 530.5312 719.5 532.3125 719.5 509 C
731 509 L
731 531.375 752.5 526.875 752.5 549 c
752.5 559.639 744.0645 567 727 567 c
718.4179 567 708.9626 564.3646 702 560 C
705 550.4 L
711.9323 555.197 718.5814 557.5 725.5 557.5 c
736.1717 557.5 741 553.5718 741 547 c
f
739.6666 396.3287 m
739.6666 381.3496 718.6667 381.5371 718.6667 359.9954 C
733.0001 359.9954 L
733.0001 380.8287 754.0001 377.1621 754.0001 398.9954 c
754.0001 409.6067 745.5029 416.9954 728 416.9954 c
719.268 416.9954 709.3459 414.4816 702 410.3288 C
705.6667 398.5287 L
712.86 403.1615 719.3771 405.3287 726 405.3287 c
735.6137 405.3287 739.6666 402.0247 739.6666 396.3287 c
f
738.3334 245.6713 m
738.3334 232.1816 717.8334 230.7754 717.8334 211.0045 C
735 211.0045 L
735 230.2963 755.5 227.4629 755.5 249.0046 c
755.5 259.5881 746.9411 267.0046 729 267.0046 c
720.1181 267.0046 709.7292 264.6122 702 260.6712 C
706.3333 246.6713 L
713.7877 251.1399 720.1728 253.1713 726.5 253.1713 c
735.0557 253.1713 738.3334 250.4914 738.3334 245.6713 c
f
717 62 m
737 62 L
737 79.75 757 77.75 757 99 c
757 109.5557 748.3795 117 730 117 c
720.9683 117 710.1126 114.7292 702 111 C
707 94.8 L
714.7154 99.1044 720.9685 101 727 101 c
734.4977 101 737 98.9443 737 95 c
737 83 717 80 717 62 C
f
30.0834 866.9954 m
14.0061 866.9954 4.6667 859.1103 4.6667 848.4954 c
4.6667 839.4691 10.1354 832.9642 19.5833 831.1704 C
19.5833 830.9704 L
8.3854 829.2454 2 821.1399 2 810.1621 c
2 797.9069 12.8682 788.9954 30.0834 788.9954 C
30.0834 794.0621 L
16.5443 794.0621 7.9063 801.0235 7.9063 810.4621 c
7.9063 821.4974 15.7663 828.512 30.0834 828.512 C
30.0834 833.5121 L
17.5168 833.5121 10.5001 839.2826 10.5001 848.1954 c
10.5001 856.0239 17.7006 861.9287 30.0834 861.9287 c
42.466 861.9287 49.6666 856.0239 49.6666 848.1954 c
49.6666 839.2826 42.6499 833.5121 30.0834 833.5121 C
30.0834 828.512 L
44.4004 828.512 52.2604 821.4974 52.2604 810.4621 c
52.2604 801.0235 43.6223 794.0621 30.0834 794.0621 C
30.0834 788.9954 L
47.2985 788.9954 58.1667 797.9069 58.1667 810.1621 c
58.1667 821.1399 51.7813 829.2454 40.5834 830.9704 C
40.5834 831.1704 L
50.0313 832.9642 55.5001 839.4691 55.5001 848.4954 c
55.5001 859.1103 46.1605 866.9954 30.0834 866.9954 c
f
30.6667 716.9908 m
13.7624 716.9908 4.3333 708.9938 4.3333 697.9908 c
4.3333 688.9437 9.6458 682.4908 18.6666 680.6908 C
18.6666 680.4908 L
8.0833 678.8033 2 670.9991 2 660.3242 c
2 647.8468 12.7553 638.9908 30.6667 638.9908 C
30.6667 646.1243 L
18.5138 646.1243 10.8127 652.3118 10.8127 660.9242 c
10.8127 670.8047 17.7067 677.0241 30.6667 677.0241 C
30.6667 684.0242 L
19.3294 684.0242 13.0001 689.2503 13.0001 697.3908 c
13.0001 704.5757 19.4277 709.8574 30.6667 709.8574 c
41.9057 709.8574 48.3332 704.5757 48.3332 697.3908 c
48.3332 689.2503 42.0039 684.0242 30.6667 684.0242 C
30.6667 677.0241 L
43.6266 677.0241 50.5207 670.8047 50.5207 660.9242 c
50.5207 652.3118 42.8196 646.1243 30.6667 646.1243 C
30.6667 638.9908 L
48.578 638.9908 59.3334 647.8468 59.3334 660.3242 c
59.3334 670.9991 53.2501 678.8033 42.6668 680.4908 C
42.6668 680.6908 L
51.6876 682.4908 57.0001 688.9437 57.0001 697.9908 c
57.0001 708.9938 47.571 716.9908 30.6667 716.9908 c
f
31.25 567 m
13.5187 567 4 558.8911 4 547.5 c
4 538.432 9.1562 532.0312 17.75 530.225 C
17.75 530.025 L
7.7812 528.375 2 520.872 2 510.5 c
2 497.8004 12.6425 489 31.25 489 C
31.25 498.2 L
20.483 498.2 13.7187 503.6138 13.7187 511.4 c
13.7187 520.1257 19.647 525.55 31.25 525.55 C
31.25 534.55 L
21.1419 534.55 15.5 539.2318 15.5 546.6 c
15.5 553.1415 21.1546 557.8 31.25 557.8 c
41.3453 557.8 47 553.1415 47 546.6 c
47 539.2318 41.358 534.55 31.25 534.55 C
31.25 525.55 L
42.8528 525.55 48.7812 520.1257 48.7812 511.4 c
48.7812 503.6138 42.0169 498.2 31.25 498.2 C
31.25 489 L
49.8574 489 60.5 497.8004 60.5 510.5 c
60.5 520.872 54.7187 528.375 44.75 530.025 C
44.75 530.225 L
53.3437 532.0312 58.5 538.432 58.5 547.5 c
58.5 558.8911 48.9813 567 31.25 567 c
f
31.8334 416.9954 m
13.2749 416.9954 3.6667 408.7747 3.6667 396.9954 c
3.6667 387.9066 8.6667 381.5579 16.8333 379.7454 C
16.8333 379.5454 L
7.4792 377.9329 2 370.7313 2 360.6621 c
2 347.7404 12.5297 338.9954 31.8334 338.9954 C
31.8334 350.2622 L
22.4525 350.2622 16.6251 354.902 16.6251 361.8621 c
16.6251 369.433 21.5875 374.062 31.8334 374.062 C
31.8334 385.0621 L
22.9545 385.0621 18.0001 389.1996 18.0001 395.7954 c
18.0001 401.6934 22.8816 405.7287 31.8334 405.7287 c
40.785 405.7287 45.6666 401.6934 45.6666 395.7954 c
45.6666 389.1996 40.7121 385.0621 31.8334 385.0621 C
31.8334 374.062 L
42.079 374.062 47.0416 369.433 47.0416 361.8621 c
47.0416 354.902 41.2142 350.2622 31.8334 350.2622 C
31.8334 338.9954 L
51.137 338.9954 61.6667 347.7404 61.6667 360.6621 c
61.6667 370.7313 56.1875 377.9329 46.8334 379.5454 C
46.8334 379.7454 L
55 381.5579 60.0001 387.9066 60.0001 396.9954 c
60.0001 408.7747 50.3918 416.9954 31.8334 416.9954 c
f
32.4167 267.0046 m
13.0312 267.0046 3.3334 258.6719 3.3334 246.5046 c
3.3334 237.395 8.1771 231.0983 15.9167 229.2796 C
15.9167 229.0796 L
7.1771 227.5046 2 220.6042 2 210.8379 c
2 197.694 12.4169 189.0046 32.4167 189.0046 C
32.4167 202.3379 L
24.4217 202.3379 19.5312 206.204 19.5312 212.3379 c
19.5312 218.7541 23.5278 222.588 32.4167 222.588 C
32.4167 235.5879 L
24.767 235.5879 20.4999 239.1811 20.4999 245.0046 c
20.4999 250.2591 24.6085 253.6713 32.4167 253.6713 c
40.2247 253.6713 44.3334 250.2591 44.3334 245.0046 c
44.3334 239.1811 40.0662 235.5879 32.4167 235.5879 C
32.4167 222.588 L
41.3053 222.588 45.3021 218.7541 45.3021 212.3379 c
45.3021 206.204 40.4115 202.3379 32.4167 202.3379 C
32.4167 189.0046 L
52.4164 189.0046 62.8333 197.694 62.8333 210.8379 c
62.8333 220.6042 57.6562 227.5046 48.9166 229.0796 C
48.9166 229.2796 L
56.6562 231.0983 61.5 237.395 61.5 246.5046 c
61.5 258.6719 51.8021 267.0046 32.4167 267.0046 c
f
33 117 m
12.7874 117 3 108.5555 3 96 c
3 86.8696 7.6875 80.625 15 78.8 C
15 78.6 L
6.875 77.0625 2 70.4634 2 61 c
2 47.6339 12.3041 39 33 39 C
33 54.4 L
26.3912 54.4 22.4375 57.4923 22.4375 62.8 c
22.4375 68.0614 25.4683 71.1 33 71.1 C
33 86.1 L
26.5796 86.1 23 89.1489 23 94.2 c
23 98.811 26.3356 101.6 33 101.6 c
39.6643 101.6 43 98.811 43 94.2 c
43 89.1489 39.4203 86.1 33 86.1 C
33 71.1 L
40.5315 71.1 43.5625 68.0614 43.5625 62.8 c
43.5625 57.4923 39.6088 54.4 33 54.4 C
33 39 L
53.6959 39 64 47.6339 64 61 c
64 70.4634 59.125 77.0625 51 78.6 C
51 78.8 L
58.3125 80.625 63 86.8696 63 96 c
63 108.5555 53.2126 117 33 117 c
f
147.8935 825.1787 m
144.1445 805.9076 132.2618 795.2826 113.2812 794.1413 C
114.0769 788.9954 L
139.7545 790.7429 155.3334 807.7131 155.3334 842.6621 c
155.3334 856.9424 144.6715 866.9954 128.6667 866.9954 c
112.6619 866.9954 102 856.9424 102 842.6621 c
102 825.5606 113.4563 815.8287 128.6667 815.8287 C
128.6667 820.9955 L
116.65 820.9955 107.8334 828.8482 107.8334 842.6621 c
107.8334 854.1265 116.0361 861.9954 128.6667 861.9954 c
141.2972 861.9954 149.5 854.1265 149.5 842.6621 c
149.5 828.8482 141.5167 820.9955 128.6667 820.9955 C
128.6667 815.8287 L
136.6868 815.8287 143.6198 819.2225 147.7269 825.212 C
147.8935 825.1787 L
f
145.8871 673.3574 m
142.3412 656.6654 131.2868 647.3859 112.9624 646.2826 C
114.1539 638.9908 L
140.9005 640.7648 156.6667 657.6542 156.6667 692.3242 c
156.6667 706.806 145.9169 716.9908 129.3334 716.9908 c
112.7498 716.9908 102 706.806 102 692.3242 c
102 675.3332 113.3386 665.6575 129.3334 665.6575 C
129.3334 672.991 L
118.4869 672.991 110.6668 679.9499 110.6668 692.3242 c
110.6668 702.8591 117.9957 709.9907 129.3334 709.9907 c
140.671 709.9907 147.9999 702.8591 147.9999 692.3242 c
147.9999 679.9499 140.8465 672.991 129.3334 672.991 C
129.3334 665.6575 L
136.1064 665.6575 142.1333 668.4725 145.7537 673.4241 C
145.8871 673.3574 L
f
143.8808 521.55 m
140.5382 507.4368 130.3119 499.5028 112.6436 498.4375 C
114.2308 489 L
142.0464 490.8005 158 507.609 158 542 c
158 556.6833 147.1623 567 130 567 c
112.8377 567 102 556.6833 102 542 c
102 525.1195 113.221 515.5 130 515.5 C
130 525 L
120.3236 525 113.5 531.0652 113.5 542 c
113.5 551.6054 119.9552 558 130 558 c
140.0448 558 146.5 551.6054 146.5 542 c
146.5 531.0652 140.1764 525 130 525 C
130 515.5 L
135.526 515.5 140.6469 517.7362 143.7808 521.65 C
143.8808 521.55 L
f
141.8743 369.7287 m
138.735 358.1946 129.3369 351.6062 112.3248 350.5788 C
114.3077 338.9954 L
143.1925 340.8225 159.3334 357.55 159.3334 391.6621 c
159.3334 406.5469 148.4078 416.9954 130.6667 416.9954 c
112.9256 416.9954 102 406.5469 102 391.6621 c
102 374.8921 113.1033 365.3287 130.6667 365.3287 C
130.6667 376.9955 L
122.1605 376.9955 116.3334 382.1669 116.3334 391.6621 c
116.3334 400.338 121.9148 405.9954 130.6667 405.9954 c
139.4185 405.9954 145 400.338 145 391.6621 c
145 382.1669 139.5062 376.9955 130.6667 376.9955 C
130.6667 365.3287 L
134.9455 365.3287 139.1604 366.9862 141.8077 369.862 C
141.8743 369.7287 L
f
139.868 217.9213 m
136.9319 208.9661 128.362 203.723 112.0061 202.7337 C
114.3847 189.0046 L
144.3384 190.8582 160.6666 207.5048 160.6666 241.3379 c
160.6666 256.4243 149.6531 267.0046 131.3333 267.0046 c
113.0135 267.0046 102 256.4243 102 241.3379 c
102 224.6784 112.9857 215.1712 131.3333 215.1712 C
131.3333 229.0045 L
123.9972 229.0045 119.1666 233.2822 119.1666 241.3379 c
119.1666 249.0844 123.8743 254.0046 131.3333 254.0046 c
138.7923 254.0046 143.5001 249.0844 143.5001 241.3379 c
143.5001 233.2822 138.8361 229.0045 131.3333 229.0045 C
131.3333 215.1712 L
134.3651 215.1712 137.674 216.25 139.8347 218.088 C
139.868 217.9213 L
f
137.8616 66.1 m
135.1287 59.7239 127.387 55.8264 111.6873 54.875 C
114.4616 39 L
145.4844 40.8802 162 57.4459 162 91 c
162 106.2879 150.8986 117 132 117 c
113.1014 117 102 106.2879 102 91 c
102 74.451 112.868 65 132 65 C
132 81 L
125.8341 81 122 84.3839 122 91 c
122 97.8169 125.8339 102 132 102 c
138.1661 102 142 97.8169 142 91 c
142 84.3839 138.1659 81 132 81 C
132 65 L
133.7847 65 136.1875 65.5 137.8616 66.3 C
137.8616 66.1 L
f
557.6667 824.6621 m
557.6667 829.8288 L
502 829.8288 L
502 824.6621 L
557.6667 824.6621 L
f
559.3334 674.3242 m
559.3334 681.6576 L
502 681.6576 L
502 674.3242 L
559.3334 674.3242 L
f
561 524 m
561 533.5 L
502 533.5 L
502 524 L
561 524 L
f
562.6667 373.6621 m
562.6667 385.3288 L
502 385.3288 L
502 373.6621 L
562.6667 373.6621 L
f
564.3333 223.3379 m
564.3333 237.1712 L
502 237.1712 L
502 223.3379 L
564.3333 223.3379 L
f
566 73 m
566 89 L
502 89 L
502 73 L
566 73 L
f
557.6667 804.162 m
557.6667 809.3288 L
502 809.3288 L
502 804.162 L
557.6667 804.162 L
f
559.3334 652.3241 m
559.3334 659.6575 L
502 659.6575 L
502 652.3241 L
559.3334 652.3241 L
f
561 500.5 m
561 510 L
502 510 L
502 500.5 L
561 500.5 L
f
562.6667 348.662 m
562.6667 360.3288 L
502 360.3288 L
502 348.662 L
562.6667 348.662 L
f
564.3333 196.838 m
564.3333 210.6712 L
502 210.6712 L
502 196.838 L
564.3333 196.838 L
f
566 45 m
566 61 L
502 61 L
502 45 L
566 45 L
f
209.8334 836.4953 m
209.8334 843.9954 L
202 843.9954 L
202 836.4953 L
209.8334 836.4953 L
f
212.6668 683.9907 m
212.6668 693.9908 L
202 693.9908 L
202 683.9907 L
212.6668 683.9907 L
f
215.5 531.5 m
215.5 544 L
202 544 L
202 531.5 L
215.5 531.5 L
f
218.3334 378.9953 m
218.3334 393.9954 L
202 393.9954 L
202 378.9953 L
218.3334 378.9953 L
f
221.1666 226.5046 m
221.1666 244.0046 L
202 244.0046 L
202 226.5046 L
221.1666 226.5046 L
f
224 74 m
224 94 L
202 94 L
202 74 L
224 74 L
f
209.8334 789.9954 m
209.8334 797.4955 L
202 797.4955 L
202 789.9954 L
209.8334 789.9954 L
f
212.6668 639.9908 m
212.6668 649.991 L
202 649.991 L
202 639.9908 L
212.6668 639.9908 L
f
215.5 490 m
215.5 502.5 L
202 502.5 L
202 490 L
215.5 490 L
f
218.3334 339.9954 m
218.3334 354.9955 L
202 354.9955 L
202 339.9954 L
218.3334 339.9954 L
f
221.1666 190.0046 m
221.1666 207.5045 L
202 207.5045 L
202 190.0046 L
221.1666 190.0046 L
f
224 40 m
224 60 L
202 60 L
202 40 L
224 40 L
f
315.3334 836.4953 m
315.3334 843.9954 L
307.5 843.9954 L
307.5 836.4953 L
315.3334 836.4953 L
f
318.6669 683.9907 m
318.6669 693.9908 L
308 693.9908 L
308 683.9907 L
318.6669 683.9907 L
f
322 531.5 m
322 544 L
308.5 544 L
308.5 531.5 L
322 531.5 L
f
325.3334 378.9953 m
325.3334 393.9954 L
309 393.9954 L
309 378.9953 L
325.3334 378.9953 L
f
328.6666 226.5046 m
328.6666 244.0046 L
309.5 244.0046 L
309.5 226.5046 L
328.6666 226.5046 L
f
332 74 m
332 94 L
310 94 L
310 74 L
332 74 L
f
307.0001 777.4954 m
315.3334 797.4955 L
307.5 797.4955 L
302 777.4954 L
307.0001 777.4954 L
f
309.0001 626.9908 m
318.6669 649.991 L
308 649.991 L
302 626.9908 L
309.0001 626.9908 L
f
311 476.5 m
322 502.5 L
308.5 502.5 L
302 476.5 L
311 476.5 L
f
313.0001 325.9954 m
325.3334 354.9955 L
309 354.9955 L
302 325.9954 L
313.0001 325.9954 L
f
315 175.5046 m
328.6666 207.5045 L
309.5 207.5045 L
302 175.5046 L
315 175.5046 L
f
317 25 m
332 60 L
310 60 L
302 25 L
317 25 L
f
407.5001 817.0954 m
457 839.6954 L
457 845.3288 L
402 820.2205 L
402 813.7704 L
457 788.6621 L
457 794.2955 L
407.5001 816.8954 L
407.5001 817.0954 L
f
409.4001 667.0908 m
458.0001 687.7507 L
458.0001 695.6575 L
402 671.7709 L
402 662.2107 L
458.0001 638.3242 L
458.0001 646.231 L
409.4001 666.8908 L
409.4001 667.0908 L
f
411.3 517.1 m
459 535.82 L
459 546 L
402 523.335 L
402 510.665 L
459 488 L
459 498.18 L
411.3 516.9 L
411.3 517.1 L
f
413.2001 367.0954 m
460 383.8754 L
460 396.3288 L
402 374.8855 L
402 359.1054 L
460 337.6621 L
460 350.1155 L
413.2001 366.8954 L
413.2001 367.0954 L
f
415.0999 217.1046 m
461 231.9446 L
461 246.6712 L
402 226.4495 L
402 207.5596 L
461 187.3379 L
461 202.0645 L
415.0999 216.9046 L
415.0999 217.1046 L
f
402 56 m
462 37 L
462 54 L
417 66.9 L
417 67.1 L
462 80 L
462 97 L
402 78 L
402 56 L
f
651.5 816.8954 m
602 794.2955 L
602 788.6621 L
657 813.7704 L
657 820.2205 L
602 845.3288 L
602 839.6954 L
651.5 817.0954 L
651.5 816.8954 L
f
650.5999 666.8908 m
602 646.231 L
602 638.3242 L
658.0001 662.2107 L
658.0001 671.7709 L
602 695.6575 L
602 687.7507 L
650.5999 667.0908 L
650.5999 666.8908 L
f
649.7 516.9 m
602 498.18 L
602 488 L
659 510.665 L
659 523.335 L
602 546 L
602 535.82 L
649.7 517.1 L
649.7 516.9 L
f
648.8 366.8954 m
602 350.1155 L
602 337.6621 L
660 359.1054 L
660 374.8855 L
602 396.3288 L
602 383.8754 L
648.8 367.0954 L
648.8 366.8954 L
f
647.9 216.9046 m
602 202.0645 L
602 187.3379 L
661 207.5596 L
661 226.4495 L
602 246.6712 L
602 231.9446 L
647.9 217.1046 L
647.9 216.9046 L
f
662 78 m
602 97 L
602 80 L
647 67.1 L
647 66.9 L
602 54 L
602 37 L
662 56 L
662 78 L
f
727.0001 789.9954 m
727.0001 798.1621 L
721.1667 798.1621 L
721.1667 789.9954 L
727.0001 789.9954 L
f
729.0001 639.9908 m
729.0001 649.3242 L
720.3333 649.3242 L
720.3333 639.9908 L
729.0001 639.9908 L
f
731 490 m
731 500.5 L
719.5 500.5 L
719.5 490 L
731 490 L
f
733.0001 339.9954 m
733.0001 351.6621 L
718.6667 351.6621 L
718.6667 339.9954 L
733.0001 339.9954 L
f
735 190.0046 m
735 202.8379 L
717.8334 202.8379 L
717.8334 190.0046 L
735 190.0046 L
f
717 40 m
737 40 L
737 54 L
717 54 L
717 40 L
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
