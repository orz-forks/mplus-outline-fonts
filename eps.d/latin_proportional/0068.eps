%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (_0068.eps)
%%CreationDate: (1/20/05) (2:18 PM)
%%BoundingBox: 0 0 800 1050
%%HiResBoundingBox: 0 0 800 1050
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 394.5 530 394.5 530
%AI3_TileBox: -180.5 -228 971.5 1302
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 1188 1680
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -373.5 1058 -2 794 557 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%AI5_ViewPalette: 0 1 -2 4331 4334 0 1 5 whole view
%%PageOrigin:-180.5 -228
%%AI3_PaperRect:-19 1615 1171 -68
%%AI3_Margin:19 -85 -19 68
%AI7_GridSettings: 0.5 10 0.5 10 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 0 79 128 255 Lb
(\203\214\203C\203\204\201[1) Ln
0 A
u
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 900 m
100 1050 L
0 1050 L
0 900 L
100 900 L
n
200 900 m
200 1050 L
100 1050 L
100 900 L
200 900 L
n
300 900 m
300 1050 L
200 1050 L
200 900 L
300 900 L
n
400 900 m
400 1050 L
300 1050 L
300 900 L
400 900 L
n
500 900 m
500 1050 L
400 1050 L
400 900 L
500 900 L
n
600 900 m
600 1050 L
500 1050 L
500 900 L
600 900 L
n
700 900 m
700 1050 L
600 1050 L
600 900 L
700 900 L
n
800 900 m
800 1050 L
700 1050 L
700 900 L
800 900 L
n
100 750 m
100 900 L
0 900 L
0 750 L
100 750 L
n
200 750 m
200 900 L
100 900 L
100 750 L
200 750 L
n
300 750 m
300 900 L
200 900 L
200 750 L
300 750 L
n
400 750 m
400 900 L
300 900 L
300 750 L
400 750 L
n
500 750 m
500 900 L
400 900 L
400 750 L
500 750 L
n
600 750 m
600 900 L
500 900 L
500 750 L
600 750 L
n
700 750 m
700 900 L
600 900 L
600 750 L
700 750 L
n
800 750 m
800 900 L
700 900 L
700 750 L
800 750 L
n
100 600 m
100 750 L
0 750 L
0 600 L
100 600 L
n
200 600 m
200 750 L
100 750 L
100 600 L
200 600 L
n
300 600 m
300 750 L
200 750 L
200 600 L
300 600 L
n
400 600 m
400 750 L
300 750 L
300 600 L
400 600 L
n
500 600 m
500 750 L
400 750 L
400 600 L
500 600 L
n
600 600 m
600 750 L
500 750 L
500 600 L
600 600 L
n
700 600 m
700 750 L
600 750 L
600 600 L
700 600 L
n
800 600 m
800 750 L
700 750 L
700 600 L
800 600 L
n
100 450 m
100 600 L
0 600 L
0 450 L
100 450 L
n
200 450 m
200 600 L
100 600 L
100 450 L
200 450 L
n
300 450 m
300 600 L
200 600 L
200 450 L
300 450 L
n
400 450 m
400 600 L
300 600 L
300 450 L
400 450 L
n
500 450 m
500 600 L
400 600 L
400 450 L
500 450 L
n
600 450 m
600 600 L
500 600 L
500 450 L
600 450 L
n
700 450 m
700 600 L
600 600 L
600 450 L
700 450 L
n
800 450 m
800 600 L
700 600 L
700 450 L
800 450 L
n
100 300 m
100 450 L
0 450 L
0 300 L
100 300 L
n
200 300 m
200 450 L
100 450 L
100 300 L
200 300 L
n
300 300 m
300 450 L
200 450 L
200 300 L
300 300 L
n
400 300 m
400 450 L
300 450 L
300 300 L
400 300 L
n
500 300 m
500 450 L
400 450 L
400 300 L
500 300 L
n
600 300 m
600 450 L
500 450 L
500 300 L
600 300 L
n
700 300 m
700 450 L
600 450 L
600 300 L
700 300 L
n
800 300 m
800 450 L
700 450 L
700 300 L
800 300 L
n
100 150 m
100 300 L
0 300 L
0 150 L
100 150 L
n
200 150 m
200 300 L
100 300 L
100 150 L
200 150 L
n
300 150 m
300 300 L
200 300 L
200 150 L
300 150 L
n
400 150 m
400 300 L
300 300 L
300 150 L
400 150 L
n
500 150 m
500 300 L
400 300 L
400 150 L
500 150 L
n
600 150 m
600 300 L
500 300 L
500 150 L
600 150 L
n
700 150 m
700 300 L
600 300 L
600 150 L
700 150 L
n
800 150 m
800 300 L
700 300 L
700 150 L
800 150 L
n
100 0 m
100 150 L
0 150 L
0 0 L
100 0 L
n
200 0 m
200 150 L
100 150 L
100 0 L
200 0 L
n
300 0 m
300 150 L
200 150 L
200 0 L
300 0 L
n
400 0 m
400 150 L
300 150 L
300 0 L
400 0 L
n
500 0 m
500 150 L
400 150 L
400 0 L
500 0 L
n
600 0 m
600 150 L
500 150 L
500 0 L
600 0 L
n
700 0 m
700 150 L
600 150 L
600 0 L
700 0 L
n
800 0 m
800 150 L
700 150 L
700 0 L
800 0 L
n
U
0 O
0 g
1 D
728 992 m
742.0202 992 751 982.5871 751 967 c
751 951.4129 742.0202 942 728 942 C
728 939 L
743.7351 939 754 949.7431 754 967 c
754 984.2569 743.7351 995 728 995 c
712.2648 995 702 984.2569 702 967 c
702 949.7431 712.2648 939 728 939 C
728 942 L
713.9798 942 705 951.4129 705 967 c
705 982.5871 713.9798 992 728 992 c
f
202 919 m
205.5625 917.625 208.6818 917 213 917 c
225.005 917 230 922.828 230 940 c
230 994 L
227 994 L
227 940 l
227 923.0932 222.2853 920 213 920 c
209.382 920 206.1536 920.6056 202.8 921.9 C
202 919 L
f
105 994 m
102 994 L
102 940 L
105 940 L
105 994 L
f
308.8424 968 m
343.3459 994 L
338.3459 994 L
303.8424 968 L
341 940 L
346 940 L
308.8424 968 L
f
305 1016 m
302 1016 L
302 940 L
305 940 L
305 1016 L
f
405 1016 m
402 1016 L
402 940 L
405 940 L
405 1016 L
f
105 1016 m
102 1016 L
102 1009 L
105 1009 L
105 1016 L
f
230 1016 m
227 1016 L
227 1009 L
230 1009 L
230 1016 L
f
644 940 m
647 940 L
647 967 L
647 987.4301 640.3875 995 626 995 c
618.2674 995 609.3506 990.0417 605.1 983 C
605 983 L
605 994 L
602 994 L
602 940 L
605 940 L
605 972 L
605 984.125 617 992 626 992 c
638.7791 992 644 985.8179 644 967 c
644 940 L
f
44 940 m
47 940 L
47 967 L
47 987.4301 40.3875 995 26 995 c
18.2674 995 9.3506 990.0417 5.1 983 C
5 983 L
5 1016 L
2 1016 L
2 940 L
5 940 L
5 972 L
5 984.125 17 992 26 992 c
38.7791 992 44 985.8179 44 967 c
44 940 L
f
537.8 981.8 m
535.6519 990.9631 530.4865 995 521 995 c
514.7009 995 508.6211 990.8541 505.2 984 C
505 984 L
505 994 L
502 994 L
502 940 L
505 940 L
505 971 L
505 983.6999 512.3943 992 521 992 c
531.5035 992 536 986.5954 536 971 C
536 940 L
539 940 L
539 971 L
539 983.6999 546.3943 992 555 992 c
565.5035 992 570 986.5954 570 971 C
570 940 L
573 940 L
573 971 L
573 987.9943 567.4119 995 555 995 c
547.6893 995 540.8029 989.8958 538 981.8 C
537.8 981.8 L
f
107.5001 843.9954 m
102 843.9954 L
102 789.9954 L
107.5001 789.9954 L
107.5001 843.9954 L
f
110.0001 693.9908 m
102 693.9908 L
102 639.9908 L
110.0001 639.9908 L
110.0001 693.9908 L
f
112.5 544 m
102 544 L
102 490 L
112.5 490 L
112.5 544 L
f
115.0001 393.9954 m
102 393.9954 L
102 339.9954 L
115.0001 339.9954 L
115.0001 393.9954 L
f
117.4999 244.0046 m
102 244.0046 L
102 190.0046 L
117.4999 190.0046 L
117.4999 244.0046 L
f
120 94 m
102 94 L
102 40 L
120 40 L
120 94 L
f
313.6021 817.9954 m
345.6793 843.9954 L
338.1792 843.9954 L
306.0091 817.9954 L
340.3333 789.9954 L
348.0001 789.9954 L
313.6021 817.9954 L
f
318.3619 667.9908 m
348.0127 693.9908 L
338.0125 693.9908 L
308.1759 667.9908 L
339.6666 639.9908 L
350.0001 639.9908 L
318.3619 667.9908 L
f
323.1212 518 m
350.3459 544 L
337.8459 544 L
310.3424 518 L
339 490 L
352 490 L
323.1212 518 L
f
327.8809 367.9954 m
352.6793 393.9954 L
337.6792 393.9954 L
312.5091 367.9954 L
338.3333 339.9954 L
354.0001 339.9954 L
327.8809 367.9954 L
f
332.6402 218.0046 m
355.0125 244.0046 L
337.5126 244.0046 L
314.6757 218.0046 L
337.6667 190.0046 L
356 190.0046 L
332.6402 218.0046 L
f
337.4 68 m
357.3459 94 L
337.3459 94 L
316.8424 68 L
337 40 L
358 40 L
337.4 68 L
f
307.5001 865.9954 m
302 865.9954 L
302 789.9954 L
307.5001 789.9954 L
307.5001 865.9954 L
f
310.0001 715.9908 m
302 715.9908 L
302 639.9908 L
310.0001 639.9908 L
310.0001 715.9908 L
f
312.5 566 m
302 566 L
302 490 L
312.5 490 L
312.5 566 L
f
315.0001 415.9954 m
302 415.9954 L
302 339.9954 L
315.0001 339.9954 L
315.0001 415.9954 L
f
317.4999 266.0046 m
302 266.0046 L
302 190.0046 L
317.4999 190.0046 L
317.4999 266.0046 L
f
320 116 m
302 116 L
302 40 L
320 40 L
320 116 L
f
407.5001 865.9954 m
402 865.9954 L
402 789.9954 L
407.5001 789.9954 L
407.5001 865.9954 L
f
410.0001 715.9908 m
402 715.9908 L
402 639.9908 L
410.0001 639.9908 L
410.0001 715.9908 L
f
412.5 566 m
402 566 L
402 490 L
412.5 490 L
412.5 566 L
f
415.0001 415.9954 m
402 415.9954 L
402 339.9954 L
415.0001 339.9954 L
415.0001 415.9954 L
f
417.4999 266.0046 m
402 266.0046 L
402 190.0046 L
417.4999 190.0046 L
417.4999 266.0046 L
f
420 116 m
402 116 L
402 40 L
420 40 L
420 116 L
f
107.5001 865.9954 m
102 865.9954 L
102 857.8287 L
107.5001 857.8287 L
107.5001 865.9954 L
f
110.0001 715.9908 m
102 715.9908 L
102 706.6574 L
110.0001 706.6574 L
110.0001 715.9908 L
f
112.5 566 m
102 566 L
102 555.5 L
112.5 555.5 L
112.5 566 L
f
115.0001 415.9954 m
102 415.9954 L
102 404.3287 L
115.0001 404.3287 L
115.0001 415.9954 L
f
117.4999 266.0046 m
102 266.0046 L
102 253.1713 L
117.4999 253.1713 L
117.4999 266.0046 L
f
120 116 m
102 116 L
102 102 L
120 102 L
120 116 L
f
232.1667 865.9954 m
226.6667 865.9954 L
226.6667 857.8287 L
232.1667 857.8287 L
232.1667 865.9954 L
f
234.3335 715.9908 m
226.3333 715.9908 L
226.3333 706.6574 L
234.3335 706.6574 L
234.3335 715.9908 L
f
236.5 566 m
226 566 L
226 555.5 L
236.5 555.5 L
236.5 566 L
f
238.6667 415.9954 m
225.6667 415.9954 L
225.6667 404.3287 L
238.6667 404.3287 L
238.6667 415.9954 L
f
240.8333 266.0046 m
225.3334 266.0046 L
225.3334 253.1713 L
240.8333 253.1713 L
240.8333 266.0046 L
f
243 116 m
225 116 L
225 102 L
243 102 L
243 116 L
f
48.3334 816.9954 m
48.3334 837.1144 41.531 844.9954 27.4698 844.9954 c
20.0708 844.9954 11.7922 840.4989 7.6167 833.9954 C
7.5001 833.9954 L
7.5001 865.9954 L
2 865.9954 L
2 789.9954 L
7.5001 789.9954 L
7.5001 821.1621 L
7.5001 832.5257 18.1004 839.8287 26.5447 839.8287 c
38.0428 839.8287 42.8333 834.0757 42.8333 816.9954 C
42.8333 789.9954 L
48.3334 789.9954 L
48.3334 816.9954 L
f
49.6667 666.9908 m
49.6667 686.7987 42.6746 694.9908 28.9395 694.9908 c
21.8741 694.9908 14.2339 690.9562 10.1335 684.9909 C
10.0001 684.9909 L
10.0001 715.9908 L
2 715.9908 L
2 639.9908 L
10.0001 639.9908 L
10.0001 670.3241 L
10.0001 680.9264 19.2008 687.6575 27.0895 687.6575 c
37.3065 687.6575 41.6666 682.3335 41.6666 666.9908 C
41.6666 639.9908 L
49.6667 639.9908 L
49.6667 666.9908 L
f
51 517 m
51 536.4968 43.818 545 30.4091 545 c
23.6773 545 16.6753 541.4271 12.65 536 C
12.5 536 L
12.5 566 L
2 566 L
2 490 L
12.5 490 L
12.5 519.5 L
12.5 529.341 20.3011 535.5001 27.6342 535.5001 c
36.5702 535.5001 40.5 530.6052 40.5 517 C
40.5 490 L
51 490 L
51 517 L
f
52.3334 366.9954 m
52.3334 386.1811 44.9615 394.9954 31.8788 394.9954 c
25.4806 394.9954 19.1169 391.8843 15.1667 386.9954 C
15.0001 386.9954 L
15.0001 415.9954 L
2 415.9954 L
2 339.9954 L
15.0001 339.9954 L
15.0001 368.6621 L
15.0001 377.7417 21.4014 383.3288 28.1789 383.3288 c
35.8339 383.3288 39.3333 378.863 39.3333 366.9954 C
39.3333 339.9954 L
52.3334 339.9954 L
52.3334 366.9954 L
f
53.6666 217.0046 m
53.6666 235.8792 46.1049 245.0046 33.3484 245.0046 c
27.2838 245.0046 21.5584 242.3553 17.6833 238.0045 C
17.4999 238.0045 L
17.4999 266.0046 L
2 266.0046 L
2 190.0046 L
17.4999 190.0046 L
17.4999 217.8379 L
17.4999 226.1563 22.5017 231.1715 28.7236 231.1715 c
35.0977 231.1715 38.1667 227.1347 38.1667 217.0046 C
38.1667 190.0046 L
53.6666 190.0046 L
53.6666 217.0046 L
f
55 67 m
55 85.5635 47.2485 95 34.8182 95 c
29.0872 95 24 92.8125 20.2 89 C
20 89 L
20 116 L
2 116 L
2 40 L
20 40 L
20 67 L
20 74.557 23.6021 79.0002 29.2683 79.0002 c
34.3614 79.0002 37 75.3925 37 67 C
37 40 L
55 40 L
55 67 L
f
648.3334 816.9954 m
648.3334 837.1144 641.531 844.9954 627.4698 844.9954 c
620.0708 844.9954 611.5943 840.3948 607.4501 833.8288 C
607.3334 833.8288 L
607.3334 843.9954 L
602 843.9954 L
602 789.9954 L
607.5001 789.9954 L
607.5001 821.1621 L
607.5001 832.5257 618.1004 839.8287 626.5447 839.8287 c
638.0428 839.8287 642.8333 834.0757 642.8333 816.9954 C
642.8333 789.9954 L
648.3334 789.9954 L
648.3334 816.9954 L
f
649.6667 666.9908 m
649.6667 686.7987 642.6746 694.9908 628.9395 694.9908 c
621.8741 694.9908 613.838 690.7478 609.8001 684.6576 C
609.6668 684.6576 L
609.6668 693.9908 L
602 693.9908 L
602 639.9908 L
610.0001 639.9908 L
610.0001 670.3241 L
610.0001 680.9264 619.2008 687.6575 627.0895 687.6575 c
637.3065 687.6575 641.6666 682.3335 641.6666 666.9908 C
641.6666 639.9908 L
649.6667 639.9908 L
649.6667 666.9908 L
f
651 517 m
651 536.4968 643.818 545 630.4091 545 c
623.6773 545 616.0815 541.1146 612.15 535.5 C
612 535.5 L
612 544 L
602 544 L
602 490 L
612.5 490 L
612.5 519.5 L
612.5 529.341 620.3011 535.5001 627.6342 535.5001 c
636.5702 535.5001 640.5 530.6052 640.5 517 C
640.5 490 L
651 490 L
651 517 L
f
652.3334 366.9954 m
652.3334 386.1811 644.9615 394.9954 631.8788 394.9954 c
625.4806 394.9954 618.3253 391.4677 614.5001 386.3288 C
614.3334 386.3288 L
614.3334 393.9954 L
602 393.9954 L
602 339.9954 L
615.0001 339.9954 L
615.0001 368.6621 L
615.0001 377.7417 621.4014 383.3288 628.1789 383.3288 c
635.8339 383.3288 639.3333 378.863 639.3333 366.9954 C
639.3333 339.9954 L
652.3334 339.9954 L
652.3334 366.9954 L
f
653.6666 217.0046 m
653.6666 235.8792 646.1049 245.0046 633.3484 245.0046 c
627.2838 245.0046 620.5688 241.8344 616.8499 237.1712 C
616.6666 237.1712 L
616.6666 244.0046 L
602 244.0046 L
602 190.0046 L
617.4999 190.0046 L
617.4999 217.8379 L
617.4999 226.1563 622.5017 231.1715 628.7236 231.1715 c
635.0977 231.1715 638.1667 227.1347 638.1667 217.0046 C
638.1667 190.0046 L
653.6666 190.0046 L
653.6666 217.0046 L
f
655 67 m
655 85.5635 647.2485 95 634.8182 95 c
629.0872 95 622.8125 92.1875 619.2 88 C
619 88 L
619 94 L
602 94 L
602 40 L
620 40 L
620 67 L
620 74.557 623.6021 79.0002 629.2683 79.0002 c
634.3614 79.0002 637 75.3925 637 67 C
637 40 L
655 40 L
655 67 L
f
539.3167 832.6621 m
537.0175 841.2041 531.946 844.9954 522.9698 844.9954 c
516.7653 844.9954 510.8718 841.103 507.5334 834.6621 C
507.3334 834.6621 L
507.3334 843.9954 L
502 843.9954 L
502 789.9954 L
507.5001 789.9954 L
507.5001 820.3287 L
507.5001 832.3844 514.0493 839.8287 522.0447 839.8287 c
531.4557 839.8287 535.5 834.8569 535.5 820.3287 C
535.5 789.9954 L
541.0001 789.9954 L
541.0001 820.3287 L
541.0001 832.3844 547.5493 839.8287 555.5447 839.8287 c
564.9557 839.8287 569 834.8569 569 820.3287 C
569 789.9954 L
574.5001 789.9954 L
574.5001 820.3287 L
574.5001 837.7235 568.7828 844.9954 556.4698 844.9954 c
549.2321 844.9954 542.7705 840.3971 539.5167 832.6621 C
539.3167 832.6621 L
f
540.8334 683.5242 m
538.3832 691.4452 533.4055 694.9908 524.9395 694.9908 c
518.8298 694.9908 513.1225 691.3519 509.8668 685.3242 C
509.6668 685.3242 L
509.6668 693.9908 L
502 693.9908 L
502 639.9908 L
510.0001 639.9908 L
510.0001 669.6575 L
510.0001 681.069 515.7044 687.6575 523.0895 687.6575 c
531.4079 687.6575 535 683.1185 535 669.6575 C
535 639.9908 L
543.0001 639.9908 L
543.0001 669.6575 L
543.0001 681.069 548.7044 687.6575 556.0895 687.6575 c
564.4079 687.6575 567.9999 683.1185 567.9999 669.6575 C
567.9999 639.9908 L
576.0001 639.9908 L
576.0001 669.6575 L
576.0001 687.4527 570.1537 694.9908 557.9395 694.9908 c
550.775 694.9908 544.7382 690.8984 541.0334 683.5242 C
540.8334 683.5242 L
f
542.35 534.4 m
539.7487 541.7 534.8649 545 526.9091 545 c
520.894 545 515.373 541.6145 512.2 536 C
512 536 L
512 544 L
502 544 L
502 490 L
512.5 490 L
512.5 519 L
512.5 529.7673 517.3593 535.5001 524.1342 535.5001 c
531.3601 535.5001 534.5 531.3939 534.5 519 C
534.5 490 L
545 490 L
545 519 L
545 529.7673 549.8593 535.5001 556.6342 535.5001 c
563.8601 535.5001 567 531.3939 567 519 C
567 490 L
577.5 490 L
577.5 519 L
577.5 537.1956 571.5245 545 559.4091 545 c
552.3177 545 546.7056 541.4134 542.55 534.4 C
542.35 534.4 L
f
543.8667 385.2621 m
541.1143 391.9411 536.3244 394.9954 528.8789 394.9954 c
522.9585 394.9954 517.6238 391.8635 514.5334 386.6621 C
514.3334 386.6621 L
514.3334 393.9954 L
502 393.9954 L
502 339.9954 L
515.0001 339.9954 L
515.0001 368.3287 L
515.0001 378.4519 519.0143 383.3288 525.1789 383.3288 c
531.3124 383.3288 534 379.6555 534 368.3287 C
534 339.9954 L
547.0001 339.9954 L
547.0001 368.3287 L
547.0001 378.4519 551.0143 383.3288 557.1789 383.3288 c
563.3123 383.3288 566 379.6555 566 368.3287 C
566 339.9954 L
579.0001 339.9954 L
579.0001 368.3287 L
579.0001 386.9248 572.8955 394.9954 560.8788 394.9954 c
553.8605 394.9954 548.6733 391.9148 544.0667 385.2621 C
543.8667 385.2621 L
f
545.3833 236.1379 m
542.4798 242.1958 537.7838 245.0046 530.8484 245.0046 c
525.0227 245.0046 519.8743 242.1261 516.8666 237.3379 C
516.6666 237.3379 L
516.6666 244.0046 L
502 244.0046 L
502 190.0046 L
517.4999 190.0046 L
517.4999 217.6713 L
517.4999 227.1503 520.6692 231.1715 526.2236 231.1715 c
531.2646 231.1715 533.5 227.9309 533.5 217.6713 C
533.5 190.0046 L
549 190.0046 L
549 217.6713 L
549 227.1503 552.1692 231.1715 557.7236 231.1715 c
562.7646 231.1715 565 227.9309 565 217.6713 C
565 190.0046 L
580.5 190.0046 L
580.5 217.6713 L
580.5 236.6677 574.2663 245.0046 562.3484 245.0046 c
555.4032 245.0046 550.6407 242.4298 545.5833 236.1379 C
545.3833 236.1379 L
f
546.9 87 m
543.8455 92.4369 539.2433 95 532.8182 95 c
527.0872 95 522.125 92.375 519.2 88 C
519 88 L
519 94 L
502 94 L
502 40 L
520 40 L
520 67 L
520 75.8348 522.3243 79.0002 527.2683 79.0002 c
531.2168 79.0002 533 76.1925 533 67 C
533 40 L
551 40 L
551 67 L
551 75.8348 553.3243 79.0002 558.2683 79.0002 c
562.2168 79.0002 564 76.1925 564 67 C
564 40 L
582 40 L
582 67 L
582 86.3969 575.6372 95 563.8182 95 c
556.9461 95 552.6084 92.9311 547.1 87 C
546.9 87 L
f
232.1667 843.9954 m
226.6667 843.9954 L
226.6667 789.9954 l
226.6667 774.8128 222.3654 771.8288 213.6667 771.8288 c
209.871 771.8288 206.4509 772.4689 202.95 773.8121 C
202 768.9954 L
205.7708 767.6308 209.2105 766.9954 213.8334 766.9954 c
226.565 766.9954 232.1667 773.1322 232.1667 789.9954 c
232.1667 843.9954 L
f
234.3335 693.9908 m
226.3333 693.9908 L
226.3333 639.9908 l
226.3333 626.5325 222.4454 623.6576 214.3334 623.6576 c
210.36 623.6576 206.7483 624.3322 203.1 625.7243 C
202 618.9908 L
205.9792 617.6367 209.7392 616.9908 214.6667 616.9908 c
228.1251 616.9908 234.3335 623.4365 234.3335 639.9908 c
234.3335 693.9908 L
f
236.5 544 m
226 544 L
226 490 l
226 478.2657 222.5255 475.5 215 475.5 c
210.849 475.5 207.0455 476.209 203.25 477.65 C
202 469 L
206.1875 467.6562 210.2679 467 215.5 467 c
229.6849 467 236.5 473.7544 236.5 490 c
236.5 544 L
f
238.6667 393.9954 m
225.6667 393.9954 L
225.6667 339.9954 l
225.6667 329.9854 222.6056 327.3288 215.6667 327.3288 c
211.3381 327.3288 207.3429 328.0723 203.4 329.5621 C
202 318.9954 L
206.3958 317.6621 210.7966 316.9954 216.3334 316.9954 c
231.245 316.9954 238.6667 324.0586 238.6667 339.9954 c
238.6667 393.9954 L
f
240.8333 244.0046 m
225.3334 244.0046 L
225.3334 190.0046 l
225.3334 181.7186 222.6856 179.1712 216.3333 179.1712 c
211.8271 179.1712 207.6402 179.9492 203.55 181.4879 C
202 169.0046 L
206.6042 167.6817 211.3253 167.0046 217.1667 167.0046 c
232.8049 167.0046 240.8333 174.3766 240.8333 190.0046 c
240.8333 244.0046 L
f
243 94 m
225 94 L
225 40 l
225 33.4383 222.7657 31 217 31 c
212.3161 31 207.9375 31.8125 203.7 33.4 C
202 19 L
206.8125 17.6875 211.854 17 218 17 c
234.3649 17 243 24.6808 243 40 c
243 94 L
f
749.8333 816.9954 m
749.8333 802.492 741.543 793.8288 728.6667 793.8288 C
728.6667 788.9954 L
744.7998 788.9954 755.3334 799.7385 755.3334 816.9954 c
755.3334 834.1967 744.8554 844.9954 728.6667 844.9954 c
712.4779 844.9954 702 834.1967 702 816.9954 c
702 799.7385 712.5334 788.9954 728.6667 788.9954 C
728.6667 793.8288 L
715.7903 793.8288 707.5001 802.492 707.5001 816.9954 c
707.5001 831.4432 715.7348 840.162 728.6667 840.162 c
741.5986 840.162 749.8333 831.4432 749.8333 816.9954 c
f
748.6666 666.9908 m
748.6666 653.5712 741.0658 645.6576 729.3334 645.6576 C
729.3334 638.9908 L
745.8645 638.9908 756.6667 649.734 756.6667 666.9908 c
756.6667 684.1366 745.9756 694.9908 729.3334 694.9908 c
712.691 694.9908 702 684.1366 702 666.9908 c
702 649.734 712.8021 638.9908 729.3334 638.9908 C
729.3334 645.6576 L
717.6009 645.6576 710.0001 653.5712 710.0001 666.9908 c
710.0001 680.2994 717.4898 688.3241 729.3334 688.3241 c
741.1769 688.3241 748.6666 680.2994 748.6666 666.9908 c
f
747.5 517 m
747.5 504.664 740.5887 497.5 730 497.5 C
730 489 L
746.9292 489 758 499.7432 758 517 c
758 534.0901 747.0958 545 730 545 c
712.9041 545 702 534.0901 702 517 c
702 499.7432 713.0708 489 730 489 C
730 497.5 L
719.4113 497.5 712.5 504.664 712.5 517 c
712.5 529.1694 719.2446 536.5 730 536.5 c
740.7554 536.5 747.5 529.1694 747.5 517 c
f
746.3333 366.9954 m
746.3333 355.7432 740.1115 349.3288 730.6667 349.3288 C
730.6667 338.9954 L
747.9939 338.9954 759.3334 349.7387 759.3334 366.9954 c
759.3334 384.03 748.2161 394.9954 730.6667 394.9954 c
713.1173 394.9954 702 384.03 702 366.9954 c
702 349.7387 713.3394 338.9954 730.6667 338.9954 C
730.6667 349.3288 L
721.2218 349.3288 715.0001 355.7432 715.0001 366.9954 c
715.0001 378.0256 720.9996 384.662 730.6667 384.662 c
740.3337 384.662 746.3333 378.0256 746.3333 366.9954 c
f
745.1667 217.0046 m
745.1667 206.8359 739.6344 201.1712 731.3333 201.1712 C
731.3333 189.0046 L
749.0586 189.0046 760.6666 199.7478 760.6666 217.0046 c
760.6666 233.9836 749.3362 245.0046 731.3333 245.0046 c
713.3304 245.0046 702 233.9836 702 217.0046 c
702 199.7478 713.608 189.0046 731.3333 189.0046 C
731.3333 201.1712 L
723.0322 201.1712 717.4999 206.8359 717.4999 217.0046 c
717.4999 226.8955 722.7545 232.838 731.3333 232.838 c
739.9121 232.838 745.1667 226.8955 745.1667 217.0046 c
f
744 67 m
744 57.9151 739.1572 53 732 53 C
732 39 L
750.1233 39 762 49.7433 762 67 c
762 83.9234 750.4565 95 732 95 c
713.5435 95 702 83.9234 702 67 c
702 49.7433 713.8767 39 732 39 C
732 53 L
724.8428 53 720 57.9151 720 67 c
720 75.7517 724.5095 81 732 81 c
739.4905 81 744 75.7517 744 67 c
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
