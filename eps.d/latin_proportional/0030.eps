%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (0030.eps)
%%CreationDate: (1/20/05) (3:48 PM)
%%BoundingBox: 0 0 800 1050
%%HiResBoundingBox: 0 0 800 1050
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 394.5 530 394.5 530
%AI3_TileBox: -180.5 -228 971.5 1302
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 1188 1680
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -373.5 1058 -2 794 557 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%AI5_ViewPalette: 0 1 -2 4331 4334 0 1 5 whole view
%%PageOrigin:-180.5 -228
%%AI3_PaperRect:-19 1615 1171 -68
%%AI3_Margin:19 -85 -19 68
%AI7_GridSettings: 0.5 10 0.5 10 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 0 79 128 255 Lb
(\203\214\203C\203\204\201[1) Ln
0 A
u
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 900 m
100 1050 L
0 1050 L
0 900 L
100 900 L
n
200 900 m
200 1050 L
100 1050 L
100 900 L
200 900 L
n
300 900 m
300 1050 L
200 1050 L
200 900 L
300 900 L
n
400 900 m
400 1050 L
300 1050 L
300 900 L
400 900 L
n
500 900 m
500 1050 L
400 1050 L
400 900 L
500 900 L
n
600 900 m
600 1050 L
500 1050 L
500 900 L
600 900 L
n
700 900 m
700 1050 L
600 1050 L
600 900 L
700 900 L
n
800 900 m
800 1050 L
700 1050 L
700 900 L
800 900 L
n
100 750 m
100 900 L
0 900 L
0 750 L
100 750 L
n
200 750 m
200 900 L
100 900 L
100 750 L
200 750 L
n
300 750 m
300 900 L
200 900 L
200 750 L
300 750 L
n
400 750 m
400 900 L
300 900 L
300 750 L
400 750 L
n
500 750 m
500 900 L
400 900 L
400 750 L
500 750 L
n
600 750 m
600 900 L
500 900 L
500 750 L
600 750 L
n
700 750 m
700 900 L
600 900 L
600 750 L
700 750 L
n
800 750 m
800 900 L
700 900 L
700 750 L
800 750 L
n
100 600 m
100 750 L
0 750 L
0 600 L
100 600 L
n
200 600 m
200 750 L
100 750 L
100 600 L
200 600 L
n
300 600 m
300 750 L
200 750 L
200 600 L
300 600 L
n
400 600 m
400 750 L
300 750 L
300 600 L
400 600 L
n
500 600 m
500 750 L
400 750 L
400 600 L
500 600 L
n
600 600 m
600 750 L
500 750 L
500 600 L
600 600 L
n
700 600 m
700 750 L
600 750 L
600 600 L
700 600 L
n
800 600 m
800 750 L
700 750 L
700 600 L
800 600 L
n
100 450 m
100 600 L
0 600 L
0 450 L
100 450 L
n
200 450 m
200 600 L
100 600 L
100 450 L
200 450 L
n
300 450 m
300 600 L
200 600 L
200 450 L
300 450 L
n
400 450 m
400 600 L
300 600 L
300 450 L
400 450 L
n
500 450 m
500 600 L
400 600 L
400 450 L
500 450 L
n
600 450 m
600 600 L
500 600 L
500 450 L
600 450 L
n
700 450 m
700 600 L
600 600 L
600 450 L
700 450 L
n
800 450 m
800 600 L
700 600 L
700 450 L
800 450 L
n
100 300 m
100 450 L
0 450 L
0 300 L
100 300 L
n
200 300 m
200 450 L
100 450 L
100 300 L
200 300 L
n
300 300 m
300 450 L
200 450 L
200 300 L
300 300 L
n
400 300 m
400 450 L
300 450 L
300 300 L
400 300 L
n
500 300 m
500 450 L
400 450 L
400 300 L
500 300 L
n
600 300 m
600 450 L
500 450 L
500 300 L
600 300 L
n
700 300 m
700 450 L
600 450 L
600 300 L
700 300 L
n
800 300 m
800 450 L
700 450 L
700 300 L
800 300 L
n
100 150 m
100 300 L
0 300 L
0 150 L
100 150 L
n
200 150 m
200 300 L
100 300 L
100 150 L
200 150 L
n
300 150 m
300 300 L
200 300 L
200 150 L
300 150 L
n
400 150 m
400 300 L
300 300 L
300 150 L
400 150 L
n
500 150 m
500 300 L
400 300 L
400 150 L
500 150 L
n
600 150 m
600 300 L
500 300 L
500 150 L
600 150 L
n
700 150 m
700 300 L
600 300 L
600 150 L
700 150 L
n
800 150 m
800 300 L
700 300 L
700 150 L
800 150 L
n
100 0 m
100 150 L
0 150 L
0 0 L
100 0 L
n
200 0 m
200 150 L
100 150 L
100 0 L
200 0 L
n
300 0 m
300 150 L
200 150 L
200 0 L
300 0 L
n
400 0 m
400 150 L
300 150 L
300 0 L
400 0 L
n
500 0 m
500 150 L
400 150 L
400 0 L
500 0 L
n
600 0 m
600 150 L
500 150 L
500 0 L
600 0 L
n
700 0 m
700 150 L
600 150 L
600 0 L
700 0 L
n
800 0 m
800 150 L
700 150 L
700 0 L
800 0 L
n
U
0 O
0 g
1 D
123 1011.8 m
123 940 L
126 940 L
126 1016 L
123 1016 L
102 995 L
103.9081 992.6655 L
122.8 1011.8 L
123 1011.8 L
f
204.5 1004.2 m
210.3353 1010.2947 218.4308 1014 226 1014 c
238.8769 1014 246 1007.2726 246 996 c
246 985.2769 238.9999 974.848 202 943 C
202 940 L
250 940 L
250 943 L
206.5 943 L
206.5 943.2 L
241.7573 973.7625 249 984.1436 249 996 c
249 1008.9222 240.5549 1017 226 1017 c
217.7015 1017 208.625 1012.875 203 1007 C
204.5 1004.2 L
f
53 978 m
53 952.9425 44.4827 942 29 942 C
29 939 L
46.1969 939 56 950.9284 56 978 c
56 1005.0716 46.1969 1017 29 1017 c
11.8031 1017 2 1005.0716 2 978 c
2 950.9284 11.8031 939 29 939 C
29 942 L
13.5173 942 5 952.9425 5 978 c
5 1003.0574 13.5173 1014 29 1014 c
44.4827 1014 53 1003.0574 53 978 c
f
406 962.2 m
443.8 1010.9 L
444 1010.9 L
444 940 L
447 940 L
447 1016 L
444 1016 L
402 962 L
402 959 L
460 959 L
460 962 L
406 962 L
406 962.2 L
f
605.8 979 m
609.5351 1000.4053 621.732 1012.8343 638.4 1014 C
638 1017 L
616.8912 1015.5238 602 997.1504 602 966 c
602 949.066 612.4076 939 628 939 C
628 942 L
613.9798 942 605 951.0298 605 966 c
605 978.1979 614.2912 987 628 987 c
641.9235 987 651 978.394 651 966 c
651 950.7465 642.1869 942 628 942 C
628 939 L
643.426 939 654 948.788 654 966 c
654 980.0788 643.426 990 628 990 c
618.097 990 610.5065 986.0624 606 979 C
605.8 979 L
f
747.4905 1012.8 m
735.202 993.2532 724.3536 969.7575 714.8 940 C
718 940 L
727.25 968.8125 737.0625 990.4375 751 1013 C
751 1016 L
702 1016 L
702 1013 L
747.4905 1013 L
747.4905 1012.8 L
f
502.8 946 m
502 943 L
508.375 940.3125 514.957 939 522 939 c
539.8877 939 550 947.927 550 964 c
550 977.5094 540.7885 986 524 986 c
518.8813 986 513.166 984.9731 508.4 983.2 C
508.2 983.2 L
509.8379 1013 L
546 1013 L
546 1016 L
507 1016 L
505 980 L
508 980 L
512.8501 982.0209 518.3453 983 524 983 c
538.6834 983 547 975.4747 547 964 c
547 949.8168 538.5715 942 522 942 c
514.8778 942 509.5991 943.1337 502.8 946 C
f
320.6609 986 m
320.6609 986.2 L
349 1013 L
349 1016 L
304 1016 L
304 1013 L
344.4276 1013 L
344.4276 1012.8 L
316 986 L
316 983 L
324 983 L
338.6834 983 347 975.4747 347 964 c
347 949.8168 338.5715 942 322 942 c
314.8778 942 309.5991 943.1337 302.8 946 C
302 943 L
308.375 940.3125 314.957 939 322 939 c
339.8877 939 350 947.927 350 964 c
350 977.5094 340.7885 986 324 986 C
320.6609 986 L
f
123 858.6286 m
123 789.9954 L
128.8334 789.9954 L
128.8334 865.9954 L
123 865.9954 L
102 844.9954 L
104.5748 840.1608 L
122.8 858.6286 L
123 858.6286 L
f
123 705.4573 m
123 639.9908 L
131.6668 639.9908 L
131.6668 715.9908 L
123 715.9908 L
102 694.9908 L
105.2415 687.6562 L
122.8 705.4573 L
123 705.4573 L
f
123 552.3 m
123 490 L
134.5 490 L
134.5 566 L
123 566 L
102 545 L
105.9081 535.1655 L
122.8 552.3 L
123 552.3 L
f
123 399.1287 m
123 339.9954 L
137.3334 339.9954 L
137.3334 415.9954 L
123 415.9954 L
102 394.9954 L
106.5748 382.6609 L
122.8 399.1287 L
123 399.1287 L
f
123 245.9713 m
123 190.0046 L
140.1666 190.0046 L
140.1666 266.0046 L
123 266.0046 L
102 245.0046 L
107.2414 230.1702 L
122.8 245.9713 L
123 245.9713 L
f
123 92.8 m
123 40 L
143 40 L
143 116 L
123 116 L
102 95 L
107.9081 77.6655 L
122.8 92.8 L
123 92.8 L
f
204.75 852.2953 m
210.9044 858.3451 218.6154 861.8287 225.6667 861.8287 c
237.6267 861.8287 244.1666 855.6482 244.1666 845.1621 c
244.1666 834.9474 237.6665 825.3416 202 795.1622 C
202 789.9954 L
251 789.9954 L
251 795.1622 L
210.3334 795.1622 L
210.3334 795.3621 L
243.2421 823.5089 250 833.382 250 845.6621 c
250 858.7787 241.3407 866.9954 226.3334 866.9954 c
217.8619 866.9954 208.4896 863.0058 202.6667 857.3288 C
204.75 852.2953 L
f
205 700.3907 m
211.4736 706.3955 218.7999 709.6574 225.3333 709.6574 c
236.3764 709.6574 242.3332 704.0238 242.3332 694.3241 c
242.3332 684.6178 236.3331 675.8353 202 647.3243 C
202 639.9908 L
252.0001 639.9908 L
252.0001 647.3243 L
214.1669 647.3243 L
214.1669 647.5243 L
244.727 673.2553 251.0001 682.6203 251.0001 695.3242 c
251.0001 708.6352 242.1265 716.9908 226.6667 716.9908 c
218.0224 716.9908 208.3542 713.1367 202.3333 707.6575 C
205 700.3907 L
f
205.25 548.5 m
212.0426 554.4598 218.9845 557.5 225 557.5 c
235.1263 557.5 240.5 552.4133 240.5 543.5 c
240.5 534.3021 234.9998 526.3426 202 499.5 C
202 490 L
253 490 L
253 499.5 L
218 499.5 L
218 499.7 L
246.2117 523.0154 252 531.8725 252 545 c
252 558.5054 242.9123 567 227 567 c
218.1829 567 208.2187 563.2812 202 558 C
205.25 548.5 L
f
205.5 396.5954 m
212.6118 402.5103 219.1691 405.3287 224.6667 405.3287 c
233.8761 405.3287 238.6666 400.7889 238.6666 392.6621 c
238.6666 383.9726 233.6664 376.8362 202 351.6622 C
202 339.9954 L
254 339.9954 L
254 351.6622 L
221.8334 351.6622 L
221.8334 351.8622 L
247.6965 372.7619 253 381.1109 253 394.6621 c
253 408.3619 243.6981 416.9954 227.3334 416.9954 c
218.3433 416.9954 208.0833 413.4121 201.6667 408.3288 C
205.5 396.5954 L
f
205.75 244.7046 m
213.1809 250.5746 219.3536 253.1713 224.3334 253.1713 c
232.626 253.1713 236.8334 249.1784 236.8334 241.8379 c
236.8334 233.6568 232.3332 227.3436 202 203.8378 C
202 190.0046 L
255 190.0046 L
255 203.8378 L
225.6665 203.8378 L
225.6665 204.0379 L
249.1812 222.522 254 230.3631 254 244.3379 c
254 258.2322 244.4839 267.0046 227.6667 267.0046 c
218.5037 267.0046 207.9479 263.5567 201.3334 258.6712 C
205.75 244.7046 L
f
202 56 m
202 40 L
256 40 L
256 56 L
229.5 56 L
229.5 56.2 L
250.6661 72.2684 255 79.6015 255 94 c
255 108.0887 245.2697 117 228 117 c
218.6642 117 207.8125 113.6875 201 109 C
206 92.8 L
213.75 98.625 219.5382 101 224 101 c
231.3758 101 235 97.554 235 91 c
235 83.3273 230.9998 77.8372 202 56 C
f
408.4834 813.5288 m
442.4666 857.4953 L
442.6666 857.4953 L
442.6666 789.9954 L
448.3334 789.9954 L
448.3334 865.9954 L
442.6666 865.9954 L
402 813.3288 L
402 808.1621 L
460.8334 808.1621 L
460.8334 813.3288 L
408.4834 813.3288 L
408.4834 813.5288 L
f
410.9668 664.8576 m
441.1332 704.0906 L
441.3332 704.0906 L
441.3332 639.9908 L
449.6667 639.9908 L
449.6667 715.9908 L
441.3332 715.9908 L
402 664.6576 L
402 657.3241 L
461.6667 657.3241 L
461.6667 664.6576 L
410.9668 664.6576 L
410.9668 664.8576 L
f
413.45 516.2 m
439.8 550.7 L
440 550.7 L
440 490 L
451 490 L
451 566 L
440 566 L
402 516 L
402 506.5 L
462.5 506.5 L
462.5 516 L
413.45 516 L
413.45 516.2 L
f
415.9334 367.5288 m
438.4666 397.2953 L
438.6666 397.2953 L
438.6666 339.9954 L
452.3334 339.9954 L
452.3334 415.9954 L
438.6666 415.9954 L
402 367.3288 L
402 355.6621 L
463.3334 355.6621 L
463.3334 367.3288 L
415.9334 367.3288 L
415.9334 367.5288 L
f
418.4166 218.8712 m
437.1334 243.9047 L
437.3334 243.9047 L
437.3334 190.0046 L
453.6666 190.0046 L
453.6666 266.0046 L
437.3334 266.0046 L
402 218.6712 L
402 204.8379 L
464.1667 204.8379 L
464.1667 218.6712 L
418.4166 218.6712 L
418.4166 218.8712 L
f
420.9 70.2 m
435.8 90.5 L
436 90.5 L
436 40 L
455 40 L
455 116 L
436 116 L
402 70 L
402 54 L
465 54 L
465 70 L
420.9 70 L
420.9 70.2 L
f
745.5754 860.6287 m
733.5143 841.3432 722.8529 818.4391 713.5 789.9954 C
719.6667 789.9954 L
728.7813 818.1204 738.375 839.037 752 860.8287 C
752 865.9954 L
702 865.9954 L
702 860.8287 L
745.5754 860.8287 L
745.5754 860.6287 L
f
743.6602 708.4574 m
731.8266 689.4331 721.3523 667.1208 712.1999 639.9908 C
721.3334 639.9908 L
730.3126 667.4283 739.6876 687.6366 753.0001 708.6574 C
753.0001 715.9908 L
702 715.9908 L
702 708.6574 L
743.6602 708.6574 L
743.6602 708.4574 L
f
741.7453 556.3 m
730.1391 537.537 719.8518 515.8162 710.9 490 C
723 490 L
731.8437 516.75 741 536.25 754 556.5 C
754 566 L
702 566 L
702 556.5 L
741.7453 556.5 L
741.7453 556.3 L
f
739.8301 404.1287 m
728.4514 385.627 718.3511 364.4979 709.6 339.9954 C
724.6667 339.9954 L
733.375 366.0579 742.3125 384.8495 755 404.3287 C
755 415.9954 L
702 415.9954 L
702 404.3287 L
739.8301 404.3287 L
739.8301 404.1287 L
f
737.9151 251.9713 m
726.7639 233.7308 716.8506 213.1934 708.3 190.0046 C
726.3333 190.0046 L
734.9062 215.3796 743.625 233.4629 756 252.1713 C
756 266.0046 L
702 266.0046 L
702 252.1713 L
737.9151 252.1713 L
737.9151 251.9713 L
f
736 99.8 m
725.0762 81.8208 715.35 61.875 707 40 C
728 40 L
736.4375 64.6875 744.9375 82.0625 757 100 C
757 116 L
702 116 L
702 100 L
736 100 L
736 99.8 L
f
51.1666 827.9954 m
51.1666 803.992 43.5983 794.1622 29.5 794.1622 C
29.5 788.9954 L
47.2143 788.9954 57 800.7793 57 827.9954 c
57 855.2115 47.2143 866.9954 29.5 866.9954 c
11.7857 866.9954 2 855.2115 2 827.9954 c
2 800.7793 11.7857 788.9954 29.5 788.9954 C
29.5 794.1622 L
15.4017 794.1622 7.8334 803.992 7.8334 827.9954 c
7.8334 851.9988 15.4017 861.8287 29.5 861.8287 c
43.5983 861.8287 51.1666 851.9988 51.1666 827.9954 c
f
49.3332 677.9908 m
49.3332 655.0415 42.714 646.3243 30 646.3243 C
30 638.9908 L
48.2318 638.9908 58.0001 650.6302 58.0001 677.9908 c
58.0001 705.3515 48.2318 716.9908 30 716.9908 c
11.7683 716.9908 2 705.3515 2 677.9908 c
2 650.6302 11.7683 638.9908 30 638.9908 C
30 646.3243 L
17.2861 646.3243 10.6668 655.0415 10.6668 677.9908 c
10.6668 700.9401 17.2861 709.6574 30 709.6574 c
42.714 709.6574 49.3332 700.9401 49.3332 677.9908 c
f
47.5 528 m
47.5 506.1046 41.8297 498.5 30.5 498.5 C
30.5 489 L
49.2491 489 59 500.4948 59 528 c
59 555.5051 49.2491 567 30.5 567 c
11.7509 567 2 555.5051 2 528 c
2 500.4948 11.7509 489 30.5 489 C
30.5 498.5 L
19.1703 498.5 13.5 506.1046 13.5 528 c
13.5 549.8953 19.1703 557.5 30.5 557.5 c
41.8297 557.5 47.5 549.8953 47.5 528 c
f
45.6666 377.9954 m
45.6666 357.1541 40.9453 350.6622 31 350.6622 C
31 338.9954 L
50.2665 338.9954 60 350.3458 60 377.9954 c
60 405.6451 50.2665 416.9954 31 416.9954 c
11.7335 416.9954 2 405.6451 2 377.9954 c
2 350.3458 11.7335 338.9954 31 338.9954 C
31 350.6622 L
21.0547 350.6622 16.3334 357.1541 16.3334 377.9954 c
16.3334 398.8367 21.0547 405.3287 31 405.3287 c
40.9453 405.3287 45.6666 398.8367 45.6666 377.9954 c
f
43.8334 228.0046 m
43.8334 208.2172 40.061 202.8378 31.5 202.8378 C
31.5 189.0046 L
51.2839 189.0046 61 200.2104 61 228.0046 c
61 255.7988 51.2839 267.0046 31.5 267.0046 c
11.7161 267.0046 2 255.7988 2 228.0046 c
2 200.2104 11.7161 189.0046 31.5 189.0046 C
31.5 202.8378 L
22.9389 202.8378 19.1666 208.2172 19.1666 228.0046 c
19.1666 247.7919 22.9389 253.1713 31.5 253.1713 c
40.061 253.1713 43.8334 247.7919 43.8334 228.0046 c
f
2 78 m
2 50.0613 11.6987 39 32 39 C
32 55 L
24.8233 55 22 59.2667 22 78 c
22 96.7333 24.8233 101 32 101 c
39.1767 101 42 96.7333 42 78 c
42 59.2667 39.1767 55 32 55 C
32 39 L
52.3013 39 62 50.0613 62 78 c
62 105.9387 52.3013 117 32 117 c
11.6987 117 2 105.9387 2 78 c
f
609.0334 830.8621 m
612.6322 849.8342 623.737 860.7311 640.0522 861.8495 C
639.2564 866.9954 L
617.1619 865.4923 602 847.1727 602 816.4954 c
602 799.1534 612.5121 788.9954 628.6667 788.9954 C
628.6667 794.1622 L
615.9277 794.1622 607.8334 802.2509 607.8334 815.9954 c
607.8334 827.2131 616.1872 835.162 628.6667 835.162 c
641.325 835.162 649.5 827.4043 649.5 815.9954 c
649.5 802.1537 641.4889 794.1622 628.6667 794.1622 C
628.6667 788.9954 L
644.5715 788.9954 655.3334 798.9495 655.3334 816.1621 c
655.3334 830.3313 644.8104 840.1621 628.6667 840.1621 c
620.0015 840.1621 613.3284 836.8391 609.2237 830.8386 C
609.0334 830.8621 L
f
612.2668 682.7243 m
615.7294 699.2632 625.742 708.628 641.7043 709.699 C
640.5129 716.9908 L
617.4327 715.4608 602 697.195 602 666.9909 c
602 649.2407 612.6166 638.9908 629.3334 638.9908 C
629.3334 646.3243 L
617.8757 646.3243 610.6668 653.4721 610.6668 665.9908 c
610.6668 676.2283 618.0833 683.3241 629.3334 683.3241 c
640.7265 683.3241 647.9999 676.4147 647.9999 665.9908 c
647.9999 653.561 640.791 646.3243 629.3334 646.3243 C
629.3334 638.9908 L
645.717 638.9908 656.6667 649.1109 656.6667 666.3242 c
656.6667 680.5838 646.1947 690.3242 629.3334 690.3242 c
621.906 690.3242 616.1503 687.6158 612.4473 682.6772 C
612.2668 682.7243 L
f
615.5 534.6 m
618.8262 548.7059 627.7469 556.5387 643.3563 557.5625 C
641.7692 567 L
617.7034 565.443 602 547.231 602 517.5 c
602 499.3418 612.7211 489 630 489 C
630 498.5 L
619.8235 498.5 613.5 504.7068 613.5 516 c
613.5 525.2574 619.9792 531.5 630 531.5 c
640.1281 531.5 646.5 525.4388 646.5 516 c
646.5 504.9818 640.0931 498.5 630 498.5 C
630 489 L
646.8624 489 658 499.2861 658 516.5 c
658 530.85 647.579 540.5 630 540.5 c
623.8104 540.5 618.972 538.4062 615.6707 534.5293 C
615.5 534.6 L
f
618.7334 386.4622 m
621.9234 398.1349 629.7519 404.4356 645.0085 405.412 C
643.0256 416.9954 L
617.9742 415.4115 602 397.2533 602 367.9954 c
602 349.4292 612.8257 338.9954 630.6667 338.9954 C
630.6667 350.6622 L
621.7714 350.6622 616.3334 355.928 616.3334 365.9954 c
616.3334 374.2726 621.8752 379.662 630.6667 379.662 c
639.5297 379.662 645 374.4491 645 365.9954 c
645 356.3891 639.3951 350.6622 630.6667 350.6622 C
630.6667 338.9954 L
648.0079 338.9954 659.3334 349.4476 659.3334 366.6621 c
659.3334 381.1026 648.9634 390.6621 630.6667 390.6621 c
625.7149 390.6621 621.7939 389.1829 618.8944 386.3679 C
618.7334 386.4622 L
f
621.9666 238.3379 m
625.0202 247.5776 631.7568 252.3464 646.6605 253.2755 C
644.282 267.0046 L
618.2449 265.3937 602 247.2893 602 218.5046 c
602 199.5303 612.9302 189.0046 631.3333 189.0046 C
631.3333 202.8378 L
623.7192 202.8378 619.1666 207.1628 619.1666 216.0046 c
619.1666 223.3017 623.7711 227.838 631.3333 227.838 c
638.9313 227.838 643.5001 223.4733 643.5001 216.0046 c
643.5001 207.8099 638.6972 202.8378 631.3333 202.8378 C
631.3333 189.0046 L
649.1533 189.0046 660.6666 199.6228 660.6666 216.8379 c
660.6666 231.3688 650.3476 240.8379 631.3333 240.8379 c
627.6193 240.8379 624.6156 239.9733 622.1177 238.22 C
621.9666 238.3379 L
f
625.2 90.2 m
628.1174 97.0066 633.7618 100.2432 648.3127 101.125 C
645.5384 117 L
618.5157 115.3622 602 97.3116 602 69 c
602 49.6177 613.0347 39 632 39 C
632 55 L
625.6672 55 622 58.3839 622 66 c
622 72.3169 625.6671 76 632 76 c
638.3328 76 642 72.4836 642 66 c
642 59.2172 637.9993 55 632 55 C
632 39 L
650.2988 39 662 49.7843 662 67 c
662 81.6213 651.732 91 632 91 c
629.5238 91 627.4375 90.75 625.3414 90.0586 C
625.2 90.2 L
f
323.6165 835.8103 m
323.6165 836.0102 L
350.3334 860.8287 L
350.3334 865.9954 L
304.1667 865.9954 L
304.1667 860.8287 L
342.5853 860.8287 L
342.5853 860.6287 L
316.1667 836.1621 L
316.1667 831.162 L
323.1667 831.162 L
338.0469 831.162 345.427 824.5737 345.427 813.9954 c
345.427 801.3248 337.6611 794.1622 322.8334 794.1622 c
315.6546 794.1622 310.5305 795.3152 303.5 798.5288 C
302 793.3288 L
308.7396 790.4329 315.7415 788.9954 323.1667 788.9954 c
341.2169 788.9954 351.3334 797.9014 351.3334 813.9954 c
351.3334 827.3643 342.2682 835.8103 326.3991 835.8103 C
323.6165 835.8103 L
f
326.5722 685.6205 m
326.5722 685.8205 L
351.6667 708.6574 L
351.6667 715.9908 L
304.3333 715.9908 L
304.3333 708.6574 L
340.743 708.6574 L
340.743 708.4574 L
316.3333 686.3242 L
316.3333 679.3241 L
322.3333 679.3241 L
337.4105 679.3241 343.8541 673.6726 343.8541 663.9908 c
343.8541 652.8329 336.7506 646.3243 323.6667 646.3243 c
316.4313 646.3243 311.4619 647.4968 304.2 651.0577 C
302 643.6575 L
309.1042 640.5533 316.5261 638.9908 324.3334 638.9908 c
342.5461 638.9908 352.6667 647.8758 352.6667 663.9908 c
352.6667 677.2193 343.7479 685.6205 328.7982 685.6205 C
326.5722 685.6205 L
f
329.5276 535.4445 m
329.5276 535.6445 L
353 556.5 L
353 566 L
304.5 566 L
304.5 556.5 L
338.9009 556.5 L
338.9009 556.3 L
316.5 536.5 L
316.5 527.5 L
321.5 527.5 L
336.774 527.5 342.2812 522.7854 342.2812 514 c
342.2812 504.3545 335.8403 498.5 324.5 498.5 c
317.208 498.5 312.3933 499.6918 304.9 503.6 C
302 494 L
309.4687 490.6875 317.3106 489 325.5 489 c
343.8752 489 354 497.8639 354 514 c
354 527.088 345.2275 535.4445 331.1971 535.4445 C
329.5276 535.4445 L
f
332.4832 385.2548 m
332.4832 385.4548 L
354.3334 404.3287 L
354.3334 415.9954 L
304.6667 415.9954 L
304.6667 404.3287 L
337.0585 404.3287 L
337.0585 404.1287 L
316.6667 386.6621 L
316.6667 375.662 L
320.6667 375.662 L
336.1376 375.662 340.7083 371.8844 340.7083 363.9954 c
340.7083 355.8625 334.9299 350.6622 325.3334 350.6622 c
317.9848 350.6622 313.3247 351.8734 305.6 356.1288 C
302 344.3288 L
309.8333 340.8079 318.0951 338.9954 326.6667 338.9954 c
345.2044 338.9954 355.3334 347.8383 355.3334 363.9954 c
355.3334 376.943 346.7071 385.2548 333.5963 385.2548 C
332.4832 385.2548 L
f
335.4386 235.0788 m
335.4386 235.2789 L
355.6666 252.1713 L
355.6666 266.0046 L
304.8333 266.0046 L
304.8333 252.1713 L
335.2164 252.1713 L
335.2164 251.9713 L
316.8333 236.8379 L
316.8333 223.838 L
319.8334 223.838 L
335.5012 223.838 339.1355 220.9972 339.1355 214.0046 c
339.1355 207.3842 334.0195 202.8378 326.1667 202.8378 c
318.7615 202.8378 314.2561 204.0684 306.3 208.6712 C
302 194.6712 L
310.1979 190.9421 318.8796 189.0046 327.8333 189.0046 c
346.5335 189.0046 356.6666 197.8265 356.6666 214.0046 c
356.6666 226.8117 348.1867 235.0788 335.9952 235.0788 C
335.4386 235.0788 L
f
338.3943 84.8891 m
338.3943 85.0891 L
357 100 L
357 116 L
305 116 L
305 100 L
333.3741 100 L
333.3741 99.8 L
317 87 L
317 72 L
319 72 L
334.8647 72 337.5625 70.0962 337.5625 64 c
337.5625 58.8922 333.1091 55 327 55 c
319.5383 55 315.1875 56.25 307 61.2 C
302 45 L
310.5625 41.0625 319.6642 39 329 39 c
347.8627 39 358 47.8009 358 64 c
358 76.6666 349.6664 84.8891 338.3943 84.8891 C
338.3943 84.8891 L
f
503.3333 798.1955 m
502 792.9954 L
508.5521 790.3079 515.2858 788.9954 522.5 788.9954 c
540.8659 788.9954 551.1667 798.0485 551.1667 814.3288 c
551.1667 827.9672 541.9365 836.6621 525.5001 836.6621 c
520.7593 836.6621 515.4821 835.7543 510.9834 834.1621 C
510.7834 834.1621 L
512.2316 860.8287 L
547.3334 860.8287 L
547.3334 865.9954 L
506.8333 865.9954 L
504.8333 828.4954 L
510.1667 828.4954 L
514.5939 830.5232 519.5482 831.4954 524.8334 831.4954 c
537.9791 831.4954 545.3333 824.7308 545.3333 814.1621 c
545.3333 801.2704 537.6741 794.1622 522.5 794.1622 c
515.3778 794.1622 510.1659 795.284 503.3333 798.1955 C
f
503.8667 650.391 m
502 642.9908 L
508.7292 640.3033 515.6146 638.9908 523 638.9908 c
541.8441 638.9908 552.3334 648.1699 552.3334 664.6575 c
552.3334 678.4249 543.0845 687.3242 527.0001 687.3242 c
522.6374 687.3242 517.7983 686.5355 513.5668 685.1242 C
513.3668 685.1242 L
514.6254 708.6574 L
548.6667 708.6574 L
548.6667 715.9908 L
506.6667 715.9908 L
504.6667 676.9907 L
512.3335 676.9907 L
516.3377 679.0255 520.7511 679.9907 525.6667 679.9907 c
537.2748 679.9907 543.6666 673.9869 543.6666 664.3242 c
543.6666 652.7239 536.7768 646.3243 523 646.3243 c
515.8778 646.3243 510.7328 647.4343 503.8667 650.391 C
f
504.4 502.6 m
502 493 L
508.9062 490.3125 515.9434 489 523.5 489 c
542.8222 489 553.5 498.3051 553.5 515 c
553.5 528.8964 544.2324 538 528.5 538 c
524.5152 538 520.1142 537.3303 516.15 536.1 C
515.95 536.1 L
517.0189 556.5 L
550 556.5 L
550 566 L
506.5 566 L
504.5 525.5 L
514.5 525.5 L
518.0813 527.5417 521.9539 528.5 526.5 528.5 c
536.5705 528.5 542 523.2567 542 514.5 c
542 504.1911 535.8795 498.5 523.5 498.5 c
516.3777 498.5 511.2995 499.5981 504.4 502.6 C
f
504.9333 354.7955 m
502 342.9954 L
509.0833 340.3079 516.2723 338.9954 524 338.9954 c
543.8004 338.9954 554.6667 348.4266 554.6667 365.3288 c
554.6667 379.3542 545.3804 388.6621 530.0001 388.6621 c
526.3933 388.6621 522.4304 388.1115 518.7334 387.0621 C
518.5334 387.0621 L
519.4127 404.3287 L
551.3334 404.3287 L
551.3334 415.9954 L
506.3333 415.9954 L
504.3333 373.9954 L
516.6667 373.9954 L
519.8251 376.044 523.1568 376.9954 527.3334 376.9954 c
535.8662 376.9954 540.3333 372.5128 540.3333 364.6621 c
540.3333 355.6447 534.9821 350.6622 524 350.6622 c
516.8777 350.6622 511.8664 351.7484 504.9333 354.7955 C
f
505.4667 207.0045 m
502 193.0046 L
509.2604 190.3171 516.6011 189.0046 524.5 189.0046 c
544.7785 189.0046 555.8333 198.5617 555.8333 215.6712 c
555.8333 229.8256 546.5283 239.3379 531.5 239.3379 c
528.2711 239.3379 524.7463 238.9063 521.3166 238.0379 C
521.1166 238.0379 L
521.8062 252.1713 L
552.6666 252.1713 L
552.6666 266.0046 L
506.1667 266.0046 L
504.1667 222.5046 L
518.8333 222.5046 L
521.5687 224.5602 524.3596 225.5046 528.1667 225.5046 c
535.1619 225.5046 538.6667 221.7827 538.6667 214.8379 c
538.6667 207.1118 534.0848 202.8378 524.5 202.8378 c
517.3776 202.8378 512.4332 203.9122 505.4667 207.0045 C
f
523.7 89 m
524.2 100 L
554 100 L
554 116 L
506 116 L
504 71 L
521 71 L
523.3125 73.0625 525.5625 74 529 74 c
534.4576 74 537 71.0388 537 65 c
537 58.5654 533.1875 55 525 55 c
517.8776 55 513 56.0625 506 59.2 C
502 43 L
509.4375 40.3125 516.9299 39 525 39 c
545.7567 39 557 48.6832 557 66 c
557 80.2834 547.6763 90 533 90 c
530.1492 90 527.0625 89.6875 523.9 89 C
523.7 89 L
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
