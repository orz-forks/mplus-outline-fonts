%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (255E.eps)
%%CreationDate: (12/15/04) (1:46 PM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
500 600 m
500 700 L
400 700 L
400 600 L
500 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
400 600 m
400 700 L
300 700 L
300 600 L
400 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
500 500 m
500 600 L
400 600 L
400 500 L
500 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
400 500 m
400 600 L
300 600 L
300 500 L
400 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
0 O
0 g
1 D
183 681 m
160.375 684.3125 139.6297 686.2449 118 687 C
118 684 L
139.4046 683.2527 159.884 681.3258 182.6 678 C
183 681 L
f
178 650 m
157.975 653.78 140.9345 655.8861 122 657 C
122 654 L
140.8732 652.8897 157.9073 650.6984 177.5 647 C
178 650 L
f
185.6 615 m
165.8936 618.8302 137.6766 622.0106 114 623 C
114 620 L
136.4375 619.0625 164.3207 616.0193 185 612 C
185.6 615 L
f
441 636 m
441 652 L
492 652 L
492 655 L
441 655 L
441 683 L
483 683 L
483 686 L
417 686 L
417 683 L
438 683 L
438 655 L
408 655 L
408 652 L
438 652 L
438 636 L
438 617.8923 443.4879 613 461 613 C
483 613 L
483 616 L
461 616 l
444.9252 616 441 619.9252 441 636 c
f
323.21 671.5399 m
344.3607 656.6519 366.8313 638.1821 383.3299 622.2501 C
385.4299 624.3501 L
368.5132 640.6858 345.7437 659.3456 325.01 673.9399 C
323.21 671.5399 L
f
u
312 613.6 m
313.5 611 L
348.7373 629.7364 365.5178 650.0812 376 689.2 C
373.1 690 L
363.0758 652.5902 347.1525 632.2913 312 613.6 C
f
U
291 614.1 m
286.25 625.6625 278.9613 641.9831 274 652.1 C
271.3 650.8 L
276.3151 640.5733 283.547 624.3266 288.2 613 C
291 614.1 L
f
u
284.6 625 m
257.9149 621.0704 233.9599 618.8714 209 618 C
209 615 L
234.7357 615.8985 258.6875 618.125 285 622 C
284.6 625 L
f
U
u
220.8 616 m
230.1567 640.0049 237.8757 665.0093 243 688.4 C
240 689 L
234.7792 665.1689 227.0625 640.25 218 617 C
220.8 616 L
f
U
u
492.3333 550.4969 m
492.3333 555.8303 L
442.8334 555.8303 L
442.8334 581.3302 L
483.3333 581.3302 L
483.3333 586.6636 L
416.6667 586.6636 L
416.6667 581.3302 L
437 581.3302 L
437 555.8303 L
407.6667 555.8303 L
407.6667 550.4969 L
437 550.4969 L
437 535.8303 L
437 517.5973 442.8299 512.3303 460.5 512.3303 C
483.5 512.3303 L
483.5 517.6637 L
461 517.6637 L
446.3709 517.6637 442.8334 521.2004 442.8334 535.8303 C
442.8334 550.4969 L
492.3333 550.4969 L
f
492.6667 448.9938 m
492.6667 456.6606 L
444.6668 456.6606 L
444.6668 479.6605 L
483.6667 479.6605 L
483.6667 487.3273 L
416.3333 487.3273 L
416.3333 479.6605 L
435.9999 479.6605 L
435.9999 456.6606 L
407.3333 456.6606 L
407.3333 448.9938 L
435.9999 448.9938 L
435.9999 435.6606 L
435.9999 417.3024 442.1718 411.6605 460 411.6605 C
484 411.6605 L
484 419.3273 L
461 419.3273 L
447.8166 419.3273 444.6668 422.4755 444.6668 435.6606 C
444.6668 448.9938 L
492.6667 448.9938 L
f
493 347.5 m
493 357.5 L
446.5 357.5 L
446.5 378 L
484 378 L
484 388 L
416 388 L
416 378 L
435 378 L
435 357.5 L
407 357.5 L
407 347.5 L
435 347.5 L
435 335.5 L
435 317.0167 441.5139 311 459.5 311 C
484.5 311 L
484.5 321 L
461 321 L
449.2622 321 446.5 323.7597 446.5 335.5 C
446.5 347.5 L
493 347.5 L
f
493.3333 245.9969 m
493.3333 258.3303 L
448.3334 258.3303 L
448.3334 276.3302 L
484.3333 276.3302 L
484.3333 288.6636 L
415.6667 288.6636 L
415.6667 276.3302 L
434 276.3302 L
434 258.3303 L
406.6667 258.3303 L
406.6667 245.9969 L
434 245.9969 L
434 235.3303 L
434 216.7218 440.8558 210.3303 459 210.3303 C
485 210.3303 L
485 222.6637 L
461 222.6637 L
450.7079 222.6637 448.3334 225.0348 448.3334 235.3303 C
448.3334 245.9969 L
493.3333 245.9969 L
f
493.6667 144.5031 m
493.6667 159.1697 L
450.1666 159.1697 L
450.1666 174.6698 L
484.6667 174.6698 L
484.6667 189.3364 L
415.3333 189.3364 L
415.3333 174.6698 L
433 174.6698 L
433 159.1697 L
406.3333 159.1697 L
406.3333 144.5031 L
433 144.5031 L
433 135.1697 L
433 116.436 440.1978 109.6697 458.5 109.6697 C
485.5 109.6697 L
485.5 124.3363 L
461 124.3363 L
452.1535 124.3363 450.1666 126.319 450.1666 135.1697 C
450.1666 144.5031 L
493.6667 144.5031 L
f
U
494 43 m
494 60 L
452 60 L
452 73 L
485 73 L
485 90 L
415 90 L
415 73 L
432 73 L
432 60 L
406 60 L
406 43 L
432 43 L
432 35 L
432 16.1411 439.5398 9 458 9 C
486 9 L
486 26 L
461 26 L
453.5992 26 452 27.5941 452 35 C
452 43 L
494 43 L
f
u
321.8767 570.8702 m
342.9464 556.0391 365.6719 537.3674 382.4132 521.2637 C
386.4299 525.1804 L
369.3131 541.6519 346.259 560.5479 325.3434 575.2703 C
321.8767 570.8702 L
f
320.5433 470.2005 m
341.5321 455.4264 364.5124 436.5527 381.4965 420.2773 C
387.4299 426.0107 L
370.113 442.6179 346.7742 461.7502 325.6767 476.6006 C
320.5433 470.2005 L
f
319.2101 369.5399 m
340.1179 354.8229 363.3531 335.7473 380.5799 319.3001 C
388.4299 326.8501 L
370.9128 343.5929 347.2894 362.9615 326.0101 377.9399 C
319.2101 369.5399 L
f
317.8767 268.8702 m
338.7035 254.2102 362.1937 234.9326 379.6632 218.3137 C
389.4299 227.6804 L
371.7127 244.5589 347.8046 264.1638 326.3434 279.2702 C
317.8767 268.8702 L
f
316.5434 168.2097 m
337.2893 153.6067 361.0344 134.1272 378.7466 117.3365 C
390.4298 128.5198 L
372.5126 145.534 348.3198 165.3751 326.6767 180.6096 C
316.5434 168.2097 L
f
U
u
315.2101 67.5399 m
335.875 52.994 359.875 33.3125 377.8299 16.3501 C
391.4299 29.3501 L
373.3125 46.5 348.8351 66.5774 327.0101 81.9399 C
315.2101 67.5399 L
f
U
u
284.4167 526.9637 m
257.6546 522.973 233.3384 520.7033 208.3333 519.8303 C
208.3333 514.4969 L
234.0323 515.3941 258.5 517.6844 285.1667 521.6636 C
284.4167 526.9637 L
f
284.2333 428.9273 m
257.3943 424.8757 232.7169 422.5352 207.6666 421.6607 C
207.6666 413.9939 L
233.329 414.8898 258.3125 417.2439 285.3333 421.3272 C
284.2333 428.9273 L
f
284.05 330.9 m
257.134 326.7873 232.0955 324.3761 207 323.5 C
207 313.5 L
232.6257 314.3946 258.125 316.8125 285.5 321 C
284.05 330.9 L
f
283.8666 232.8637 m
256.8737 228.6899 231.4741 226.208 206.3333 225.3303 C
206.3333 212.9969 L
231.9223 213.8903 257.9375 216.3719 285.6667 220.6636 C
283.8666 232.8637 L
f
283.6833 134.8363 m
256.6133 130.6015 230.8526 128.0489 205.6667 127.1697 C
205.6667 112.5031 L
231.219 113.3951 257.75 115.9405 285.8333 120.3364 C
283.6833 134.8363 L
f
U
u
183.6667 581.497 m
160.8229 584.7678 139.3192 586.7294 117.3333 587.497 C
117.3333 582.0969 L
138.8731 581.3449 159.9825 579.408 183 576.1136 C
183.6667 581.497 L
f
184.3334 481.9939 m
161.2708 485.2231 139.0088 487.2139 116.6666 487.9939 C
116.6666 480.1938 L
138.3415 479.4371 160.081 477.4902 183.4 474.2271 C
184.3334 481.9939 L
f
185 382.5 m
161.7187 385.6875 138.6983 387.7076 116 388.5 C
116 378.3 L
137.8101 377.5386 160.1796 375.5817 183.8 372.35 C
185 382.5 L
f
185.6667 282.997 m
162.1667 286.1428 138.3879 288.1921 115.3333 288.997 C
115.3333 276.3969 L
137.2785 275.6307 160.2781 273.6639 184.2 270.4636 C
185.6667 282.997 L
f
186.3333 183.503 m
162.6146 186.6072 138.0775 188.6857 114.6667 189.503 C
114.6667 174.5031 L
136.747 173.7322 160.3766 171.7554 184.6 168.5864 C
186.3333 183.503 L
f
U
114 72.6 m
136.2154 71.8244 160.4751 69.8376 185 66.7 C
187 84 L
163.0625 87.0625 137.767 89.1703 114 90 C
114 72.6 L
f
u
178.5 550.997 m
158.3984 554.7914 140.6271 556.9454 121.5 557.997 C
121.5 552.6636 L
140.3976 551.6216 157.9274 549.4239 177.5833 545.7136 C
178.5 550.997 L
f
179 451.994 m
158.8218 455.8029 140.3196 458.0047 121 458.994 C
121 451.3272 L
139.9219 450.3534 157.9475 448.1494 177.6667 444.4272 C
179 451.994 L
f
179.5 353 m
159.2452 356.8233 140.0122 359.073 120.5 360 C
120.5 350 L
139.4464 349.0945 157.9676 346.8842 177.75 343.15 C
179.5 353 L
f
180 253.997 m
159.6687 257.8348 139.7047 260.1323 120 260.997 C
120 248.6636 L
138.9707 247.8264 157.9877 245.6097 177.8333 241.8636 C
180 253.997 L
f
180.5 155.003 m
160.0921 158.8553 139.3972 161.2007 119.5 162.003 C
119.5 147.3364 L
138.4951 146.5675 158.0079 144.3445 177.9167 140.5864 C
180.5 155.003 L
f
U
181 56 m
160.5155 59.8667 139.0898 62.26 119 63 C
119 46 L
138.0195 45.2994 158.028 43.07 178 39.3 C
181 56 L
f
u
186.5 516.8637 m
165.6571 520.7792 137.1107 523.9312 113.3333 524.897 C
113.3333 519.4969 L
135.8749 518.5815 163.974 515.5546 185.5333 511.4969 C
186.5 516.8637 L
f
187.4 418.7273 m
165.4207 422.7281 136.5447 425.8519 112.6666 426.794 C
112.6666 418.9939 L
135.3123 418.1005 163.6272 415.0898 186.0667 410.9939 C
187.4 418.7273 L
f
188.3 320.6 m
165.1843 324.686 135.9788 327.7815 112 328.7 C
112 318.5 L
134.7498 317.6287 163.2804 314.6343 186.6 310.5 C
188.3 320.6 L
f
189.2 222.4636 m
164.9478 226.6349 135.4129 229.7021 111.3333 230.597 C
111.3333 217.9969 L
134.1873 217.1477 162.9337 214.1695 187.1333 209.9969 C
189.2 222.4636 L
f
190.1 124.3363 m
164.7114 128.5928 134.847 131.6317 110.6667 132.503 C
110.6667 117.5031 L
133.6247 116.6759 162.5869 113.714 187.6667 109.5031 C
190.1 124.3363 L
f
U
191 26.2 m
164.475 30.5417 134.2811 33.5523 110 34.4 C
110 17 L
133.0622 16.1949 162.2401 13.2492 188.2 9 C
191 26.2 L
f
u
371.8333 590.497 m
361.9975 553.8689 346.2258 534.0001 311.3333 515.447 C
314.1167 510.4969 L
350.1027 529.6315 367.042 550.1013 377.5 589.1303 C
371.8333 590.497 L
f
370.5666 490.9939 m
360.9192 455.1475 345.2992 435.7089 310.6666 417.294 C
314.7333 409.9939 L
351.4681 429.5265 368.5661 450.1215 379.0001 489.0606 C
370.5666 490.9939 L
f
369.3 391.5 m
359.841 356.4352 344.3726 337.4267 310 319.15 C
315.35 309.5 L
352.8334 329.4307 370.0901 350.1507 380.5 389 C
369.3 391.5 L
f
368.0333 291.997 m
358.7627 257.7139 343.446 239.1355 309.3333 220.997 C
315.9667 208.9969 L
354.1988 229.3258 371.6142 250.1708 382 288.9303 C
368.0333 291.997 L
f
366.7667 192.503 m
357.6845 159.0016 342.5194 140.8533 308.6667 122.853 C
316.5833 108.503 L
355.5641 129.23 373.1382 150.2001 383.5 188.8697 C
366.7667 192.503 L
f
U
365.5 93 m
356.6062 60.2802 341.5928 42.562 308 24.7 C
317.2 8 L
356.9295 29.1251 374.6623 50.2202 385 88.8 C
365.5 93 L
f
u
72.5 84.4 m
70.0129 66.5036 59.9221 53.5117 37.4 40.9 C
47 25 L
76.8066 42.2093 91.1777 61.9375 93 88 C
9 88 L
9 71 L
84 71 L
72.5 84.4 L
f
19 48 m
29.9875 33.1375 37.8125 22.125 48 7 C
64.4 16.7 L
54.5253 31.3605 46.1893 43.1864 34.8 58.6 C
19 48 L
f
U
u
269.1666 551.1303 m
274.4417 540.3288 281.7258 524.0538 286.5666 512.3302 C
291.8334 514.3303 L
286.9063 526.2365 279.5605 542.6372 274.2834 553.447 C
269.1666 551.1303 L
f
267.0332 451.4606 m
272.5683 440.0844 279.9047 423.781 284.9332 411.6605 C
292.6667 414.5606 L
287.5625 426.8106 280.1597 443.2912 274.5667 454.794 C
267.0332 451.4606 L
f
264.9 351.8 m
270.6951 339.8491 278.0837 323.5174 283.3 311 C
293.5 314.8 L
288.2188 327.3937 280.7589 343.9544 274.85 356.15 C
264.9 351.8 L
f
262.7666 252.1303 m
268.8217 239.6047 276.2626 223.2446 281.6666 210.3302 C
294.3334 215.0303 L
288.875 227.9678 281.3581 244.6084 275.1334 257.497 C
262.7666 252.1303 L
f
260.6334 152.4697 m
266.9484 139.3694 274.4416 122.981 280.0334 109.6697 C
295.1667 115.2697 L
289.5312 128.5509 281.9573 145.2716 275.4167 158.853 C
260.6334 152.4697 L
f
U
258.5 52.8 m
265.075 39.125 272.6204 22.7082 278.4 9 C
296 15.5 L
290.1875 29.125 282.5565 45.9257 275.7 60.2 C
258.5 52.8 L
f
u
283.5 36.8 m
256.353 32.5042 230.2312 29.8809 205 29 C
205 12 L
230.5157 12.8908 257.5625 15.5 286 20 C
283.5 36.8 L
f
U
u
222.3834 516.0969 m
231.7077 540.0531 239.3886 564.9796 244.5334 588.4636 C
238.8333 589.4969 L
233.6172 565.6875 225.9791 541.0282 217 517.997 C
222.3834 516.0969 L
f
223.9667 416.1939 m
233.2587 440.1013 240.9016 464.9499 246.0668 488.5272 C
237.6666 489.9939 L
232.4553 466.2061 224.8958 441.8064 215.9999 418.994 C
223.9667 416.1939 L
f
225.55 316.3 m
234.8096 340.1587 242.4144 364.9294 247.6 388.6 C
236.5 390.5 L
231.2935 366.7339 223.8125 342.5937 215 320 C
225.55 316.3 L
f
227.1334 216.3969 m
236.3606 240.2069 243.9273 264.8997 249.1334 288.6636 C
235.3333 290.9969 L
230.1315 267.2525 222.7291 243.372 214 220.997 C
227.1334 216.3969 L
f
228.7166 116.503 m
237.9115 140.2643 245.4402 164.8792 250.6666 188.7364 C
234.1667 191.503 L
228.9697 167.7802 221.6459 144.1593 213 122.003 C
228.7166 116.503 L
f
U
u
230.3 16.6 m
239.4625 40.3125 246.9531 64.8495 252.2 88.8 C
233 92 L
227.8077 68.2989 220.5625 44.9375 212 23 C
230.3 16.6 L
f
U
u
74.5718 184.3364 m
72.2299 166.308 61.9602 153.068 37.9 139.503 C
46.1667 125.8364 L
76.4322 143.3107 90.402 162.2659 92.1667 187.503 C
9.3334 187.503 L
9.3334 172.8364 L
84.4051 172.8364 L
74.5718 184.3364 L
f
76.6435 284.2728 m
74.447 266.1124 63.9983 252.6244 38.4 238.106 C
45.3333 226.6728 L
76.0579 244.4121 89.6264 262.5943 91.3333 287.0061 C
9.6667 287.0061 L
9.6667 274.6729 L
84.8101 274.6729 L
76.6435 284.2728 L
f
78.7151 384.2 m
76.6639 365.9077 66.0363 352.1716 38.9 336.7 C
44.5 327.5 L
75.6836 345.5043 88.8509 362.9135 90.5 386.5 C
10 386.5 L
10 376.5 L
85.2151 376.5 L
78.7151 384.2 L
f
80.7869 484.1364 m
78.8809 465.7122 68.0744 451.7279 39.4 435.303 C
43.6667 428.3364 L
75.3093 446.6057 88.0752 463.2419 89.6667 486.003 C
10.3334 486.003 L
10.3334 478.3364 L
85.6202 478.3364 L
80.7869 484.1364 L
f
82.8584 584.0636 m
81.0977 565.5074 70.1124 551.2751 39.9 533.897 C
42.8334 529.1636 L
74.9349 547.6979 87.2996 563.5612 88.8334 585.4969 C
10.6667 585.4969 L
10.6667 580.1635 L
86.0252 580.1635 L
82.8584 584.0636 L
f
U
84.9302 684 m
83.3148 665.3119 72.1505 650.8315 40.4 632.5 C
42 630 L
74.5606 648.7993 86.524 663.8896 88 685 C
11 685 L
11 682 L
86.4302 682 L
84.9302 684 L
f
u
19.5 149.3364 m
30.5208 134.4822 38.8441 122.7158 49 107.503 C
63.0833 115.853 L
53.1841 130.6848 44.4412 143.1312 33.0666 158.4697 C
19.5 149.3364 L
f
20 250.6728 m
31.0542 235.827 39.8757 223.3067 50.0001 208.0061 C
61.7666 215.006 L
51.8429 230.0092 42.6931 243.076 31.3332 258.3394 C
20 250.6728 L
f
20.5 352 m
31.5875 337.1625 40.9072 323.8883 51 308.5 C
60.45 314.15 L
50.5019 329.3244 40.9452 343.0116 29.6 358.2 C
20.5 352 L
f
21 453.3364 m
32.1208 438.5072 41.9388 424.4792 52 409.003 C
59.1333 413.303 L
49.1607 428.6488 39.1972 442.9564 27.8666 458.0697 C
21 453.3364 L
f
21.5 554.6636 m
32.6542 539.8427 42.9703 525.0608 53 509.4969 C
57.8167 512.447 L
47.8197 527.964 37.4493 542.8921 26.1334 557.9302 C
21.5 554.6636 L
f
U
56.5 611.6 m
46.4785 627.2884 35.7012 642.8369 24.4 657.8 C
22 656 L
33.1875 641.1875 44.0019 625.6517 54 610 C
56.5 611.6 L
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
