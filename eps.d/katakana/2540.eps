%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (2540.eps)
%%CreationDate: (5/25/04) (6:39 PM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
1 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
500 600 m
500 700 L
400 700 L
400 600 L
500 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
400 600 m
400 700 L
300 700 L
300 600 L
400 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
500 500 m
500 600 L
400 600 L
400 500 L
500 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
400 500 m
400 600 L
300 600 L
300 500 L
400 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
0 Ap
0 O
0 g
1 D
76.8332 579.2303 m
76.503 537.1616 58.9405 519.1766 17.2832 515.8303 C
17.8333 510.4969 L
62.3629 514.0739 82.5 534.1374 82.5 580.6636 C
30.5 580.6636 L
30.5 575.3302 L
80.5 575.3302 L
76.8332 579.2303 L
f
74.6665 479.2606 m
74.2039 437.7736 57.8182 420.9501 16.8666 417.6607 C
17.6667 409.9938 L
63.0202 413.6369 83 433.8737 83 481.3273 C
30 481.3273 L
30 473.6604 L
80 473.6604 L
74.6665 479.2606 L
f
283.3 670.6 m
279.9055 633.2115 264.045 618.3548 225.7 615 C
226 612 L
265.2619 615.4349 282.8243 631.104 286.3 670.6 C
283.3 670.6 L
f
13.1 647.9 m
26.5635 660.7781 33.2 673.9336 35 692 C
32 692 L
30.3134 675.0718 23.7961 662.2397 11 650 C
13.1 647.9 L
f
24 661 m
39.5825 654.2646 56.5 646.3125 71 639 C
72.4 641.7 L
57.2754 649.3275 40.6873 657.0921 25.4 663.7 C
24 661 L
f
172.7 687.3 m
155.9588 681.6127 138.8649 679 118 679 C
118 676 L
139.5707 676 156.8713 678.7656 173.7 684.5 C
172.7 687.3 L
f
152 681 m
152 656 l
152 624.6298 145.7707 616.4741 123.4 613 C
124 610 L
147.6073 613.9898 155 623.0585 155 656 C
155 681 L
152 681 L
f
191 649 m
191 652 L
107 652 L
107 649 L
191 649 L
f
210 681 m
212.9732 670.2295 216.375 657.3125 219 646 C
221.9 646.6 L
219.0043 659.079 215.4214 672.6662 212.9 681.8 C
210 681 L
f
238.1 685.2 m
241.0732 674.4295 244.475 661.5125 247.1 650.2 C
250 650.8 L
247.1043 663.279 243.5214 676.8662 241 686 C
238.1 685.2 L
f
391 656 m
391 659 L
307 659 L
307 656 L
352 656 L
352 622.4019 347.7914 616.8387 323.4 613 C
324 610 L
350.044 614.4016 355 620.6843 355 656 C
391 656 L
f
374 683 m
374 686 L
319 686 L
319 683 L
374 683 L
f
424.3 657.1 m
443.512 652.5566 465.1965 646.0313 483.9 639.2 C
485 642 L
465.5251 649.1131 443.5 655.625 425 660 C
425 690 L
422 690 L
422 610 L
425 610 L
425 658 L
424.3 657.1 L
f
196 681 m
192.2352 686.347 188.875 690.9375 185 696 C
182.6 694.2 L
186.375 689.25 189.5417 684.9218 193.5 679.3 C
196 681 L
f
181 677 m
177.2352 682.347 173.875 686.9375 170 692 C
167.6 690.2 L
171.375 685.25 174.5417 680.9218 178.5 675.3 C
181 677 L
f
296 682 m
292.2352 687.347 288.875 691.9375 285 697 C
282.6 695.2 L
286.375 690.25 289.5417 685.9218 293.5 680.3 C
296 682 L
f
280 678 m
276.2352 683.347 272.875 687.9375 269 693 C
266.6 691.2 L
270.375 686.25 273.5417 681.9218 277.5 676.3 C
280 678 L
f
396 681 m
392.2352 686.347 388.875 690.9375 385 696 C
382.6 694.2 L
386.375 689.25 389.5417 684.9218 393.5 679.3 C
396 681 L
f
381 677 m
377.2352 682.347 373.875 686.9375 370 692 C
367.6 690.2 L
371.375 685.25 374.5417 680.9218 378.5 675.3 C
381 677 L
f
487 675 m
483.2352 680.347 479.875 684.9375 476 690 C
473.6 688.2 L
477.375 683.25 480.5417 678.9218 484.5 673.3 C
487 675 L
f
470 671 m
466.2352 676.347 462.875 680.9375 459 686 C
456.6 684.2 L
460.375 679.25 463.5417 674.9218 467.5 669.3 C
470 671 L
f
93 682 m
89.2352 687.347 85.875 691.9375 82 697 C
79.6 695.2 L
83.375 690.25 86.5417 685.9218 90.5 680.3 C
93 682 L
f
77 678 m
73.2352 683.347 69.875 687.9375 66 693 C
63.6 691.2 L
67.0865 686.6283 70.0541 682.587 73.6057 677.5671 C
77 678 L
f
79 679.2 m
78.8022 636.5496 60.0627 617.4029 17.7 614 C
18 611 L
61.7057 614.5108 82 634.4009 82 680 C
79 680 L
31 680 L
31 677 L
81 677 L
79 679.2 L
f
u
209.1667 580.8303 m
212.1398 570.0598 215.5416 557.1428 218.1667 545.8303 C
223.5334 546.9136 L
220.6717 559.2461 217.0804 572.8334 214.5 582.1636 C
209.1667 580.8303 L
f
208.3333 480.6605 m
211.3065 469.89 214.7083 456.973 217.3333 445.6605 C
225.1668 447.2272 L
222.339 459.4133 218.7393 473.0005 216.1001 482.5272 C
208.3333 480.6605 L
f
207.5 380.5 m
210.4732 369.7295 213.875 356.8125 216.5 345.5 C
226.8 347.55 L
224.0063 359.5895 220.3982 373.1768 217.7 382.9 C
207.5 380.5 L
f
206.6667 280.3303 m
209.6398 269.5598 213.0416 256.6428 215.6667 245.3303 C
228.4334 247.8636 L
225.6736 259.7567 222.0572 273.344 219.3 283.2636 C
206.6667 280.3303 L
f
204.8334 180.1697 m
207.8065 169.3992 211.2084 156.4822 213.8334 145.1697 C
229.0666 148.1864 L
226.3408 159.9329 222.716 173.5203 219.8999 183.6364 C
204.8334 180.1697 L
f
U
205 80 m
207.9732 69.2295 211.375 56.3125 214 45 C
231.7 48.5 L
229.0082 60.1001 225.375 73.6875 222.5 84 C
205 80 L
f
u
237.0833 584.9969 m
240.0565 574.2264 243.4583 561.3094 246.0833 549.9969 C
251.4501 551.0803 L
248.5883 563.4128 244.997 577 242.4167 586.3303 C
237.0833 584.9969 L
f
236.0666 484.7939 m
239.0398 474.0234 242.4416 461.1064 245.0666 449.7939 C
252.9001 451.3606 L
250.0724 463.5466 246.4727 477.1339 243.8334 486.6606 C
236.0666 484.7939 L
f
235.05 384.6 m
238.0232 373.8295 241.425 360.9125 244.05 349.6 C
254.35 351.65 L
251.5563 363.6895 247.9482 377.2768 245.25 387 C
235.05 384.6 L
f
234.0333 284.3969 m
237.0065 273.6264 240.4083 260.7094 243.0333 249.3969 C
255.8 251.9303 L
253.0403 263.8233 249.4238 277.4107 246.6667 287.3303 C
234.0333 284.3969 L
f
232.0167 184.203 m
234.9899 173.4326 238.3917 160.5155 241.0167 149.203 C
256.25 152.2197 L
253.5242 163.9663 249.8993 177.5536 247.0833 187.6697 C
232.0167 184.203 L
f
U
232 84 m
234.9732 73.2295 238.375 60.3125 241 49 C
258.7 52.5 L
256.0082 64.1001 252.375 77.6875 249.5 88 C
232 84 L
f
u
13.75 546.6469 m
27.4613 559.8707 34.3374 573.6351 36.2 592.3303 C
30.6666 592.3303 L
28.98 575.4021 22.4627 562.57 9.6666 550.3303 C
13.75 546.6469 L
f
14.4 445.3938 m
28.3592 458.9634 35.4748 473.3366 37.4001 492.6606 C
29.3332 492.6606 L
27.6466 475.7324 21.1293 462.9003 8.3332 450.6606 C
14.4 445.3938 L
f
14.05 344.15 m
28.257 358.0653 35.6121 373.0473 37.6 393 C
27 393 L
25.3134 376.0718 18.7961 363.2397 6 351 C
14.05 344.15 L
f
16.7 242.8969 m
31.1548 257.1579 38.7495 272.7489 40.8 293.3303 C
27.6666 293.3303 L
25.98 276.4021 19.4627 263.57 6.6666 251.3303 C
16.7 242.8969 L
f
16.35 141.6531 m
31.0526 156.2598 38.8868 172.4596 41 193.6697 C
25.3334 193.6697 L
23.6468 176.7415 17.1295 163.9094 4.3334 151.6697 C
16.35 141.6531 L
f
U
17 40.4 m
31.9505 55.3525 40.0242 72.1611 42.2 94 C
24 94 L
22.3134 77.0718 15.7961 64.2397 3 52 C
17 40.4 L
f
u
71.5 379.3 m
70.905 338.3947 55.6962 322.7329 15.45 319.5 C
16.5 309.5 L
62.094 313.1625 82.3 332.6875 82.3 382 C
75.5 382 L
28.5 382 L
28.5 372 L
78.5 372 L
71.5 379.3 L
f
71.3333 279.3303 m
70.6059 239.0067 56.574 224.5066 17.0333 221.3303 C
18.3333 208.9969 L
65.2714 212.7674 84.7666 233 84.7666 282.6636 C
76.6667 282.6636 L
30 282.6636 L
30 270.3302 L
80 270.3302 L
71.3333 279.3303 L
f
74.4334 183.3363 m
28.5 183.3363 L
28.5 168.6697 L
78.5 168.6697 L
68.1667 179.3697 L
67.307 139.6278 54.4519 126.2892 15.6167 123.1696 C
17.1667 108.503 L
60.6389 111.9951 80.7546 129.5094 83.9525 170.4316 C
74.4334 183.3363 L
f
U
74 84 m
28 84 L
28 67 L
78 67 L
66 79.4 L
65.0079 40.2398 53.3297 28.0629 15.2 25 C
17 8 L
61.0352 11.5373 81.0658 29.0209 84.4693 70.2473 C
74 84 L
f
u
72.5 541.9136 m
57.3649 549.6136 40.5291 557.5345 25 564.2469 C
22.6666 559.4136 L
38.3172 552.6487 55.3824 544.6016 69.9666 537.1802 C
72.5 541.9136 L
f
72.6 442.1272 m
57.4544 449.8997 40.371 457.977 24.6 464.7939 C
21.3332 457.8271 L
37.052 451.0328 54.2648 442.8907 68.9333 435.3604 C
72.6 442.1272 L
f
71.7 342.35 m
56.5439 350.195 39.2128 358.4285 23.2 365.35 C
19 356.25 L
34.7868 349.4262 52.1473 341.1891 66.9 333.55 C
71.7 342.35 L
f
73.8 242.5636 m
58.6334 250.4811 41.0546 258.871 24.8 265.897 C
19.6666 254.6635 L
35.5216 247.8103 53.0298 239.4783 67.8666 231.7302 C
73.8 242.5636 L
f
72.9 142.7864 m
57.723 150.7764 39.8965 159.3225 23.4 166.453 C
17.3334 153.0864 L
33.2565 146.2038 50.9123 137.7767 65.8334 129.9197 C
72.9 142.7864 L
f
U
73 43 m
57.8125 51.0625 39.7383 59.765 23 67 C
16 51.5 L
31.9912 44.5879 49.7947 36.0658 64.8 28.1 C
73 43 L
f
u
171.6666 587.5803 m
155.7747 582.3608 139.1811 579.997 117.6667 579.997 C
117.6667 574.6636 L
140.1149 574.6636 157.1325 577.2028 173.35 582.5469 C
171.6666 587.5803 L
f
170.6333 487.8606 m
155.5907 483.1089 139.4973 480.9939 117.3333 480.9939 C
117.3333 473.3271 L
140.6591 473.3271 157.3937 475.64 173 480.5938 C
170.6333 487.8606 L
f
169.6 387.15 m
155.4066 382.8661 139.8134 381 117 381 C
117 371 L
141.2033 371 157.6549 373.0865 172.65 377.65 C
169.6 387.15 L
f
168.5666 287.4303 m
155.2226 283.6142 140.1296 281.997 116.6667 281.997 C
116.6667 269.6636 L
141.7475 269.6636 157.9161 271.5238 172.3 275.6969 C
168.5666 287.4303 L
f
167.5334 188.7197 m
155.0385 185.3714 140.4458 184.003 116.3334 184.003 C
116.3334 169.3364 L
142.2917 169.3364 158.1773 170.9703 171.95 174.7531 C
167.5334 188.7197 L
f
U
166.5 89 m
154.8545 86.1195 140.762 85 116 85 C
116 68 L
142.8359 68 158.4385 69.4075 171.6 72.8 C
166.5 89 L
f
u
150.5 580.9969 m
150.5 555.8303 l
150.5 525.7054 144.738 518.2327 122.7 514.7637 C
124 509.4969 L
148.4884 513.6356 156.1667 522.8588 156.1667 555.8303 C
156.1667 580.9969 L
150.5 580.9969 L
f
148.9999 480.9939 m
148.9999 455.6605 l
148.9999 426.7811 143.7052 419.9912 122 416.5273 C
124 408.9938 L
149.3694 413.2815 157.3334 422.659 157.3334 455.6605 C
157.3334 480.9939 L
148.9999 480.9939 L
f
147.5 381 m
147.5 355.5 l
147.5 327.8658 142.6726 321.7588 121.3 318.3 C
124 308.5 L
150.2504 312.9365 158.5 322.4685 158.5 355.5 C
158.5 381 L
147.5 381 L
f
146 280.9969 m
146 255.3303 l
146 228.9414 141.6399 223.5174 120.6 220.0637 C
124 207.9969 L
151.1315 212.5824 159.6667 222.2688 159.6667 255.3303 C
159.6667 280.9969 L
146 280.9969 L
f
144.5001 181.003 m
144.5001 155.1697 l
144.5001 130.0261 140.6072 125.2849 119.9 121.8363 C
124 107.503 L
152.0125 112.2374 160.8333 122.0782 160.8333 155.1697 C
160.8333 181.003 L
144.5001 181.003 L
f
U
143 81 m
143 55 l
143 31.1018 139.5745 27.0435 119.2 23.6 C
124 7 L
152.8936 11.8833 162 21.8785 162 55 C
162 81 L
143 81 L
f
u
191.3334 547.4969 m
191.3334 552.8303 L
106.6667 552.8303 L
106.6667 547.4969 L
191.3334 547.4969 L
f
191.6667 445.9938 m
191.6667 453.6606 L
106.3333 453.6606 L
106.3333 445.9938 L
191.6667 445.9938 L
f
192 343.5 m
192 353.5 L
106 353.5 L
106 343.5 L
192 343.5 L
f
192.3334 241.9969 m
192.3334 254.3303 L
105.6667 254.3303 L
105.6667 241.9969 L
192.3334 241.9969 L
f
192.6667 141.5031 m
192.6667 156.1697 L
105.3334 156.1697 L
105.3334 141.5031 L
192.6667 141.5031 L
f
U
193 40 m
193 57 L
105 57 L
105 40 L
193 40 L
f
u
391.3334 559.6636 m
306.6667 559.6636 L
306.6667 554.3302 L
350.5 554.3302 L
350.2722 523.931 346.0671 518.6432 322.7 514.9303 C
324 509.6636 L
350.1869 514.0894 355.8231 520.839 356.1667 554.3302 C
391.3334 554.3302 L
391.3334 559.6636 L
f
391.6667 459.3273 m
306.3333 459.3273 L
306.3333 451.6604 L
348.9999 451.6604 L
348.5611 425.4628 344.3257 420.445 322 416.8607 C
324 409.3272 L
350.3077 413.7734 356.668 420.9978 357.3334 451.6604 C
391.6667 451.6604 L
391.6667 459.3273 L
f
392 361 m
306 361 L
306 351 L
347.5 351 L
346.8166 326.9982 342.6186 322.2612 321.3 318.8 C
324 309 L
350.4727 313.4741 357.4692 321.1575 358.5 351 C
392 351 L
392 361 L
f
392.3334 261.6636 m
305.6667 261.6636 L
305.6667 249.3302 L
346 249.3302 L
345.0887 228.5273 340.8943 224.0658 320.6 220.7303 C
324 208.6636 L
350.6156 213.1619 358.2923 221.3122 359.6667 249.3302 C
392.3334 249.3302 L
392.3334 261.6636 L
f
392.6667 162.3363 m
305.3334 162.3363 L
305.3334 147.6697 L
344.5001 147.6697 L
343.361 130.0654 339.1701 125.8793 319.9 122.6696 C
324 108.3364 L
350.7585 112.8589 359.1153 121.476 360.8333 147.6697 C
392.6667 147.6697 L
392.6667 162.3363 L
f
U
393 63 m
305 63 L
305 46 L
343 46 L
341.6332 31.5945 337.4458 27.6838 319.2 24.6 C
324 8 L
350.9014 12.5467 359.9384 21.6307 362 46 C
393 46 L
393 63 L
f
u
372.8333 581.3302 m
372.8333 586.6636 L
318.6667 586.6636 L
318.6667 581.3302 L
372.8333 581.3302 L
f
372.6666 478.6604 m
372.6666 486.3273 L
318.3333 486.3273 L
318.3333 478.6604 L
372.6666 478.6604 L
f
369.5 378 m
369.5 388 L
318 388 L
318 378 L
369.5 378 L
f
369.3333 276.3302 m
369.3333 288.6636 L
317.6667 288.6636 L
317.6667 276.3302 L
369.3333 276.3302 L
f
368.1667 174.6697 m
368.1667 189.3363 L
317.3334 189.3363 L
317.3334 174.6697 L
368.1667 174.6697 L
f
U
367 73 m
367 90 L
317 90 L
317 73 L
367 73 L
f
u
425.6834 554.9969 m
444.4909 550.5181 465.6354 544.1602 483.9333 537.4969 C
485.8334 542.6636 L
466.7814 549.6016 445.2772 555.9763 427.0001 560.3303 C
427.0001 590.3303 L
421.1667 590.3303 L
421.1667 509.6636 L
427.0001 509.6636 L
427.0001 556.3302 L
425.6834 554.9969 L
f
427.0667 452.8938 m
445.4698 448.4797 466.0744 442.2891 483.9667 435.7938 C
486.6667 443.3273 L
468.0376 450.0901 447.0544 456.3276 429.0001 460.6606 C
429.0001 490.6606 L
420.3333 490.6606 L
420.3333 409.3272 L
429.0001 409.3272 L
429.0001 454.6604 L
427.0667 452.8938 L
f
428.45 350.8 m
446.4487 346.4506 466.5133 340.4274 484 334.1 C
487.5 344 L
469.2938 350.5878 448.8315 356.688 431 361 C
431 391 L
419.5 391 L
419.5 309 L
431 309 L
431 353 L
428.45 350.8 L
f
429.8334 248.6969 m
447.4276 244.4121 466.9522 238.5563 484.0333 232.3969 C
488.3334 244.6636 L
470.5501 251.0763 450.6087 257.0393 433.0001 261.3303 C
433.0001 291.3303 L
418.6667 291.3303 L
418.6667 208.6636 L
433.0001 208.6636 L
433.0001 251.3302 L
429.8334 248.6969 L
f
431.2166 146.6031 m
448.4065 142.383 467.3911 136.6946 484.0666 130.7031 C
489.1667 145.3363 L
471.8062 151.574 452.3858 157.3998 435 161.6697 C
435 191.6697 L
417.8334 191.6697 L
417.8334 108.3364 L
435 108.3364 L
435 149.6697 L
431.2166 146.6031 L
f
U
432.6 44.5 m
449.3854 40.3446 467.8301 34.8235 484.1 29 C
490 46 L
473.0625 52.0625 454.163 57.7511 437 62 C
437 92 L
417 92 L
417 8 L
437 8 L
437 48 L
432.6 44.5 L
f
u
196.5 581.6636 m
192.6543 587.1298 188.9687 592.1532 185 597.3303 C
181.1999 594.6136 L
185.0937 589.5282 188.5819 584.7677 192.5833 579.0802 C
196.5 581.6636 L
f
197 481.3272 m
193.0735 486.9127 189.0625 492.3689 185 497.6606 C
179.7999 494.0272 L
183.8124 488.8063 187.622 483.6135 191.6666 477.8605 C
197 481.3272 L
f
197.5 381 m
193.4926 386.7047 189.1562 392.5937 185 398 C
178.4 393.45 L
182.5312 388.0937 186.6623 382.4686 190.75 376.65 C
197.5 381 L
f
198 280.6636 m
193.9117 286.4876 189.25 292.8094 185 298.3303 C
177 292.8636 L
181.25 287.3719 185.7025 281.3145 189.8333 275.4302 C
198 280.6636 L
f
198.5 178.3364 m
194.3309 184.2796 189.3437 191.0343 185 196.6697 C
175.6 190.2864 L
179.9688 184.6593 184.7427 178.1696 188.9167 172.2197 C
198.5 178.3364 L
f
U
199 79 m
194.75 85.0625 189.4375 92.25 185 98 C
174.2 90.7 L
178.6875 84.9375 183.7829 78.0155 188 72 C
199 79 L
f
u
180.8333 577.6636 m
176.9877 583.1298 173.3021 588.1532 169.3333 593.3303 C
165.5333 590.6136 L
169.427 585.5282 172.9152 580.7677 176.9166 575.0802 C
180.8333 577.6636 L
f
180.6667 477.3272 m
176.7401 482.9127 172.7291 488.3689 168.6666 493.6606 C
163.4665 490.0272 L
167.479 484.8063 171.2886 479.6135 175.3332 473.8605 C
180.6667 477.3272 L
f
180.5 377 m
176.4926 382.7047 172.1562 388.5937 168 394 C
161.4 389.45 L
165.5312 384.0937 169.6623 378.4686 173.75 372.65 C
180.5 377 L
f
180.3333 276.6636 m
176.2451 282.4876 171.5833 288.8094 167.3333 294.3303 C
159.3333 288.8636 L
163.5833 283.3719 168.0358 277.3145 172.1666 271.4302 C
180.3333 276.6636 L
f
180.1667 174.3364 m
175.9975 180.2796 171.0104 187.0343 166.6667 192.6697 C
157.2667 186.2864 L
161.6355 180.6593 166.4094 174.1696 170.5834 168.2197 C
180.1667 174.3364 L
f
U
180 75 m
175.75 81.0625 170.4375 88.25 166 94 C
155.2 86.7 L
159.6875 80.9375 164.7829 74.0155 169 68 C
180 75 L
f
u
396.5 581.6636 m
392.6543 587.1298 388.9687 592.1532 385 597.3303 C
381.1999 594.6136 L
385.0937 589.5282 388.5819 584.7677 392.5833 579.0802 C
396.5 581.6636 L
f
397 481.3272 m
393.0735 486.9127 389.0625 492.3689 385 497.6606 C
379.7999 494.0272 L
383.8124 488.8063 387.622 483.6135 391.6666 477.8605 C
397 481.3272 L
f
397.5 379 m
393.4926 384.7047 389.1562 390.5937 385 396 C
378.4 391.45 L
382.5312 386.0937 386.6623 380.4686 390.75 374.65 C
397.5 379 L
f
398 279.6636 m
393.9117 285.4876 389.25 291.8094 385 297.3303 C
377 291.8636 L
381.25 286.3719 385.7025 280.3145 389.8333 274.4302 C
398 279.6636 L
f
398.5 179.3364 m
394.3309 185.2796 389.3437 192.0343 385 197.6697 C
375.6 191.2864 L
379.9688 185.6593 384.7427 179.1696 388.9167 173.2197 C
398.5 179.3364 L
f
U
399 79 m
394.75 85.0625 389.4375 92.25 385 98 C
374.2 90.7 L
378.6875 84.9375 383.7829 78.0155 388 72 C
399 79 L
f
u
380.8333 577.6636 m
376.9877 583.1298 373.3021 588.1532 369.3333 593.3303 C
365.5333 590.6136 L
369.427 585.5282 372.9152 580.7677 376.9166 575.0802 C
380.8333 577.6636 L
f
380.6667 477.3272 m
376.7401 482.9127 372.7291 488.3689 368.6666 493.6606 C
363.4665 490.0272 L
367.479 484.8063 371.2886 479.6135 375.3332 473.8605 C
380.6667 477.3272 L
f
380.5 375 m
376.4926 380.7047 372.1562 386.5937 368 392 C
361.4 387.45 L
365.5312 382.0937 369.6623 376.4686 373.75 370.65 C
380.5 375 L
f
380.3333 275.6636 m
376.2451 281.4876 371.5833 287.8094 367.3333 293.3303 C
359.3333 287.8636 L
363.5833 282.3719 368.0358 276.3145 372.1666 270.4302 C
380.3333 275.6636 L
f
380.1667 175.3364 m
375.9975 181.2796 371.0104 188.0343 366.6667 193.6697 C
357.2667 187.2864 L
361.6355 181.6593 366.4094 175.1696 370.5834 169.2197 C
380.1667 175.3364 L
f
U
380 75 m
375.75 81.0625 370.4375 88.25 366 94 C
355.2 86.7 L
359.6875 80.9375 364.7829 74.0155 369 68 C
380 75 L
f
u
488.3334 574.9969 m
484.4877 580.4632 480.8021 585.4865 476.8334 590.6636 C
473.0333 587.9469 L
476.9271 582.8615 480.4152 578.101 484.4167 572.4136 C
488.3334 574.9969 L
f
489.6667 474.9939 m
485.7402 480.5794 481.7292 486.0356 477.6667 491.3273 C
472.4666 487.6939 L
476.4791 482.473 480.2887 477.2802 484.3333 471.5272 C
489.6667 474.9939 L
f
491 375 m
486.9926 380.7047 482.6562 386.5937 478.5 392 C
471.9 387.45 L
476.0312 382.0937 480.1623 376.4686 484.25 370.65 C
491 375 L
f
492.3334 274.9969 m
488.2451 280.8209 483.5834 287.1428 479.3334 292.6636 C
471.3333 287.1969 L
475.5833 281.7052 480.0358 275.6478 484.1667 269.7636 C
492.3334 274.9969 L
f
493.6666 175.003 m
489.4975 180.9463 484.5104 187.7009 480.1667 193.3363 C
470.7667 186.953 L
475.1354 181.326 479.9094 174.8363 484.0833 168.8864 C
493.6666 175.003 L
f
U
495 75 m
490.75 81.0625 485.4375 88.25 481 94 C
470.2 86.7 L
474.6875 80.9375 479.7829 74.0155 484 68 C
495 75 L
f
u
470.6667 570.9969 m
466.821 576.4632 463.1354 581.4865 459.1667 586.6636 C
455.3666 583.9469 L
459.2604 578.8615 462.7485 574.101 466.75 568.4136 C
470.6667 570.9969 L
f
471.3334 470.9939 m
467.4068 476.5794 463.3959 482.0356 459.3333 487.3273 C
454.1333 483.6939 L
458.1458 478.473 461.9554 473.2802 466 467.5272 C
471.3334 470.9939 L
f
472 371 m
467.9926 376.7047 463.6562 382.5937 459.5 388 C
452.9 383.45 L
457.0312 378.0937 461.1623 372.4686 465.25 366.65 C
472 371 L
f
472.6667 270.9969 m
468.5784 276.8209 463.9167 283.1428 459.6667 288.6636 C
451.6666 283.1969 L
455.9166 277.7052 460.3691 271.6478 464.5 265.7636 C
472.6667 270.9969 L
f
473.3333 171.003 m
469.1642 176.9463 464.1771 183.7009 459.8333 189.3363 C
450.4334 182.953 L
454.8021 177.326 459.576 170.8363 463.75 164.8864 C
473.3333 171.003 L
f
U
474 71 m
469.75 77.0625 464.4375 84.25 460 90 C
449.2 82.7 L
453.6875 76.9375 458.7829 70.0155 463 64 C
474 71 L
f
u
281.2499 570.1969 m
277.9051 534.29 262.6219 520.19 224.9833 516.897 C
225.6667 511.4969 L
265.2821 514.9627 283.1359 530.5176 286.75 570.1969 C
281.2499 570.1969 L
f
279.1999 469.7939 m
275.9047 435.3685 261.1988 422.0252 224.2666 418.794 C
225.3333 410.9938 L
265.3022 414.4906 283.4474 429.9312 287.2 469.7939 C
279.1999 469.7939 L
f
277.15 369.4 m
273.9045 336.456 259.7758 323.8693 223.55 320.7 C
225 310.5 L
265.3224 314.0277 283.759 329.354 287.65 369.4 C
277.15 369.4 L
f
275.0999 268.9969 m
271.9042 237.5345 258.3527 225.7045 222.8333 222.597 C
224.6667 209.9969 L
265.3425 213.5556 284.0706 228.7676 288.1 268.9969 C
275.0999 268.9969 L
f
272.0501 168.6031 m
268.904 138.6221 255.9297 127.5487 221.1167 124.503 C
223.3334 109.503 L
264.3627 113.0926 283.3821 128.1904 287.55 168.6031 C
272.0501 168.6031 L
f
U
271 68.2 m
267.9036 39.7006 255.5066 29.3839 221.4 26.4 C
224 9 L
265.3829 12.6205 284.6937 27.604 289 68.2 C
271 68.2 L
f
u
296.5 581.4969 m
292.6543 586.9632 288.9687 591.9865 285 597.1636 C
281.1999 594.4469 L
285.0937 589.3615 288.5819 584.601 292.5833 578.9136 C
296.5 581.4969 L
f
297 481.9938 m
293.0735 487.5794 289.0625 493.0355 285 498.3272 C
279.7999 494.6938 L
283.8124 489.473 287.622 484.2802 291.6666 478.5271 C
297 481.9938 L
f
297.5 381.5 m
293.4926 387.2047 289.1562 393.0937 285 398.5 C
278.4 393.95 L
282.5312 388.5937 286.6623 382.9686 290.75 377.15 C
297.5 381.5 L
f
298 280.9969 m
293.9117 286.8209 289.25 293.1428 285 298.6636 C
277 293.1969 L
281.25 287.7052 285.7025 281.6478 289.8333 275.7636 C
298 280.9969 L
f
298.5 178.503 m
294.3309 184.4463 289.3437 191.201 285 196.8364 C
275.6 190.4531 L
279.9688 184.826 284.7427 178.3363 288.9167 172.3864 C
298.5 178.503 L
f
U
299 79 m
294.75 85.0625 289.4375 92.25 285 98 C
274.2 90.7 L
278.6875 84.9375 283.7829 78.0155 288 72 C
299 79 L
f
u
280.3334 576.9969 m
276.4877 582.4631 272.8021 587.4865 268.8333 592.6636 C
265.0333 589.9469 L
268.927 584.8615 272.4152 580.101 276.4166 574.4135 C
280.3334 576.9969 L
f
280.6667 476.9938 m
276.7402 482.5793 272.7292 488.0355 268.6667 493.3272 C
263.4666 489.6938 L
267.4791 484.473 271.2887 479.2801 275.3333 473.5271 C
280.6667 476.9938 L
f
281 376 m
276.9926 381.7047 272.6562 387.5937 268.5 393 C
261.9 388.45 L
266.0312 383.0937 270.1623 377.4686 274.25 371.65 C
281 376 L
f
281.3334 274.9969 m
277.2451 280.8209 272.5833 287.1428 268.3333 292.6636 C
260.3333 287.1969 L
264.5833 281.7052 269.0358 275.6478 273.1666 269.7635 C
281.3334 274.9969 L
f
281.6667 172.0031 m
277.4975 177.9463 272.5104 184.701 268.1667 190.3364 C
258.7667 183.9531 L
263.1355 178.326 267.9094 171.8363 272.0834 165.8864 C
281.6667 172.0031 L
f
U
282 72 m
277.75 78.0625 272.4375 85.25 268 91 C
257.2 83.7 L
261.6875 77.9375 266.7829 71.0155 271 65 C
282 72 L
f
u
95 581.6636 m
91.1544 587.1298 87.4688 592.1532 83.5 597.3303 C
79.7 594.6136 L
83.5937 589.5282 87.0819 584.7677 91.0833 579.0802 C
95 581.6636 L
f
96.0001 481.3272 m
92.0735 486.9127 88.0625 492.3689 84 497.6606 C
78.7999 494.0272 L
82.8125 488.8063 86.6221 483.6135 90.6666 477.8605 C
96.0001 481.3272 L
f
96 381 m
91.9926 386.7047 87.6562 392.5937 83.5 398 C
76.9 393.45 L
81.0312 388.0937 85.1623 382.4686 89.25 376.65 C
96 381 L
f
97 280.6636 m
92.9118 286.4876 88.25 292.8094 84 298.3303 C
76 292.8636 L
80.25 287.3719 84.7025 281.3145 88.8333 275.4302 C
97 280.6636 L
f
98 180.3364 m
93.8308 186.2796 88.8437 193.0343 84.5 198.6697 C
75.1 192.2864 L
79.4688 186.6593 84.2427 180.1696 88.4167 174.2197 C
98 180.3364 L
f
U
99 80 m
94.75 86.0625 89.4375 93.25 85 99 C
74.2 91.7 L
78.6875 85.9375 83.7829 79.0155 88 73 C
99 80 L
f
u
78.5 577.6636 m
74.6543 583.1298 70.9687 588.1532 67 593.3303 C
63.1999 590.6136 L
66.8533 585.8434 70.1755 581.322 73.8381 576.1361 C
78.5 577.6636 L
f
79 477.3272 m
75.0735 482.9127 71.0625 488.3689 67 493.6606 C
61.7999 490.0272 L
65.6201 485.0585 69.297 480.057 73.0704 474.7052 C
79 477.3272 L
f
78.5 377 m
74.4926 382.7047 70.1562 388.5937 66 394 C
59.4 389.45 L
63.387 384.2829 67.4185 378.8012 71.3029 373.2835 C
78.5 377 L
f
79 276.6636 m
74.9117 282.4876 70.25 288.8094 66 294.3303 C
58 288.8636 L
62.1538 283.498 66.5399 277.5362 70.5352 271.8526 C
79 276.6636 L
f
79.5 176.3364 m
75.3309 182.2796 70.3437 189.0343 66 194.6697 C
56.6 188.2864 L
60.9207 182.7223 65.6614 176.2805 69.7677 170.4309 C
79.5 176.3364 L
f
U
80 76 m
75.75 82.0625 70.4375 89.25 66 95 C
55.2 87.7 L
59.6875 81.9375 64.7829 75.0155 69 69 C
80 76 L
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
