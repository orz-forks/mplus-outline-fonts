%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (2540.eps)
%%CreationDate: (1/12/05) (11:57 AM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
500 600 m
500 700 L
400 700 L
400 600 L
500 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
400 600 m
400 700 L
300 700 L
300 600 L
400 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
500 500 m
500 600 L
400 600 L
400 500 L
500 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
400 500 m
400 600 L
300 600 L
300 500 L
400 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
0 O
0 g
1 D
172.7 686.3 m
155.9588 680.6127 138.8649 678 118 678 C
118 675 L
139.5707 675 156.8713 677.7656 173.7 683.5 C
172.7 686.3 L
f
425.3 657.1 m
444.512 652.5566 466.1965 646.0313 484.9 639.2 C
486 642 L
466.5251 649.1131 444.5 655.625 426 660 C
426 690 L
423 690 L
423 610 L
426 610 L
426 658 L
425.3 657.1 L
f
12.1 646.9 m
25.5635 659.7781 32.2 672.9336 34 691 C
31 691 L
29.3134 674.0718 22.7961 661.2397 10 649 C
12.1 646.9 L
f
152 680 m
152 655 l
152 623.6298 145.7707 615.4741 123.4 612 C
124 609 L
147.6073 612.9898 155 622.0585 155 655 C
155 680 L
152 680 L
f
191 648 m
191 651 L
107 651 L
107 648 L
191 648 L
f
210 681 m
212.9732 670.2295 216.375 657.3125 219 646 C
221.9 646.6 L
219.0043 659.079 215.4214 672.6662 212.9 681.8 C
210 681 L
f
238.1 684.2 m
241.0732 673.4295 244.475 660.5125 247.1 649.2 C
250 649.8 L
247.1043 662.279 243.5214 675.8662 241 685 C
238.1 684.2 L
f
391 655 m
391 658 L
307 658 L
307 655 L
352 655 L
352 621.4019 347.7914 615.8387 323.4 612 C
324 609 L
350.044 613.4016 355 619.6843 355 655 C
391 655 L
f
373 682 m
373 685 L
319 685 L
319 682 L
373 682 L
f
283.7 674.3 m
281.0802 632.9815 264.7178 617.4136 225.7 614 C
226 611 L
266.7219 614.5627 284.1743 631.492 286.7 674.3 C
283.7 674.3 L
f
98 684 m
94.75 689.25 91.875 693.25 88 698 C
85.6 696.2 L
89.4897 691.4319 92.2563 687.5783 95.4 682.5 C
98 684 L
f
198 684 m
194.75 689.25 191.875 693.25 188 698 C
185.6 696.2 L
189.4897 691.4319 192.2563 687.5783 195.4 682.5 C
198 684 L
f
186.6 680.7 m
183.5234 685.6148 180.703 689.4608 177 694 C
174.6 692.2 L
178.2965 687.6688 181.0445 683.8155 184 679.1 C
186.6 680.7 L
f
297 684 m
293.75 689.25 290.875 693.25 287 698 C
284.6 696.2 L
288.4897 691.4319 291.2563 687.5783 294.4 682.5 C
297 684 L
f
285.6 680.7 m
282.5234 685.6148 279.703 689.4608 276 694 C
273.6 692.2 L
277.2965 687.6688 280.0445 683.8155 283 679.1 C
285.6 680.7 L
f
398 684 m
394.75 689.25 391.875 693.25 388 698 C
385.6 696.2 L
389.4897 691.4319 392.2563 687.5783 395.4 682.5 C
398 684 L
f
386.6 680.7 m
383.5234 685.6148 380.703 689.4608 377 694 C
374.6 692.2 L
378.2965 687.6688 381.0445 683.8155 384 679.1 C
386.6 680.7 L
f
484 673 m
480.5 678.375 476.875 683.25 473 688 C
470.6 686.2 L
474.6415 681.2459 478.2671 676.3648 481.5 671.4 C
484 673 L
f
471.4 668.9 m
468.0824 673.9223 464.658 678.516 461 683 C
458.6 681.2 L
462.2734 676.6971 465.69 672.1491 468.9 667.3 C
471.4 668.9 L
f
77 677.1 m
76.7924 634.7392 58.7068 616.4547 15.7 613 C
16 610 L
60.0391 613.5375 80 632.8747 80 678 C
29 678 L
29 675 L
79 675 L
77 677.1 L
f
u
117.3334 579.0015 m
117.3334 573.6682 L
139.0639 573.6682 156.426 576.2141 173.5997 581.5552 C
172.2664 586.6715 L
155.3538 581.4063 138.3403 579.0015 117.3334 579.0015 C
f
116.6667 479.9985 m
116.6667 472.3318 L
138.5571 472.3318 155.9806 474.658 173.4993 479.6058 C
171.8328 487.0384 L
154.7487 482.1953 137.8157 479.9985 116.6667 479.9985 C
f
U
116 381 m
116 371 L
138.0503 371 155.5353 373.1066 173.399 377.6611 C
171.3992 387.4099 L
154.1437 382.9889 137.2912 381 116 381 C
f
u
174.5667 288.097 m
156.6946 283.8679 139.6216 281.997 117.6667 281.997 C
117.6667 269.6636 L
140.3989 269.6636 158.2481 271.6429 176.9 276.0302 C
174.5667 288.097 L
f
U
u
174.2833 188.5485 m
156.1286 184.6839 139.0608 182.9985 116.8333 182.9985 C
116.8333 168.3318 L
139.8559 168.3318 157.8423 170.1145 176.95 174.1651 C
174.2833 188.5485 L
f
U
174 89 m
155.5625 85.5 138.5 84 116 84 C
116 67 L
139.313 67 157.4365 68.5862 177 72.3 C
174 89 L
f
u
150.1667 580.0015 m
150.1667 554.8348 l
150.1667 524.71 144.4047 517.2371 122.3667 513.7682 C
123.6667 508.5015 L
148.155 512.6402 155.8333 521.8633 155.8333 554.8348 C
155.8333 580.0015 L
150.1667 580.0015 L
f
148.3333 479.9985 m
148.3333 454.6651 l
148.3333 425.7856 143.0386 418.9957 121.3333 415.5318 C
123.3333 407.9985 L
148.7027 412.2861 156.6667 421.6636 156.6667 454.6651 C
156.6667 479.9985 L
148.3333 479.9985 L
f
U
u
146.5 380 m
146.5 354.5 l
146.5 326.8658 141.6726 320.7588 120.3 317.3 C
123 307.5 L
149.2504 311.9365 157.5 321.4685 157.5 354.5 C
157.5 380 L
146.5 380 L
f
147 279.9969 m
147 254.3303 l
147 227.9414 142.6399 222.5174 121.6 219.0637 C
125 206.9969 L
152.1315 211.5824 160.6667 221.2688 160.6667 254.3303 C
160.6667 279.9969 L
147 279.9969 L
f
U
u
145 179.9985 m
145 154.1651 l
145 129.0216 141.1072 124.2804 120.4 120.8318 C
124.5 106.4985 L
152.5126 111.2328 161.3334 121.0736 161.3334 154.1651 C
161.3334 179.9985 L
145 179.9985 L
f
U
143 80 m
143 54 l
143 30.1018 139.5745 26.0435 119.2 22.6 C
124 6 L
152.8936 10.8833 162 20.8785 162 54 C
162 80 L
143 80 L
f
u
191 546.5015 m
191 551.8348 L
106.3334 551.8348 L
106.3334 546.5015 L
191 546.5015 L
f
191 444.9984 m
191 452.6651 L
105.6667 452.6651 L
105.6667 444.9984 L
191 444.9984 L
f
U
u
191 343.5 m
191 353.5 L
105 353.5 L
105 343.5 L
191 343.5 L
f
193.3334 241.9969 m
193.3334 254.3303 L
106.6667 254.3303 L
106.6667 241.9969 L
193.3334 241.9969 L
f
U
u
193.1667 140.4984 m
193.1667 155.1651 L
105.8333 155.1651 L
105.8333 140.4984 L
193.1667 140.4984 L
f
U
193 39 m
193 56 L
105 56 L
105 39 L
193 39 L
f
u
426.5167 555.3302 m
445.3242 550.8515 466.4687 544.4936 484.7666 537.8302 C
486.6667 542.997 L
467.6147 549.935 446.1105 556.3096 427.8334 560.6636 C
427.8334 590.3303 L
422 590.3303 L
422 509.6636 L
427.8334 509.6636 L
427.8334 556.6636 L
426.5167 555.3302 L
f
427.7334 453.5605 m
446.1365 449.1464 466.741 442.9558 484.6333 436.4605 C
487.3334 443.9939 L
468.7043 450.7568 447.7211 456.9943 429.6668 461.3273 C
429.6668 490.6606 L
420.9999 490.6606 L
420.9999 409.3272 L
429.6668 409.3272 L
429.6668 455.3271 L
427.7334 453.5605 L
f
428.95 351.8 m
446.9487 347.4506 467.0133 341.4274 484.5 335.1 C
488 345 L
469.7938 351.5878 449.3315 357.688 431.5 362 C
431.5 391 L
420 391 L
420 309 L
431.5 309 L
431.5 354 L
428.95 351.8 L
f
430.1667 250.0302 m
447.7609 245.7455 467.2855 239.8896 484.3666 233.7302 C
488.6667 245.997 L
470.8834 252.4097 450.942 258.3727 433.3334 262.6636 C
433.3334 291.3303 L
419 291.3303 L
419 208.6636 L
433.3334 208.6636 L
433.3334 252.6636 L
430.1667 250.0302 L
f
431.3833 148.2698 m
448.5731 144.0497 467.5578 138.3612 484.2333 132.3697 C
489.3333 147.003 L
471.9729 153.2406 452.5524 159.0664 435.1666 163.3363 C
435.1666 191.6697 L
418 191.6697 L
418 108.3364 L
435.1666 108.3364 L
435.1666 151.3364 L
431.3833 148.2698 L
f
U
432.6 46.5 m
449.3854 42.3446 467.8301 36.8235 484.1 31 C
490 48 L
473.0625 54.0625 454.163 59.7511 437 64 C
437 92 L
417 92 L
417 8 L
437 8 L
437 50 L
432.6 46.5 L
f
u
485.3334 573.2703 m
481.8326 578.816 478.2308 583.8813 474.3667 588.8303 C
470.5307 586.3223 L
474.4817 581.2841 478.1104 576.183 481.378 571.0009 C
485.3334 573.2703 L
f
486.6667 473.5406 m
483.1652 479.257 479.5867 484.5127 475.7334 489.6606 C
470.4613 486.4446 L
474.3219 481.3222 477.9536 476.0012 481.256 470.6019 C
486.6667 473.5406 L
f
488 373.82 m
484.4977 379.707 480.9423 385.1531 477.1 390.5 C
470.392 386.576 L
474.1622 381.3696 477.7969 375.8286 481.134 370.212 C
488 373.82 L
f
489.3334 274.0903 m
485.8303 280.148 482.2982 285.7845 478.4667 291.3303 C
470.3226 286.6983 L
474.0024 281.4078 477.6402 275.6469 481.012 269.8129 C
489.3334 274.0903 L
f
490.6666 174.3697 m
487.1628 180.5981 483.6539 186.4249 479.8333 192.1697 C
470.2533 186.8297 L
473.8427 181.4551 477.4835 175.4743 480.89 169.423 C
490.6666 174.3697 L
f
U
492 74.64 m
488.4954 81.0391 485.0097 87.0563 481.2 93 C
470.184 86.952 L
473.6829 81.4933 477.3268 75.2925 480.768 69.024 C
492 74.64 L
f
u
472.0253 569.2668 m
468.6883 574.4973 465.2652 579.3081 461.5947 584.0156 C
457.7953 581.5278 L
461.428 576.8838 464.8703 572.081 468.1074 567.0162 C
472.0253 569.2668 L
f
472.6507 469.6337 m
469.2941 475.0723 465.8725 480.1003 462.1894 485.0313 C
456.9907 481.8556 L
460.5826 477.0705 464.0507 472.0129 467.3148 466.7324 C
472.6507 469.6337 L
f
473.2759 370.0096 m
469.8999 375.6563 466.4797 380.9016 462.784 386.056 C
456.1862 382.1925 L
459.7373 377.2663 463.2311 371.9539 466.5223 366.4578 C
473.2759 370.0096 L
f
473.9013 270.3765 m
470.5058 276.2313 467.0869 281.6938 463.3787 287.0716 C
455.3815 282.5203 L
458.8919 277.453 462.4114 271.8858 465.7297 266.174 C
473.9013 270.3765 L
f
474.5265 170.7524 m
471.1116 176.8154 467.6941 182.495 463.9733 188.0963 C
454.5769 182.8572 L
458.0466 177.6488 461.5918 171.8268 464.9372 165.8994 C
474.5265 170.7524 L
f
U
475.1519 71.1193 m
471.7175 77.3904 468.3014 83.2872 464.568 89.112 C
453.7723 83.185 L
457.2012 77.8355 460.7722 71.7587 464.1446 65.6156 C
475.1519 71.1193 L
f
70.4 639.7 m
57.6875 646.125 44.2024 652.515 31.2 658.3 C
29.9 655.6 L
43 649.75 56.5052 643.315 69 637 C
70.4 639.7 L
f
85.2 682.7 m
82.1234 687.6148 79.303 691.4608 75.6 696 C
73.2 694.2 L
76.8965 689.6688 79.6445 685.8155 82.6 681.1 C
85.2 682.7 L
f
u
209.5 580.8303 m
212.4732 570.0598 215.875 557.1428 218.5 545.8303 C
223.8667 546.9136 L
221.005 559.2461 217.4137 572.8334 214.8334 582.1636 C
209.5 580.8303 L
f
209 480.6605 m
211.9732 469.8901 215.375 456.973 218 445.6605 C
225.8334 447.2272 L
223.0057 459.4133 219.406 473.0005 216.7668 482.5272 C
209 480.6605 L
f
208.5 380.5 m
211.4732 369.7295 214.875 356.8125 217.5 345.5 C
227.8 347.55 L
225.0063 359.5895 221.3982 373.1768 218.7 382.9 C
208.5 380.5 L
f
208 280.3303 m
210.9732 269.5598 214.375 256.6428 217 245.3303 C
229.7667 247.8636 L
227.007 259.7567 223.3905 273.344 220.6334 283.2636 C
208 280.3303 L
f
207.5 180.1697 m
210.4732 169.3992 213.875 156.4822 216.5 145.1697 C
231.7333 148.1864 L
229.0075 159.933 225.3827 173.5203 222.5666 183.6364 C
207.5 180.1697 L
f
U
207 80 m
209.9732 69.2295 213.375 56.3125 216 45 C
233.7 48.5 L
231.0082 60.1001 227.375 73.6875 224.5 84 C
207 80 L
f
u
237.5833 583.9969 m
240.5565 573.2264 243.9583 560.3094 246.5833 548.9969 C
251.9501 550.0803 L
249.0883 562.4128 245.4971 576 242.9167 585.3303 C
237.5833 583.9969 L
f
237.0666 483.7939 m
240.0398 473.0234 243.4416 460.1064 246.0666 448.7939 C
253.9001 450.3606 L
251.0724 462.5466 247.4727 476.1339 244.8334 485.6606 C
237.0666 483.7939 L
f
236.55 383.6 m
239.5232 372.8295 242.925 359.9125 245.55 348.6 C
255.85 350.65 L
253.0563 362.6895 249.4482 376.2768 246.75 386 C
236.55 383.6 L
f
236.0333 283.3969 m
239.0065 272.6264 242.4083 259.7094 245.0333 248.3969 C
257.8001 250.9303 L
255.0403 262.8234 251.4239 276.4107 248.6667 286.3303 C
236.0333 283.3969 L
f
235.5167 183.203 m
238.4899 172.4326 241.8917 159.5156 244.5167 148.203 C
259.7499 151.2197 L
257.0242 162.9663 253.3993 176.5537 250.5833 186.6697 C
235.5167 183.203 L
f
U
235 83 m
237.9732 72.2295 241.375 59.3125 244 48 C
261.7 51.5 L
259.0082 63.1001 255.375 76.6875 252.5 87 C
235 83 L
f
u
391.1667 558.5015 m
306.5 558.5015 L
306.5 553.1682 L
350.3334 553.1682 L
350.1056 522.7688 345.9005 517.481 322.5334 513.7682 C
323.8333 508.5015 L
350.0202 512.9273 355.6564 519.6769 356 553.1682 C
391.1667 553.1682 L
391.1667 558.5015 L
f
391.3333 458.9985 m
306 458.9985 L
306 451.3318 L
348.6667 451.3318 L
348.211 424.1313 344.0095 419.1188 321.6666 415.5318 C
323.6667 407.9985 L
349.9965 412.4484 356.3128 419.6649 357 451.3318 C
391.3333 451.3318 L
391.3333 458.9985 L
f
U
u
391.5 359.5 m
305.5 359.5 L
305.5 349.5 L
347 349.5 L
346.3166 325.4982 342.1186 320.7612 320.8 317.3 C
323.5 307.5 L
349.9727 311.9741 356.9692 319.6575 358 349.5 C
391.5 349.5 L
391.5 359.5 L
f
394 259.9969 m
307.3333 259.9969 L
307.3333 247.6635 L
347.6666 247.6635 L
346.7554 226.8606 342.5609 222.399 322.2666 219.0637 C
325.6667 206.9969 L
352.2823 211.4952 359.9589 219.6455 361.3334 247.6635 C
394 247.6635 L
394 259.9969 L
f
U
u
394 160.4985 m
306.6667 160.4985 L
306.6667 145.8318 L
345.8333 145.8318 L
344.6943 128.2276 340.5034 124.0413 321.2333 120.8318 C
325.3333 106.4985 L
352.0918 111.0209 360.4487 119.6381 362.1667 145.8318 C
394 145.8318 L
394 160.4985 L
f
U
394 61 m
306 61 L
306 44 L
344 44 L
342.6332 29.5945 338.4458 25.6837 320.2 22.6 C
325 6 L
351.9014 10.5466 360.9384 19.6307 363 44 C
394 44 L
394 61 L
f
u
372.5 580.1682 m
372.5 585.5015 L
318.5 585.5015 L
318.5 580.1682 L
372.5 580.1682 L
f
372 478.3318 m
372 485.9985 L
318 485.9985 L
318 478.3318 L
372 478.3318 L
f
U
u
371.5 376.5 m
371.5 386.5 L
317.5 386.5 L
317.5 376.5 L
371.5 376.5 L
f
376 274.6635 m
376 286.9969 L
319.3333 286.9969 L
319.3333 274.6635 L
376 274.6635 L
f
U
u
376 172.8318 m
376 187.4985 L
318.6667 187.4985 L
318.6667 172.8318 L
376 172.8318 L
f
U
376 71 m
376 88 L
318 88 L
318 71 L
376 71 L
f
u
297.1667 583.8903 m
293.9608 589.1738 291.07 593.3614 287.3 598.1636 C
283.736 595.8049 L
287.4741 591.0565 290.297 586.9648 293.4053 581.8429 C
297.1667 583.8903 L
f
297.3333 483.7806 m
294.1716 489.0976 291.2651 493.4729 287.6 498.3272 C
282.8719 495.4099 L
286.4586 490.6812 289.3377 486.3514 292.4106 481.1859 C
297.3333 483.7806 L
f
297.5 383.68 m
294.3823 389.0305 291.4601 393.5934 287.9 398.5 C
282.008 395.024 L
285.4431 390.315 288.3785 385.7471 291.416 380.5381 C
297.5 383.68 L
f
297.6667 283.5703 m
294.5931 288.9544 291.6552 293.7049 288.2 298.6636 C
281.1439 294.6289 L
284.4276 289.9396 287.4192 285.1336 290.4213 279.881 C
297.6667 283.5703 L
f
297.8333 183.4697 m
294.8038 188.8873 291.8502 193.8255 288.5 198.8364 C
280.28 194.2431 L
283.4121 189.5735 286.46 184.5294 289.4267 179.2332 C
297.8333 183.4697 L
f
U
298 83.36 m
295.0146 88.8111 292.0453 93.9369 288.8 99 C
279.416 93.848 L
282.3966 89.1981 285.5007 83.9159 288.432 78.5761 C
298 83.36 L
f
u
285.0746 580.9738 m
282.0232 585.9598 279.1879 590.002 275.572 594.6116 C
272.0392 592.2701 L
275.6065 587.7346 278.4035 583.6608 281.3452 578.859 C
285.0746 580.9738 L
f
284.5493 481.2475 m
281.523 486.3047 278.6728 490.5432 275.144 495.2233 C
270.4785 492.3403 L
273.9165 487.8005 276.7625 483.5061 279.6904 478.6181 C
284.5493 481.2475 L
f
284.024 381.5304 m
281.0229 386.6588 278.1577 391.0935 274.716 395.844 C
268.9179 392.4195 L
272.2266 387.8755 275.1216 383.3606 278.0357 378.3863 C
284.024 381.5304 L
f
283.4986 281.8042 m
280.5226 287.0038 277.6426 291.6347 274.288 296.4556 C
267.3571 292.4897 L
270.5366 287.9414 273.4806 283.2059 276.3809 278.1453 C
283.4986 281.8042 L
f
282.9733 182.0871 m
280.0225 187.3579 277.1275 192.185 273.86 197.0764 C
265.7965 192.569 L
268.8467 188.0164 271.8397 183.0604 274.7262 177.9136 C
282.9733 182.0871 L
f
U
282.448 82.3609 m
279.5223 87.7029 276.6124 92.7262 273.432 97.688 C
264.2358 92.6391 L
267.1567 88.0822 270.1987 82.9057 273.0714 77.6726 C
282.448 82.3609 L
f
u
198.3333 584.0615 m
195.1274 589.345 192.2367 593.5327 188.4667 598.3348 C
184.9027 595.9762 L
188.6408 591.2278 191.4637 587.1361 194.572 582.0142 C
198.3333 584.0615 L
f
198.6667 484.1185 m
195.5049 489.4355 192.5984 493.8108 188.9333 498.6651 C
184.2053 495.7478 L
187.792 491.0191 190.6711 486.6893 193.744 481.5238 C
198.6667 484.1185 L
f
U
u
199 384.18 m
195.8823 389.5305 192.9601 394.0934 189.4 399 C
183.508 395.524 L
186.9431 390.815 189.8785 386.2471 192.916 381.0381 C
199 384.18 L
f
197 283.9066 m
193.9264 289.2907 190.9885 294.0413 187.5333 299 C
180.4773 294.9653 L
183.7609 290.276 186.7525 285.47 189.7546 280.2174 C
197 283.9066 L
f
U
u
198 183.6333 m
194.9705 189.0509 192.0169 193.9891 188.6667 199 C
180.4466 194.4066 L
183.5788 189.737 186.6266 184.6929 189.5933 179.3967 C
198 183.6333 L
f
U
199 83.36 m
196.0146 88.8111 193.0453 93.9369 189.8 99 C
180.416 93.848 L
183.3966 89.1981 186.5007 83.9159 189.432 78.5761 C
199 83.36 L
f
u
186.4413 580.8117 m
183.3899 585.7976 180.5546 589.8399 176.9387 594.4495 C
173.406 592.108 L
176.9732 587.5726 179.7702 583.4987 182.7119 578.697 C
186.4413 580.8117 L
f
186.2826 480.9188 m
183.2564 485.976 180.4061 490.2144 176.8773 494.8945 C
172.2119 492.0115 L
175.6499 487.4717 178.4959 483.1774 181.4238 478.2893 C
186.2826 480.9188 L
f
U
u
186.124 381.0304 m
183.1228 386.1588 180.2577 390.5935 176.816 395.344 C
171.0179 391.9195 L
174.3266 387.3755 177.2216 382.8606 180.1357 377.8863 C
186.124 381.0304 L
f
182.232 283.1406 m
179.256 288.3402 176.3759 292.9711 173.0213 297.792 C
166.0905 293.8261 L
169.2699 289.2777 172.2139 284.5423 175.1142 279.4817 C
182.232 283.1406 L
f
U
u
182.84 182.7507 m
179.8891 188.0216 176.9942 192.8486 173.7267 197.74 C
165.6631 193.2326 L
168.7133 188.68 171.7063 183.724 174.5928 178.5772 C
182.84 182.7507 L
f
U
183.448 82.3609 m
180.5223 87.7029 177.6124 92.7262 174.432 97.688 C
165.2358 92.6391 L
168.1567 88.0822 171.1987 82.9057 174.0714 77.6726 C
183.448 82.3609 L
f
u
398.3333 583.8948 m
395.1274 589.1784 392.2367 593.366 388.4667 598.1682 C
384.9027 595.8095 L
388.6408 591.0611 391.4637 586.9694 394.572 581.8475 C
398.3333 583.8948 L
f
398.6667 483.7851 m
395.5049 489.1022 392.5984 493.4774 388.9333 498.3318 C
384.2053 495.4145 L
387.792 490.6858 390.6711 486.3559 393.744 481.1905 C
398.6667 483.7851 L
f
U
u
399 383.68 m
395.8823 389.0305 392.9601 393.5934 389.4 398.5 C
383.508 395.024 L
386.9431 390.315 389.8785 385.7471 392.916 380.5381 C
399 383.68 L
f
397 283.9066 m
393.9264 289.2907 390.9885 294.0413 387.5333 299 C
380.4773 294.9653 L
383.7609 290.276 386.7525 285.47 389.7546 280.2174 C
397 283.9066 L
f
U
u
397.5 183.6333 m
394.4705 189.0509 391.5169 193.9891 388.1667 199 C
379.9466 194.4066 L
383.0788 189.737 386.1266 184.6929 389.0933 179.3967 C
397.5 183.6333 L
f
U
398 83.36 m
395.0146 88.8111 392.0453 93.9369 388.8 99 C
379.416 93.848 L
382.3966 89.1981 385.5007 83.9159 388.432 78.5761 C
398 83.36 L
f
u
386.2413 580.9783 m
383.1899 585.9643 380.3546 590.0065 376.7387 594.6162 C
373.206 592.2747 L
376.7732 587.7392 379.5702 583.6654 382.5119 578.8636 C
386.2413 580.9783 L
f
385.8827 481.2521 m
382.8564 486.3093 380.0061 490.5477 376.4773 495.2278 C
371.8119 492.3448 L
375.2499 487.8051 378.0959 483.5107 381.0238 478.6227 C
385.8827 481.2521 L
f
U
u
385.524 381.5304 m
382.5229 386.6588 379.6577 391.0935 376.216 395.844 C
370.4179 392.4195 L
373.7266 387.8755 376.6216 383.3606 379.5357 378.3863 C
385.524 381.5304 L
f
382.832 282.1406 m
379.856 287.3402 376.9759 291.9711 373.6213 296.792 C
366.6905 292.8261 L
369.8699 288.2777 372.8139 283.5423 375.7142 278.4817 C
382.832 282.1406 L
f
U
u
382.64 182.2507 m
379.6891 187.5216 376.7941 192.3486 373.5267 197.24 C
365.4631 192.7326 L
368.5133 188.18 371.5063 183.224 374.3928 178.0772 C
382.64 182.2507 L
f
U
382.448 82.3609 m
379.5223 87.7029 376.6124 92.7262 373.432 97.688 C
364.2358 92.6391 L
367.1567 88.0822 370.1987 82.9057 373.0714 77.6726 C
382.448 82.3609 L
f
u
282.0166 574.1136 m
279.4664 533.8724 263.7678 519.0943 225.3166 515.7303 C
226 510.3302 L
267.29 513.9427 284.947 530.8767 287.5167 574.1136 C
282.0166 574.1136 L
f
280.3332 473.9272 m
277.8526 434.7633 262.8177 420.7751 224.9333 417.4607 C
226 409.6605 L
267.858 413.3226 285.7197 430.2614 288.3334 473.9272 C
280.3332 473.9272 L
f
278.65 373.75 m
276.2389 335.6632 261.8678 322.4648 224.55 319.2 C
226 309 L
268.426 312.7118 286.4923 329.6553 289.15 373.75 C
278.65 373.75 L
f
276.9666 273.5636 m
274.6251 236.5541 260.9178 224.1456 224.1667 220.9303 C
226 208.3302 L
268.9941 212.0918 287.265 229.04 289.9667 273.5636 C
276.9666 273.5636 L
f
275.2834 173.3864 m
273.0114 137.4541 259.9678 125.8354 223.7833 122.6697 C
226 107.6697 L
269.5621 111.4809 288.0376 128.4339 290.7833 173.3864 C
275.2834 173.3864 L
f
U
273.6 73.2 m
271.3976 38.345 259.0178 27.5161 223.4 24.4 C
226 7 L
270.1302 10.8609 288.8103 27.8186 291.6 73.2 C
273.6 73.2 L
f
u
13 545.3136 m
26.7113 558.5373 33.5874 572.3019 35.4501 590.9969 C
30 590.9969 L
28.3134 574.0687 21.7961 561.2366 9 548.9969 C
13 545.3136 L
f
13.9001 443.7271 m
27.8591 457.2966 34.9748 471.6702 36.9001 490.9939 C
28.9999 490.9939 L
27.3133 474.0657 20.796 461.2336 7.9999 448.9939 C
13.9001 443.7271 L
f
14.8 342.15 m
29.0068 356.065 36.3621 371.0477 38.35 391 C
28 391 L
26.3134 374.0718 19.7961 361.2397 7 349 C
14.8 342.15 L
f
15.7 240.5636 m
30.1545 254.8243 37.7496 270.4161 39.8 290.9969 C
27 290.9969 L
25.3134 274.0688 18.7961 261.2366 6 248.9969 C
15.7 240.5636 L
f
16.6 138.9864 m
31.3022 153.5928 39.1369 169.7936 41.25 191.003 C
26 191.003 L
24.3134 174.0749 17.7961 161.2427 5 149.003 C
16.6 138.9864 L
f
U
17.5 37.4 m
32.45 52.352 40.5243 69.1619 42.7 91 C
25 91 L
23.3134 74.0718 16.7961 61.2397 4 49 C
17.5 37.4 L
f
u
75.1666 576.1469 m
74.8377 534.6916 58.0233 517.7368 15.6166 514.3303 C
16.1667 508.9969 L
61.0019 512.5984 80.8334 531.7522 80.8334 577.6636 C
28.8333 577.6636 L
28.8333 572.4135 L
78.8333 572.4135 L
75.1666 576.1469 L
f
73.3332 475.1938 m
72.883 434.644 57.3399 419.0189 15.5333 415.6606 C
16.3333 407.9938 L
61.9647 411.6593 81.6667 430.6297 81.6667 477.3272 C
28.6667 477.3272 L
28.6667 469.8271 L
78.6667 469.8271 L
73.3332 475.1938 L
f
71.5 374.25 m
70.9284 334.6056 56.6565 320.3101 15.45 317 C
16.5 307 L
62.9275 310.7294 82.5 329.5164 82.5 377 C
28.5 377 L
28.5 367.25 L
78.5 367.25 L
71.5 374.25 L
f
69.6666 273.2969 m
68.9737 234.558 55.973 221.5922 15.3667 218.3303 C
16.6667 205.9969 L
63.8903 209.7903 83.3334 228.3939 83.3334 276.6636 C
28.3333 276.6636 L
28.3333 264.6635 L
78.3333 264.6635 L
69.6666 273.2969 L
f
67.8334 172.3531 m
67.0192 134.5195 55.2897 122.8834 15.2833 119.6697 C
16.8333 105.0031 L
64.8531 108.8605 84.1667 127.2807 84.1667 176.3364 C
28.1667 176.3364 L
28.1667 162.0865 L
78.1667 162.0865 L
67.8334 172.3531 L
f
U
66 71.4 m
65.0645 34.472 54.6062 24.1655 15.2 21 C
17 4 L
65.8159 7.9214 85 26.1582 85 76 C
28 76 L
28 59.5 L
78 59.5 L
66 71.4 L
f
u
98.1667 583.8903 m
94.9608 589.1738 92.07 593.3614 88.3 598.1636 C
84.736 595.8049 L
88.4741 591.0565 91.297 586.9648 94.4053 581.8429 C
98.1667 583.8903 L
f
98.3333 483.7806 m
95.1716 489.0976 92.2651 493.4729 88.6 498.3272 C
83.8719 495.4099 L
87.4586 490.6812 90.3377 486.3514 93.4106 481.1859 C
98.3333 483.7806 L
f
98.5 383.68 m
95.3823 389.0305 92.4601 393.5934 88.9 398.5 C
83.008 395.024 L
86.4431 390.315 89.3785 385.7471 92.416 380.5381 C
98.5 383.68 L
f
98.6667 283.5703 m
95.5931 288.9544 92.6552 293.7049 89.2 298.6636 C
82.1439 294.6289 L
85.4276 289.9396 88.4192 285.1336 91.4213 279.881 C
98.6667 283.5703 L
f
98.8333 183.4697 m
95.8038 188.8873 92.8502 193.8255 89.5 198.8364 C
81.28 194.2431 L
84.4121 189.5735 87.46 184.5294 90.4267 179.2332 C
98.8333 183.4697 L
f
U
99 83.36 m
96.0146 88.8111 93.0453 93.9369 89.8 99 C
80.416 93.848 L
83.3966 89.1981 86.5007 83.9159 89.432 78.5761 C
99 83.36 L
f
u
84.908 582.6404 m
81.8565 587.6264 79.0212 591.6686 75.4053 596.2783 C
71.8726 593.9368 L
75.4398 589.4013 78.2368 585.3274 81.1785 580.5257 C
84.908 582.6404 L
f
84.616 482.5809 m
81.5897 487.6381 78.7394 491.8765 75.2106 496.5566 C
70.5452 493.6736 L
73.9831 489.1338 76.8291 484.8394 79.757 479.9514 C
84.616 482.5809 L
f
84.324 382.5304 m
81.3229 387.6588 78.4577 392.0935 75.016 396.844 C
69.2179 393.4195 L
72.5266 388.8755 75.4216 384.3606 78.3357 379.3863 C
84.324 382.5304 L
f
84.032 282.4709 m
81.056 287.6705 78.1759 292.3013 74.8213 297.1223 C
67.8905 293.1563 L
71.0699 288.608 74.0139 283.8726 76.9142 278.812 C
84.032 282.4709 L
f
83.74 182.4205 m
80.7891 187.6913 77.8942 192.5184 74.6267 197.4097 C
66.5632 192.9023 L
69.6134 188.3497 72.6064 183.3937 75.4929 178.2469 C
83.74 182.4205 L
f
U
83.448 82.3609 m
80.5223 87.7029 77.6124 92.7262 74.432 97.688 C
65.2358 92.6391 L
68.1567 88.0822 71.1987 82.9057 74.0714 77.6726 C
83.448 82.3609 L
f
u
30 552.9969 m
42.8474 547.2361 56.171 540.8531 68.4667 534.5969 C
71 539.3303 L
58.5848 545.6514 45.2762 551.9962 32.3834 557.7636 C
30 552.9969 L
f
30.1 450.3937 m
42.6947 444.7223 55.8368 438.3912 67.9333 432.1938 C
71.6 438.9605 L
59.4821 445.1778 46.3499 451.4775 33.5667 457.2272 C
30.1 450.3937 L
f
30.2 347.8 m
42.5421 342.2178 55.5026 335.9387 67.4 329.8 C
72.2 338.6 L
60.3794 344.7133 47.4236 350.9679 34.75 356.7 C
30.2 347.8 L
f
30.3 245.1968 m
42.3895 239.7039 55.1684 233.4769 66.8666 227.3969 C
72.8 238.2303 L
61.2767 244.2397 48.4974 250.4491 35.9333 256.1636 C
30.3 245.1968 L
f
30.4 142.6031 m
42.2368 137.1995 54.8342 131.0244 66.3333 125.0031 C
73.4 137.8697 L
62.174 143.7753 49.571 149.9396 37.1166 155.6364 C
30.4 142.6031 L
f
U
30.5 40 m
42.0842 34.6856 54.5 28.5625 65.8 22.6 C
74 37.5 L
63.0713 43.3017 50.6448 49.4208 38.3 55.1 C
30.5 40 L
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
