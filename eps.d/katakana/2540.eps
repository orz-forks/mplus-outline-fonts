%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (2540.eps)
%%CreationDate: (7/28/04) (1:10 PM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
1 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
500 600 m
500 700 L
400 700 L
400 600 L
500 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
400 600 m
400 700 L
300 700 L
300 600 L
400 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
500 500 m
500 600 L
400 600 L
400 500 L
500 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
400 500 m
400 600 L
300 600 L
300 500 L
400 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
0 Ap
0 O
0 g
1 D
172.7 687.3 m
155.9588 681.6127 138.8649 679 118 679 C
118 676 L
139.5707 676 156.8713 678.7656 173.7 684.5 C
172.7 687.3 L
f
152 681 m
152 656 l
152 624.6298 145.7707 616.4741 123.4 613 C
124 610 L
147.6073 613.9898 155 623.0585 155 656 C
155 681 L
152 681 L
f
191 649 m
191 652 L
107 652 L
107 649 L
191 649 L
f
391 656 m
391 659 L
307 659 L
307 656 L
352 656 L
352 622.4019 347.7914 616.8387 323.4 613 C
324 610 L
350.044 614.4016 355 620.6843 355 656 C
391 656 L
f
374 683 m
374 686 L
319 686 L
319 683 L
374 683 L
f
425.3 657.1 m
444.512 652.5566 466.1965 646.0313 484.9 639.2 C
486 642 L
466.5251 649.1131 444.5 655.625 426 660 C
426 690 L
423 690 L
423 610 L
426 610 L
426 658 L
425.3 657.1 L
f
192 681 m
188.9719 686.7331 186.2844 691.4831 183 697 C
180.4 695.5 L
183.7848 689.8145 186.4289 685.0359 189.3 679.6 C
192 681 L
f
168.4 692.5 m
171.5265 687.2484 174.1108 682.5595 177.1 676.9 C
179.8 678.3 L
176.8325 683.9184 174.2187 688.5935 171 694 C
168.4 692.5 L
f
392 680 m
388.9719 685.7331 386.2844 690.4831 383 696 C
380.4 694.5 L
383.7848 688.8145 386.4289 684.0359 389.3 678.6 C
392 680 L
f
368.4 691.5 m
371.5265 686.2484 374.1108 681.5595 377.1 675.9 C
379.8 677.3 L
376.8325 682.9184 374.2187 687.5935 371 693 C
368.4 691.5 L
f
484 672.2 m
480.785 678.185 477.9487 683.2072 474.5 689 C
471.9 687.5 L
475.2869 681.811 478.0736 676.8061 481.3 670.8 C
484 672.2 L
f
470.2 669.5 m
467.0841 675.3994 464.3797 680.3231 461 686 C
458.4223 684.4654 L
461.8054 678.7828 464.4187 674.0223 467.5473 668.0989 C
470.2 669.5 L
f
17 39.4 m
31.9505 54.3525 40.0242 71.1611 42.2 93 C
24 93 L
22.3134 76.0718 15.7961 63.2397 3 51 C
17 39.4 L
f
75.7 83 m
28 83 L
28 66 L
78 66 L
66 78.4 L
65.0079 39.2398 53.3297 27.0629 15.2 24 C
17 7 L
60.7227 10.5122 80.7803 27.7735 84.3943 68.3734 C
75.7 83 L
f
73 42 m
57.8125 50.0625 39.7383 58.765 23 66 C
16 50.5 L
31.9912 43.5879 49.7947 35.0658 64.8 27.1 C
73 42 L
f
u
171.6666 587.5803 m
155.7747 582.3608 139.1811 579.997 117.6667 579.997 C
117.6667 574.6636 L
140.1149 574.6636 157.1325 577.2028 173.35 582.5469 C
171.6666 587.5803 L
f
170.6333 487.8606 m
155.5907 483.1089 139.4973 480.994 117.3333 480.994 C
117.3333 473.3272 L
140.6591 473.3272 157.3937 475.64 173 480.5938 C
170.6333 487.8606 L
f
169.6 388.15 m
155.4066 383.8661 139.8134 382 117 382 C
117 372 L
141.2033 372 157.6549 374.0865 172.65 378.65 C
169.6 388.15 L
f
168.5666 288.4303 m
155.2226 284.6142 140.1296 282.997 116.6667 282.997 C
116.6667 270.6636 L
141.7475 270.6636 157.9161 272.5238 172.3 276.6969 C
168.5666 288.4303 L
f
167.5334 189.7197 m
155.0385 186.3714 140.4458 185.003 116.3334 185.003 C
116.3334 170.3364 L
142.2917 170.3364 158.1773 171.9703 171.95 175.7531 C
167.5334 189.7197 L
f
U
166.5 89 m
154.8545 86.1195 140.762 85 116 85 C
116 68 L
142.8359 68 158.4385 69.4075 171.6 72.8 C
166.5 89 L
f
u
150.5 580.9969 m
150.5 555.8303 l
150.5 525.7055 144.738 518.2327 122.7 514.7637 C
124 509.4969 L
148.4884 513.6357 156.1667 522.8588 156.1667 555.8303 C
156.1667 580.9969 L
150.5 580.9969 L
f
148.9999 480.9939 m
148.9999 455.6606 l
148.9999 426.7811 143.7052 419.9912 122 416.5273 C
124 408.9939 L
149.3694 413.2815 157.3334 422.6591 157.3334 455.6606 C
157.3334 480.9939 L
148.9999 480.9939 L
f
147.5 381 m
147.5 355.5 l
147.5 327.8658 142.6726 321.7588 121.3 318.3 C
124 308.5 L
150.2504 312.9365 158.5 322.4685 158.5 355.5 C
158.5 381 L
147.5 381 L
f
146 280.9969 m
146 255.3303 l
146 228.9414 141.6399 223.5174 120.6 220.0637 C
124 207.9969 L
151.1315 212.5824 159.6667 222.2688 159.6667 255.3303 C
159.6667 280.9969 L
146 280.9969 L
f
144.5001 181.003 m
144.5001 155.1697 l
144.5001 130.0261 140.6072 125.2849 119.9 121.8363 C
124 107.5031 L
152.0125 112.2374 160.8333 122.0782 160.8333 155.1697 C
160.8333 181.003 L
144.5001 181.003 L
f
U
143 81 m
143 55 l
143 31.1018 139.5745 27.0435 119.2 23.6 C
124 7 L
152.8936 11.8833 162 21.8785 162 55 C
162 81 L
143 81 L
f
u
191.3334 547.4969 m
191.3334 552.8303 L
106.6667 552.8303 L
106.6667 547.4969 L
191.3334 547.4969 L
f
191.6667 445.9938 m
191.6667 453.6606 L
106.3333 453.6606 L
106.3333 445.9938 L
191.6667 445.9938 L
f
192 344.5 m
192 354.5 L
106 354.5 L
106 344.5 L
192 344.5 L
f
192.3334 242.9969 m
192.3334 255.3303 L
105.6667 255.3303 L
105.6667 242.9969 L
192.3334 242.9969 L
f
192.6667 142.5031 m
192.6667 157.1697 L
105.3334 157.1697 L
105.3334 142.5031 L
192.6667 142.5031 L
f
U
193 40 m
193 57 L
105 57 L
105 40 L
193 40 L
f
u
391.3334 559.6636 m
306.6667 559.6636 L
306.6667 554.3302 L
350.5 554.3302 L
350.2722 523.931 346.0671 518.6432 322.7 514.9303 C
324 509.6636 L
350.1869 514.0894 355.8231 520.839 356.1667 554.3302 C
391.3334 554.3302 L
391.3334 559.6636 L
f
391.6667 460.3273 m
306.3333 460.3273 L
306.3333 452.6605 L
348.9999 452.6605 L
348.5443 425.4601 344.3428 420.4477 322 416.8607 C
324 409.3272 L
350.3298 413.7772 356.6462 420.9937 357.3334 452.6605 C
391.6667 452.6605 L
391.6667 460.3273 L
f
392 361 m
306 361 L
306 351 L
347.5 351 L
346.8166 326.9982 342.6186 322.2612 321.3 318.8 C
324 309 L
350.4727 313.4741 357.4692 321.1575 358.5 351 C
392 351 L
392 361 L
f
392.3334 261.6636 m
305.6667 261.6636 L
305.6667 249.3302 L
346 249.3302 L
345.0887 228.5273 340.8943 224.0658 320.6 220.7303 C
324 208.6636 L
350.6156 213.1619 358.2923 221.3122 359.6667 249.3302 C
392.3334 249.3302 L
392.3334 261.6636 L
f
392.6667 162.3364 m
305.3334 162.3364 L
305.3334 147.6698 L
344.5001 147.6698 L
343.361 130.0654 339.1701 125.8793 319.9 122.6697 C
324 108.3364 L
350.7585 112.8589 359.1153 121.476 360.8333 147.6698 C
392.6667 147.6698 L
392.6667 162.3364 L
f
U
393 63 m
305 63 L
305 46 L
343 46 L
341.6332 31.5945 337.4458 27.6838 319.2 24.6 C
324 8 L
350.9014 12.5467 359.9384 21.6307 362 46 C
393 46 L
393 63 L
f
u
373.1667 581.3302 m
373.1667 586.6636 L
318.6667 586.6636 L
318.6667 581.3302 L
373.1667 581.3302 L
f
372.3333 479.6605 m
372.3333 487.3273 L
318.3333 487.3273 L
318.3333 479.6605 L
372.3333 479.6605 L
f
372.5 378 m
372.5 388 L
318 388 L
318 378 L
372.5 378 L
f
370.6667 276.3302 m
370.6667 288.6636 L
317.6667 288.6636 L
317.6667 276.3302 L
370.6667 276.3302 L
f
369.8334 174.6698 m
369.8334 189.3364 L
317.3334 189.3364 L
317.3334 174.6698 L
369.8334 174.6698 L
f
U
369 73 m
369 90 L
317 90 L
317 73 L
369 73 L
f
u
426.6834 554.9969 m
445.4909 550.5182 466.6354 544.1602 484.9333 537.4969 C
486.8334 542.6636 L
467.7814 549.6016 446.2772 555.9763 428.0001 560.3303 C
428.0001 590.3303 L
422.1667 590.3303 L
422.1667 509.6636 L
428.0001 509.6636 L
428.0001 556.3302 L
426.6834 554.9969 L
f
428.0667 452.8938 m
446.4698 448.4797 467.0744 442.2892 484.9667 435.7938 C
487.6667 443.3273 L
469.0376 450.0902 448.0544 456.3276 430.0001 460.6606 C
430.0001 490.6606 L
421.3333 490.6606 L
421.3333 409.3272 L
430.0001 409.3272 L
430.0001 454.6605 L
428.0667 452.8938 L
f
429.45 350.8 m
447.4487 346.4506 467.5133 340.4274 485 334.1 C
488.5 344 L
470.2938 350.5878 449.8315 356.688 432 361 C
432 391 L
420.5 391 L
420.5 309 L
432 309 L
432 353 L
429.45 350.8 L
f
430.8334 248.6969 m
448.4276 244.4122 467.9522 238.5563 485.0333 232.3969 C
489.3334 244.6636 L
471.5501 251.0763 451.6087 257.0394 434.0001 261.3303 C
434.0001 291.3303 L
419.6667 291.3303 L
419.6667 208.6636 L
434.0001 208.6636 L
434.0001 251.3302 L
430.8334 248.6969 L
f
432.2166 146.6031 m
449.4065 142.3831 468.3911 136.6946 485.0666 130.7031 C
490.1667 145.3364 L
472.8062 151.574 453.3858 157.3998 436 161.6697 C
436 191.6697 L
418.8334 191.6697 L
418.8334 108.3364 L
436 108.3364 L
436 149.6698 L
432.2166 146.6031 L
f
U
433.6 44.5 m
450.3854 40.3446 468.8301 34.8235 485.1 29 C
491 46 L
474.0625 52.0625 455.163 57.7511 438 62 C
438 92 L
418 92 L
418 8 L
438 8 L
438 48 L
433.6 44.5 L
f
74.7 91.6 m
78.5475 85.5765 82.8648 78.339 86.4 72 C
98 78 L
94.375 84.5 89.9195 91.8851 86 98 C
74.7 91.6 L
f
57.9 87.7 m
61.6705 81.797 65.9355 74.7122 69.4 68.5 C
80.8 74.4 L
77.2475 80.77 72.8411 88.0074 69 94 C
57.9 87.7 L
f
u
393 579.6636 m
389.8724 585.5245 386.8903 590.7137 383.5 596.3303 C
379.45 594.0136 L
382.9119 588.2718 385.8349 583.0833 388.8166 577.4969 C
393 579.6636 L
f
394.0001 480.3272 m
390.773 486.316 387.4961 491.9444 384 497.6606 C
378.4999 494.5272 L
382.039 488.729 385.2408 483.1308 388.3333 477.3938 C
394.0001 480.3272 L
f
395 381 m
391.6734 387.1165 388.1019 393.1841 384.5 399 C
377.55 395.05 L
381.1661 389.1955 384.6468 383.1875 387.85 377.3 C
395 381 L
f
396 278.3636 m
392.574 284.608 388.7078 291.1148 385 297.0303 C
376.6 292.2636 L
380.2932 286.3528 384.0528 279.9349 387.3666 273.897 C
396 278.3636 L
f
397 178.3364 m
393.4744 184.7086 389.3136 191.6545 385.5 197.6697 C
375.65 192.0864 L
379.4204 186.1192 383.4588 179.2916 386.8833 173.1031 C
397 178.3364 L
f
U
374.7 91.6 m
378.5475 85.5765 382.8648 78.339 386.4 72 C
398 78 L
394.375 84.5 389.9195 91.8851 386 98 C
374.7 91.6 L
f
u
366.6499 590.8636 m
369.8838 585.5034 372.7482 580.4152 375.8166 574.6636 C
379.9667 576.8136 L
376.9017 582.5573 373.9891 587.6594 370.6667 593.1636 C
366.6499 590.8636 L
f
364.8999 491.2272 m
368.241 485.7585 371.3856 480.2709 374.5332 474.4272 C
380.1333 477.3272 L
376.9708 483.1961 373.7595 488.7254 370.3333 494.3273 C
364.8999 491.2272 L
f
363.15 391.6 m
366.5985 386.0227 370.0231 380.1358 373.25 374.2 C
380.3 377.85 L
377.04 383.8442 373.5299 389.8004 370 395.5 C
363.15 391.6 L
f
361.3999 288.6636 m
364.9558 282.9778 368.6605 276.6916 371.9666 270.6636 C
380.4667 275.0636 L
377.1092 281.1831 373.3003 287.5664 369.6667 293.3637 C
361.3999 288.6636 L
f
359.6501 188.3364 m
363.3132 182.542 367.2981 175.8565 370.6834 169.7364 C
380.6333 174.8864 L
377.1783 181.1311 373.0707 187.9415 369.3334 193.8364 C
359.6501 188.3364 L
f
U
357.9 87.7 m
361.6705 81.797 365.9355 74.7122 369.4 68.5 C
380.8 74.4 L
377.2475 80.77 372.8411 88.0074 369 94 C
357.9 87.7 L
f
u
193 580.3303 m
189.8724 586.1912 186.8903 591.3804 183.5 596.9969 C
179.45 594.6803 L
182.9119 588.9384 185.8349 583.75 188.8166 578.1636 C
193 580.3303 L
f
194.0001 480.6605 m
190.773 486.6493 187.4961 492.2777 184 497.9939 C
178.4999 494.8605 L
182.039 489.0624 185.2408 483.4641 188.3333 477.7272 C
194.0001 480.6605 L
f
195 380 m
191.6734 386.1165 188.1019 392.1841 184.5 398 C
177.55 394.05 L
181.1661 388.1955 184.6468 382.1875 187.85 376.3 C
195 380 L
f
196 280.3303 m
192.574 286.5746 188.7078 293.0814 185 298.9969 C
176.6 294.2303 L
180.2932 288.3194 184.0528 281.9015 187.3666 275.8636 C
196 280.3303 L
f
197 177.6697 m
193.4744 184.0419 189.3136 190.9878 185.5 197.003 C
175.65 191.4197 L
179.4204 185.4526 183.4588 178.6249 186.8833 172.4364 C
197 177.6697 L
f
U
174.7 90.6 m
178.5475 84.5765 182.8648 77.339 186.4 71 C
198 77 L
194.375 83.5 189.9195 90.8851 186 97 C
174.7 90.6 L
f
u
166.6499 591.5303 m
169.8838 586.1701 172.7482 581.0819 175.8166 575.3303 C
179.9667 577.4803 L
176.9017 583.2239 173.9891 588.3261 170.6667 593.8303 C
166.6499 591.5303 L
f
164.8999 491.5605 m
168.241 486.0918 171.3856 480.6042 174.5332 474.7605 C
180.1333 477.6605 L
176.9708 483.5295 173.7595 489.0587 170.3333 494.6606 C
164.8999 491.5605 L
f
163.15 390.6 m
166.5985 385.0227 170.0231 379.1358 173.25 373.2 C
180.3 376.85 L
177.04 382.8442 173.5299 388.8004 170 394.5 C
163.15 390.6 L
f
161.3999 290.6302 m
164.9558 284.9444 168.6605 278.6582 171.9666 272.6302 C
180.4667 277.0303 L
177.1092 283.1497 173.3003 289.533 169.6667 295.3303 C
161.3999 290.6302 L
f
159.6501 187.6697 m
163.3132 181.8753 167.2981 175.1898 170.6834 169.0697 C
180.6333 174.2197 L
177.1783 180.4645 173.0707 187.2748 169.3334 193.1697 C
159.6501 187.6697 L
f
U
157.9 86.7 m
161.6705 80.797 165.9355 73.7122 169.4 67.5 C
180.8 73.4 L
177.2475 79.77 172.8411 87.0074 169 93 C
157.9 86.7 L
f
u
485.5001 572.3303 m
482.1865 578.4553 479.0432 583.9329 475.4834 589.8303 C
471.3391 587.4603 L
474.8349 581.6653 477.9127 576.228 481.22 570.1136 C
485.5001 572.3303 L
f
487.0001 472.4606 m
483.588 478.7256 480.1377 484.6585 476.4667 490.6606 C
470.7783 487.4206 L
474.3828 481.5196 477.7517 475.6499 481.14 469.4272 C
487.0001 472.4606 L
f
488.5 372.5999 m
484.9893 379.005 481.2321 385.3932 477.45 391.5 C
470.2174 387.39 L
473.9308 381.3831 477.5908 375.081 481.06 368.75 C
488.5 372.5999 L
f
490.0001 272.7302 m
486.3908 279.2753 482.3265 286.1189 478.4334 292.3303 C
469.6566 287.3503 L
473.4788 281.2375 477.4299 274.5029 480.98 268.0635 C
490.0001 272.7302 L
f
491.5 172.8696 m
487.7922 179.5547 483.4209 186.8536 479.4166 193.1697 C
469.0958 187.3197 L
473.0268 181.101 477.2689 173.934 480.9 167.3863 C
491.5 172.8696 L
f
U
468.5349 87.28 m
472.5748 80.9553 477.108 73.3559 480.82 66.6999 C
493 72.9999 L
489.1937 79.825 484.5154 87.5793 480.4 94 C
468.5349 87.28 L
f
u
470.99 569.4503 m
467.7717 575.4812 464.7469 580.8509 461.2583 586.6303 C
457.1677 584.249 L
460.6468 578.4804 463.5709 573.2735 466.7844 567.2502 C
470.99 569.4503 L
f
471.78 469.4005 m
468.4594 475.563 465.1141 481.3786 461.5166 487.2606 C
455.9131 484.0325 L
459.4881 478.178 462.7231 472.5246 466.0214 466.4014 C
471.78 469.4005 L
f
472.57 369.3599 m
469.147 375.6539 465.4813 381.9154 461.7749 387.9 C
454.6586 383.8252 L
458.3296 377.8848 461.8755 371.785 465.2586 365.5619 C
472.57 369.3599 L
f
473.3599 269.3102 m
469.8346 275.7357 465.8486 282.4432 462.0333 288.5303 C
453.404 283.6087 L
457.171 277.5824 461.0277 271.0362 464.4957 264.7131 C
473.3599 269.3102 L
f
474.1499 169.2696 m
470.5222 175.8266 466.2158 182.9801 462.2916 189.1697 C
452.1495 183.4015 L
456.0125 177.2892 460.18 170.2965 463.7328 163.8736 C
474.1499 169.2696 L
f
U
450.8949 83.185 m
454.8539 76.9868 459.3322 69.5477 462.9699 63.0249 C
474.9399 69.2199 L
471.2098 75.9084 466.583 83.5078 462.5499 89.8 C
450.8949 83.185 L
f
210 682 m
212.9732 671.2295 216.375 658.3125 219 647 C
221.9 647.6 L
219.0043 660.079 215.4214 673.6662 212.9 682.8 C
210 682 L
f
238.1 685.2 m
241.0732 674.4295 244.475 661.5125 247.1 650.2 C
250 650.8 L
247.1043 663.279 243.5214 676.8662 241 686 C
238.1 685.2 L
f
297 683 m
293.9719 688.7331 291.2844 693.4831 288 699 C
285.4 697.5 L
288.7848 691.8145 291.4289 687.0359 294.3 681.6 C
297 683 L
f
273.4 694.5 m
276.5265 689.2484 279.1108 684.5595 282.1 678.9 C
284.8 680.3 L
281.8325 685.9184 279.2187 690.5935 276 696 C
273.4 694.5 L
f
283.7 675.3 m
281.0802 633.9815 264.7178 618.4136 225.7 615 C
226 612 L
266.7219 615.5627 284.1743 632.492 286.7 675.3 C
283.7 675.3 L
f
u
209.3333 581.9969 m
212.3065 571.2265 215.7083 558.3095 218.3333 546.9969 C
223.7 548.0803 L
220.8383 560.4128 217.247 574.0001 214.6667 583.3303 C
209.3333 581.9969 L
f
208.6666 481.9939 m
211.6398 471.2234 215.0416 458.3064 217.6666 446.9939 C
225.5001 448.5606 L
222.6724 460.7466 219.0727 474.3339 216.4334 483.8606 C
208.6666 481.9939 L
f
208 382 m
210.9732 371.2295 214.375 358.3125 217 347 C
227.3 349.05 L
224.5062 361.0895 220.8982 374.6768 218.2 384.4 C
208 382 L
f
207.3333 281.9969 m
210.3065 271.2264 213.7083 258.3094 216.3333 246.9969 C
229.1 249.5303 L
226.3403 261.4234 222.7238 275.0107 219.9667 284.9303 C
207.3333 281.9969 L
f
206.6667 182.003 m
209.6399 171.2326 213.0417 158.3155 215.6667 147.003 C
230.8999 150.0197 L
228.1741 161.7663 224.5493 175.3536 221.7333 185.4697 C
206.6667 182.003 L
f
U
206 82 m
208.9732 71.2295 212.375 58.3125 215 47 C
232.7 50.5 L
230.0082 62.1001 226.375 75.6875 223.5 86 C
206 82 L
f
u
237.0833 585.1636 m
240.0565 574.3931 243.4583 561.4761 246.0833 550.1636 C
251.45 551.247 L
248.5883 563.5795 244.997 577.1667 242.4167 586.497 C
237.0833 585.1636 L
f
236.0666 485.1272 m
239.0398 474.3567 242.4416 461.4397 245.0666 450.1272 C
252.9001 451.6939 L
250.0723 463.88 246.4727 477.4672 243.8334 486.9939 C
236.0666 485.1272 L
f
235.05 385.1 m
238.0232 374.3295 241.425 361.4125 244.05 350.1 C
254.35 352.15 L
251.5562 364.1896 247.9482 377.7768 245.25 387.5 C
235.05 385.1 L
f
234.0333 285.0636 m
237.0065 274.2931 240.4083 261.3761 243.0333 250.0636 C
255.8 252.597 L
253.0403 264.49 249.4238 278.0773 246.6667 287.997 C
234.0333 285.0636 L
f
233.0167 185.0364 m
235.9899 174.2659 239.3917 161.3489 242.0167 150.0364 C
257.2499 153.053 L
254.5242 164.7996 250.8993 178.387 248.0833 188.503 C
233.0167 185.0364 L
f
U
232 85 m
234.9732 74.2295 238.375 61.3125 241 50 C
258.7 53.5 L
256.0082 65.1001 252.375 78.6875 249.5 89 C
232 85 L
f
u
297.3333 582.3303 m
294.2057 588.1912 291.2236 593.3804 287.8333 598.9969 C
283.7833 596.6803 L
287.2452 590.9384 290.1682 585.75 293.1499 580.1636 C
297.3333 582.3303 L
f
297.6667 481.6605 m
294.4396 487.6493 291.1627 493.2777 287.6666 498.9939 C
282.1665 495.8605 L
285.7056 490.0624 288.9074 484.4641 291.9999 478.7272 C
297.6667 481.6605 L
f
298 381 m
294.6734 387.1165 291.1019 393.1841 287.5 399 C
280.55 395.05 L
284.1661 389.1955 287.6468 383.1875 290.85 377.3 C
298 381 L
f
298.3333 280.3303 m
294.9073 286.5746 291.0411 293.0814 287.3333 298.9969 C
278.9333 294.2303 L
282.6265 288.3194 286.3861 281.9015 289.6999 275.8636 C
298.3333 280.3303 L
f
298.8666 179.4697 m
295.3411 185.8419 291.1803 192.7878 287.3667 198.8031 C
277.5167 193.2197 L
281.2871 187.2526 285.3255 180.4249 288.75 174.2364 C
298.8666 179.4697 L
f
U
275.7 92.6 m
279.5475 86.5765 283.8648 79.339 287.4 73 C
299 79 L
295.375 85.5 290.9195 92.8851 287 99 C
275.7 92.6 L
f
u
270.9832 593.5303 m
274.2171 588.1701 277.0815 583.0819 280.1499 577.3303 C
284.3 579.4803 L
281.235 585.2239 278.3224 590.3261 275 595.8303 C
270.9832 593.5303 L
f
268.5665 492.5605 m
271.9077 487.0918 275.0522 481.6042 278.1999 475.7605 C
283.8 478.6605 L
280.6374 484.5295 277.4261 490.0587 273.9999 495.6606 C
268.5665 492.5605 L
f
266.15 391.6 m
269.5985 386.0227 273.0231 380.1358 276.25 374.2 C
283.3 377.85 L
280.04 383.8442 276.5299 389.8004 273 395.5 C
266.15 391.6 L
f
263.7332 290.6302 m
267.2891 284.9444 270.9938 278.6582 274.2999 272.6302 C
282.8 277.0303 L
279.4425 283.1497 275.6336 289.533 272 295.3303 C
263.7332 290.6302 L
f
261.5167 189.4697 m
265.1799 183.6753 269.1648 176.9898 272.55 170.8697 C
282.5 176.0197 L
279.045 182.2645 274.9374 189.0748 271.2 194.9697 C
261.5167 189.4697 L
f
U
258.9 88.7 m
262.6705 82.797 266.9355 75.7122 270.4 69.5 C
281.8 75.4 L
278.2475 81.77 273.8411 89.0074 270 95 C
258.9 88.7 L
f
u
281.4666 574.4469 m
278.7801 534.9647 263.1112 520.2473 224.8166 516.897 C
225.5333 511.4969 L
266.6699 515.0959 284.2366 531.9384 286.9667 574.4469 C
281.4666 574.4469 L
f
279.2332 473.5939 m
276.4801 435.9478 261.5047 422.0811 223.9333 418.794 C
225.0666 410.9939 L
266.6179 414.6291 284.299 431.3847 287.2333 473.5939 C
279.2332 473.5939 L
f
277 372.75 m
274.1802 336.94 259.8983 323.9238 223.05 320.7 C
224.6 310.5 L
266.5658 314.1715 284.3613 330.8402 287.5 372.75 C
277 372.75 L
f
274.7666 271.8969 m
271.8802 237.9232 258.2917 225.7575 222.1666 222.597 C
224.1333 209.9969 L
266.5138 213.7047 284.4237 230.2866 287.7667 271.8969 C
274.7666 271.8969 L
f
272.5334 171.0531 m
269.5803 138.9154 256.6853 127.6002 221.2833 124.503 C
223.6667 109.5031 L
266.4618 113.2471 284.486 129.7421 288.0333 171.0531 C
272.5334 171.0531 L
f
U
270.3 70.2 m
267.2803 39.8986 255.0788 29.4339 220.4 26.4 C
223.2 9 L
266.4098 12.7803 284.5484 29.1884 288.3 70.2 C
270.3 70.2 L
f
u
16.35 140.8197 m
31.0526 155.4265 38.8868 171.6262 41 192.8364 C
25.3334 192.8364 L
23.6467 175.9082 17.1295 163.076 4.3334 150.8364 C
16.35 140.8197 L
f
15.6999 242.2395 m
30.1548 256.5005 37.7494 272.0914 39.7999 292.6728 C
26.6667 292.6728 L
24.9801 275.7445 18.4628 262.9124 5.6667 250.6728 C
15.6999 242.2395 L
f
15.05 343.65 m
29.257 357.5653 36.6121 372.5473 38.6 392.5 C
28 392.5 L
26.3134 375.5718 19.7961 362.7397 7 350.5 C
15.05 343.65 L
f
14.4 445.0697 m
28.3591 458.6393 35.4747 473.0125 37.3999 492.3364 C
29.3334 492.3364 L
27.6467 475.4082 21.1295 462.576 8.3334 450.3364 C
14.4 445.0697 L
f
13.75 546.4802 m
27.4613 559.7041 34.3374 573.4684 36.2 592.1636 C
30.6666 592.1636 L
28.98 575.2354 22.4627 562.4033 9.6666 550.1636 C
13.75 546.4802 L
f
U
u
76.3917 182.503 m
28.5 182.503 L
28.5 167.8364 L
78.5 167.8364 L
68.1667 178.5197 L
67.298 138.7994 54.4415 125.455 15.6167 122.3363 C
17.1667 107.6697 L
60.6896 111.1659 80.7995 128.7048 83.9879 169.6767 C
76.3917 182.503 L
f
77.0834 282.0061 m
29 282.0061 L
29 269.6729 L
79 269.6729 L
70.3335 278.6394 L
69.5882 238.3589 55.5532 223.8472 16.0334 220.6727 C
17.3333 208.3395 L
60.6566 211.8196 80.8188 229.636 83.5814 270.98 C
77.0834 282.0061 L
f
77.775 381.5 m
29.5 381.5 L
29.5 371.5 L
79.5 371.5 L
72.5 378.75 L
71.8781 337.9094 56.6649 322.2304 16.45 319 C
17.5 309 L
60.6235 312.464 80.8381 330.558 83.1751 372.274 C
77.775 381.5 L
f
78.4667 481.003 m
30 481.003 L
30 473.3364 L
80 473.3364 L
74.6667 478.8697 L
74.1683 437.469 57.7767 420.6225 16.8666 417.3363 C
17.6667 409.6697 L
60.5905 413.1177 80.8573 431.4893 82.7686 473.5773 C
78.4667 481.003 L
f
79.1583 580.4969 m
30.5 580.4969 L
30.5 575.1635 L
80.5 575.1635 L
76.8333 578.9803 L
76.4582 537.0194 58.8884 519.0057 17.2833 515.6636 C
17.8333 510.3302 L
60.5574 513.7622 80.8766 532.4113 82.3623 574.8713 C
79.1583 580.4969 L
f
U
u
59.8167 188.5031 m
63.4648 182.734 67.4397 176.0685 70.8069 169.9846 C
80.8 175.0531 L
77.345 181.2978 73.2374 188.1081 69.5 194.003 C
59.8167 188.5031 L
f
61.7334 289.3061 m
65.2591 283.671 68.9439 277.4248 72.2138 271.4693 C
80.8 275.7061 L
77.4425 281.8256 73.6336 288.2089 70 294.0061 C
61.7334 289.3061 L
f
63.65 390.1 m
67.0532 384.5987 70.448 378.7719 73.6206 372.9446 C
80.8 376.35 L
77.54 382.3442 74.0299 388.3004 70.5 394 C
63.65 390.1 L
f
65.5667 490.9031 m
68.8475 485.5357 71.9523 480.1282 75.0276 474.4293 C
80.8 477.003 L
77.6375 482.872 74.4262 488.4012 71 494.003 C
65.5667 490.9031 L
f
67.4833 591.6969 m
70.6416 586.4635 73.4563 581.4752 76.4344 575.9046 C
80.8 577.6469 L
77.735 583.3906 74.8224 588.4927 71.5 593.9969 C
67.4833 591.6969 L
f
U
u
97.1666 178.503 m
93.6411 184.8752 89.4803 191.8211 85.6667 197.8364 C
75.8167 192.2531 L
79.5871 186.2859 83.6255 179.4582 87.05 173.2697 C
97.1666 178.503 L
f
96.3333 279.0061 m
92.9073 285.2505 89.0411 291.7572 85.3333 297.6728 C
76.9334 292.9061 L
80.6266 286.9953 84.3862 280.5774 87.7 274.5395 C
96.3333 279.0061 L
f
95.5 379.5 m
92.1734 385.6165 88.6019 391.6841 85 397.5 C
78.05 393.55 L
81.6661 387.6955 85.1468 381.6874 88.35 375.8 C
95.5 379.5 L
f
94.6666 480.003 m
91.4396 485.9918 88.1627 491.6201 84.6667 497.3364 C
79.1667 494.203 L
82.7057 488.4049 85.9075 482.8067 89 477.0697 C
94.6666 480.003 L
f
93.8334 580.4969 m
90.7058 586.3578 87.7236 591.547 84.3333 597.1636 C
80.2833 594.8469 L
83.7452 589.1051 86.6682 583.9166 89.65 578.3302 C
93.8334 580.4969 L
f
U
u
13.1 647.9 m
26.5635 660.7781 33.2 673.9336 35 692 C
32 692 L
30.3134 675.0718 23.7961 662.2397 11 650 C
13.1 647.9 L
f
79.85 680 m
31 680 L
31 677 L
81 677 L
79 679.1 L
78.7484 636.579 60.0002 617.3979 17.7 614 C
18 611 L
60.5244 614.4159 80.8958 633.3426 81.9558 676.1746 C
79.85 680 L
f
93 681 m
89.9719 686.7331 87.2844 691.4831 84 697 C
81.4 695.5 L
84.7848 689.8145 87.4289 685.0359 90.3 679.6 C
93 681 L
f
80.8 678.3 m
77.8325 683.9184 75.2187 688.5935 72 694 C
69.4 692.5 L
72.4359 687.4005 74.9606 682.8316 77.8413 677.3893 C
80.8 678.3 L
f
U
u
72.9 141.953 m
57.723 149.943 39.8965 158.4892 23.4 165.6197 C
17.3334 152.2531 L
33.2565 145.3704 50.9123 136.9434 65.8333 129.0864 C
72.9 141.953 L
f
72.8 241.9061 m
57.6334 249.8236 40.0546 258.2135 23.8 265.2394 C
18.6667 254.0062 L
34.5217 247.153 52.0299 238.8209 66.8667 231.0729 C
72.8 241.9061 L
f
72.7 341.85 m
57.5439 349.695 40.2128 357.9285 24.2 364.85 C
20 355.75 L
35.7868 348.9262 53.1473 340.6891 67.9 333.05 C
72.7 341.85 L
f
72.6 441.803 m
57.4544 449.5755 40.371 457.6528 24.6 464.4697 C
21.3334 457.5031 L
37.0521 450.7088 54.2649 442.5667 68.9333 435.0364 C
72.6 441.803 L
f
72.5 541.7469 m
57.3649 549.4469 40.5291 557.3679 25 564.0803 C
22.6666 559.2469 L
38.3172 552.482 55.3824 544.4349 69.9666 537.0135 C
72.5 541.7469 L
f
U
24 661 m
39.5825 654.2646 56.5 646.3125 71 639 C
72.4 641.7 L
57.2754 649.3275 40.6873 657.0921 25.4 663.7 C
24 661 L
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
