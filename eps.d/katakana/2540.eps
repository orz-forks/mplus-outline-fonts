%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (2540.eps)
%%CreationDate: (12/15/04) (4:42 PM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
500 600 m
500 700 L
400 700 L
400 600 L
500 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
400 600 m
400 700 L
300 700 L
300 600 L
400 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
500 500 m
500 600 L
400 600 L
400 500 L
500 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
400 500 m
400 600 L
300 600 L
300 500 L
400 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
0 O
0 g
1 D
172.7 686.3 m
155.9588 680.6127 138.8649 678 118 678 C
118 675 L
139.5707 675 156.8713 677.7656 173.7 683.5 C
172.7 686.3 L
f
425.3 657.1 m
444.512 652.5566 466.1965 646.0313 484.9 639.2 C
486 642 L
466.5251 649.1131 444.5 655.625 426 660 C
426 690 L
423 690 L
423 610 L
426 610 L
426 658 L
425.3 657.1 L
f
12.1 646.9 m
25.5635 659.7781 32.2 672.9336 34 691 C
31 691 L
29.3134 674.0718 22.7961 661.2397 10 649 C
12.1 646.9 L
f
152 680 m
152 655 l
152 623.6298 145.7707 615.4741 123.4 612 C
124 609 L
147.6073 612.9898 155 622.0585 155 655 C
155 680 L
152 680 L
f
191 648 m
191 651 L
107 651 L
107 648 L
191 648 L
f
210 681 m
212.9732 670.2295 216.375 657.3125 219 646 C
221.9 646.6 L
219.0043 659.079 215.4214 672.6662 212.9 681.8 C
210 681 L
f
238.1 684.2 m
241.0732 673.4295 244.475 660.5125 247.1 649.2 C
250 649.8 L
247.1043 662.279 243.5214 675.8662 241 685 C
238.1 684.2 L
f
391 655 m
391 658 L
307 658 L
307 655 L
352 655 L
352 621.4019 347.7914 615.8387 323.4 612 C
324 609 L
350.044 613.4016 355 619.6843 355 655 C
391 655 L
f
373 682 m
373 685 L
319 685 L
319 682 L
373 682 L
f
283.7 674.3 m
281.0802 632.9815 264.7178 617.4136 225.7 614 C
226 611 L
266.7219 614.5627 284.1743 631.492 286.7 674.3 C
283.7 674.3 L
f
98 684 m
94.75 689.25 91.875 693.25 88 698 C
85.6 696.2 L
89.4897 691.4319 92.2563 687.5783 95.4 682.5 C
98 684 L
f
198 684 m
194.75 689.25 191.875 693.25 188 698 C
185.6 696.2 L
189.4897 691.4319 192.2563 687.5783 195.4 682.5 C
198 684 L
f
186.6 680.7 m
183.5234 685.6148 180.703 689.4608 177 694 C
174.6 692.2 L
178.2965 687.6688 181.0445 683.8155 184 679.1 C
186.6 680.7 L
f
297 684 m
293.75 689.25 290.875 693.25 287 698 C
284.6 696.2 L
288.4897 691.4319 291.2563 687.5783 294.4 682.5 C
297 684 L
f
285.6 680.7 m
282.5234 685.6148 279.703 689.4608 276 694 C
273.6 692.2 L
277.2965 687.6688 280.0445 683.8155 283 679.1 C
285.6 680.7 L
f
398 684 m
394.75 689.25 391.875 693.25 388 698 C
385.6 696.2 L
389.4897 691.4319 392.2563 687.5783 395.4 682.5 C
398 684 L
f
386.6 680.7 m
383.5234 685.6148 380.703 689.4608 377 694 C
374.6 692.2 L
378.2965 687.6688 381.0445 683.8155 384 679.1 C
386.6 680.7 L
f
484 673 m
480.5 678.375 476.875 683.25 473 688 C
470.6 686.2 L
474.6415 681.2459 478.2671 676.3648 481.5 671.4 C
484 673 L
f
471.4 668.9 m
468.0824 673.9223 464.658 678.516 461 683 C
458.6 681.2 L
462.2734 676.6971 465.69 672.1491 468.9 667.3 C
471.4 668.9 L
f
77 677.1 m
76.7924 634.7392 58.7068 616.4547 15.7 613 C
16 610 L
60.0391 613.5375 80 632.8747 80 678 C
29 678 L
29 675 L
79 675 L
77 677.1 L
f
174 89 m
155.5625 85.5 138.5 84 116 84 C
116 67 L
139.313 67 157.4365 68.5862 177 72.3 C
174 89 L
f
143 80 m
143 54 l
143 30.1018 139.5745 26.0435 119.2 22.6 C
124 6 L
152.8936 10.8833 162 20.8785 162 54 C
162 80 L
143 80 L
f
193 39 m
193 56 L
105 56 L
105 39 L
193 39 L
f
u
209.3333 580.8303 m
212.3065 570.0597 215.7083 557.1428 218.3333 545.8303 C
223.7 546.9136 L
220.8383 559.2461 217.247 572.8334 214.6667 582.1636 C
209.3333 580.8303 L
f
208.6666 480.6605 m
211.6398 469.89 215.0416 456.973 217.6666 445.6605 C
225.5001 447.2272 L
222.6724 459.4132 219.0727 473.0005 216.4334 482.5272 C
208.6666 480.6605 L
f
208 380.5 m
210.9732 369.7295 214.375 356.8125 217 345.5 C
227.3 347.55 L
224.5062 359.5895 220.8982 373.1768 218.2 382.9 C
208 380.5 L
f
207.3333 280.3303 m
210.3065 269.5597 213.7083 256.6428 216.3333 245.3303 C
229.1 247.8636 L
226.3403 259.7567 222.7238 273.344 219.9667 283.2636 C
207.3333 280.3303 L
f
206.6667 180.1697 m
209.6399 169.3992 213.0417 156.4822 215.6667 145.1697 C
230.8999 148.1864 L
228.1741 159.9329 224.5493 173.5203 221.7333 183.6364 C
206.6667 180.1697 L
f
U
206 80 m
208.9732 69.2295 212.375 56.3125 215 45 C
232.7 48.5 L
230.0082 60.1001 226.375 73.6875 223.5 84 C
206 80 L
f
u
237.4166 583.9969 m
240.3898 573.2264 243.7916 560.3094 246.4166 548.9969 C
251.7834 550.0803 L
248.9216 562.4128 245.3303 576 242.75 585.3303 C
237.4166 583.9969 L
f
236.7333 483.7939 m
239.7065 473.0234 243.1083 460.1064 245.7333 448.7939 C
253.5668 450.3606 L
250.739 462.5466 247.1394 476.1338 244.5001 485.6606 C
236.7333 483.7939 L
f
236.05 383.6 m
239.0232 372.8295 242.425 359.9125 245.05 348.6 C
255.35 350.65 L
252.5562 362.6895 248.9482 376.2768 246.25 386 C
236.05 383.6 L
f
235.3666 283.3969 m
238.3398 272.6264 241.7416 259.7094 244.3666 248.3969 C
257.1334 250.9303 L
254.3736 262.8233 250.7572 276.4107 248 286.3303 C
235.3666 283.3969 L
f
234.6833 183.203 m
237.6565 172.4325 241.0583 159.5155 243.6833 148.203 C
258.9166 151.2197 L
256.1908 162.9663 252.566 176.5536 249.7499 186.6697 C
234.6833 183.203 L
f
U
234 83 m
236.9732 72.2295 240.375 59.3125 243 48 C
260.7 51.5 L
258.0082 63.1001 254.375 76.6875 251.5 87 C
234 83 L
f
u
426.5167 555.3302 m
445.3242 550.8515 466.4687 544.4936 484.7666 537.8302 C
486.6667 542.997 L
467.6147 549.935 446.1105 556.3096 427.8334 560.6636 C
427.8334 590.3303 L
422 590.3303 L
422 509.6636 L
427.8334 509.6636 L
427.8334 556.6636 L
426.5167 555.3302 L
f
427.7334 453.5605 m
446.1365 449.1464 466.741 442.9558 484.6333 436.4605 C
487.3334 443.9939 L
468.7043 450.7568 447.7211 456.9943 429.6668 461.3273 C
429.6668 490.6606 L
420.9999 490.6606 L
420.9999 409.3272 L
429.6668 409.3272 L
429.6668 455.3271 L
427.7334 453.5605 L
f
428.95 351.8 m
446.9487 347.4506 467.0133 341.4274 484.5 335.1 C
488 345 L
469.7938 351.5878 449.3315 357.688 431.5 362 C
431.5 391 L
420 391 L
420 309 L
431.5 309 L
431.5 354 L
428.95 351.8 L
f
430.1667 250.0302 m
447.7609 245.7455 467.2855 239.8896 484.3666 233.7302 C
488.6667 245.997 L
470.8834 252.4097 450.942 258.3727 433.3334 262.6636 C
433.3334 291.3303 L
419 291.3303 L
419 208.6636 L
433.3334 208.6636 L
433.3334 252.6636 L
430.1667 250.0302 L
f
431.3833 148.2698 m
448.5731 144.0497 467.5578 138.3612 484.2333 132.3697 C
489.3333 147.003 L
471.9729 153.2406 452.5524 159.0664 435.1666 163.3363 C
435.1666 191.6697 L
418 191.6697 L
418 108.3364 L
435.1666 108.3364 L
435.1666 151.3364 L
431.3833 148.2698 L
f
U
432.6 46.5 m
449.3854 42.3446 467.8301 36.8235 484.1 31 C
490 48 L
473.0625 54.0625 454.163 59.7511 437 64 C
437 92 L
417 92 L
417 8 L
437 8 L
437 50 L
432.6 46.5 L
f
u
281.7666 573.2802 m
279.0801 533.798 263.4112 519.0806 225.1166 515.7303 C
225.8333 510.3302 L
266.9699 513.9292 284.5366 530.7716 287.2667 573.2802 C
281.7666 573.2802 L
f
279.8332 472.2605 m
277.0801 434.6145 262.1047 420.7477 224.5333 417.4606 C
225.6666 409.6605 L
267.2179 413.2958 284.899 430.0513 287.8333 472.2605 C
279.8332 472.2605 L
f
277.9 371.25 m
275.0802 335.44 260.7983 322.4237 223.95 319.2 C
225.5 309 L
267.4658 312.6715 285.2613 329.3402 288.4 371.25 C
277.9 371.25 L
f
275.9666 270.2303 m
273.0802 236.2565 259.4917 224.0908 223.3666 220.9303 C
225.3333 208.3302 L
267.7138 212.0381 285.6237 228.6198 288.9667 270.2303 C
275.9666 270.2303 L
f
274.0334 169.2197 m
271.0803 137.0821 258.1853 125.7668 222.7833 122.6696 C
225.1667 107.6697 L
267.9618 111.4138 285.986 127.9087 289.5333 169.2197 C
274.0334 169.2197 L
f
U
272.1 68.2 m
269.0803 37.8986 256.8788 27.4339 222.2 24.4 C
225 7 L
268.2098 10.7804 286.3484 27.1884 290.1 68.2 C
272.1 68.2 L
f
u
297.1667 583.4969 m
293.9175 588.8594 290.9837 593.1214 287.1667 597.9969 C
283.4666 595.5636 L
287.248 590.7478 290.1158 586.5795 293.2666 581.3802 C
297.1667 583.4969 L
f
297.3333 482.9938 m
294.085 488.4689 291.0925 492.9927 287.3333 497.9939 C
282.3332 494.9272 L
286.0063 490.0637 288.9753 485.5808 292.1332 480.2605 C
297.3333 482.9938 L
f
297.5 382.5 m
294.2525 388.0875 291.2012 392.8733 287.5 398 C
281.2 394.3 L
284.7647 389.3888 287.835 384.5912 291 379.15 C
297.5 382.5 L
f
297.6667 281.9969 m
294.42 287.697 291.31 292.7447 287.6667 297.9969 C
280.0666 293.6636 L
283.523 288.7047 286.6945 283.5925 289.8666 278.0302 C
297.6667 281.9969 L
f
297.8333 181.503 m
294.5875 187.3156 291.4187 192.6252 287.8333 198.003 C
278.9333 193.0364 L
282.2814 188.0298 285.5541 182.6029 288.7333 176.9197 C
297.8333 181.503 L
f
U
298 81 m
294.755 86.9251 291.5275 92.4966 288 98 C
277.8 92.4 L
281.0397 87.3457 284.4137 81.6042 287.6 75.8 C
298 81 L
f
u
285.0666 580.2036 m
281.9728 585.267 279.0953 589.382 275.4333 594.0636 C
271.7673 591.6489 L
275.3768 587.0474 278.2179 582.8985 281.2013 578.0209 C
285.0666 580.2036 L
f
284.5333 479.7072 m
281.4222 484.9193 278.4876 489.3033 274.8666 494.1272 C
269.9345 491.0979 L
273.4572 486.426 276.3914 481.9816 279.4025 476.9419 C
284.5333 479.7072 L
f
284 379.22 m
280.8716 384.5807 277.8799 389.2337 274.3 394.2 C
268.102 390.556 L
271.5377 385.8138 274.565 381.0738 277.604 375.872 C
284 379.22 L
f
283.4666 278.7237 m
280.321 284.233 277.2722 289.155 273.7333 294.2636 C
266.2693 290.005 L
269.6181 285.1924 272.7384 280.1569 275.8052 274.793 C
283.4666 278.7237 L
f
282.9333 178.2365 m
279.7705 183.8944 276.6646 189.0854 273.1667 194.3364 C
264.4367 189.4631 L
267.6986 184.5802 270.912 179.2492 274.0067 173.7232 C
282.9333 178.2365 L
f
U
282.4 77.7401 m
279.2199 83.5467 276.0569 89.0067 272.6 94.4 C
262.604 88.9121 L
265.779 83.9588 269.0855 78.3322 272.208 72.6441 C
282.4 77.7401 L
f
u
391.3334 558.4969 m
306.6667 558.4969 L
306.6667 553.1635 L
350.5 553.1635 L
350.2722 522.7643 346.0671 517.4765 322.7 513.7637 C
324 508.4969 L
350.1869 512.9227 355.8231 519.6723 356.1667 553.1635 C
391.3334 553.1635 L
391.3334 558.4969 L
f
391.6667 458.9939 m
306.3333 458.9939 L
306.3333 451.3271 L
348.9999 451.3271 L
348.5443 424.1267 344.3428 419.1144 322 415.5273 C
324 407.9939 L
350.3298 412.4438 356.6462 419.6603 357.3334 451.3271 C
391.6667 451.3271 L
391.6667 458.9939 L
f
392 359.5 m
306 359.5 L
306 349.5 L
347.5 349.5 L
346.8166 325.4982 342.6186 320.7612 321.3 317.3 C
324 307.5 L
350.4727 311.9741 357.4692 319.6575 358.5 349.5 C
392 349.5 L
392 359.5 L
f
392.3334 259.9969 m
305.6667 259.9969 L
305.6667 247.6635 L
346 247.6635 L
345.0887 226.8606 340.8943 222.399 320.6 219.0637 C
324 206.9969 L
350.6156 211.4952 358.2923 219.6455 359.6667 247.6635 C
392.3334 247.6635 L
392.3334 259.9969 L
f
392.6667 160.503 m
305.3334 160.503 L
305.3334 145.8364 L
344.5001 145.8364 L
343.361 128.2321 339.1701 124.0459 319.9 120.8363 C
324 106.503 L
350.7585 111.0255 359.1153 119.6427 360.8333 145.8364 C
392.6667 145.8364 L
392.6667 160.503 L
f
U
393 61 m
305 61 L
305 44 L
343 44 L
341.6332 29.5945 337.4458 25.6837 319.2 22.6 C
324 6 L
350.9014 10.5466 359.9384 19.6307 362 44 C
393 44 L
393 61 L
f
u
373.3334 580.1635 m
373.3334 585.4969 L
318.6667 585.4969 L
318.6667 580.1635 L
373.3334 580.1635 L
f
373.6667 478.3271 m
373.6667 485.9939 L
318.3333 485.9939 L
318.3333 478.3271 L
373.6667 478.3271 L
f
379 376.5 m
379 386.5 L
318 386.5 L
318 376.5 L
379 376.5 L
f
U
u
377.6667 274.6682 m
377.6667 287.0015 L
317.6667 287.0015 L
317.6667 274.6682 L
377.6667 274.6682 L
f
376.3333 172.8318 m
376.3333 187.4985 L
317.3333 187.4985 L
317.3333 172.8318 L
376.3333 172.8318 L
f
U
375 71 m
375 88 L
317 88 L
317 71 L
375 71 L
f
u
398.5 584 m
395.2508 589.3625 392.3171 593.6244 388.5 598.5 C
384.8 596.0666 L
388.5813 591.2508 391.4492 587.0826 394.6 581.8833 C
398.5 584 L
f
U
u
399 484 m
395.7517 489.475 392.7592 493.9989 389 499 C
383.9999 495.9333 L
387.6729 491.0698 390.642 486.5869 393.7999 481.2666 C
399 484 L
f
398 383.5 m
394.7525 389.0875 391.7012 393.8733 388 399 C
381.7 395.3 L
385.2647 390.3888 388.335 385.5912 391.5 380.15 C
398 383.5 L
f
398 281.9969 m
394.7533 287.697 391.6433 292.7447 388 297.9969 C
380.3999 293.6636 L
383.8563 288.7047 387.0278 283.5925 390.1999 278.0302 C
398 281.9969 L
f
398 181.503 m
394.7542 187.3156 391.5854 192.6252 388 198.003 C
379.1 193.0364 L
382.4481 188.0298 385.7208 182.6029 388.9 176.9197 C
398 181.503 L
f
U
398 81 m
394.755 86.9251 391.5275 92.4966 388 98 C
377.8 92.4 L
381.0397 87.3457 384.4137 81.6042 387.6 75.8 C
398 81 L
f
u
386.1 581.2067 m
383.0061 586.2701 380.1286 590.3851 376.4666 595.0667 C
372.8006 592.652 L
376.4102 588.0505 379.2513 583.9016 382.2346 579.024 C
386.1 581.2067 L
f
U
u
385.5999 481.7134 m
382.4888 486.9254 379.5542 491.3094 375.9333 496.1334 C
371.0012 493.104 L
374.5238 488.4321 377.458 483.9877 380.4692 478.948 C
385.5999 481.7134 L
f
383.6 381.72 m
380.4716 387.0807 377.4799 391.7337 373.9 396.7 C
367.702 393.056 L
371.1378 388.3138 374.165 383.5738 377.204 378.372 C
383.6 381.72 L
f
382.6 280.7237 m
379.4544 286.233 376.4056 291.155 372.8666 296.2636 C
365.4026 292.005 L
368.7514 287.1924 371.8717 282.1569 374.9386 276.793 C
382.6 280.7237 L
f
381.6 180.7365 m
378.4372 186.3944 375.3313 191.5854 371.8334 196.8363 C
363.1034 191.9631 L
366.3653 187.0802 369.5787 181.7491 372.6734 176.2231 C
381.6 180.7365 L
f
U
380.6 80.7401 m
377.4199 86.5467 374.2569 92.0067 370.8 97.4 C
360.804 91.9121 L
363.979 86.9588 367.2855 81.3322 370.408 75.6441 C
380.6 80.7401 L
f
199 82 m
195.755 87.9251 192.5275 93.4966 189 99 C
178.8 93.4 L
182.0397 88.3457 185.4137 82.6042 188.6 76.8 C
199 82 L
f
182.2 80.7401 m
179.0199 86.5467 175.8569 92.0067 172.4 97.4 C
162.404 91.9121 L
165.579 86.9588 168.8855 81.3322 172.008 75.6441 C
182.2 80.7401 L
f
u
485.3334 573.2703 m
481.8326 578.816 478.2308 583.8813 474.3667 588.8303 C
470.5307 586.3223 L
474.4817 581.2841 478.1104 576.183 481.378 571.0009 C
485.3334 573.2703 L
f
486.6667 473.5406 m
483.1652 479.257 479.5867 484.5127 475.7334 489.6606 C
470.4613 486.4446 L
474.3219 481.3222 477.9536 476.0012 481.256 470.6019 C
486.6667 473.5406 L
f
488 373.82 m
484.4977 379.707 480.9423 385.1531 477.1 390.5 C
470.392 386.576 L
474.1622 381.3696 477.7969 375.8286 481.134 370.212 C
488 373.82 L
f
489.3334 274.0903 m
485.8303 280.148 482.2982 285.7845 478.4667 291.3303 C
470.3226 286.6983 L
474.0024 281.4078 477.6402 275.6469 481.012 269.8129 C
489.3334 274.0903 L
f
490.6666 174.3697 m
487.1628 180.5981 483.6539 186.4249 479.8333 192.1697 C
470.2533 186.8297 L
473.8427 181.4551 477.4835 175.4743 480.89 169.423 C
490.6666 174.3697 L
f
U
492 74.64 m
488.4954 81.0391 485.0097 87.0563 481.2 93 C
470.184 86.952 L
473.6829 81.4933 477.3268 75.2925 480.768 69.024 C
492 74.64 L
f
u
472.0253 569.2668 m
468.6883 574.4973 465.2652 579.3081 461.5947 584.0156 C
457.7953 581.5278 L
461.428 576.8838 464.8703 572.081 468.1074 567.0162 C
472.0253 569.2668 L
f
472.6507 469.6337 m
469.2941 475.0723 465.8725 480.1003 462.1894 485.0313 C
456.9907 481.8556 L
460.5826 477.0705 464.0507 472.0129 467.3148 466.7324 C
472.6507 469.6337 L
f
473.2759 370.0096 m
469.8999 375.6563 466.4797 380.9016 462.784 386.056 C
456.1862 382.1925 L
459.7373 377.2663 463.2311 371.9539 466.5223 366.4578 C
473.2759 370.0096 L
f
473.9013 270.3765 m
470.5058 276.2313 467.0869 281.6938 463.3787 287.0716 C
455.3815 282.5203 L
458.8919 277.453 462.4114 271.8858 465.7297 266.174 C
473.9013 270.3765 L
f
474.5265 170.7524 m
471.1116 176.8154 467.6941 182.495 463.9733 188.0963 C
454.5769 182.8572 L
458.0466 177.6488 461.5918 171.8268 464.9372 165.8994 C
474.5265 170.7524 L
f
U
475.1519 71.1193 m
471.7175 77.3904 468.3014 83.2872 464.568 89.112 C
453.7723 83.185 L
457.2012 77.8355 460.7722 71.7587 464.1446 65.6156 C
475.1519 71.1193 L
f
u
175.7833 187.8818 m
155.6042 184.436 138.5608 182.9985 116.3333 182.9985 C
116.3333 168.3318 L
139.1934 168.3318 157.1598 169.8316 178.2833 173.4484 C
175.7833 187.8818 L
f
177.5667 286.7682 m
155.6458 283.3765 138.6216 282.0015 116.6667 282.0015 C
116.6667 269.6682 L
139.0737 269.6682 156.8832 271.0816 179.5667 274.6015 C
177.5667 286.7682 L
f
U
u
172.9167 586.2469 m
155.6669 581.2751 138.8041 578.997 117.6667 578.997 C
117.6667 573.6636 L
139.2155 573.6636 156.4228 576.0027 174.1667 581.097 C
172.9167 586.2469 L
f
U
u
173.1333 486.1939 m
155.375 481.9375 138.7433 479.994 117.3333 479.994 C
117.3333 472.3271 L
138.8603 472.3271 155.9743 474.2398 174.6333 478.6939 C
173.1333 486.1939 L
f
179.35 385.65 m
155.6875 382.3125 138.6824 381 117 381 C
117 371 L
138.9541 371 156.6066 372.3269 180.85 375.75 C
179.35 385.65 L
f
U
u
150.5 579.9969 m
150.5 554.8303 l
150.5 524.7054 144.738 517.2327 122.7 513.7637 C
124 508.4969 L
148.4884 512.6356 156.1667 521.8588 156.1667 554.8303 C
156.1667 579.9969 L
150.5 579.9969 L
f
148.9999 479.9939 m
148.9999 454.6605 l
148.9999 425.7811 143.7052 418.9912 122 415.5273 C
124 407.9939 L
149.3694 412.2815 157.3334 421.659 157.3334 454.6605 C
157.3334 479.9939 L
148.9999 479.9939 L
f
147.5 380 m
147.5 354.5 l
147.5 326.8658 142.6726 320.7588 121.3 317.3 C
124 307.5 L
150.2504 311.9365 158.5 321.4685 158.5 354.5 C
158.5 380 L
147.5 380 L
f
146 279.9969 m
146 254.3303 l
146 227.9414 141.6399 222.5174 120.6 219.0637 C
124 206.9969 L
151.1315 211.5824 159.6667 221.2688 159.6667 254.3303 C
159.6667 279.9969 L
146 279.9969 L
f
144.5001 180.003 m
144.5001 154.1697 l
144.5001 129.0261 140.6072 124.2849 119.9 120.8363 C
124 106.503 L
152.0125 111.2374 160.8333 121.0782 160.8333 154.1697 C
160.8333 180.003 L
144.5001 180.003 L
f
U
u
191.3334 546.4969 m
191.3334 551.8303 L
106.6667 551.8303 L
106.6667 546.4969 L
191.3334 546.4969 L
f
191.6667 444.9938 m
191.6667 452.6606 L
106.3333 452.6606 L
106.3333 444.9938 L
191.6667 444.9938 L
f
192 343.5 m
192 353.5 L
106 353.5 L
106 343.5 L
192 343.5 L
f
192.3334 241.9969 m
192.3334 254.3303 L
105.6667 254.3303 L
105.6667 241.9969 L
192.3334 241.9969 L
f
192.6667 140.5031 m
192.6667 155.1697 L
105.3334 155.1697 L
105.3334 140.5031 L
192.6667 140.5031 L
f
U
u
199 182.4985 m
195.7542 188.311 192.5854 193.6206 189 198.9985 C
180.1 194.0318 L
183.448 189.0252 186.7208 183.5983 189.9 177.9151 C
199 182.4985 L
f
199 283.0015 m
195.7533 288.7016 192.6433 293.7492 189 299.0015 C
181.4 294.6682 L
184.8564 289.7093 188.0279 284.5971 191.2 279.0349 C
199 283.0015 L
f
U
u
198.5 584 m
195.2508 589.3625 192.3171 593.6244 188.5 598.5 C
184.8 596.0666 L
188.5813 591.2508 191.4492 587.0826 194.6 581.8833 C
198.5 584 L
f
U
u
199 484 m
195.7517 489.475 192.7592 493.9989 189 499 C
183.9999 495.9333 L
187.6729 491.0698 190.642 486.5869 193.7999 481.2666 C
199 484 L
f
199 383.5 m
195.7525 389.0875 192.7012 393.8733 189 399 C
182.7 395.3 L
186.2647 390.3888 189.335 385.5912 192.5 380.15 C
199 383.5 L
f
U
u
183.1 180.8985 m
179.9371 186.5565 176.8312 191.7475 173.3333 196.9985 C
164.6033 192.1252 L
167.8652 187.2423 171.0786 181.9112 174.1733 176.3852 C
183.1 180.8985 L
f
184 281.0616 m
180.8544 286.5709 177.8056 291.4929 174.2667 296.6015 C
166.8027 292.3429 L
170.1515 287.5303 173.2719 282.4948 176.3387 277.1309 C
184 281.0616 L
f
U
u
186.2 581.04 m
183.1061 586.1034 180.2286 590.2184 176.5666 594.9 C
172.9006 592.4853 L
176.5102 587.8838 179.3513 583.7349 182.3346 578.8573 C
186.2 581.04 L
f
U
u
185.7999 481.38 m
182.6888 486.5921 179.7542 490.9761 176.1333 495.8 C
171.2012 492.7707 L
174.7239 488.0988 177.658 483.6544 180.6692 478.6147 C
185.7999 481.38 L
f
184.9 381.22 m
181.7716 386.5807 178.7799 391.2337 175.2 396.2 C
169.002 392.556 L
172.4378 387.8138 175.465 383.0738 178.504 377.872 C
184.9 381.22 L
f
U
70.4 639.7 m
57.6875 646.125 44.2024 652.515 31.2 658.3 C
29.9 655.6 L
43 649.75 56.5052 643.315 69 637 C
70.4 639.7 L
f
85.2 682.7 m
82.1234 687.6148 79.303 691.4608 75.6 696 C
73.2 694.2 L
76.8965 689.6688 79.6445 685.8155 82.6 681.1 C
85.2 682.7 L
f
u
13.0834 545.3136 m
26.7946 558.5373 33.6708 572.3019 35.5334 590.9969 C
30 590.9969 L
28.3134 574.0687 21.7961 561.2366 9 548.9969 C
13.0834 545.3136 L
f
14.0667 443.7271 m
28.0257 457.2966 35.1415 471.6702 37.0668 490.9939 C
28.9999 490.9939 L
27.3133 474.0657 20.796 461.2336 7.9999 448.9939 C
14.0667 443.7271 L
f
15.05 342.15 m
29.2568 356.065 36.6121 371.0477 38.6 391 C
28 391 L
26.3134 374.0718 19.7961 361.2397 7 349 C
15.05 342.15 L
f
16.0334 240.5636 m
30.4879 254.8243 38.0829 270.4161 40.1334 290.9969 C
27 290.9969 L
25.3134 274.0688 18.7961 261.2366 6 248.9969 C
16.0334 240.5636 L
f
17.0166 138.9864 m
31.7189 153.5928 39.5535 169.7936 41.6666 191.003 C
26 191.003 L
24.3134 174.0749 17.7961 161.2427 5 149.003 C
17.0166 138.9864 L
f
U
18 37.4 m
32.95 52.352 41.0243 69.1619 43.2 91 C
25 91 L
23.3134 74.0718 16.7961 61.2397 4 49 C
18 37.4 L
f
u
75.1667 576.3182 m
74.8325 534.7213 58.0565 517.9107 15.6167 514.5015 C
16.1667 509.1682 L
61.2241 512.7875 80.8333 531.9613 80.8333 577.8348 C
28.8333 577.8348 L
28.8333 572.5016 L
78.8333 572.5016 L
75.1667 576.3182 L
f
73.3333 475.5318 m
72.8726 434.6988 57.4061 419.3621 15.5333 415.9985 C
16.3333 408.3318 L
62.4091 412.0329 81.6667 431.0434 81.6667 477.6651 C
28.6667 477.6651 L
28.6667 469.9984 L
78.6667 469.9984 L
73.3333 475.5318 L
f
U
u
71.5 374.75 m
70.9127 334.681 56.7558 320.8181 15.45 317.5 C
16.5 307.5 L
63.5941 311.283 82.5 330.13 82.5 377.5 C
28.5 377.5 L
28.5 367.5 L
78.5 367.5 L
71.5 374.75 L
f
69.6666 275.2969 m
68.9438 235.3775 55.4478 222.2167 15.3667 218.997 C
16.6667 206.6636 L
63.8903 210.457 83.3334 229.7273 83.3334 278.6636 C
28.3333 278.6636 L
28.3333 266.3302 L
78.3333 266.3302 L
69.6666 275.2969 L
f
67.8334 174.8531 m
66.9818 135.544 54.6331 123.664 15.2833 120.503 C
16.8333 105.8364 L
64.8531 109.6938 84.1667 128.9474 84.1667 178.8364 C
28.1667 178.8364 L
28.1667 164.1698 L
78.1667 164.1698 L
67.8334 174.8531 L
f
U
66 74.4 m
65.0196 35.7013 53.8183 25.1022 15.2 22 C
17 5 L
65.8159 8.9214 85 28.1582 85 79 C
28 79 L
28 62 L
78 62 L
66 74.4 L
f
u
98.3333 583.8348 m
95.0842 589.1974 92.1504 593.4593 88.3333 598.3348 C
84.6333 595.9015 L
88.4147 591.0857 91.2825 586.9175 94.4333 581.7182 C
98.3333 583.8348 L
f
98.6667 483.6651 m
95.4183 489.1402 92.4258 493.664 88.6667 498.6651 C
83.6666 495.5984 L
87.3397 490.735 90.3087 486.252 93.4666 480.9318 C
98.6667 483.6651 L
f
U
u
99 383.5 m
95.7525 389.0876 92.7012 393.8733 89 399 C
82.7 395.3 L
86.2647 390.3888 89.335 385.5912 92.5 380.15 C
99 383.5 L
f
98.6667 282.6636 m
95.42 288.3637 92.31 293.4114 88.6667 298.6636 C
81.0666 294.3303 L
84.523 289.3714 87.6945 284.2592 90.8666 278.6969 C
98.6667 282.6636 L
f
98.8333 182.3364 m
95.5875 188.149 92.4187 193.4586 88.8333 198.8364 C
79.9333 193.8697 L
83.2814 188.8631 86.5542 183.4363 89.7334 177.7531 C
98.8333 182.3364 L
f
U
99 82 m
95.755 87.9251 92.5275 93.4966 89 99 C
78.8 93.4 L
82.0397 88.3457 85.4137 82.6042 88.6 76.8 C
99 82 L
f
u
84.7667 582.7082 m
81.6728 587.7716 78.7953 591.8866 75.1333 596.5682 C
71.4674 594.1535 L
75.0769 589.552 77.918 585.4031 80.9013 580.5255 C
84.7667 582.7082 L
f
84.3333 482.7118 m
81.2222 487.9239 78.2876 492.3079 74.6667 497.1318 C
69.7346 494.1025 L
73.2573 489.4306 76.1915 484.9862 79.2026 479.9465 C
84.3333 482.7118 L
f
U
u
83.9 382.72 m
80.7716 388.0807 77.7799 392.7337 74.2 397.7 C
68.002 394.056 L
71.4378 389.3138 74.465 384.5738 77.504 379.372 C
83.9 382.72 L
f
82.8 282.057 m
79.6544 287.5664 76.6056 292.4884 73.0666 297.597 C
65.6026 293.3383 L
68.9514 288.5257 72.0718 283.4902 75.1386 278.1263 C
82.8 282.057 L
f
82.2 181.9031 m
79.0372 187.5611 75.9313 192.7521 72.4333 198.003 C
63.7034 193.1298 L
66.9653 188.2469 70.1787 182.9158 73.2734 177.3898 C
82.2 181.9031 L
f
U
81.6 81.7401 m
78.4199 87.5467 75.2569 93.0067 71.8 98.4 C
61.804 92.9121 L
64.979 87.9588 68.2855 82.3322 71.408 76.6441 C
81.6 81.7401 L
f
u
71 539.5803 m
58.5848 545.9014 45.2762 552.2462 32.3834 558.0136 C
30 553.2469 L
42.8474 547.4861 56.171 541.1031 68.4667 534.8469 C
71 539.5803 L
f
71.6 439.4606 m
59.4821 445.6778 46.3499 451.9775 33.5667 457.7272 C
30.1 450.8937 L
42.6947 445.2223 55.8368 438.8912 67.9333 432.6938 C
71.6 439.4606 L
f
72.2 339.35 m
60.3794 345.4633 47.4236 351.7179 34.75 357.45 C
30.2 348.55 L
42.5421 342.9678 55.5026 336.6887 67.4 330.55 C
72.2 339.35 L
f
72.8 239.2303 m
61.2767 245.2397 48.4974 251.4491 35.9333 257.1636 C
30.3 246.1969 L
42.3895 240.7039 55.1684 234.4769 66.8666 228.3969 C
72.8 239.2303 L
f
73.4 139.1197 m
62.174 145.0253 49.571 151.1896 37.1166 156.8864 C
30.4 143.8531 L
42.2368 138.4495 54.8342 132.2744 66.3333 126.2531 C
73.4 139.1197 L
f
U
30.5 41.5 m
42.0842 36.1856 54.5 30.0625 65.8 24.1 C
74 39 L
63.0713 44.8017 50.6448 50.9208 38.3 56.6 C
30.5 41.5 L
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
