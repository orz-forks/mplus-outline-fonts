%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (2540.eps)
%%CreationDate: (9/17/04) (5:14 PM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
500 600 m
500 700 L
400 700 L
400 600 L
500 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
400 600 m
400 700 L
300 700 L
300 600 L
400 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
500 500 m
500 600 L
400 600 L
400 500 L
500 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
400 500 m
400 600 L
300 600 L
300 500 L
400 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
0 O
0 g
1 D
172.7 686.3 m
155.9588 680.6127 138.8649 678 118 678 C
118 675 L
139.5707 675 156.8713 677.7656 173.7 683.5 C
172.7 686.3 L
f
425.3 657.1 m
444.512 652.5566 466.1965 646.0313 484.9 639.2 C
486 642 L
466.5251 649.1131 444.5 655.625 426 660 C
426 690 L
423 690 L
423 610 L
426 610 L
426 658 L
425.3 657.1 L
f
12.1 646.9 m
25.5635 659.7781 32.2 672.9336 34 691 C
31 691 L
29.3134 674.0718 22.7961 661.2397 10 649 C
12.1 646.9 L
f
23 660 m
38.5825 653.2646 55.5 645.3125 70 638 C
71.4 640.7 L
56.2754 648.3275 39.6873 656.0921 24.4 662.7 C
23 660 L
f
152 680 m
152 655 l
152 623.6298 145.7707 615.4741 123.4 612 C
124 609 L
147.6073 612.9898 155 622.0585 155 655 C
155 680 L
152 680 L
f
191 648 m
191 651 L
107 651 L
107 648 L
191 648 L
f
210 681 m
212.9732 670.2295 216.375 657.3125 219 646 C
221.9 646.6 L
219.0043 659.079 215.4214 672.6662 212.9 681.8 C
210 681 L
f
238.1 684.2 m
241.0732 673.4295 244.475 660.5125 247.1 649.2 C
250 649.8 L
247.1043 662.279 243.5214 675.8662 241 685 C
238.1 684.2 L
f
391 655 m
391 658 L
307 658 L
307 655 L
352 655 L
352 621.4019 347.7914 615.8387 323.4 612 C
324 609 L
350.044 613.4016 355 619.6843 355 655 C
391 655 L
f
373 682 m
373 685 L
319 685 L
319 682 L
373 682 L
f
283.7 674.3 m
281.0802 632.9815 264.7178 617.4136 225.7 614 C
226 611 L
266.7219 614.5627 284.1743 631.492 286.7 674.3 C
283.7 674.3 L
f
98 684 m
94.75 689.25 91.875 693.25 88 698 C
85.6 696.2 L
89.4897 691.4319 92.2563 687.5783 95.4 682.5 C
98 684 L
f
86.6 680.7 m
83.5234 685.6148 80.703 689.4608 77 694 C
74.6 692.2 L
78.2965 687.6688 81.0445 683.8155 84 679.1 C
86.6 680.7 L
f
198 684 m
194.75 689.25 191.875 693.25 188 698 C
185.6 696.2 L
189.4897 691.4319 192.2563 687.5783 195.4 682.5 C
198 684 L
f
186.6 680.7 m
183.5234 685.6148 180.703 689.4608 177 694 C
174.6 692.2 L
178.2965 687.6688 181.0445 683.8155 184 679.1 C
186.6 680.7 L
f
297 684 m
293.75 689.25 290.875 693.25 287 698 C
284.6 696.2 L
288.4897 691.4319 291.2563 687.5783 294.4 682.5 C
297 684 L
f
285.6 680.7 m
282.5234 685.6148 279.703 689.4608 276 694 C
273.6 692.2 L
277.2965 687.6688 280.0445 683.8155 283 679.1 C
285.6 680.7 L
f
398 684 m
394.75 689.25 391.875 693.25 388 698 C
385.6 696.2 L
389.4897 691.4319 392.2563 687.5783 395.4 682.5 C
398 684 L
f
386.6 680.7 m
383.5234 685.6148 380.703 689.4608 377 694 C
374.6 692.2 L
378.2965 687.6688 381.0445 683.8155 384 679.1 C
386.6 680.7 L
f
484 673 m
480.5 678.375 476.875 683.25 473 688 C
470.6 686.2 L
474.6415 681.2459 478.2671 676.3648 481.5 671.4 C
484 673 L
f
471.4 668.9 m
468.0824 673.9223 464.658 678.516 461 683 C
458.6 681.2 L
462.2734 676.6971 465.69 672.1491 468.9 667.3 C
471.4 668.9 L
f
77 677.1 m
76.7924 634.7392 58.7068 616.4547 15.7 613 C
16 610 L
60.0391 613.5375 80 632.8747 80 678 C
29 678 L
29 675 L
79 675 L
77 677.1 L
f
u
12.0833 545.3135 m
25.7947 558.5374 32.6707 572.3018 34.5334 590.9969 C
29 590.9969 L
27.3133 574.0687 20.796 561.2366 8 548.9969 C
12.0833 545.3135 L
f
14.0667 443.7271 m
28.0259 457.2967 35.1415 471.6699 37.0667 490.9939 C
28.9999 490.9939 L
27.3133 474.0657 20.796 461.2336 7.9999 448.9939 C
14.0667 443.7271 L
f
14.05 342.15 m
28.257 356.0653 35.6121 371.0473 37.6 391 C
27 391 L
25.3134 374.0718 18.7961 361.2397 6 349 C
14.05 342.15 L
f
17.0333 240.5635 m
31.4882 254.8246 39.0828 270.4155 41.1334 290.9969 C
28 290.9969 L
26.3133 274.0687 19.796 261.2366 7 248.9969 C
17.0333 240.5635 L
f
17.0166 138.9864 m
31.7193 153.5932 39.5534 169.7929 41.6666 191.003 C
26 191.003 L
24.3134 174.0748 17.7961 161.2427 5 149.003 C
17.0166 138.9864 L
f
U
18 37.4 m
32.9505 52.3525 41.0242 69.1611 43.2 91 C
25 91 L
23.3134 74.0718 16.7961 61.2397 4 49 C
18 37.4 L
f
u
75.1666 576.9802 m
74.827 535.1017 57.7564 517.882 15.6166 514.497 C
16.1667 509.1636 L
60.9186 512.7584 80.8333 532.3144 80.8333 578.4969 C
28.8333 578.4969 L
28.8333 573.1635 L
78.8333 573.1635 L
75.1666 576.9802 L
f
74.3332 476.8605 m
73.8615 435.4643 57.8059 419.3093 16.5333 415.994 C
17.3333 408.3272 L
62.7982 411.9793 82.6667 431.7542 82.6667 478.9939 C
29.6666 478.9939 L
29.6666 471.3271 L
79.6666 471.3271 L
74.3332 476.8605 L
f
70.5 376.75 m
69.8963 335.836 54.8556 320.7457 14.45 317.5 C
15.5 307.5 L
61.6776 311.2093 81.5 331.2031 81.5 379.5 C
27.5 379.5 L
27.5 369.5 L
77.5 369.5 L
70.5 376.75 L
f
71.6666 276.6302 m
70.9308 236.1986 56.9051 222.173 17.3666 218.997 C
18.6667 206.6636 L
65.5571 210.4302 85.3333 230.6428 85.3333 279.9969 C
30.3333 279.9969 L
30.3333 267.6635 L
80.3333 267.6635 L
71.6666 276.6302 L
f
68.8334 176.5197 m
67.9656 136.5703 54.9548 123.6094 16.2833 120.503 C
17.8333 105.8364 L
65.4366 109.6603 85.1666 130.0918 85.1666 180.503 C
29.1667 180.503 L
29.1667 165.8364 L
79.1667 165.8364 L
68.8334 176.5197 L
f
U
66 76.4 m
65.0001 36.9328 53.0043 25.0367 15.2 22 C
17 5 L
65.3161 8.8811 85 29.5315 85 81 C
28 81 L
28 64 L
78 64 L
66 76.4 L
f
u
71.8333 540.4136 m
56.6982 548.1136 39.8624 556.0345 24.3333 562.7469 C
22 557.9135 L
37.6506 551.1487 54.7157 543.1016 69.3 535.6802 C
71.8333 540.4136 L
f
73.2667 440.1272 m
58.1211 447.8997 41.0376 455.9769 25.2666 462.7939 C
21.9999 455.8271 L
37.7186 449.0328 54.9315 440.8907 69.5999 433.3604 C
73.2667 440.1272 L
f
72.7 339.85 m
57.5439 347.695 40.2128 355.9285 24.2 362.85 C
20 353.75 L
35.7868 346.9262 53.1473 338.6891 67.9 331.05 C
72.7 339.85 L
f
75.1333 239.5636 m
59.9668 247.4811 42.388 255.871 26.1333 262.8969 C
21 251.6635 L
36.8549 244.8103 54.3631 236.4782 69.1999 228.7302 C
75.1333 239.5636 L
f
74.5666 139.2864 m
59.3896 147.2764 41.5631 155.8226 25.0666 162.953 C
19 149.5864 L
34.9231 142.7038 52.5789 134.2767 67.5 126.4197 C
74.5666 139.2864 L
f
U
74 39 m
58.8125 47.0625 40.7383 55.765 24 63 C
17 47.5 L
32.9912 40.5879 50.7947 32.0658 65.8 24.1 C
74 39 L
f
u
171.9167 586.0848 m
154.7434 581.16 138.1599 579.0015 117.3333 579.0015 C
117.3333 573.6682 L
138.9622 573.6682 155.9062 575.9867 173.1833 580.9515 C
171.9167 586.0848 L
f
171.1333 485.8651 m
153.5279 481.7027 137.455 479.9985 116.6667 479.9985 C
116.6667 472.3318 L
138.3538 472.3318 154.941 474.2032 172.6666 478.3984 C
171.1333 485.8651 L
f
U
u
170.35 385.65 m
152.3125 382.25 136.75 381 116 381 C
116 371 L
137.7453 371 153.9759 372.4243 172.15 375.85 C
170.35 385.65 L
f
176.5667 286.097 m
157.0625 283.3125 137.5625 281.997 116.6666 281.997 C
116.6666 269.6636 L
138.2376 269.6636 158.3582 271.0548 178.2667 273.897 C
176.5667 286.097 L
f
173.7833 188.553 m
155.6285 184.6885 138.5608 183.003 116.3333 183.003 C
116.3333 168.3364 L
139.356 168.3364 157.3423 170.1192 176.45 174.1698 C
173.7833 188.553 L
f
U
174 89 m
155.5625 85.5 138.5 84 116 84 C
116 67 L
139.313 67 157.4365 68.5862 177 72.3 C
174 89 L
f
u
150.4999 579.9969 m
150.4999 554.8303 l
150.4999 524.7054 144.7379 517.2326 122.7 513.7637 C
124 508.4969 L
148.4884 512.6356 156.1667 521.8587 156.1667 554.8303 C
156.1667 579.9969 L
150.4999 579.9969 L
f
148.9999 479.9939 m
148.9999 454.6605 l
148.9999 425.7811 143.7052 418.9912 121.9999 415.5273 C
124 407.9938 L
149.3694 412.2815 157.3334 421.659 157.3334 454.6605 C
157.3334 479.9939 L
148.9999 479.9939 L
f
146.5 380 m
146.5 354.5 l
146.5 326.8658 141.6726 320.7588 120.3 317.3 C
123 307.5 L
149.2504 311.9365 157.5 321.4685 157.5 354.5 C
157.5 380 L
146.5 380 L
f
145.9999 279.9969 m
145.9999 254.3303 l
145.9999 227.9414 141.6398 222.5173 120.6 219.0636 C
124 206.9969 L
151.1315 211.5824 159.6667 221.2687 159.6667 254.3303 C
159.6667 279.9969 L
145.9999 279.9969 L
f
144.5 180.003 m
144.5 154.1697 l
144.5 129.0261 140.6072 124.2849 119.9 120.8363 C
124 106.503 L
152.0125 111.2374 160.8333 121.0782 160.8333 154.1697 C
160.8333 180.003 L
144.5 180.003 L
f
U
143 80 m
143 54 l
143 30.1018 139.5745 26.0435 119.2 22.6 C
124 6 L
152.8936 10.8833 162 20.8785 162 54 C
162 80 L
143 80 L
f
u
191.3333 546.4969 m
191.3333 551.8303 L
106.6666 551.8303 L
106.6666 546.4969 L
191.3333 546.4969 L
f
191.6667 444.9938 m
191.6667 452.6606 L
106.3333 452.6606 L
106.3333 444.9938 L
191.6667 444.9938 L
f
191 343.5 m
191 353.5 L
105 353.5 L
105 343.5 L
191 343.5 L
f
192.3333 241.9969 m
192.3333 254.3303 L
105.6666 254.3303 L
105.6666 241.9969 L
192.3333 241.9969 L
f
192.6666 140.5031 m
192.6666 155.1697 L
105.3333 155.1697 L
105.3333 140.5031 L
192.6666 140.5031 L
f
U
193 39 m
193 56 L
105 56 L
105 39 L
193 39 L
f
u
209.3333 580.8303 m
212.3065 570.0597 215.7083 557.1428 218.3333 545.8303 C
223.7 546.9136 L
220.8383 559.2461 217.247 572.8334 214.6667 582.1636 C
209.3333 580.8303 L
f
208.6666 480.6605 m
211.6398 469.89 215.0416 456.973 217.6666 445.6605 C
225.5001 447.2272 L
222.6724 459.4132 219.0727 473.0005 216.4334 482.5272 C
208.6666 480.6605 L
f
208 380.5 m
210.9732 369.7295 214.375 356.8125 217 345.5 C
227.3 347.55 L
224.5062 359.5895 220.8982 373.1768 218.2 382.9 C
208 380.5 L
f
207.3333 280.3303 m
210.3065 269.5597 213.7083 256.6428 216.3333 245.3303 C
229.1 247.8636 L
226.3403 259.7567 222.7238 273.344 219.9667 283.2636 C
207.3333 280.3303 L
f
206.6667 180.1697 m
209.6399 169.3992 213.0417 156.4822 215.6667 145.1697 C
230.8999 148.1864 L
228.1741 159.9329 224.5493 173.5203 221.7333 183.6364 C
206.6667 180.1697 L
f
U
206 80 m
208.9732 69.2295 212.375 56.3125 215 45 C
232.7 48.5 L
230.0082 60.1001 226.375 73.6875 223.5 84 C
206 80 L
f
u
237.4166 583.9969 m
240.3898 573.2264 243.7916 560.3094 246.4166 548.9969 C
251.7834 550.0803 L
248.9216 562.4128 245.3303 576 242.75 585.3303 C
237.4166 583.9969 L
f
236.7333 483.7939 m
239.7065 473.0234 243.1083 460.1064 245.7333 448.7939 C
253.5668 450.3606 L
250.739 462.5466 247.1394 476.1338 244.5001 485.6606 C
236.7333 483.7939 L
f
236.05 383.6 m
239.0232 372.8295 242.425 359.9125 245.05 348.6 C
255.35 350.65 L
252.5562 362.6895 248.9482 376.2768 246.25 386 C
236.05 383.6 L
f
235.3666 283.3969 m
238.3398 272.6264 241.7416 259.7094 244.3666 248.3969 C
257.1334 250.9303 L
254.3736 262.8233 250.7572 276.4107 248 286.3303 C
235.3666 283.3969 L
f
234.6833 183.203 m
237.6565 172.4325 241.0583 159.5155 243.6833 148.203 C
258.9166 151.2197 L
256.1908 162.9663 252.566 176.5536 249.7499 186.6697 C
234.6833 183.203 L
f
U
234 83 m
236.9732 72.2295 240.375 59.3125 243 48 C
260.7 51.5 L
258.0082 63.1001 254.375 76.6875 251.5 87 C
234 83 L
f
u
426.5167 555.3302 m
445.3242 550.8515 466.4687 544.4936 484.7666 537.8302 C
486.6667 542.997 L
467.6147 549.935 446.1105 556.3096 427.8334 560.6636 C
427.8334 590.3303 L
422 590.3303 L
422 509.6636 L
427.8334 509.6636 L
427.8334 556.6636 L
426.5167 555.3302 L
f
427.7334 453.5605 m
446.1365 449.1464 466.741 442.9558 484.6333 436.4605 C
487.3334 443.9939 L
468.7043 450.7568 447.7211 456.9943 429.6668 461.3273 C
429.6668 490.6606 L
420.9999 490.6606 L
420.9999 409.3272 L
429.6668 409.3272 L
429.6668 455.3271 L
427.7334 453.5605 L
f
428.95 351.8 m
446.9487 347.4506 467.0133 341.4274 484.5 335.1 C
488 345 L
469.7938 351.5878 449.3315 357.688 431.5 362 C
431.5 391 L
420 391 L
420 309 L
431.5 309 L
431.5 354 L
428.95 351.8 L
f
430.1667 250.0302 m
447.7609 245.7455 467.2855 239.8896 484.3666 233.7302 C
488.6667 245.997 L
470.8834 252.4097 450.942 258.3727 433.3334 262.6636 C
433.3334 291.3303 L
419 291.3303 L
419 208.6636 L
433.3334 208.6636 L
433.3334 252.6636 L
430.1667 250.0302 L
f
431.3833 148.2698 m
448.5731 144.0497 467.5578 138.3612 484.2333 132.3697 C
489.3333 147.003 L
471.9729 153.2406 452.5524 159.0664 435.1666 163.3363 C
435.1666 191.6697 L
418 191.6697 L
418 108.3364 L
435.1666 108.3364 L
435.1666 151.3364 L
431.3833 148.2698 L
f
U
432.6 46.5 m
449.3854 42.3446 467.8301 36.8235 484.1 31 C
490 48 L
473.0625 54.0625 454.163 59.7511 437 64 C
437 92 L
417 92 L
417 8 L
437 8 L
437 50 L
432.6 46.5 L
f
u
281.7666 573.2802 m
279.0801 533.798 263.4112 519.0806 225.1166 515.7303 C
225.8333 510.3302 L
266.9699 513.9292 284.5366 530.7716 287.2667 573.2802 C
281.7666 573.2802 L
f
279.8332 472.2605 m
277.0801 434.6145 262.1047 420.7477 224.5333 417.4606 C
225.6666 409.6605 L
267.2179 413.2958 284.899 430.0513 287.8333 472.2605 C
279.8332 472.2605 L
f
277.9 371.25 m
275.0802 335.44 260.7983 322.4237 223.95 319.2 C
225.5 309 L
267.4658 312.6715 285.2613 329.3402 288.4 371.25 C
277.9 371.25 L
f
275.9666 270.2303 m
273.0802 236.2565 259.4917 224.0908 223.3666 220.9303 C
225.3333 208.3302 L
267.7138 212.0381 285.6237 228.6198 288.9667 270.2303 C
275.9666 270.2303 L
f
274.0334 169.2197 m
271.0803 137.0821 258.1853 125.7668 222.7833 122.6696 C
225.1667 107.6697 L
267.9618 111.4138 285.986 127.9087 289.5333 169.2197 C
274.0334 169.2197 L
f
U
272.1 68.2 m
269.0803 37.8986 256.8788 27.4339 222.2 24.4 C
225 7 L
268.2098 10.7804 286.3484 27.1884 290.1 68.2 C
272.1 68.2 L
f
u
484.8333 573.1036 m
481.3326 578.6493 477.7308 583.7147 473.8667 588.6636 C
470.0306 586.1556 L
473.9817 581.1174 477.6103 576.0163 480.878 570.8343 C
484.8333 573.1036 L
f
485.6667 473.2072 m
482.1652 478.9236 478.5866 484.1793 474.7334 489.3273 C
469.4613 486.1112 L
473.3219 480.9889 476.9536 475.6679 480.2559 470.2685 C
485.6667 473.2072 L
f
486.5 373.32 m
482.9977 379.207 479.4423 384.6531 475.6 390 C
468.892 386.076 L
472.6622 380.8696 476.2969 375.3286 479.634 369.712 C
486.5 373.32 L
f
487.3333 273.4236 m
483.8303 279.4813 480.2981 285.1178 476.4667 290.6636 C
468.3226 286.0316 L
472.0024 280.7411 475.6402 274.9802 479.012 269.1463 C
487.3333 273.4236 L
f
488.1666 173.5364 m
484.6628 179.7648 481.1539 185.5916 477.3333 191.3363 C
467.7533 185.9964 L
471.3426 180.6218 474.9835 174.6409 478.39 168.5897 C
488.1666 173.5364 L
f
U
489 73.64 m
485.4954 80.0391 482.0097 86.0563 478.2 92 C
467.184 85.952 L
470.6829 80.4933 474.3268 74.2925 477.768 68.024 C
489 73.64 L
f
u
471.5253 569.1002 m
468.1882 574.3306 464.7652 579.1415 461.0947 583.849 C
457.2953 581.3611 L
460.928 576.7171 464.3703 571.9143 467.6074 566.8495 C
471.5253 569.1002 L
f
471.6506 469.3003 m
468.2941 474.7389 464.8724 479.767 461.1893 484.6979 C
455.9907 481.5222 L
459.5826 476.7371 463.0506 471.6795 466.3148 466.399 C
471.6506 469.3003 L
f
471.7759 369.5096 m
468.3999 375.1563 464.9797 380.4016 461.284 385.556 C
454.6861 381.6925 L
458.2373 376.7663 461.7311 371.4539 465.0223 365.9578 C
471.7759 369.5096 L
f
471.9012 269.7098 m
468.5058 275.5646 465.0869 281.0271 461.3786 286.405 C
453.3815 281.8536 L
456.8919 276.7863 460.4114 271.2191 463.7297 265.5073 C
471.9012 269.7098 L
f
472.0265 169.9191 m
468.6116 175.9821 465.1941 181.6617 461.4733 187.263 C
452.0769 182.0239 L
455.5466 176.8155 459.0918 170.9935 462.4372 165.066 C
472.0265 169.9191 L
f
U
472.1519 70.1193 m
468.7175 76.3904 465.3014 82.2872 461.568 88.112 C
450.7723 82.185 L
454.2012 76.8355 457.7722 70.7587 461.1446 64.6156 C
472.1519 70.1193 L
f
u
99 584.5 m
95.7508 589.8625 92.8171 594.1244 89 599 C
85.3 596.5666 L
89.0813 591.7508 91.9491 587.5826 95.1 582.3833 C
99 584.5 L
f
98 482.9999 m
94.7517 488.475 91.7592 492.9988 88 498 C
82.9999 494.9333 L
86.6729 490.0698 89.642 485.5868 92.7999 480.2666 C
98 482.9999 L
f
98.5 383 m
95.2525 388.5875 92.2012 393.3733 88.5 398.5 C
82.2 394.8 L
85.7647 389.8888 88.835 385.0912 92 379.65 C
98.5 383 L
f
96.6667 282.6636 m
93.42 288.3637 90.31 293.4113 86.6667 298.6636 C
79.0666 294.3303 L
82.523 289.3713 85.6945 284.2591 88.8666 278.6969 C
96.6667 282.6636 L
f
97.8333 182.3364 m
94.5875 188.149 91.4187 193.4585 87.8333 198.8364 C
78.9333 193.8697 L
82.2814 188.8631 85.5541 183.4363 88.7333 177.7531 C
97.8333 182.3364 L
f
U
99 82 m
95.755 87.9251 92.5275 93.4966 89 99 C
78.8 93.4 L
82.0397 88.3457 85.4137 82.6042 88.6 76.8 C
99 82 L
f
u
186.2333 580.5415 m
183.1395 585.605 180.262 589.72 176.6 594.4015 C
172.934 591.9869 L
176.5436 587.3853 179.3847 583.2365 182.368 578.3589 C
186.2333 580.5415 L
f
185.8666 480.3785 m
182.7555 485.5906 179.8209 489.9746 176.2 494.7985 C
171.2679 491.7692 L
174.7906 487.0973 177.7248 482.6529 180.736 477.6132 C
185.8666 480.3785 L
f
U
u
198.3333 583.8348 m
195.0841 589.1974 192.1504 593.4593 188.3333 598.3348 C
184.6333 595.9015 L
188.4147 591.0857 191.2825 586.9175 194.4333 581.7182 C
198.3333 583.8348 L
f
198.6667 483.6651 m
195.4183 489.1402 192.4258 493.664 188.6667 498.6651 C
183.6666 495.5985 L
187.3397 490.735 190.3087 486.2521 193.4666 480.9318 C
198.6667 483.6651 L
f
U
u
86.9 581.2067 m
83.8061 586.2701 80.9286 590.3851 77.2666 595.0667 C
73.6006 592.652 L
77.2102 588.0504 80.0513 583.9016 83.0346 579.024 C
86.9 581.2067 L
f
85.1999 479.7133 m
82.0888 484.9254 79.1542 489.3094 75.5333 494.1333 C
70.6012 491.104 L
74.1239 486.4321 77.058 481.9877 80.0692 476.9479 C
85.1999 479.7133 L
f
85 379.72 m
81.8716 385.0807 78.8799 389.7337 75.3 394.7 C
69.102 391.056 L
72.5377 386.3138 75.565 381.5738 78.604 376.372 C
85 379.72 L
f
199 383.5 m
195.7525 389.0876 192.7012 393.8733 189 399 C
182.7 395.3 L
186.2647 390.3888 189.335 385.5913 192.5 380.15 C
199 383.5 L
f
185.5 380.2201 m
182.3716 385.5808 179.3799 390.2338 175.8 395.2 C
169.602 391.5561 L
173.0377 386.8138 176.065 382.0739 179.104 376.8721 C
185.5 380.2201 L
f
82.4666 279.3903 m
79.321 284.8997 76.2722 289.8217 72.7333 294.9303 C
65.2693 290.6717 L
68.6181 285.8591 71.7384 280.8236 74.8052 275.4596 C
82.4666 279.3903 L
f
82.9333 179.0698 m
79.7705 184.7278 76.6646 189.9188 73.1667 195.1697 C
64.4367 190.2965 L
67.6986 185.4135 70.912 180.0825 74.0067 174.5565 C
82.9333 179.0698 L
f
U
83.4 78.7401 m
80.2199 84.5467 77.0569 90.0067 73.6 95.4 C
63.604 89.9121 L
66.779 84.9588 70.0855 79.3322 73.208 73.6441 C
83.4 78.7401 L
f
u
297.1667 583.4969 m
293.9175 588.8594 290.9837 593.1214 287.1667 597.9969 C
283.4666 595.5636 L
287.248 590.7478 290.1158 586.5795 293.2666 581.3802 C
297.1667 583.4969 L
f
297.3333 482.9938 m
294.085 488.4689 291.0925 492.9927 287.3333 497.9939 C
282.3332 494.9272 L
286.0063 490.0637 288.9753 485.5808 292.1332 480.2605 C
297.3333 482.9938 L
f
297.5 382.5 m
294.2525 388.0875 291.2012 392.8733 287.5 398 C
281.2 394.3 L
284.7647 389.3888 287.835 384.5912 291 379.15 C
297.5 382.5 L
f
297.6667 281.9969 m
294.42 287.697 291.31 292.7447 287.6667 297.9969 C
280.0666 293.6636 L
283.523 288.7047 286.6945 283.5925 289.8666 278.0302 C
297.6667 281.9969 L
f
297.8333 181.503 m
294.5875 187.3156 291.4187 192.6252 287.8333 198.003 C
278.9333 193.0364 L
282.2814 188.0298 285.5541 182.6029 288.7333 176.9197 C
297.8333 181.503 L
f
U
298 81 m
294.755 86.9251 291.5275 92.4966 288 98 C
277.8 92.4 L
281.0397 87.3457 284.4137 81.6042 287.6 75.8 C
298 81 L
f
u
285.0666 580.2036 m
281.9728 585.267 279.0953 589.382 275.4333 594.0636 C
271.7673 591.6489 L
275.3768 587.0474 278.2179 582.8985 281.2013 578.0209 C
285.0666 580.2036 L
f
284.5333 479.7072 m
281.4222 484.9193 278.4876 489.3033 274.8666 494.1272 C
269.9345 491.0979 L
273.4572 486.426 276.3914 481.9816 279.4025 476.9419 C
284.5333 479.7072 L
f
284 379.22 m
280.8716 384.5807 277.8799 389.2337 274.3 394.2 C
268.102 390.556 L
271.5377 385.8138 274.565 381.0738 277.604 375.872 C
284 379.22 L
f
283.4666 278.7237 m
280.321 284.233 277.2722 289.155 273.7333 294.2636 C
266.2693 290.005 L
269.6181 285.1924 272.7384 280.1569 275.8052 274.793 C
283.4666 278.7237 L
f
282.9333 178.2365 m
279.7705 183.8944 276.6646 189.0854 273.1667 194.3364 C
264.4367 189.4631 L
267.6986 184.5802 270.912 179.2492 274.0067 173.7232 C
282.9333 178.2365 L
f
U
282.4 77.7401 m
279.2199 83.5467 276.0569 89.0067 272.6 94.4 C
262.604 88.9121 L
265.779 83.9588 269.0855 78.3322 272.208 72.6441 C
282.4 77.7401 L
f
u
391.3333 558.4969 m
306.6666 558.4969 L
306.6666 553.1635 L
350.4999 553.1635 L
350.2721 522.7643 346.0671 517.4765 322.7 513.7637 C
324 508.4969 L
350.1869 512.9227 355.8231 519.6723 356.1667 553.1635 C
391.3333 553.1635 L
391.3333 558.4969 L
f
391.6667 458.9939 m
306.3333 458.9939 L
306.3333 451.3271 L
348.9999 451.3271 L
348.5443 424.1267 344.3427 419.1143 321.9999 415.5273 C
324 407.9938 L
350.3298 412.4438 356.6462 419.6603 357.3334 451.3271 C
391.6667 451.3271 L
391.6667 458.9939 L
f
392 359.5 m
306 359.5 L
306 349.5 L
347.5 349.5 L
346.8166 325.4982 342.6186 320.7612 321.3 317.3 C
324 307.5 L
350.4727 311.9741 357.4692 319.6575 358.5 349.5 C
392 349.5 L
392 359.5 L
f
392.3333 259.9969 m
305.6666 259.9969 L
305.6666 247.6635 L
345.9999 247.6635 L
345.0887 226.8606 340.8943 222.399 320.6 219.0636 C
324 206.9969 L
350.6156 211.4952 358.2923 219.6455 359.6667 247.6635 C
392.3333 247.6635 L
392.3333 259.9969 L
f
392.6666 160.503 m
305.3333 160.503 L
305.3333 145.8364 L
344.5 145.8364 L
343.361 128.2321 339.1701 124.0458 319.9 120.8363 C
324 106.503 L
350.7585 111.0255 359.1153 119.6427 360.8333 145.8364 C
392.6666 145.8364 L
392.6666 160.503 L
f
U
393 61 m
305 61 L
305 44 L
343 44 L
341.6332 29.5945 337.4458 25.6837 319.2 22.6 C
324 6 L
350.9014 10.5466 359.9384 19.6307 362 44 C
393 44 L
393 61 L
f
u
371.5833 580.1659 m
371.5833 585.4992 L
318.6667 585.4992 L
318.6667 580.1659 L
371.5833 580.1659 L
f
U
u
370.1667 478.3318 m
370.1667 485.9985 L
318.3333 485.9985 L
318.3333 478.3318 L
370.1667 478.3318 L
f
372.25 376.4976 m
372.25 386.4977 L
318 386.4977 L
318 376.4976 L
372.25 376.4976 L
f
U
u
370.3333 274.6635 m
370.3333 286.9969 L
317.6666 286.9969 L
317.6666 274.6635 L
370.3333 274.6635 L
f
374.6666 172.8364 m
374.6666 187.503 L
317.3333 187.503 L
317.3333 172.8364 L
374.6666 172.8364 L
f
U
375 71 m
375 88 L
317 88 L
317 71 L
375 71 L
f
u
398 583.4969 m
394.7508 588.8594 391.8171 593.1214 388 597.9969 C
384.2999 595.5636 L
388.0813 590.7478 390.9491 586.5795 394.0999 581.3802 C
398 583.4969 L
f
398 482.9938 m
394.7516 488.4689 391.7591 492.9927 388 497.9939 C
382.9999 494.9272 L
386.6729 490.0637 389.642 485.5808 392.7999 480.2605 C
398 482.9938 L
f
398 382.5 m
394.7525 388.0875 391.7012 392.8733 388 398 C
381.7 394.3 L
385.2647 389.3888 388.335 384.5912 391.5 379.15 C
398 382.5 L
f
398 282 m
394.7533 287.7 391.6433 292.7477 388 298 C
380.3999 293.6666 L
383.8563 288.7077 387.0279 283.5955 390.1999 278.0333 C
398 282 L
f
398 181.503 m
394.7541 187.3156 391.5854 192.6252 388 198.003 C
379.1 193.0364 L
382.448 188.0298 385.7208 182.6029 388.9 176.9197 C
398 181.503 L
f
U
398 81 m
394.755 86.9251 391.5275 92.4966 388 98 C
377.8 92.4 L
381.0397 87.3457 384.4137 81.6042 387.6 75.8 C
398 81 L
f
u
385.5999 580.7036 m
382.5061 585.7671 379.6286 589.8821 375.9666 594.5636 C
372.3006 592.149 L
375.9102 587.5474 378.7512 583.3985 381.7346 578.5209 C
385.5999 580.7036 L
f
384.5999 480.7073 m
381.4888 485.9193 378.5542 490.3033 374.9333 495.1272 C
370.0012 492.0979 L
373.5238 487.426 376.458 482.9816 379.4692 477.9419 C
384.5999 480.7073 L
f
383.6 380.72 m
380.4716 386.0807 377.4799 390.7337 373.9 395.7 C
367.702 392.056 L
371.1377 387.3138 374.165 382.5738 377.204 377.372 C
383.6 380.72 L
f
382.6 280.7267 m
379.4544 286.2361 376.4056 291.1581 372.8666 296.2667 C
365.4026 292.0081 L
368.7514 287.1954 371.8718 282.16 374.9386 276.796 C
382.6 280.7267 L
f
381.6 180.7365 m
378.4372 186.3944 375.3313 191.5854 371.8334 196.8363 C
363.1034 191.9631 L
366.3653 187.0802 369.5787 181.7491 372.6734 176.2231 C
381.6 180.7365 L
f
U
380.6 80.7401 m
377.4199 86.5467 374.2569 92.0067 370.8 97.4 C
360.804 91.9121 L
363.979 86.9588 367.2855 81.3322 370.408 75.6441 C
380.6 80.7401 L
f
u
198.6667 282.6636 m
195.42 288.3637 192.31 293.4113 188.6667 298.6636 C
181.0666 294.3303 L
184.523 289.3713 187.6945 284.2591 190.8666 278.6969 C
198.6667 282.6636 L
f
198.8333 182.3364 m
195.5875 188.149 192.4187 193.4585 188.8333 198.8364 C
179.9333 193.8697 L
183.2814 188.8631 186.5541 183.4363 189.7333 177.7531 C
198.8333 182.3364 L
f
U
199 82 m
195.755 87.9251 192.5275 93.4966 189 99 C
178.8 93.4 L
182.0397 88.3457 185.4137 82.6042 188.6 76.8 C
199 82 L
f
u
183.6666 280.7237 m
180.521 286.233 177.4722 291.155 173.9333 296.2636 C
166.4692 292.005 L
169.8181 287.1924 172.9384 282.1569 176.0052 276.793 C
183.6666 280.7237 L
f
182.9333 180.7365 m
179.7705 186.3944 176.6646 191.5854 173.1667 196.8363 C
164.4367 191.9631 L
167.6986 187.0802 170.912 181.7491 174.0067 176.2231 C
182.9333 180.7365 L
f
U
182.2 80.7401 m
179.0199 86.5467 175.8569 92.0067 172.4 97.4 C
162.404 91.9121 L
165.579 86.9588 168.8855 81.3322 172.008 75.6441 C
182.2 80.7401 L
f
u
U
u
U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
