%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (2551.eps)
%%CreationDate: (5/31/04) (4:08 PM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
1 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
500 600 m
500 700 L
400 700 L
400 600 L
500 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
400 600 m
400 700 L
300 700 L
300 600 L
400 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
500 500 m
500 600 L
400 600 L
400 500 L
500 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
400 500 m
400 600 L
300 600 L
300 500 L
400 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
0 Ap
0 O
0 g
1 D
119 653 m
119 688 L
116 688 L
116 635 L
116 617.0841 121.7879 612 139 612 C
184 612 L
184 615 L
139 615 l
123.1121 615 119 619.1121 119 635 c
119 652 L
118 651 L
141.2864 654.6882 163.5625 660.375 185 668 C
184.1 670.9 L
162.789 663.32 140.3219 657.5728 117.5307 653.963 C
119 653 L
f
392.9 621.8 m
395 624 L
344.8963 669.7774 345.5625 670 340 670 c
334.5913 670 335.3689 669.8352 305 633 C
307.4 631.1 L
336.7624 666.896 336.25 667 340 667 c
343.9375 667 343.656 666.9257 392.9 621.8 C
f
69.5 666.8 m
77.0312 649.6431 82.0948 633.3393 86 614 C
89 614.6 L
84.9858 634.4794 79.7148 651.0951 72.3 668 C
69.5 666.8 L
f
430.5 613 m
430.5 610 L
450.5975 610 451.5 610.9114 451.5 624 C
451.5 674 L
473.5 674 L
473.5 677 L
451.5 677 L
451.5 692 L
448.5 692 L
448.5 677 L
409.5 677 L
409.5 674 L
448.5 674 L
448.5 624 L
448.5 613.0534 448.4467 613 430.5 613 C
430.5 613 L
f
470.8 656.6 m
477.6856 644.4959 484.5 632.0625 488.8 624 C
491.5 625.4 L
485.8125 635.9625 479.4375 647.5625 473.5 658 C
470.8 656.6 L
f
425.5 658 m
420.0625 647.3125 413.75 636 407.5 625.5 C
410.1 624 L
416.7306 635.1395 422.9922 646.4639 428.2 656.7 C
425.5 658 L
f
28 684 m
25.8035 658.8945 18.6963 636.8982 6 615.4 C
8.6 614 L
21.6072 636.0586 28.875 658.5625 31 684 C
28 684 L
f
278.9901 679.9987 m
278.4899 636.1854 261.2052 618.3341 219.7 615 C
220 612 L
262.2421 615.3933 280.7901 633.9935 281.9425 677.561 C
277 682 L
212 682 L
212 679 L
280 679 L
278.9901 679.9987 L
f
85 682.5 m
85 678.3579 81.6421 675 77.5 675 c
73.3579 675 70 678.3579 70 682.5 c
70 686.6421 73.3579 690 77.5 690 c
81.6421 690 85 686.6421 85 682.5 C
88 682.5 L
88 688.2989 83.2989 693 77.5 693 c
71.7011 693 67 688.2989 67 682.5 c
67 676.7011 71.7011 672 77.5 672 c
83.2989 672 88 676.7011 88 682.5 C
85 682.5 L
f
188 685.5 m
188 681.3579 184.6421 678 180.5 678 c
176.3579 678 173 681.3579 173 685.5 c
173 689.6421 176.3579 693 180.5 693 c
184.6421 693 188 689.6421 188 685.5 C
191 685.5 L
191 691.2989 186.2989 696 180.5 696 c
174.7011 696 170 691.2989 170 685.5 c
170 679.7011 174.7011 675 180.5 675 c
186.2989 675 191 679.7011 191 685.5 C
188 685.5 L
f
292 685.5 m
292 681.3579 288.6421 678 284.5 678 c
280.3579 678 277 681.3579 277 685.5 c
277 689.6421 280.3579 693 284.5 693 c
288.6421 693 292 689.6421 292 685.5 C
295 685.5 L
295 691.2989 290.2989 696 284.5 696 c
278.7011 696 274 691.2989 274 685.5 c
274 679.7011 278.7011 675 284.5 675 c
290.2989 675 295 679.7011 295 685.5 C
292 685.5 L
f
489 679.5 m
489 675.3579 485.6421 672 481.5 672 c
477.3579 672 474 675.3579 474 679.5 c
474 683.6421 477.3579 687 481.5 687 c
485.6421 687 489 683.6421 489 679.5 C
492 679.5 L
492 685.2989 487.2989 690 481.5 690 c
475.7011 690 471 685.2989 471 679.5 c
471 673.7011 475.7011 669 481.5 669 c
487.2989 669 492 673.7011 492 679.5 C
489 679.5 L
f
384 671.5 m
384 666.8057 380.1943 663 375.5 663 c
370.8056 663 367 666.8057 367 671.5 c
367 676.1944 370.8056 680 375.5 680 c
380.1943 680 384 676.1944 384 671.5 C
387 671.5 L
387 677.8512 381.8512 683 375.5 683 c
369.1488 683 364 677.8512 364 671.5 c
364 665.1488 369.1488 660 375.5 660 c
381.8512 660 387 665.1488 387 671.5 C
384 671.5 L
f
u
275.25 582.4969 m
211.5 582.4969 L
211.5 576.9969 L
279.8333 576.9969 L
276.7917 580.2459 L
276.256 537.4071 259.599 520.2516 219.0833 516.997 C
219.6667 511.4969 L
261.5855 514.8643 280.4993 533.255 282.2657 575.706 C
275.25 582.4969 L
f
273.4999 482.9939 m
211 482.9939 L
211 474.9938 L
279.6667 474.9938 L
274.5933 480.4931 L
274.022 438.6288 257.9928 422.1692 218.4666 418.994 C
219.3333 410.9938 L
260.929 414.3352 280.2084 432.5165 282.5888 473.851 C
273.4999 482.9939 L
f
271.75 383.5 m
210.5 383.5 L
210.5 373 L
279.5 373 L
272.395 380.7493 L
271.7883 339.8596 256.3867 324.0956 217.85 321 C
219 310.5 L
260.2724 313.8154 279.9176 331.7872 282.9119 372.0054 C
271.75 383.5 L
f
270 283.9969 m
210 283.9969 L
210 270.9969 L
279.3333 270.9969 L
270.1966 280.9965 L
269.5544 241.0813 254.7805 226.0132 217.2333 222.997 C
218.6667 209.9969 L
259.6158 213.2864 279.6267 231.0487 283.235 270.1505 C
270 283.9969 L
f
268.2501 184.503 m
209.5 184.503 L
209.5 169.0031 L
279.1667 169.0031 L
267.9984 181.2528 L
267.3206 142.3121 253.1744 127.9397 216.6167 125.003 C
218.3334 109.503 L
258.9593 112.7665 279.3359 130.3194 283.5581 168.3048 C
268.2501 184.503 L
f
U
266.5 85 m
209 85 L
209 67 L
279 67 L
265.8 81.5 L
265.0867 43.5338 251.5682 29.8572 216 27 C
218 9 L
258.3027 12.2375 279.045 29.5809 283.8813 66.4499 C
266.5 85 L
f
u
472.4166 577.6636 m
452.75 577.6636 L
452.75 592.3303 L
447.0833 592.3303 L
447.0833 577.6636 L
409.0833 577.6636 L
409.0833 572.3302 L
447.0833 572.3302 L
447.0833 524.6636 L
447.0833 514.8901 447.025 514.8303 431.4167 514.8303 C
429.75 514.8303 L
429.75 509.4969 L
451.97 509.4969 452.75 510.2903 452.75 525.3303 C
452.75 572.3302 L
474.4167 572.3302 L
474.4167 573.2206 L
472.4166 577.6636 L
f
471.3333 478.3273 m
454.0001 478.3273 L
454.0001 492.6606 L
445.6666 492.6606 L
445.6666 478.3273 L
408.6666 478.3273 L
408.6666 470.6604 L
445.6666 470.6604 L
445.6666 425.3273 L
445.6666 416.7269 445.6034 416.6607 432.3334 416.6607 C
429 416.6607 L
429 408.9938 L
453.3426 408.9938 454.0001 409.6693 454.0001 426.6606 C
454.0001 470.6604 L
475.3334 470.6604 L
475.3334 472.1728 L
471.3333 478.3273 L
f
470.25 379 m
455.25 379 L
455.25 393 L
444.25 393 L
444.25 379 L
408.25 379 L
408.25 369 L
444.25 369 L
444.25 326 L
444.25 318.5726 444.1819 318.5 433.25 318.5 C
428.25 318.5 L
428.25 308.5 L
454.715 308.5 455.25 309.0574 455.25 328 C
455.25 369 L
476.25 369 L
476.25 371.1342 L
470.25 379 L
f
469.1666 279.6636 m
456.5 279.6636 L
456.5 293.3303 L
442.8333 293.3303 L
442.8333 279.6636 L
407.8333 279.6636 L
407.8333 267.3302 L
442.8333 267.3302 L
442.8333 226.6636 L
442.8333 220.4094 442.7602 220.3303 434.1667 220.3303 C
427.5 220.3303 L
427.5 207.9969 L
456.0875 207.9969 456.5 208.4364 456.5 229.3303 C
456.5 267.3302 L
477.1667 267.3302 L
477.1667 270.0864 L
469.1666 279.6636 L
f
468.0834 180.3363 m
457.75 180.3363 L
457.75 193.6697 L
441.4167 193.6697 L
441.4167 180.3363 L
407.4167 180.3363 L
407.4167 165.6697 L
441.4167 165.6697 L
441.4167 127.3363 L
441.4167 122.2551 441.3387 122.1696 435.0833 122.1696 C
426.75 122.1696 L
426.75 107.503 L
457.4599 107.503 457.75 107.8246 457.75 130.6697 C
457.75 165.6697 L
478.0833 165.6697 L
478.0833 169.0478 L
468.0834 180.3363 L
f
U
467 81 m
459 81 L
459 94 L
440 94 L
440 81 L
407 81 L
407 64 L
440 64 L
440 28 L
440 24.0919 439.9171 24 436 24 C
426 24 L
426 7 L
458.8325 7 459 7.2035 459 32 C
459 64 L
479 64 L
479 68 L
467 81 L
f
u
469.6999 555.9636 m
476.165 544.1081 482.7291 531.4552 487.0666 522.6302 C
492.0834 524.8969 L
486.5834 535.6844 480.3959 547.4865 474.5834 558.1636 C
469.6999 555.9636 L
f
468.5999 455.3272 m
474.6445 443.7203 480.9582 430.848 485.3332 421.2605 C
492.6667 424.3939 L
487.3542 435.4064 481.3542 447.4105 475.6667 458.3272 C
468.5999 455.3272 L
f
467.5 354.7 m
473.124 343.3417 479.1875 330.25 483.6 319.9 C
493.25 323.9 L
488.125 335.1375 482.3125 347.3437 476.75 358.5 C
467.5 354.7 L
f
466.4 254.0636 m
471.6035 242.9539 477.4166 229.6427 481.8666 218.5302 C
493.8334 223.3969 L
488.8959 234.8594 483.2709 247.2678 477.8334 258.6636 C
466.4 254.0636 L
f
465.3 153.4364 m
470.083 142.5753 475.6459 129.0447 480.1334 117.1697 C
494.4167 122.9031 L
489.6666 134.5905 484.2291 147.201 478.9166 158.8364 C
465.3 153.4364 L
f
U
464.2 52.8 m
468.5625 42.1875 473.875 28.4375 478.4 15.8 C
495 22.4 L
490.4375 34.3125 485.1875 47.125 480 59 C
464.2 52.8 L
f
u
424.0833 557.9969 m
418.8541 547.0698 412.7812 535.6323 406.75 525.0469 C
411.5834 522.6302 L
417.9794 533.9064 424.0681 545.5277 429.1 556.0469 C
424.0833 557.9969 L
f
422.6666 457.9939 m
417.6458 446.8272 411.8125 435.2647 406 424.5939 C
413.0668 421.2605 L
419.2282 432.6733 425.1441 444.5915 430 455.3939 C
422.6666 457.9939 L
f
421.25 358 m
416.4375 346.5937 410.8437 334.9062 405.25 324.15 C
414.55 319.9 L
420.4768 331.4494 426.2199 343.6645 430.9 354.75 C
421.25 358 L
f
419.8333 257.9969 m
415.2291 246.3511 409.875 234.5386 404.5 223.6969 C
416.0334 218.5302 L
421.7256 230.2163 427.2958 242.7283 431.8 254.0969 C
419.8333 257.9969 L
f
418.4167 158.003 m
414.0209 146.1176 408.9063 134.1801 403.75 123.253 C
417.5166 117.1697 L
422.9743 128.9924 428.3717 141.8013 432.7 153.4531 C
418.4167 158.003 L
f
U
417 58 m
412.8125 45.875 407.9375 33.8125 403 22.8 C
419 15.8 L
424.2231 27.7593 429.4476 40.8651 433.6 52.8 C
417 58 L
f
u
391.4166 519.4969 m
395.6667 523.3302 L
345.764 570.1182 347.0243 570.3303 340.1667 570.3303 c
333.6385 570.3303 334.5852 570.1374 304.3333 531.9969 C
309 528.7469 L
337.1041 564.3685 336.6042 564.4969 340.1667 564.4969 c
344.0417 564.4969 343.6022 564.3933 391.4166 519.4969 C
f
389.9332 417.1937 m
396.3334 422.6605 L
346.6318 470.4589 348.4862 470.6606 340.3333 470.6606 c
332.6858 470.6606 333.8014 470.4396 303.6666 430.9938 C
310.6001 426.3937 L
337.4458 461.8411 336.9584 461.9937 340.3333 461.9937 c
344.1458 461.9937 343.5484 461.8609 389.9332 417.1937 C
f
388.45 314.9 m
397 322 L
347.4996 370.8088 349.9479 371 340.5 371 c
331.7332 371 333.0178 370.7509 303 330 C
312.2 324.05 L
337.7874 359.323 337.3125 359.5 340.5 359.5 c
344.25 359.5 343.4947 359.3378 388.45 314.9 C
f
386.9666 212.5969 m
397.6667 221.3302 L
348.3673 271.1496 351.4097 271.3303 340.6667 271.3303 c
330.7804 271.3303 332.2341 271.0531 302.3333 228.9969 C
313.8 221.6969 L
338.1291 256.7955 337.6667 256.9969 340.6667 256.9969 c
344.3542 256.9969 343.4409 256.8054 386.9666 212.5969 C
f
385.4834 110.3031 m
398.3333 120.6697 L
349.235 171.4995 352.8715 171.6697 340.8333 171.6697 c
329.8277 171.6697 331.4504 171.3645 301.6667 128.0031 C
315.4 119.3531 L
338.4708 154.2774 338.0208 154.5031 340.8333 154.5031 c
344.4583 154.5031 343.3871 154.2824 385.4834 110.3031 C
f
U
317 17 m
338.8125 51.75 338.375 52 341 52 c
344.5625 52 343.3333 51.75 384 8 C
399 20 L
350.1028 71.8403 354.3333 72 341 72 c
328.875 72 330.6667 71.6667 301 27 C
317 17 L
f
u
26.6666 584.3303 m
24.8362 559.2055 17.7834 536.8116 5.3333 515.7303 C
10.4501 513.1636 L
23.3285 535.1089 30.5626 558.4244 32.3334 584.3303 C
26.6666 584.3303 L
f
25.3332 484.6606 m
23.8689 459.5166 16.8705 436.725 4.6666 416.0606 C
12.3001 412.3272 L
25.0497 434.1592 32.2501 458.2864 33.6667 484.6606 C
25.3332 484.6606 L
f
24 385 m
22.9017 359.8368 15.9577 336.6476 4 316.4 C
14.15 311.5 L
26.7709 333.2187 33.9375 358.1576 35 385 C
24 385 L
f
22.6666 285.3303 m
21.9345 260.1479 15.0449 236.5611 3.3333 216.7303 C
16 210.6636 L
28.4921 232.269 35.6251 258.0196 36.3334 285.3303 C
22.6666 285.3303 L
f
21.3334 185.6697 m
20.9673 160.468 14.1321 136.4837 2.6667 117.0697 C
17.8499 109.8364 L
30.2132 131.3286 37.3125 157.8907 37.6666 185.6697 C
21.3334 185.6697 L
f
U
19.7 9 m
31.9345 30.3789 39 57.7527 39 86 C
20 86 L
20 60.7791 13.2192 36.3971 2 17.4 C
19.7 9 L
f
u
68.4166 564.7135 m
75.3159 548.1847 80.1363 532.116 83.9666 513.1636 C
89.6667 514.3303 L
85.8004 533.4772 80.7929 549.7939 73.85 566.4636 C
68.4166 564.7135 L
f
67.3333 462.6271 m
73.6006 446.7263 78.1778 430.8927 81.9332 412.3272 C
90.3334 414.0605 L
86.6149 432.475 81.871 448.4927 75.4001 464.9271 C
67.3333 462.6271 L
f
66.25 360.55 m
71.8855 345.2772 76.2194 329.6787 79.9 311.5 C
91 313.8 L
87.4295 331.4821 82.949 347.2008 76.95 363.4 C
66.25 360.55 L
f
65.1666 258.4635 m
70.1702 243.8189 74.2609 228.4554 77.8666 210.6636 C
91.6667 213.5303 L
88.244 230.48 84.0272 245.8996 78.5 261.8636 C
65.1666 258.4635 L
f
64.0834 156.3864 m
68.4551 142.3698 72.3026 127.2414 75.8334 109.8364 C
92.3333 113.2697 L
89.0585 129.4871 85.1052 144.6077 80.0499 160.3364 C
64.0834 156.3864 L
f
U
63 54.3 m
66.7398 40.9114 70.3441 26.0181 73.8 9 C
93 13 L
89.8731 28.4849 86.1833 43.3065 81.6 58.8 C
63 54.3 L
f
u
84.5833 581.9136 m
84.5833 577.9556 81.3746 574.7469 77.4167 574.7469 c
73.4587 574.7469 70.25 577.9556 70.25 581.9136 c
70.25 585.8716 73.4587 589.0802 77.4167 589.0802 c
81.3746 589.0802 84.5833 585.8716 84.5833 581.9136 C
88.8334 581.9136 L
88.8334 588.2187 83.7218 593.3303 77.4167 593.3303 c
71.1115 593.3303 66 588.2187 66 581.9136 c
66 575.6084 71.1115 570.4969 77.4167 570.4969 c
83.7218 570.4969 88.8334 575.6084 88.8334 581.9136 C
84.5833 581.9136 L
f
84.1666 481.3272 m
84.1666 477.5533 81.1072 474.4939 77.3333 474.4939 c
73.5594 474.4939 70.5 477.5533 70.5 481.3272 c
70.5 485.1011 73.5594 488.1605 77.3333 488.1605 c
81.1072 488.1605 84.1666 485.1011 84.1666 481.3272 C
89.6667 481.3272 L
89.6667 488.1386 84.1447 493.6606 77.3333 493.6606 c
70.5219 493.6606 64.9999 488.1386 64.9999 481.3272 c
64.9999 474.5158 70.5219 468.9938 77.3333 468.9938 c
84.1447 468.9938 89.6667 474.5158 89.6667 481.3272 C
84.1666 481.3272 L
f
83.75 380.75 m
83.75 377.1602 80.8398 374.25 77.25 374.25 c
73.6602 374.25 70.75 377.1602 70.75 380.75 c
70.75 384.3398 73.6602 387.25 77.25 387.25 c
80.8398 387.25 83.75 384.3398 83.75 380.75 C
90.5 380.75 L
90.5 388.0676 84.5676 394 77.25 394 c
69.9324 394 64 388.0676 64 380.75 c
64 373.4323 69.9324 367.5 77.25 367.5 c
84.5676 367.5 90.5 373.4323 90.5 380.75 C
83.75 380.75 L
f
83.3333 280.1636 m
83.3333 276.7579 80.5724 273.9969 77.1667 273.9969 c
73.761 273.9969 71 276.7579 71 280.1636 c
71 283.5693 73.761 286.3302 77.1667 286.3302 c
80.5724 286.3302 83.3333 283.5693 83.3333 280.1636 C
91.3334 280.1636 L
91.3334 287.9875 84.9906 294.3303 77.1667 294.3303 c
69.3427 294.3303 63 287.9875 63 280.1636 c
63 272.3397 69.3427 265.9969 77.1667 265.9969 c
84.9906 265.9969 91.3334 272.3397 91.3334 280.1636 C
83.3333 280.1636 L
f
82.9167 179.5864 m
82.9167 176.3648 80.3049 173.753 77.0833 173.753 c
73.8617 173.753 71.25 176.3648 71.25 179.5864 c
71.25 182.808 73.8617 185.4197 77.0833 185.4197 c
80.3049 185.4197 82.9167 182.808 82.9167 179.5864 C
92.1667 179.5864 L
92.1667 187.9165 85.4135 194.6697 77.0833 194.6697 c
68.7532 194.6697 62 187.9165 62 179.5864 c
62 171.2563 68.7532 164.5031 77.0833 164.5031 c
85.4135 164.5031 92.1667 171.2563 92.1667 179.5864 C
82.9167 179.5864 L
f
U
82.5 79 m
82.5 75.9625 80.0375 73.5 77 73.5 c
73.9625 73.5 71.5 75.9625 71.5 79 c
71.5 82.0375 73.9625 84.5 77 84.5 c
80.0375 84.5 82.5 82.0375 82.5 79 C
93 79 L
93 87.8364 85.8364 95 77 95 c
68.1636 95 61 87.8364 61 79 c
61 70.1636 68.1636 63 77 63 c
85.8364 63 93 70.1636 93 79 C
82.5 79 L
f
u
187.0833 584.7469 m
187.0833 580.7889 183.8746 577.5803 179.9167 577.5803 c
175.9586 577.5803 172.75 580.7889 172.75 584.7469 c
172.75 588.7049 175.9586 591.9136 179.9167 591.9136 c
183.8746 591.9136 187.0833 588.7049 187.0833 584.7469 C
191.3334 584.7469 L
191.3334 591.0521 186.2218 596.1636 179.9167 596.1636 c
173.6115 596.1636 168.5 591.0521 168.5 584.7469 c
168.5 578.4417 173.6115 573.3302 179.9167 573.3302 c
186.2218 573.3302 191.3334 578.4417 191.3334 584.7469 C
187.0833 584.7469 L
f
186.1666 482.9938 m
186.1666 479.22 183.1072 476.1605 179.3333 476.1605 c
175.5594 476.1605 172.5 479.22 172.5 482.9938 c
172.5 486.7677 175.5594 489.8271 179.3333 489.8271 c
183.1072 489.8271 186.1666 486.7677 186.1666 482.9938 C
191.6667 482.9938 L
191.6667 489.8053 186.1447 495.3272 179.3333 495.3272 c
172.5219 495.3272 166.9999 489.8053 166.9999 482.9938 c
166.9999 476.1824 172.5219 470.6604 179.3333 470.6604 c
186.1447 470.6604 191.6667 476.1824 191.6667 482.9938 C
186.1666 482.9938 L
f
185.25 382.25 m
185.25 378.6602 182.3398 375.75 178.75 375.75 c
175.1602 375.75 172.25 378.6602 172.25 382.25 c
172.25 385.8398 175.1602 388.75 178.75 388.75 c
182.3398 388.75 185.25 385.8398 185.25 382.25 C
192 382.25 L
192 389.5676 186.0676 395.5 178.75 395.5 c
171.4324 395.5 165.5 389.5676 165.5 382.25 c
165.5 374.9323 171.4324 369 178.75 369 c
186.0676 369 192 374.9323 192 382.25 C
185.25 382.25 L
f
184.3333 281.4969 m
184.3333 278.0912 181.5723 275.3302 178.1667 275.3302 c
174.761 275.3302 172 278.0912 172 281.4969 c
172 284.9026 174.761 287.6636 178.1667 287.6636 c
181.5723 287.6636 184.3333 284.9026 184.3333 281.4969 C
192.3334 281.4969 L
192.3334 289.3208 185.9906 295.6636 178.1667 295.6636 c
170.3427 295.6636 164 289.3208 164 281.4969 c
164 273.673 170.3427 267.3302 178.1667 267.3302 c
185.9906 267.3302 192.3334 273.673 192.3334 281.4969 C
184.3333 281.4969 L
f
183.4167 180.7531 m
183.4167 177.5315 180.8049 174.9197 177.5834 174.9197 c
174.3617 174.9197 171.75 177.5315 171.75 180.7531 c
171.75 183.9747 174.3617 186.5864 177.5834 186.5864 c
180.8049 186.5864 183.4167 183.9747 183.4167 180.7531 C
192.6667 180.7531 L
192.6667 189.0832 185.9135 195.8364 177.5834 195.8364 c
169.2532 195.8364 162.5001 189.0832 162.5001 180.7531 c
162.5001 172.4229 169.2532 165.6697 177.5834 165.6697 c
185.9135 165.6697 192.6667 172.4229 192.6667 180.7531 C
183.4167 180.7531 L
f
U
182.5 81 m
182.5 77.9625 180.0375 75.5 177 75.5 c
173.9625 75.5 171.5 77.9625 171.5 81 c
171.5 84.0375 173.9625 86.5 177 86.5 c
180.0375 86.5 182.5 84.0375 182.5 81 C
193 81 L
193 89.8364 185.8364 97 177 97 c
168.1636 97 161 89.8364 161 81 c
161 72.1636 168.1636 65 177 65 c
185.8364 65 193 72.1636 193 81 C
182.5 81 L
f
u
290.9166 584.5802 m
290.9166 580.6222 287.708 577.4136 283.75 577.4136 c
279.792 577.4136 276.5833 580.6222 276.5833 584.5802 c
276.5833 588.5382 279.792 591.7469 283.75 591.7469 c
287.708 591.7469 290.9166 588.5382 290.9166 584.5802 C
295.1667 584.5802 L
295.1667 590.8854 290.0551 595.9969 283.75 595.9969 c
277.4448 595.9969 272.3333 590.8854 272.3333 584.5802 c
272.3333 578.2751 277.4448 573.1635 283.75 573.1635 c
290.0551 573.1635 295.1667 578.2751 295.1667 584.5802 C
290.9166 584.5802 L
f
289.8333 483.6605 m
289.8333 479.8866 286.7738 476.8272 283 476.8272 c
279.2261 476.8272 276.1666 479.8866 276.1666 483.6605 c
276.1666 487.4344 279.2261 490.4938 283 490.4938 c
286.7738 490.4938 289.8333 487.4344 289.8333 483.6605 C
295.3333 483.6605 L
295.3333 490.4719 289.8114 495.9939 283 495.9939 c
276.1885 495.9939 270.6666 490.4719 270.6666 483.6605 c
270.6666 476.8491 276.1885 471.3271 283 471.3271 c
289.8114 471.3271 295.3333 476.8491 295.3333 483.6605 C
289.8333 483.6605 L
f
288.75 382.75 m
288.75 379.1602 285.8398 376.25 282.25 376.25 c
278.6602 376.25 275.75 379.1602 275.75 382.75 c
275.75 386.3398 278.6602 389.25 282.25 389.25 c
285.8398 389.25 288.75 386.3398 288.75 382.75 C
295.5 382.75 L
295.5 390.0676 289.5676 396 282.25 396 c
274.9324 396 269 390.0676 269 382.75 c
269 375.4323 274.9324 369.5 282.25 369.5 c
289.5676 369.5 295.5 375.4323 295.5 382.75 C
288.75 382.75 L
f
287.6666 281.8302 m
287.6666 278.4246 284.9057 275.6636 281.5 275.6636 c
278.0943 275.6636 275.3333 278.4246 275.3333 281.8302 c
275.3333 285.2359 278.0943 287.9969 281.5 287.9969 c
284.9057 287.9969 287.6666 285.2359 287.6666 281.8302 C
295.6667 281.8302 L
295.6667 289.6542 289.3239 295.9969 281.5 295.9969 c
273.6761 295.9969 267.3333 289.6542 267.3333 281.8302 c
267.3333 274.0063 273.6761 267.6635 281.5 267.6635 c
289.3239 267.6635 295.6667 274.0063 295.6667 281.8302 C
287.6666 281.8302 L
f
286.5834 180.9197 m
286.5834 177.6981 283.9716 175.0864 280.75 175.0864 c
277.5284 175.0864 274.9167 177.6981 274.9167 180.9197 c
274.9167 184.1413 277.5284 186.7531 280.75 186.7531 c
283.9716 186.7531 286.5834 184.1413 286.5834 180.9197 C
295.8333 180.9197 L
295.8333 189.2499 289.0802 196.003 280.75 196.003 c
272.4199 196.003 265.6667 189.2499 265.6667 180.9197 c
265.6667 172.5896 272.4199 165.8364 280.75 165.8364 c
289.0802 165.8364 295.8333 172.5896 295.8333 180.9197 C
286.5834 180.9197 L
f
U
285.5 80 m
285.5 76.9625 283.0375 74.5 280 74.5 c
276.9625 74.5 274.5 76.9625 274.5 80 c
274.5 83.0375 276.9625 85.5 280 85.5 c
283.0375 85.5 285.5 83.0375 285.5 80 C
296 80 L
296 88.8364 288.8364 96 280 96 c
271.1636 96 264 88.8364 264 80 c
264 71.1636 271.1636 64 280 64 c
288.8364 64 296 71.1636 296 80 C
285.5 80 L
f
u
383.8333 572.2469 m
383.8333 567.7828 380.2142 564.1636 375.75 564.1636 c
371.2857 564.1636 367.6667 567.7828 367.6667 572.2469 c
367.6667 576.7112 371.2857 580.3303 375.75 580.3303 c
380.2142 580.3303 383.8333 576.7112 383.8333 572.2469 C
388.1667 572.2469 L
388.1667 579.1044 382.6075 584.6636 375.75 584.6636 c
368.8925 584.6636 363.3333 579.1044 363.3333 572.2469 c
363.3333 565.3895 368.8925 559.8303 375.75 559.8303 c
382.6075 559.8303 388.1667 565.3895 388.1667 572.2469 C
383.8333 572.2469 L
f
383.6667 472.9939 m
383.6667 468.7599 380.2341 465.3273 376 465.3273 c
371.7659 465.3273 368.3334 468.7599 368.3334 472.9939 c
368.3334 477.2281 371.7659 480.6606 376 480.6606 c
380.2341 480.6606 383.6667 477.2281 383.6667 472.9939 C
389.3334 472.9939 L
389.3334 480.3577 383.3637 486.3273 376 486.3273 c
368.6363 486.3273 362.6666 480.3577 362.6666 472.9939 c
362.6666 465.6302 368.6363 459.6605 376 459.6605 c
383.3637 459.6605 389.3334 465.6302 389.3334 472.9939 C
383.6667 472.9939 L
f
383.5 373.75 m
383.5 369.746 380.254 366.5 376.25 366.5 c
372.246 366.5 369 369.746 369 373.75 c
369 377.754 372.246 381 376.25 381 c
380.254 381 383.5 377.754 383.5 373.75 C
390.5 373.75 L
390.5 381.6199 384.1199 388 376.25 388 c
368.38 388 362 381.6199 362 373.75 c
362 365.88 368.38 359.5 376.25 359.5 c
384.1199 359.5 390.5 365.88 390.5 373.75 C
383.5 373.75 L
f
383.3333 274.497 m
383.3333 270.7231 380.2739 267.6636 376.5 267.6636 c
372.7261 267.6636 369.6667 270.7231 369.6667 274.497 c
369.6667 278.2709 372.7261 281.3303 376.5 281.3303 c
380.2739 281.3303 383.3333 278.2709 383.3333 274.497 C
391.6667 274.497 L
391.6667 282.8732 384.8762 289.6636 376.5 289.6636 c
368.1238 289.6636 361.3333 282.8732 361.3333 274.497 c
361.3333 266.1208 368.1238 259.3303 376.5 259.3303 c
384.8762 259.3303 391.6667 266.1208 391.6667 274.497 C
383.3333 274.497 L
f
383.1667 175.253 m
383.1667 171.7092 380.2938 168.8363 376.75 168.8363 c
373.2062 168.8363 370.3333 171.7092 370.3333 175.253 c
370.3333 178.7968 373.2062 181.6697 376.75 181.6697 c
380.2938 181.6697 383.1667 178.7968 383.1667 175.253 C
392.8333 175.253 L
392.8333 184.1354 385.6324 191.3363 376.75 191.3363 c
367.8675 191.3363 360.6667 184.1354 360.6667 175.253 c
360.6667 166.3706 367.8675 159.1697 376.75 159.1697 c
385.6324 159.1697 392.8333 166.3706 392.8333 175.253 C
383.1667 175.253 L
f
U
383 76 m
383 72.6863 380.3137 70 377 70 c
373.6864 70 371 72.6863 371 76 c
371 79.3137 373.6864 82 377 82 c
380.3137 82 383 79.3137 383 76 C
394 76 L
394 85.3887 386.3887 93 377 93 c
367.6113 93 360 85.3887 360 76 c
360 66.6113 367.6113 59 377 59 c
386.3887 59 394 66.6113 394 76 C
383 76 L
f
u
488.25 579.0802 m
488.25 575.1223 485.0413 571.9136 481.0833 571.9136 c
477.1253 571.9136 473.9167 575.1223 473.9167 579.0802 c
473.9167 583.0382 477.1253 586.2469 481.0833 586.2469 c
485.0413 586.2469 488.25 583.0382 488.25 579.0802 C
492.5 579.0802 L
492.5 585.3854 487.3885 590.4969 481.0833 590.4969 c
474.7781 590.4969 469.6666 585.3854 469.6666 579.0802 c
469.6666 572.7751 474.7781 567.6636 481.0833 567.6636 c
487.3885 567.6636 492.5 572.7751 492.5 579.0802 C
488.25 579.0802 L
f
487.5 478.6605 m
487.5 474.8866 484.4405 471.8272 480.6666 471.8272 c
476.8927 471.8272 473.8333 474.8866 473.8333 478.6605 c
473.8333 482.4344 476.8927 485.4938 480.6666 485.4938 c
484.4405 485.4938 487.5 482.4344 487.5 478.6605 C
493 478.6605 L
493 485.472 487.4781 490.9939 480.6666 490.9939 c
473.8552 490.9939 468.3332 485.472 468.3332 478.6605 c
468.3332 471.8491 473.8552 466.3271 480.6666 466.3271 c
487.4781 466.3271 493 471.8491 493 478.6605 C
487.5 478.6605 L
f
486.75 378.25 m
486.75 374.6602 483.8398 371.75 480.25 371.75 c
476.6602 371.75 473.75 374.6602 473.75 378.25 c
473.75 381.8398 476.6602 384.75 480.25 384.75 c
483.8398 384.75 486.75 381.8398 486.75 378.25 C
493.5 378.25 L
493.5 385.5676 487.5676 391.5 480.25 391.5 c
472.9324 391.5 467 385.5676 467 378.25 c
467 370.9323 472.9324 365 480.25 365 c
487.5676 365 493.5 370.9323 493.5 378.25 C
486.75 378.25 L
f
486 277.8303 m
486 274.4246 483.239 271.6636 479.8333 271.6636 c
476.4276 271.6636 473.6667 274.4246 473.6667 277.8303 c
473.6667 281.236 476.4276 283.9969 479.8333 283.9969 c
483.239 283.9969 486 281.236 486 277.8303 C
494 277.8303 L
494 285.6542 487.6572 291.9969 479.8333 291.9969 c
472.0094 291.9969 465.6666 285.6542 465.6666 277.8303 c
465.6666 270.0063 472.0094 263.6636 479.8333 263.6636 c
487.6572 263.6636 494 270.0063 494 277.8303 C
486 277.8303 L
f
485.25 177.4197 m
485.25 174.1981 482.6383 171.5864 479.4167 171.5864 c
476.1951 171.5864 473.5833 174.1981 473.5833 177.4197 c
473.5833 180.6413 476.1951 183.253 479.4167 183.253 c
482.6383 183.253 485.25 180.6413 485.25 177.4197 C
494.5 177.4197 L
494.5 185.7499 487.7468 192.503 479.4167 192.503 c
471.0865 192.503 464.3334 185.7499 464.3334 177.4197 c
464.3334 169.0896 471.0865 162.3364 479.4167 162.3364 c
487.7468 162.3364 494.5 169.0896 494.5 177.4197 C
485.25 177.4197 L
f
U
484.5 77 m
484.5 73.9625 482.0375 71.5 479 71.5 c
475.9625 71.5 473.5 73.9625 473.5 77 c
473.5 80.0375 475.9625 82.5 479 82.5 c
482.0375 82.5 484.5 80.0375 484.5 77 C
495 77 L
495 85.8364 487.8364 93 479 93 c
470.1636 93 463 85.8364 463 77 c
463 68.1636 470.1636 61 479 61 c
487.8364 61 495 68.1636 495 77 C
484.5 77 L
f
u
121.0001 552.997 m
121.0001 588.3303 L
115.3333 588.3303 L
115.3333 534.8303 L
115.3333 516.7572 121.1076 511.6636 138.5 511.6636 C
184.1667 511.6636 L
184.1667 517.1637 L
138.6667 517.1637 l
124.4866 517.1637 121.0001 520.6544 121.0001 534.8303 C
121.0001 550.4969 L
118.5 548.8302 L
141.5703 552.4025 163.8854 557.9969 185.3334 565.4969 C
183.75 570.7469 L
162.5818 563.3402 140.2224 557.7111 117.7756 554.2328 C
121.0001 552.997 L
f
123.0001 454.9939 m
123.0001 488.6606 L
114.6666 488.6606 L
114.6666 434.6605 L
114.6666 416.4302 120.4274 411.3272 138 411.3272 C
184.3333 411.3272 L
184.3333 419.3273 L
138.3333 419.3273 l
125.8611 419.3273 123.0001 422.1968 123.0001 434.6605 C
123.0001 450.9938 L
119 448.6605 L
141.8542 452.1169 164.2084 457.6188 185.6667 464.9938 C
183.4 472.5939 L
162.3747 465.3604 140.123 459.8494 118.0205 456.5027 C
123.0001 454.9939 L
f
125 356 m
125 389 L
114 389 L
114 334.5 L
114 316.1125 119.7472 311 137.5 311 C
184.5 311 L
184.5 321.5 L
138 321.5 l
127.2354 321.5 125 323.7482 125 334.5 C
125 350.5 L
119.5 347.5 L
142.1381 350.8405 164.5312 356.25 186 363.5 C
183.05 373.45 L
162.1675 366.3897 140.0235 360.9967 118.2653 357.7815 C
125 356 L
f
127.0001 256.997 m
127.0001 289.3303 L
113.3333 289.3303 L
113.3333 234.3303 L
113.3333 215.7856 119.067 210.6636 137 210.6636 C
184.6667 210.6636 L
184.6667 223.6637 L
137.6667 223.6637 l
128.6099 223.6637 127.0001 225.2905 127.0001 234.3303 C
127.0001 249.9969 L
120 246.3302 L
142.4221 249.5548 164.8542 254.8719 186.3334 261.9969 C
182.7 274.297 L
161.9604 267.41 139.9241 262.135 118.5102 259.0513 C
127.0001 256.997 L
f
129 158.003 m
129 189.6697 L
112.6667 189.6697 L
112.6667 134.1697 L
112.6667 115.4679 118.3868 110.3364 136.5 110.3364 C
184.8333 110.3364 L
184.8333 125.8363 L
137.3334 125.8363 l
129.9843 125.8363 129 126.8419 129 134.1697 C
129 149.503 L
120.5 145.1697 L
142.7059 148.2784 165.1771 153.5031 186.6667 160.5031 C
182.35 175.153 L
161.7532 168.4393 139.8246 163.2824 118.7551 160.3302 C
129 158.003 L
f
U
131 59 m
131 90 L
112 90 L
112 34 L
112 15.141 117.7066 10 136 10 C
185 10 L
185 28 L
137 28 l
131.3588 28 131 28.3843 131 34 C
131 49 L
121 44 L
142.9899 46.9928 165.5 52.125 187 59 C
182 76 L
161.5461 69.4595 139.7251 64.4207 119 61.6 C
131 59 L
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
