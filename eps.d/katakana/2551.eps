%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (2551.eps)
%%CreationDate: (9/17/04) (8:29 PM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
500 600 m
500 700 L
400 700 L
400 600 L
500 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
400 600 m
400 700 L
300 700 L
300 600 L
400 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
500 500 m
500 600 L
400 600 L
400 500 L
500 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
400 500 m
400 600 L
300 600 L
300 500 L
400 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
0 O
0 g
1 D
391.9 622.8 m
394 625 L
343.8963 670.7774 344.5625 671 339 671 c
333.5913 671 334.3689 670.8352 304 634 C
306.4 632.1 L
335.7624 667.896 335.25 668 339 668 c
342.9375 668 342.656 667.9257 391.9 622.8 C
f
119 651 m
119 687 L
116 687 L
116 634 L
116 616.0841 121.7879 611 139 611 C
184 611 L
184 614 L
139 614 l
123.1121 614 119 618.1121 119 634 c
119 650 L
118 649 L
141.2864 652.6882 163.5625 658.375 185 666 C
184.1 668.9 L
162.789 661.32 140.3219 655.5728 117.5307 651.9631 C
119 651 L
f
430 612 m
430 609 L
450.0975 609 451 609.9114 451 623 C
451 670 L
489 670 L
489 673 L
451 673 L
451 691 L
448 691 L
448 673 L
409 673 L
409 670 L
448 670 L
448 623 L
448 612.0534 447.9467 612 430 612 C
430 612 L
f
470.3 654.6 m
477.1856 642.4959 484 630.0625 488.3 622 C
491 623.4 L
485.3125 633.9625 478.9375 645.5625 473 656 C
470.3 654.6 L
f
425 656 m
419.5625 645.3125 413.25 634 407 623.5 C
409.6 622 L
416.2306 633.1395 422.4922 644.4639 427.7 654.7 C
425 656 L
f
28 684 m
25.8035 658.8945 18.6963 636.8982 6 615.4 C
8.6 614 L
21.6072 636.0586 28.875 658.5625 31 684 C
28 684 L
f
69.5 666.8 m
77.0312 649.6431 82.0948 633.3393 86 614 C
89 614.6 L
84.9858 634.4794 79.7148 651.0951 72.3 668 C
69.5 666.8 L
f
86 682.5 m
86 678.9102 83.0898 676 79.5 676 c
75.9102 676 73 678.9102 73 682.5 c
73 686.0898 75.9102 689 79.5 689 c
83.0898 689 86 686.0898 86 682.5 C
89 682.5 L
89 687.7466 84.7466 692 79.5 692 c
74.2534 692 70 687.7466 70 682.5 c
70 677.2534 74.2534 673 79.5 673 c
84.7466 673 89 677.2534 89 682.5 C
86 682.5 L
f
187 684.5 m
187 680.9102 184.0898 678 180.5 678 c
176.9102 678 174 680.9102 174 684.5 c
174 688.0898 176.9102 691 180.5 691 c
184.0898 691 187 688.0898 187 684.5 C
190 684.5 L
190 689.7466 185.7466 694 180.5 694 c
175.2534 694 171 689.7466 171 684.5 c
171 679.2534 175.2534 675 180.5 675 c
185.7466 675 190 679.2534 190 684.5 C
187 684.5 L
f
293 686.5 m
293 682.9102 290.0898 680 286.5 680 c
282.9102 680 280 682.9102 280 686.5 c
280 690.0898 282.9102 693 286.5 693 c
290.0898 693 293 690.0898 293 686.5 C
296 686.5 L
296 691.7466 291.7466 696 286.5 696 c
281.2534 696 277 691.7466 277 686.5 c
277 681.2534 281.2534 677 286.5 677 c
291.7466 677 296 681.2534 296 686.5 C
293 686.5 L
f
491 686.5 m
491 682.9102 488.0898 680 484.5 680 c
480.9102 680 478 682.9102 478 686.5 c
478 690.0898 480.9102 693 484.5 693 c
488.0898 693 491 690.0898 491 686.5 C
494 686.5 L
494 691.7466 489.7466 696 484.5 696 c
479.2534 696 475 691.7466 475 686.5 c
475 681.2534 479.2534 677 484.5 677 c
489.7466 677 494 681.2534 494 686.5 C
491 686.5 L
f
382 671.5 m
382 667.3579 378.6421 664 374.5 664 c
370.3579 664 367 667.3579 367 671.5 c
367 675.6421 370.3579 679 374.5 679 c
378.6421 679 382 675.6421 382 671.5 C
385 671.5 L
385 677.2989 380.2989 682 374.5 682 c
368.7011 682 364 677.2989 364 671.5 c
364 665.7011 368.7011 661 374.5 661 c
380.2989 661 385 665.7011 385 671.5 C
382 671.5 L
f
281 682 m
210 682 L
210 679 L
283 679 L
281 681.2 L
280.7756 635.2503 262.6786 616.2918 221.7 613 C
222 610 L
263.8234 613.3597 283.2629 633.4171 284 679.3 C
281 682 L
f
u
390.5833 520.6635 m
394.8333 524.4969 L
344.9307 571.2848 345.9243 571.4969 339.3333 571.4969 c
333.0719 571.4969 333.7518 571.3041 303.5 533.1636 C
308.1667 529.9135 L
336.2707 565.5352 335.9486 565.6635 339.3333 565.6635 c
343.0305 565.6635 342.7689 565.5599 390.5833 520.6635 C
f
389.2666 418.5271 m
395.6667 423.9938 L
345.9652 471.7923 347.2861 471.9939 339.6667 471.9939 c
332.5524 471.9939 333.1348 471.7729 303 432.3272 C
309.9334 427.7271 L
336.7791 463.1744 336.6472 463.3271 339.6667 463.3271 c
343.1236 463.3271 342.8818 463.1942 389.2666 418.5271 C
f
387.95 316.4 m
396.5 323.5 L
346.9995 372.3088 348.6478 372.5 340 372.5 c
332.0331 372.5 332.5178 372.2509 302.5 331.5 C
311.7 325.55 L
337.2874 360.823 337.3458 361 340 361 c
343.2166 361 342.9946 360.8378 387.95 316.4 C
f
386.6333 214.2635 m
397.3333 222.9969 L
348.034 272.8163 350.0096 272.9969 340.3333 272.9969 c
331.5137 272.9969 331.9007 272.7198 302 230.6636 C
313.4667 223.3635 L
337.7958 258.4622 338.0444 258.6635 340.3333 258.6635 c
343.3097 258.6635 343.1075 258.4721 386.6333 214.2635 C
f
385.3167 112.1364 m
398.1666 122.503 L
349.0683 173.3328 351.3713 173.503 340.6666 173.503 c
330.9943 173.503 331.2837 173.1978 301.5 129.8364 C
315.2333 121.1864 L
338.3041 156.1108 338.7429 156.3364 340.6666 156.3364 c
343.4027 156.3364 343.2204 156.1157 385.3167 112.1364 C
f
U
317 19 m
338.8125 53.75 339.4416 54 341 54 c
343.4958 54 343.3333 53.75 384 10 C
399 22 L
350.1028 73.8403 352.7332 74 341 74 c
330.4749 74 330.6667 73.6667 301 29 C
317 19 L
f
u
26.8333 584.3303 m
25.0029 559.2055 17.9501 536.8116 5.5 515.7303 C
10.6167 513.1636 L
23.4951 535.1089 30.7292 558.4244 32.5 584.3303 C
26.8333 584.3303 L
f
25.6666 484.6606 m
24.2023 459.5166 17.2039 436.725 5 416.0606 C
12.6334 412.3272 L
25.3831 434.1592 32.5834 458.2864 34.0001 484.6606 C
25.6666 484.6606 L
f
24.5 385 m
23.4017 359.8368 16.4577 336.6476 4.5 316.4 C
14.65 311.5 L
27.2708 333.2187 34.4375 358.1576 35.5 385 C
24.5 385 L
f
23.3333 285.3303 m
22.6011 260.1478 15.7115 236.561 4 216.7303 C
16.6667 210.6636 L
29.1588 232.269 36.2917 258.0195 37 285.3303 C
23.3333 285.3303 L
f
22.1667 185.6697 m
21.8006 160.468 14.9654 136.4836 3.5 117.0697 C
18.6833 109.8364 L
31.0465 131.3286 38.1458 157.8907 38.4999 185.6697 C
22.1667 185.6697 L
f
U
20.7 9 m
32.9345 30.3789 40 57.7527 40 86 C
21 86 L
21 60.7791 14.2192 36.3971 3 17.4 C
20.7 9 L
f
u
489.3333 573.4969 m
452.5 573.4969 L
452.5 591.3303 L
446.8333 591.3303 L
446.8333 573.4969 L
408.6667 573.4969 L
408.6667 568.1635 L
446.8333 568.1635 L
446.8333 523.6636 L
446.8333 513.8901 446.7751 513.8303 431.1667 513.8303 C
429.5 513.8303 L
429.5 508.4969 L
451.72 508.4969 452.5 509.2903 452.5 524.3303 C
452.5 568.1635 L
489.3333 568.1635 L
489.3333 573.4969 L
f
U
u
489.6667 473.9939 m
454.0001 473.9939 L
454.0001 491.6606 L
445.6666 491.6606 L
445.6666 473.9939 L
408.3333 473.9939 L
408.3333 466.3271 L
445.6666 466.3271 L
445.6666 424.3273 L
445.6666 415.7269 445.6034 415.6607 432.3334 415.6607 C
429 415.6607 L
429 407.9938 L
453.3426 407.9938 454.0001 408.6693 454.0001 425.6606 C
454.0001 466.3271 L
489.6667 466.3271 L
489.6667 473.9939 L
f
490 376 m
455.5 376 L
455.5 392 L
444.5 392 L
444.5 376 L
408 376 L
408 366 L
444.5 366 L
444.5 325 L
444.5 317.5726 444.4319 317.5 433.5 317.5 C
428.5 317.5 L
428.5 307.5 L
454.965 307.5 455.5 308.0574 455.5 327 C
455.5 366 L
490 366 L
490 376 L
f
490.3333 276.997 m
457 276.997 L
457 292.3303 L
443.3333 292.3303 L
443.3333 276.997 L
407.6666 276.997 L
407.6666 264.6636 L
443.3333 264.6636 L
443.3333 225.6636 L
443.3333 219.4094 443.2602 219.3303 434.6667 219.3303 C
428 219.3303 L
428 206.9969 L
456.5875 206.9969 457 207.4364 457 228.3303 C
457 264.6636 L
490.3333 264.6636 L
490.3333 276.997 L
f
490.6666 178.003 m
458.4999 178.003 L
458.4999 192.6697 L
442.1667 192.6697 L
442.1667 178.003 L
407.3333 178.003 L
407.3333 163.3364 L
442.1667 163.3364 L
442.1667 126.3363 L
442.1667 121.2551 442.0887 121.1696 435.8333 121.1696 C
427.5 121.1696 L
427.5 106.503 L
458.2099 106.503 458.4999 106.8245 458.4999 129.6697 C
458.4999 163.3364 L
490.6666 163.3364 L
490.6666 178.003 L
f
U
491 79 m
460 79 L
460 93 L
441 93 L
441 79 L
407 79 L
407 62 L
441 62 L
441 27 L
441 23.0919 440.9171 23 437 23 C
427 23 L
427 6 L
459.8325 6 460 6.2035 460 31 C
460 62 L
491 62 L
491 79 L
f
u
469.2833 554.1302 m
475.7483 542.2747 482.3124 529.6219 486.6499 520.7969 C
491.6667 523.0636 L
486.1667 533.8511 479.9792 545.6532 474.1667 556.3303 C
469.2833 554.1302 L
f
468.2666 453.6605 m
474.3111 442.0536 480.6249 429.1813 484.9999 419.5938 C
492.3334 422.7272 L
487.0209 433.7397 481.0209 445.7439 475.3334 456.6606 C
468.2666 453.6605 L
f
467.25 353.2 m
472.874 341.8417 478.9375 328.75 483.35 318.4 C
493 322.4 L
487.875 333.6375 482.0625 345.8437 476.5 357 C
467.25 353.2 L
f
466.2333 252.7302 m
471.4368 241.6206 477.2499 228.3094 481.6999 217.1969 C
493.6667 222.0636 L
488.7292 233.5261 483.1042 245.9344 477.6667 257.3303 C
466.2333 252.7302 L
f
465.2167 152.2697 m
469.9997 141.4086 475.5625 127.878 480.05 116.003 C
494.3333 121.7364 L
489.5833 133.4239 484.1458 146.0343 478.8333 157.6697 C
465.2167 152.2697 L
f
U
464.2 51.8 m
468.5625 41.1875 473.875 27.4375 478.4 14.8 C
495 21.4 L
490.4375 33.3125 485.1875 46.125 480 58 C
464.2 51.8 L
f
u
423.6666 556.1636 m
418.4374 545.2365 412.3645 533.799 406.3333 523.2136 C
411.1667 520.7969 L
417.5627 532.073 423.6514 543.6943 428.6833 554.2136 C
423.6666 556.1636 L
f
422.3332 456.3272 m
417.3124 445.1605 411.4791 433.598 405.6666 422.9272 C
412.7334 419.5938 L
418.8948 431.0066 424.8107 442.9248 429.6667 453.7272 C
422.3332 456.3272 L
f
421 356.5 m
416.1875 345.0937 410.5937 333.4062 405 322.65 C
414.3 318.4 L
420.2268 329.9494 425.9699 342.1645 430.65 353.25 C
421 356.5 L
f
419.6666 256.6636 m
415.0625 245.0178 409.7083 233.2053 404.3333 222.3636 C
415.8667 217.1969 L
421.5589 228.8829 427.1291 241.3949 431.6333 252.7636 C
419.6666 256.6636 L
f
418.3334 156.8364 m
413.9375 144.951 408.8229 133.0135 403.6667 122.0864 C
417.4333 116.003 L
422.891 127.8257 428.2883 140.6346 432.6166 152.2864 C
418.3334 156.8364 L
f
U
417 57 m
412.8125 44.875 407.9375 32.8125 403 21.8 C
419 14.8 L
424.2231 26.7593 429.4476 39.8651 433.6 51.8 C
417 57 L
f
u
121 551.5015 m
121 587.3348 L
115.3333 587.3348 L
115.3333 533.8348 L
115.3333 515.7617 121.1077 510.6682 138.5 510.6682 C
184.1667 510.6682 L
184.1667 516.1681 L
138.6667 516.1681 l
124.4865 516.1681 121 519.6589 121 533.8348 C
121 549.0015 L
118.6667 547.3349 L
141.737 550.9071 164.0521 556.5015 185.5 564.0015 C
183.9167 569.2515 L
162.7485 561.8448 140.3891 556.2156 117.9422 552.7374 C
121 551.5015 L
f
123 451.9985 m
123 487.6651 L
114.6667 487.6651 L
114.6667 433.6651 L
114.6667 415.4348 120.4274 410.3318 138 410.3318 C
184.3333 410.3318 L
184.3333 418.3318 L
138.3333 418.3318 l
125.861 418.3318 123 421.2013 123 433.6651 C
123 447.9984 L
119.3333 445.6651 L
142.1875 449.1215 164.5417 454.6234 186 461.9984 C
183.7333 469.5984 L
162.708 462.3649 140.4563 456.8539 118.3538 453.5072 C
123 451.9985 L
f
U
u
125 352.5 m
125 388 L
114 388 L
114 333.5 L
114 315.1125 119.7472 310 137.5 310 C
184.5 310 L
184.5 320.5 L
138 320.5 l
127.2354 320.5 125 322.7482 125 333.5 C
125 347 L
120 344 L
142.6381 347.3405 165.0312 352.75 186.5 360 C
183.55 369.95 L
162.6675 362.8897 140.5235 357.4967 118.7653 354.2815 C
125 352.5 L
f
127 255.6636 m
127 288.3303 L
113.3333 288.3303 L
113.3333 233.3303 L
113.3333 214.7856 119.067 209.6636 137 209.6636 C
184.6667 209.6636 L
184.6667 222.6637 L
137.6666 222.6637 l
128.6099 222.6637 127 224.2905 127 233.3303 C
127 248.6636 L
120.6667 244.9969 L
143.0887 248.2215 165.5208 253.5386 187 260.6636 C
183.3666 272.9636 L
162.627 266.0766 140.5907 260.8017 119.1769 257.718 C
127 255.6636 L
f
128.9999 156.8363 m
128.9999 188.6697 L
112.6667 188.6697 L
112.6667 133.1697 L
112.6667 114.4679 118.3868 109.3364 136.5 109.3364 C
184.8333 109.3364 L
184.8333 124.8363 L
137.3333 124.8363 l
129.9843 124.8363 128.9999 125.8419 128.9999 133.1697 C
128.9999 148.3364 L
121.3333 144.0031 L
143.5393 147.1118 166.0104 152.3364 187.5 159.3364 C
183.1833 173.9863 L
162.5866 167.2726 140.6579 162.1157 119.5884 159.1635 C
128.9999 156.8363 L
f
U
131 58 m
131 89 L
112 89 L
112 33 L
112 14.141 117.7066 9 136 9 C
185 9 L
185 27 L
137 27 l
131.3588 27 131 27.3843 131 33 C
131 48 L
122 43 L
143.9899 45.9928 166.5 51.125 188 58 C
183 75 L
162.5461 68.4595 140.7251 63.4207 120 60.6 C
131 58 L
f
u
68.3166 565.6969 m
75.3244 548.9111 80.2151 532.5484 84.1333 513.1636 C
89.8333 514.3303 L
85.8954 533.8319 80.7797 550.4649 73.6833 567.5303 C
68.3166 565.6969 L
f
67.1332 464.5938 m
73.6175 448.1792 78.3355 431.7576 82.2665 412.3272 C
90.6667 414.0605 L
86.8051 433.1843 81.8445 449.8346 75.0667 467.0605 C
67.1332 464.5938 L
f
65.95 363.5 m
71.9109 347.4564 76.456 330.9759 80.4 311.5 C
91.5 313.8 L
87.7146 332.546 82.9093 349.2136 76.45 366.6 C
65.95 363.5 L
f
64.7666 262.3969 m
70.204 246.7245 74.5763 230.1851 78.5332 210.6636 C
92.3333 213.5303 L
88.6243 231.8985 83.9742 248.5834 77.8333 266.1303 C
64.7666 262.3969 L
f
63.5834 161.3031 m
68.4974 146.0018 72.6968 129.4035 76.6667 109.8364 C
93.1666 113.2697 L
89.5338 131.2602 85.039 147.9623 79.2166 165.6697 C
63.5834 161.3031 L
f
U
62.4 60.2 m
66.7906 45.2698 70.8172 28.6126 74.8 9 C
94 13 L
90.4435 30.6127 86.1039 47.3321 80.6 65.2 C
62.4 60.2 L
f
u
382 571.9136 m
382 568.0016 378.8286 564.8303 374.9167 564.8303 c
371.0047 564.8303 367.8333 568.0016 367.8333 571.9136 c
367.8333 575.8256 371.0047 578.9969 374.9167 578.9969 c
378.8286 578.9969 382 575.8256 382 571.9136 C
386.1667 571.9136 L
386.1667 578.1268 381.1298 583.1636 374.9167 583.1636 c
368.7035 583.1636 363.6666 578.1268 363.6666 571.9136 c
363.6666 565.7005 368.7035 560.6636 374.9167 560.6636 c
381.1298 560.6636 386.1667 565.7005 386.1667 571.9136 C
382 571.9136 L
f
382 472.3272 m
382 468.6454 379.0152 465.6606 375.3333 465.6606 c
371.6515 465.6606 368.6667 468.6454 368.6667 472.3272 c
368.6667 476.0091 371.6515 478.9939 375.3333 478.9939 c
379.0152 478.9939 382 476.0091 382 472.3272 C
387.3334 472.3272 L
387.3334 478.9546 381.9607 484.3273 375.3333 484.3273 c
368.706 484.3273 363.3333 478.9546 363.3333 472.3272 c
363.3333 465.6999 368.706 460.3272 375.3333 460.3272 c
381.9607 460.3272 387.3334 465.6999 387.3334 472.3272 C
382 472.3272 L
f
382 372.75 m
382 369.2982 379.2017 366.5 375.75 366.5 c
372.2982 366.5 369.5 369.2982 369.5 372.75 c
369.5 376.2017 372.2982 379 375.75 379 c
379.2017 379 382 376.2017 382 372.75 C
388.5 372.75 L
388.5 379.7915 382.7915 385.5 375.75 385.5 c
368.7084 385.5 363 379.7915 363 372.75 c
363 365.7085 368.7084 360 375.75 360 c
382.7915 360 388.5 365.7085 388.5 372.75 C
382 372.75 L
f
382 273.1636 m
382 269.942 379.3883 267.3303 376.1667 267.3303 c
372.945 267.3303 370.3333 269.942 370.3333 273.1636 c
370.3333 276.3852 372.945 278.9969 376.1667 278.9969 c
379.3883 278.9969 382 276.3852 382 273.1636 C
389.6667 273.1636 L
389.6667 280.6194 383.6224 286.6636 376.1667 286.6636 c
368.7109 286.6636 362.6666 280.6194 362.6666 273.1636 c
362.6666 265.7079 368.7109 259.6636 376.1667 259.6636 c
383.6224 259.6636 389.6667 265.7079 389.6667 273.1636 C
382 273.1636 L
f
382 173.5864 m
382 170.5948 379.5748 168.1697 376.5833 168.1697 c
373.5918 168.1697 371.1666 170.5948 371.1666 173.5864 c
371.1666 176.5779 373.5918 179.003 376.5833 179.003 c
379.5748 179.003 382 176.5779 382 173.5864 C
390.8333 173.5864 L
390.8333 181.4563 384.4532 187.8363 376.5833 187.8363 c
368.7133 187.8363 362.3333 181.4563 362.3333 173.5864 c
362.3333 165.7165 368.7133 159.3364 376.5833 159.3364 c
384.4532 159.3364 390.8333 165.7165 390.8333 173.5864 C
382 173.5864 L
f
U
382 74 m
382 71.2386 379.7614 69 377 69 c
374.2386 69 372 71.2386 372 74 c
372 76.7614 374.2386 79 377 79 c
379.7614 79 382 76.7614 382 74 C
392 74 L
392 82.2842 385.2841 89 377 89 c
368.7158 89 362 82.2842 362 74 c
362 65.7159 368.7158 59 377 59 c
385.2841 59 392 65.7159 392 74 C
382 74 L
f
u
85 582.4136 m
85 578.9619 82.2017 576.1636 78.75 576.1636 c
75.2982 576.1636 72.5 578.9619 72.5 582.4136 c
72.5 585.8653 75.2982 588.6636 78.75 588.6636 c
82.2017 588.6636 85 585.8653 85 582.4136 C
89 582.4136 L
89 588.0744 84.4108 592.6636 78.75 592.6636 c
73.0891 592.6636 68.4999 588.0744 68.4999 582.4136 c
68.4999 576.7528 73.0891 572.1636 78.75 572.1636 c
84.4108 572.1636 89 576.7528 89 582.4136 C
85 582.4136 L
f
83.9999 482.3272 m
83.9999 479.0135 81.3136 476.3272 77.9999 476.3272 c
74.6863 476.3272 72 479.0135 72 482.3272 c
72 485.6409 74.6863 488.3272 77.9999 488.3272 c
81.3136 488.3272 83.9999 485.6409 83.9999 482.3272 C
89 482.3272 L
89 488.4023 84.075 493.3273 77.9999 493.3273 c
71.9249 493.3273 66.9999 488.4023 66.9999 482.3272 c
66.9999 476.2521 71.9249 471.3272 77.9999 471.3272 c
84.075 471.3272 89 476.2521 89 482.3272 C
83.9999 482.3272 L
f
83 382.25 m
83 379.0744 80.4256 376.5 77.25 376.5 c
74.0744 376.5 71.5 379.0744 71.5 382.25 c
71.5 385.4256 74.0744 388 77.25 388 c
80.4256 388 83 385.4256 83 382.25 C
89 382.25 L
89 388.7392 83.7392 394 77.25 394 c
70.7607 394 65.5 388.7392 65.5 382.25 c
65.5 375.7607 70.7607 370.5 77.25 370.5 c
83.7392 370.5 89 375.7607 89 382.25 C
83 382.25 L
f
82 282.1636 m
82 279.1261 79.5375 276.6636 76.5 276.6636 c
73.4624 276.6636 71 279.1261 71 282.1636 c
71 285.2011 73.4624 287.6636 76.5 287.6636 c
79.5375 287.6636 82 285.2011 82 282.1636 C
89 282.1636 L
89 289.0671 83.4034 294.6636 76.5 294.6636 c
69.5965 294.6636 63.9999 289.0671 63.9999 282.1636 c
63.9999 275.2601 69.5965 269.6636 76.5 269.6636 c
83.4034 269.6636 89 275.2601 89 282.1636 C
82 282.1636 L
f
81 182.0864 m
81 179.1869 78.6495 176.8364 75.75 176.8364 c
72.8505 176.8364 70.5 179.1869 70.5 182.0864 c
70.5 184.9859 72.8505 187.3364 75.75 187.3364 c
78.6495 187.3364 81 184.9859 81 182.0864 C
89 182.0864 L
89 189.404 83.0677 195.3363 75.75 195.3363 c
68.4323 195.3363 62.5 189.404 62.5 182.0864 c
62.5 174.7687 68.4323 168.8364 75.75 168.8364 c
83.0677 168.8364 89 174.7687 89 182.0864 C
81 182.0864 L
f
U
80 82 m
80 79.2386 77.7614 77 75 77 c
72.2386 77 70 79.2386 70 82 c
70 84.7614 72.2386 87 75 87 c
77.7614 87 80 84.7614 80 82 C
89 82 L
89 89.7319 82.7319 96 75 96 c
67.2681 96 61 89.7319 61 82 c
61 74.2681 67.2681 68 75 68 c
82.7319 68 89 74.2681 89 82 C
80 82 L
f
u
186.6667 584.4182 m
186.6667 580.9664 183.8684 578.1682 180.4167 578.1682 c
176.9649 578.1682 174.1667 580.9664 174.1667 584.4182 c
174.1667 587.8699 176.9649 590.6682 180.4167 590.6682 c
183.8684 590.6682 186.6667 587.8699 186.6667 584.4182 C
190.6667 584.4182 L
190.6667 590.079 186.0774 594.6682 180.4167 594.6682 c
174.7558 594.6682 170.1667 590.079 170.1667 584.4182 c
170.1667 578.7574 174.7558 574.1682 180.4167 574.1682 c
186.0774 574.1682 190.6667 578.7574 190.6667 584.4182 C
186.6667 584.4182 L
f
186.3333 484.3318 m
186.3333 481.0182 183.647 478.3318 180.3333 478.3318 c
177.0196 478.3318 174.3333 481.0182 174.3333 484.3318 c
174.3333 487.6455 177.0196 490.3318 180.3333 490.3318 c
183.647 490.3318 186.3333 487.6455 186.3333 484.3318 C
191.3333 484.3318 L
191.3333 490.4068 186.4084 495.3318 180.3333 495.3318 c
174.2583 495.3318 169.3333 490.4068 169.3333 484.3318 c
169.3333 478.2568 174.2583 473.3318 180.3333 473.3318 c
186.4084 473.3318 191.3333 478.2568 191.3333 484.3318 C
186.3333 484.3318 L
f
U
u
186 384.25 m
186 381.0744 183.4256 378.5 180.25 378.5 c
177.0744 378.5 174.5 381.0744 174.5 384.25 c
174.5 387.4256 177.0744 390 180.25 390 c
183.4256 390 186 387.4256 186 384.25 C
192 384.25 L
192 390.7393 186.7392 396 180.25 396 c
173.7607 396 168.5 390.7393 168.5 384.25 c
168.5 377.7608 173.7607 372.5 180.25 372.5 c
186.7392 372.5 192 377.7608 192 384.25 C
186 384.25 L
f
185.6666 282.1636 m
185.6666 279.1261 183.2042 276.6636 180.1667 276.6636 c
177.1291 276.6636 174.6667 279.1261 174.6667 282.1636 c
174.6667 285.2011 177.1291 287.6636 180.1667 287.6636 c
183.2042 287.6636 185.6666 285.2011 185.6666 282.1636 C
192.6667 282.1636 L
192.6667 289.0671 187.0701 294.6636 180.1667 294.6636 c
173.2631 294.6636 167.6666 289.0671 167.6666 282.1636 c
167.6666 275.2601 173.2631 269.6636 180.1667 269.6636 c
187.0701 269.6636 192.6667 275.2601 192.6667 282.1636 C
185.6666 282.1636 L
f
185.3333 181.5864 m
185.3333 178.6869 182.9828 176.3364 180.0833 176.3364 c
177.1838 176.3364 174.8333 178.6869 174.8333 181.5864 c
174.8333 184.4859 177.1838 186.8364 180.0833 186.8364 c
182.9828 186.8364 185.3333 184.4859 185.3333 181.5864 C
193.3333 181.5864 L
193.3333 188.9041 187.401 194.8364 180.0833 194.8364 c
172.7656 194.8364 166.8333 188.9041 166.8333 181.5864 c
166.8333 174.2687 172.7656 168.3364 180.0833 168.3364 c
187.401 168.3364 193.3333 174.2687 193.3333 181.5864 C
185.3333 181.5864 L
f
U
185 81 m
185 78.2386 182.7614 76 180 76 c
177.2386 76 175 78.2386 175 81 c
175 83.7614 177.2386 86 180 86 c
182.7614 86 185 83.7614 185 81 C
194 81 L
194 88.7319 187.7319 95 180 95 c
172.2681 95 166 88.7319 166 81 c
166 73.2681 172.2681 67 180 67 c
187.7319 67 194 73.2681 194 81 C
185 81 L
f
u
491 586.75 m
491 583.2982 488.2017 580.5 484.75 580.5 c
481.2982 580.5 478.5 583.2982 478.5 586.75 c
478.5 590.2017 481.2982 593 484.75 593 c
488.2017 593 491 590.2017 491 586.75 C
495 586.75 L
495 592.4108 490.4108 597 484.75 597 c
479.0892 597 474.5 592.4108 474.5 586.75 c
474.5 581.0891 479.0892 576.4999 484.75 576.4999 c
490.4108 576.4999 495 581.0891 495 586.75 C
491 586.75 L
f
U
u
491 488 m
491 484.6863 488.3136 482 485 482 c
481.6863 482 479 484.6863 479 488 c
479 491.3136 481.6863 493.9999 485 493.9999 c
488.3136 493.9999 491 491.3136 491 488 C
496 488 L
496 494.075 491.075 499 485 499 c
478.9249 499 473.9999 494.075 473.9999 488 c
473.9999 481.9249 478.9249 476.9999 485 476.9999 c
491.075 476.9999 496 481.9249 496 488 C
491 488 L
f
490 383.25 m
490 380.0744 487.4256 377.5 484.25 377.5 c
481.0744 377.5 478.5 380.0744 478.5 383.25 c
478.5 386.4256 481.0744 389 484.25 389 c
487.4256 389 490 386.4256 490 383.25 C
496 383.25 L
496 389.7393 490.7392 395 484.25 395 c
477.7607 395 472.5 389.7393 472.5 383.25 c
472.5 376.7608 477.7607 371.5 484.25 371.5 c
490.7392 371.5 496 376.7608 496 383.25 C
490 383.25 L
f
U
u
489.6667 283.5015 m
489.6667 280.464 487.2042 278.0015 484.1667 278.0015 c
481.1291 278.0015 478.6667 280.464 478.6667 283.5015 c
478.6667 286.5391 481.1291 289.0015 484.1667 289.0015 c
487.2042 289.0015 489.6667 286.5391 489.6667 283.5015 C
496.6667 283.5015 L
496.6667 290.405 491.0701 296.0015 484.1667 296.0015 c
477.2632 296.0015 471.6667 290.405 471.6667 283.5015 c
471.6667 276.5981 477.2632 271.0015 484.1667 271.0015 c
491.0701 271.0015 496.6667 276.5981 496.6667 283.5015 C
489.6667 283.5015 L
f
489.3333 183.7485 m
489.3333 180.849 486.9828 178.4985 484.0833 178.4985 c
481.1838 178.4985 478.8333 180.849 478.8333 183.7485 c
478.8333 186.6479 481.1838 188.9985 484.0833 188.9985 c
486.9828 188.9985 489.3333 186.6479 489.3333 183.7485 C
497.3333 183.7485 L
497.3333 191.0662 491.401 196.9985 484.0833 196.9985 c
476.7656 196.9985 470.8333 191.0662 470.8333 183.7485 c
470.8333 176.4308 476.7656 170.4985 484.0833 170.4985 c
491.401 170.4985 497.3333 176.4308 497.3333 183.7485 C
489.3333 183.7485 L
f
U
489 84 m
489 81.2386 486.7614 79 484 79 c
481.2386 79 479 81.2386 479 84 c
479 86.7614 481.2386 89 484 89 c
486.7614 89 489 86.7614 489 84 C
498 84 L
498 91.7319 491.7319 98 484 98 c
476.2681 98 470 91.7319 470 84 c
470 76.2681 476.2681 70 484 70 c
491.7319 70 498 76.2681 498 84 C
489 84 L
f
u
292 585.7469 m
292 582.2952 289.2017 579.4969 285.75 579.4969 c
282.2982 579.4969 279.5 582.2952 279.5 585.7469 c
279.5 589.1986 282.2982 591.9969 285.75 591.9969 c
289.2017 591.9969 292 589.1986 292 585.7469 C
296.1667 585.7469 L
296.1667 591.4998 291.5028 596.1636 285.75 596.1636 c
279.9971 596.1636 275.3333 591.4998 275.3333 585.7469 c
275.3333 579.994 279.9971 575.3302 285.75 575.3302 c
291.5028 575.3302 296.1667 579.994 296.1667 585.7469 C
292 585.7469 L
f
290.9999 484.9938 m
290.9999 481.6802 288.3136 478.9938 284.9999 478.9938 c
281.6863 478.9938 279 481.6802 279 484.9938 c
279 488.3075 281.6863 490.9938 284.9999 490.9938 c
288.3136 490.9938 290.9999 488.3075 290.9999 484.9938 C
296.3333 484.9938 L
296.3333 491.253 291.2591 496.3272 284.9999 496.3272 c
278.7408 496.3272 273.6665 491.253 273.6665 484.9938 c
273.6665 478.7347 278.7408 473.6604 284.9999 473.6604 c
291.2591 473.6604 296.3333 478.7347 296.3333 484.9938 C
290.9999 484.9938 L
f
290 384.25 m
290 381.0744 287.4256 378.5 284.25 378.5 c
281.0744 378.5 278.5 381.0744 278.5 384.25 c
278.5 387.4256 281.0744 390 284.25 390 c
287.4256 390 290 387.4256 290 384.25 C
296.5 384.25 L
296.5 391.0154 291.0153 396.5 284.25 396.5 c
277.4846 396.5 272 391.0154 272 384.25 c
272 377.4846 277.4846 372 284.25 372 c
291.0153 372 296.5 377.4846 296.5 384.25 C
290 384.25 L
f
289 283.4969 m
289 280.4594 286.5375 277.9969 283.5 277.9969 c
280.4624 277.9969 278 280.4594 278 283.4969 c
278 286.5345 280.4624 288.9969 283.5 288.9969 c
286.5375 288.9969 289 286.5345 289 283.4969 C
296.6667 283.4969 L
296.6667 290.7686 290.7716 296.6636 283.5 296.6636 c
276.2283 296.6636 270.3333 290.7686 270.3333 283.4969 c
270.3333 276.2253 276.2283 270.3302 283.5 270.3302 c
290.7716 270.3302 296.6667 276.2253 296.6667 283.4969 C
289 283.4969 L
f
288 182.7531 m
288 179.8536 285.6495 177.503 282.75 177.503 c
279.8505 177.503 277.5 179.8536 277.5 182.7531 c
277.5 185.6525 279.8505 188.0031 282.75 188.0031 c
285.6495 188.0031 288 185.6525 288 182.7531 C
296.8333 182.7531 L
296.8333 190.531 290.5278 196.8364 282.75 196.8364 c
274.9721 196.8364 268.6667 190.531 268.6667 182.7531 c
268.6667 174.9752 274.9721 168.6697 282.75 168.6697 c
290.5278 168.6697 296.8333 174.9752 296.8333 182.7531 C
288 182.7531 L
f
U
287 82 m
287 79.2386 284.7614 77 282 77 c
279.2386 77 277 79.2386 277 82 c
277 84.7614 279.2386 87 282 87 c
284.7614 87 287 84.7614 287 82 C
297 82 L
297 90.2842 290.2841 97 282 97 c
273.7158 97 267 90.2842 267 82 c
267 73.7159 273.7158 67 282 67 c
290.2841 67 297 73.7159 297 82 C
287 82 L
f
u
279.1666 582.3303 m
209.5 582.3303 L
209.5 576.8302 L
282.5 576.8302 L
278.6333 581.0803 L
278.3232 536.2408 260.8032 518.0478 220.75 514.8303 C
221.3333 509.3302 L
263.2462 512.6971 282.9543 532.6405 284.2167 577.6302 C
279.1666 582.3303 L
f
277.3332 482.6606 m
209 482.6606 L
209 474.6604 L
282 474.6604 L
276.2665 480.9605 L
275.8709 437.2313 258.9278 419.8038 219.7999 416.6607 C
220.6666 408.6605 L
262.6689 412.0345 282.6457 431.864 284.4333 475.9604 C
277.3332 482.6606 L
f
275.5 383 m
208.5 383 L
208.5 372.5 L
281.5 372.5 L
273.9 380.85 L
273.4187 338.2309 257.0526 321.5688 218.85 318.5 C
220 308 L
262.0917 311.3812 282.3371 331.0966 284.65 374.3 C
275.5 383 L
f
273.6666 283.3303 m
208 283.3303 L
208 270.3302 L
281 270.3302 L
271.5332 280.7303 L
270.9664 239.2215 255.1772 223.3248 217.9 220.3303 C
219.3333 207.3302 L
261.5144 210.7186 282.0285 230.32 284.8666 272.6302 C
273.6666 283.3303 L
f
271.8334 183.6697 m
207.5 183.6697 L
207.5 168.1698 L
280.5 168.1698 L
269.1667 180.6197 L
268.5142 140.221 253.302 125.0898 216.95 122.1696 C
218.6667 106.6697 L
260.9372 110.0653 281.7199 129.5527 285.0833 170.9698 C
271.8334 183.6697 L
f
U
270 84 m
207 84 L
207 66 L
280 66 L
266.8 80.5 L
266.0619 41.2116 251.4266 26.8458 216 24 C
218 6 L
260.3599 9.4027 281.4113 28.7761 285.3 69.3 C
270 84 L
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
