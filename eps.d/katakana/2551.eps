%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (2551.eps)
%%CreationDate: (5/19/04) (5:07 PM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
1 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
500 600 m
500 700 L
400 700 L
400 600 L
500 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
400 600 m
400 700 L
300 700 L
300 600 L
400 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
500 500 m
500 600 L
400 600 L
400 500 L
500 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
400 500 m
400 600 L
300 600 L
300 500 L
400 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
0 Ap
0 O
0 g
1 D
392.9 621.8 m
395 624 L
344.8963 669.7774 345.5625 670 340 670 c
334.5913 670 335.3689 669.8352 305 633 C
307.4 631.1 L
336.7624 666.896 336.25 667 340 667 c
343.9375 667 343.656 666.9257 392.9 621.8 C
f
277 683 m
210 683 L
210 680 L
278 680 L
276 682.1 L
275.7914 636.4723 259.1302 618.2478 218.7 615 C
219 612 L
260.108 615.3022 278.2623 633.5985 279 680 C
277 683 L
f
68.6 668.8 m
76.5853 650.9628 81.9534 634.0397 86 614 C
89 614.6 L
84.831 635.2461 79.2711 652.418 71.4 670 C
68.6 668.8 L
f
120 659 m
141.6301 659 162.7702 661.0805 183 665.1 C
182.5 668 L
162.6391 664.0538 141.4573 662 120 662 C
120 688 L
117 688 L
117 635 L
117 617.0841 122.7879 612 140 612 C
182 612 L
182 615 L
140 615 l
124.1121 615 120 619.1121 120 635 c
120 659 L
f
484 677 m
451 677 L
451 692 L
448 692 L
448 677 L
409 677 L
409 674 L
448 674 L
448 624 L
448 613.0534 447.9467 613 430 613 C
430 613 L
430 610 L
450.0975 610 451 610.9114 451 624 C
451 674 L
486 674 L
486 676.6 L
484 677 L
f
470.3 656.6 m
477.1856 644.4959 484 632.0625 488.3 624 C
491 625.4 L
485.3125 635.9625 478.9375 647.5625 473 658 C
470.3 656.6 L
f
425 658 m
419.5625 647.3125 413.25 636 407 625.5 C
409.6 624 L
416.2306 635.1395 422.4922 646.4639 427.7 656.7 C
425 658 L
f
28 684 m
25.8035 658.8945 18.6963 636.8982 6 615.4 C
8.6 614 L
21.6072 636.0586 28.875 658.5625 31 684 C
28 684 L
f
93 683.5 m
93 689.2989 88.2989 694 82.5 694 c
76.7011 694 72 689.2989 72 683.5 c
72 677.7011 76.7011 673 82.5 673 c
88.2989 673 93 677.7011 93 683.5 C
90 683.5 L
90 679.3579 86.6421 676 82.5 676 c
78.3579 676 75 679.3579 75 683.5 c
75 687.6421 78.3579 691 82.5 691 c
86.6421 691 90 687.6421 90 683.5 C
93 683.5 L
f
193 683.5 m
193 689.2989 188.2989 694 182.5 694 c
176.7011 694 172 689.2989 172 683.5 c
172 677.7011 176.7011 673 182.5 673 c
188.2989 673 193 677.7011 193 683.5 C
190 683.5 L
190 679.3579 186.6421 676 182.5 676 c
178.3579 676 175 679.3579 175 683.5 c
175 687.6421 178.3579 691 182.5 691 c
186.6421 691 190 687.6421 190 683.5 C
193 683.5 L
f
295 685.5 m
295 691.2989 290.2989 696 284.5 696 c
278.7011 696 274 691.2989 274 685.5 c
274 679.7011 278.7011 675 284.5 675 c
290.2989 675 295 679.7011 295 685.5 C
292 685.5 L
292 681.3579 288.6421 678 284.5 678 c
280.3579 678 277 681.3579 277 685.5 c
277 689.6421 280.3579 693 284.5 693 c
288.6421 693 292 689.6421 292 685.5 C
295 685.5 L
f
496 686.5 m
496 692.2989 491.2989 697 485.5 697 c
479.7011 697 475 692.2989 475 686.5 c
475 680.7011 479.7011 676 485.5 676 c
491.2989 676 496 680.7011 496 686.5 C
493 686.5 L
493 682.3579 489.6421 679 485.5 679 c
481.3579 679 478 682.3579 478 686.5 c
478 690.6421 481.3579 694 485.5 694 c
489.6421 694 493 690.6421 493 686.5 C
496 686.5 L
f
387 672.5 m
387 678.8512 381.8512 684 375.5 684 c
369.1489 684 364 678.8512 364 672.5 c
364 666.1488 369.1489 661 375.5 661 c
381.8512 661 387 666.1488 387 672.5 C
384 672.5 L
384 667.8057 380.1943 664 375.5 664 c
370.8057 664 367 667.8057 367 672.5 c
367 677.1943 370.8057 681 375.5 681 c
380.1943 681 384 677.1943 384 672.5 C
387 672.5 L
f
u
391.4166 519.6635 m
395.6667 523.4969 L
345.764 570.2848 347.0243 570.497 340.1667 570.497 c
333.6385 570.497 334.5852 570.3041 304.3333 532.1636 C
309 528.9135 L
337.1041 564.5352 336.6042 564.6635 340.1667 564.6635 c
344.0417 564.6635 343.6022 564.56 391.4166 519.6635 C
f
389.9332 417.5271 m
396.3334 422.9939 L
346.6318 470.7923 348.4862 470.9939 340.3333 470.9939 c
332.6858 470.9939 333.8014 470.7729 303.6666 431.3272 C
310.6001 426.7271 L
337.4458 462.1744 336.9584 462.3271 340.3333 462.3271 c
344.1458 462.3271 343.5484 462.1942 389.9332 417.5271 C
f
388.45 315.4 m
397 322.5 L
347.4996 371.3088 349.9479 371.5 340.5 371.5 c
331.7332 371.5 333.0178 371.2509 303 330.5 C
312.2 324.55 L
337.7874 359.823 337.3125 360 340.5 360 c
344.25 360 343.4947 359.8378 388.45 315.4 C
f
386.9666 213.2635 m
397.6667 221.9969 L
348.3673 271.8163 351.4097 271.997 340.6667 271.997 c
330.7804 271.997 332.2341 271.7198 302.3333 229.6636 C
313.8 222.3635 L
338.1291 257.4622 337.6667 257.6635 340.6667 257.6635 c
344.3542 257.6635 343.4409 257.4721 386.9666 213.2635 C
f
385.4834 111.1364 m
398.3333 121.5031 L
349.235 172.3328 352.8715 172.503 340.8333 172.503 c
329.8277 172.503 331.4504 172.1978 301.6667 128.8364 C
315.4 120.1864 L
338.4708 155.1108 338.0208 155.3365 340.8333 155.3365 c
344.4583 155.3365 343.3871 155.1157 385.4834 111.1364 C
f
U
317 18 m
338.8125 52.75 338.375 53 341 53 c
344.5625 53 343.3333 52.75 384 9 C
399 21 L
350.1028 72.8403 354.3333 73 341 73 c
328.875 73 330.6667 72.6667 301 28 C
317 18 L
f
u
26.8333 584.3303 m
25.0029 559.2055 17.9501 536.8116 5.5 515.7303 C
10.6167 513.1636 L
23.4951 535.1089 30.7292 558.4245 32.5001 584.3303 C
26.8333 584.3303 L
f
25.6666 484.6606 m
24.2023 459.5166 17.2039 436.7251 5 416.0606 C
12.6334 412.3272 L
25.3831 434.1592 32.5834 458.2864 34.0001 484.6606 C
25.6666 484.6606 L
f
24.5 385 m
23.4017 359.8368 16.4577 336.6476 4.5 316.4 C
14.65 311.5 L
27.2709 333.2187 34.4375 358.1576 35.5 385 C
24.5 385 L
f
23.3333 285.3303 m
22.6011 260.1478 15.7115 236.5611 4 216.7303 C
16.6667 210.6636 L
29.1588 232.269 36.2917 258.0196 37.0001 285.3303 C
23.3333 285.3303 L
f
22.1667 185.6697 m
21.8006 160.468 14.9654 136.4837 3.5 117.0697 C
18.6833 109.8364 L
31.0466 131.3286 38.1458 157.8907 38.5 185.6697 C
22.1667 185.6697 L
f
U
20.7 9 m
32.9345 30.3789 40 57.7527 40 86 C
21 86 L
21 60.7791 14.2192 36.3971 3 17.4 C
20.7 9 L
f
u
67.4666 567.6969 m
74.8901 550.262 80.0683 533.2751 84.1333 513.1636 C
89.8334 514.3303 L
85.744 534.5819 80.3604 551.7718 72.8334 569.5303 C
67.4666 567.6969 L
f
66.3333 466.5938 m
73.1949 449.5613 78.1831 432.5105 82.2666 412.3272 C
90.6667 414.0605 L
86.657 433.9178 81.4497 451.1256 74.2667 469.0605 C
66.3333 466.5938 L
f
65.2 365.5 m
71.4999 348.8697 76.2982 331.7551 80.4 311.5 C
91.5 313.8 L
87.5699 333.2628 82.539 350.4886 75.7 368.6 C
65.2 365.5 L
f
64.0666 264.3969 m
69.8047 248.169 74.4131 230.9905 78.5333 210.6636 C
92.3334 213.5303 L
88.4829 232.5987 83.6283 249.8424 77.1334 268.1303 C
64.0666 264.3969 L
f
62.9334 163.3031 m
68.1096 147.4775 72.5281 130.2351 76.6667 109.8364 C
93.1667 113.2697 L
89.3958 131.9438 84.7175 149.2054 78.5666 167.6697 C
62.9334 163.3031 L
f
U
61.8 62.2 m
66.4144 46.7767 70.643 29.4705 74.8 9 C
94 13 L
90.3088 31.2796 85.8069 48.5592 80 67.2 C
61.8 62.2 L
f
u
276.1667 583.497 m
209.5 583.497 L
209.5 577.9969 L
277.6667 577.9969 L
273.7999 582.1636 L
273.5016 537.5157 257.431 520.1712 217.9166 516.997 C
218.5 511.4969 L
259.6452 514.8021 278.243 533.0452 279.4185 578.8093 C
276.1667 583.497 L
f
275.3333 483.9939 m
209 483.9939 L
209 475.9938 L
277.3333 475.9938 L
271.5999 482.2272 L
271.2118 438.5592 255.7318 422.0946 217.1333 418.994 C
218 410.9939 L
259.1824 414.302 278.2236 432.492 279.8369 477.6186 C
275.3333 483.9939 L
f
274.5 384.5 m
208.5 384.5 L
208.5 374 L
277 374 L
269.4 382.3 L
268.9223 339.6117 254.0327 324.027 216.35 321 C
217.5 310.5 L
258.7196 313.8111 278.2043 331.9479 280.2554 376.4371 C
274.5 384.5 L
f
273.6667 284.997 m
208 284.997 L
208 271.9969 L
276.6667 271.9969 L
267.1999 282.3636 L
266.6325 240.6552 252.3335 225.9505 215.5666 222.997 C
217 209.9969 L
258.2568 213.311 278.185 231.3946 280.6738 275.2463 C
273.6667 284.997 L
f
272.8334 185.503 m
207.5 185.503 L
207.5 170.0031 L
276.3334 170.0031 L
265.0001 182.4364 L
264.343 141.7077 250.6344 127.8829 214.7834 125.003 C
216.5 109.5031 L
257.794 112.8202 278.1656 130.8505 281.0923 174.0649 C
272.8334 185.503 L
f
U
272 86 m
207 86 L
207 68 L
276 68 L
262.8 82.5 L
262.0532 42.7512 248.9352 29.8063 214 27 C
216 9 L
257.3312 12.3201 278.1463 30.2972 281.5107 72.8742 C
272 86 L
f
u
482.3333 577.6636 m
452.3334 577.6636 L
452.3334 592.3303 L
446.6666 592.3303 L
446.6666 577.6636 L
408.6667 577.6636 L
408.6667 572.3302 L
446.6666 572.3302 L
446.6666 524.6636 L
446.6666 514.8901 446.6084 514.8303 431 514.8303 C
429.3333 514.8303 L
429.3333 509.4969 L
451.5534 509.4969 452.3334 510.2903 452.3334 525.3303 C
452.3334 572.3302 L
486.3334 572.3302 L
486.3334 575.4969 L
482.3333 577.6636 L
f
480.6666 478.3273 m
453.6667 478.3273 L
453.6667 492.6606 L
445.3332 492.6606 L
445.3332 478.3273 L
408.3333 478.3273 L
408.3333 470.6605 L
445.3332 470.6605 L
445.3332 425.3273 L
445.3332 416.7269 445.2701 416.6607 432.0001 416.6607 C
428.6666 416.6607 L
428.6666 408.9939 L
453.0092 408.9939 453.6667 409.6693 453.6667 426.6607 C
453.6667 470.6605 L
486.6667 470.6605 L
486.6667 474.3938 L
480.6666 478.3273 L
f
479 379 m
455 379 L
455 393 L
444 393 L
444 379 L
408 379 L
408 369 L
444 369 L
444 326 L
444 318.5726 443.9319 318.5 433 318.5 C
428 318.5 L
428 308.5 L
454.465 308.5 455 309.0574 455 328 C
455 369 L
487 369 L
487 373.3 L
479 379 L
f
477.3333 279.6636 m
456.3334 279.6636 L
456.3334 293.3303 L
442.6666 293.3303 L
442.6666 279.6636 L
407.6667 279.6636 L
407.6667 267.3302 L
442.6666 267.3302 L
442.6666 226.6636 L
442.6666 220.4094 442.5936 220.3303 434 220.3303 C
427.3333 220.3303 L
427.3333 207.9969 L
455.9209 207.9969 456.3334 208.4364 456.3334 229.3303 C
456.3334 267.3302 L
487.3334 267.3302 L
487.3334 272.1969 L
477.3333 279.6636 L
f
475.6667 180.3364 m
457.6666 180.3364 L
457.6666 193.6697 L
441.3334 193.6697 L
441.3334 180.3364 L
407.3334 180.3364 L
407.3334 165.6698 L
441.3334 165.6698 L
441.3334 127.3364 L
441.3334 122.2551 441.2554 122.1697 435 122.1697 C
426.6667 122.1697 L
426.6667 107.5031 L
457.3766 107.5031 457.6666 107.8245 457.6666 130.6697 C
457.6666 165.6698 L
487.6667 165.6698 L
487.6667 171.1031 L
475.6667 180.3364 L
f
U
474 81 m
459 81 L
459 94 L
440 94 L
440 81 L
407 81 L
407 64 L
440 64 L
440 28 L
440 24.0919 439.9171 24 436 24 C
426 24 L
426 7 L
458.8325 7 459 7.2035 459 32 C
459 64 L
488 64 L
488 70 L
474 81 L
f
u
469.2833 556.1303 m
475.7484 544.2748 482.3125 531.6219 486.6499 522.7969 C
491.6667 525.0636 L
486.1667 535.8511 479.9792 547.6532 474.1667 558.3303 C
469.2833 556.1303 L
f
468.2666 455.6605 m
474.3111 444.0536 480.6249 431.1814 484.9999 421.5938 C
492.3334 424.7272 L
487.0209 435.7397 481.0209 447.7439 475.3334 458.6606 C
468.2666 455.6605 L
f
467.25 355.2 m
472.874 343.8417 478.9375 330.75 483.35 320.4 C
493 324.4 L
487.875 335.6375 482.0625 347.8437 476.5 359 C
467.25 355.2 L
f
466.2333 254.7303 m
471.4368 243.6206 477.25 230.3094 481.6999 219.1969 C
493.6667 224.0636 L
488.7292 235.5261 483.1042 247.9344 477.6667 259.3303 C
466.2333 254.7303 L
f
465.2167 154.2697 m
469.9997 143.4086 475.5626 129.878 480.05 118.0031 C
494.3333 123.7364 L
489.5833 135.4239 484.1458 148.0343 478.8333 159.6697 C
465.2167 154.2697 L
f
U
464.2 53.8 m
468.5625 43.1875 473.875 29.4375 478.4 16.8 C
495 23.4 L
490.4375 35.3125 485.1875 48.125 480 60 C
464.2 53.8 L
f
u
423.6666 558.1636 m
418.4375 547.2365 412.3646 535.799 406.3333 525.2136 C
411.1667 522.7969 L
417.5627 534.0731 423.6514 545.6944 428.6833 556.2136 C
423.6666 558.1636 L
f
422.3332 458.3273 m
417.3124 447.1606 411.4791 435.5981 405.6666 424.9272 C
412.7334 421.5938 L
418.8948 433.0066 424.8107 444.9248 429.6667 455.7272 C
422.3332 458.3273 L
f
421 358.5 m
416.1875 347.0937 410.5937 335.4062 405 324.65 C
414.3 320.4 L
420.2268 331.9494 425.9699 344.1645 430.65 355.25 C
421 358.5 L
f
419.6666 258.6636 m
415.0625 247.0178 409.7083 235.2053 404.3333 224.3636 C
415.8667 219.1969 L
421.559 230.8829 427.1291 243.395 431.6334 254.7636 C
419.6666 258.6636 L
f
418.3334 158.8364 m
413.9375 146.951 408.8229 135.0135 403.6667 124.0864 C
417.4333 118.0031 L
422.891 129.8257 428.2883 142.6346 432.6166 154.2864 C
418.3334 158.8364 L
f
U
417 59 m
412.8125 46.875 407.9375 34.8125 403 23.8 C
419 16.8 L
424.2231 28.7593 429.4476 41.8651 433.6 53.8 C
417 59 L
f
u
182.6833 567.6636 m
163.1293 563.7414 142.4905 561.7 121.8334 561.6636 C
121.8334 588.3303 L
116.1667 588.3303 L
116.1667 534.8303 L
116.1667 516.7572 121.941 511.6636 139.3333 511.6636 C
182.5 511.6636 L
182.5 517.1637 L
139.5 517.1637 l
125.3199 517.1637 121.8334 520.6545 121.8334 534.8303 C
121.8727 556.2305 L
142.8926 556.2697 163.66 558.3539 183.6667 562.3636 C
182.6833 567.6636 L
f
182.8667 468.3273 m
163.6195 464.429 143.5237 462.4 123.6668 462.3273 C
123.6668 488.6606 L
115.3333 488.6606 L
115.3333 434.6606 L
115.3333 416.4303 121.0941 411.3272 138.6666 411.3272 C
183 411.3272 L
183 419.3274 L
139 419.3274 l
126.5277 419.3274 123.6668 422.1968 123.6668 434.6606 C
123.7453 454.461 L
144.155 454.5394 164.5499 456.6273 184.3334 460.6271 C
182.8667 468.3273 L
f
183.05 370 m
164.1098 366.1257 144.5569 364.109 125.5 364 C
125.5 389 L
114.5 389 L
114.5 334.5 L
114.5 316.1125 120.2472 311 138 311 C
183.5 311 L
183.5 321.5 L
138.5 321.5 l
127.7354 321.5 125.5 323.7482 125.5 334.5 C
125.6178 353.7007 L
145.4174 353.8184 165.4397 355.9101 185 359.9 C
183.05 370 L
f
183.2333 270.6636 m
164.6 266.8133 145.5901 264.809 127.3334 264.6636 C
127.3334 289.3303 L
113.6667 289.3303 L
113.6667 234.3303 L
113.6667 215.7856 119.4003 210.6636 137.3333 210.6636 C
184 210.6636 L
184 223.6637 L
138 223.6637 l
128.9433 223.6637 127.3334 225.2905 127.3334 234.3303 C
127.4905 251.9312 L
146.6799 252.0881 166.3295 254.1835 185.6667 258.1635 C
183.2333 270.6636 L
f
183.4167 171.3364 m
165.0902 167.51 146.6232 165.5181 129.1666 165.3364 C
129.1666 189.6697 L
112.8334 189.6697 L
112.8334 134.1697 L
112.8334 115.4679 118.5535 110.3364 136.6667 110.3364 C
184.5 110.3364 L
184.5 125.8363 L
137.5 125.8363 l
130.151 125.8363 129.1666 126.8419 129.1666 134.1697 C
129.3629 150.171 L
147.9422 150.3671 167.2193 152.4662 186.3333 156.4364 C
183.4167 171.3364 L
f
U
183.6 72 m
165.5804 68.1976 147.6564 66.2181 131 66 C
131 90 L
112 90 L
112 34 L
112 15.141 117.7066 10 136 10 C
185 10 L
185 28 L
137 28 l
131.3588 28 131 28.3843 131 34 C
131.2356 48.4015 L
149.2047 48.6368 168.1092 50.7397 187 54.7 C
183.6 72 L
f
u
93.3334 582.9136 m
93.3334 589.1267 88.2964 594.1636 82.0833 594.1636 c
75.8702 594.1636 70.8333 589.1267 70.8333 582.9136 c
70.8333 576.7005 75.8702 571.6636 82.0833 571.6636 c
88.2964 571.6636 93.3334 576.7005 93.3334 582.9136 C
89.1667 582.9136 L
89.1667 579.0016 85.9953 575.8303 82.0833 575.8303 c
78.1713 575.8303 75 579.0016 75 582.9136 c
75 586.8256 78.1713 589.9969 82.0833 589.9969 c
85.9953 589.9969 89.1667 586.8256 89.1667 582.9136 C
93.3334 582.9136 L
f
93.6667 482.3272 m
93.6667 488.9545 88.2939 494.3273 81.6666 494.3273 c
75.0393 494.3273 69.6666 488.9545 69.6666 482.3272 c
69.6666 475.6998 75.0393 470.3272 81.6666 470.3272 c
88.2939 470.3272 93.6667 475.6998 93.6667 482.3272 C
88.3333 482.3272 L
88.3333 478.6454 85.3484 475.6606 81.6666 475.6606 c
77.9848 475.6606 75 478.6454 75 482.3272 c
75 486.0091 77.9848 488.9938 81.6666 488.9938 c
85.3484 488.9938 88.3333 486.0091 88.3333 482.3272 C
93.6667 482.3272 L
f
94 382.75 m
94 389.7915 88.2915 395.5 81.25 395.5 c
74.2084 395.5 68.5 389.7915 68.5 382.75 c
68.5 375.7084 74.2084 370 81.25 370 c
88.2915 370 94 375.7084 94 382.75 C
87.5 382.75 L
87.5 379.2982 84.7017 376.5 81.25 376.5 c
77.7982 376.5 75 379.2982 75 382.75 c
75 386.2017 77.7982 389 81.25 389 c
84.7017 389 87.5 386.2017 87.5 382.75 C
94 382.75 L
f
93.3334 280.1636 m
93.3334 287.6193 87.289 293.6636 79.8333 293.6636 c
72.3775 293.6636 66.3333 287.6193 66.3333 280.1636 c
66.3333 272.7078 72.3775 266.6636 79.8333 266.6636 c
87.289 266.6636 93.3334 272.7078 93.3334 280.1636 C
85.6667 280.1636 L
85.6667 276.942 83.0549 274.3303 79.8333 274.3303 c
76.6117 274.3303 74 276.942 74 280.1636 c
74 283.3852 76.6117 285.9969 79.8333 285.9969 c
83.0549 285.9969 85.6667 283.3852 85.6667 280.1636 C
93.3334 280.1636 L
f
93.6667 179.5864 m
93.6667 187.4563 87.2865 193.8364 79.4167 193.8364 c
71.5467 193.8364 65.1667 187.4563 65.1667 179.5864 c
65.1667 171.7164 71.5467 165.3364 79.4167 165.3364 c
87.2865 165.3364 93.6667 171.7164 93.6667 179.5864 C
84.8334 179.5864 L
84.8334 176.5949 82.4081 174.1697 79.4167 174.1697 c
76.4251 174.1697 74 176.5949 74 179.5864 c
74 182.5779 76.4251 185.0031 79.4167 185.0031 c
82.4081 185.0031 84.8334 182.5779 84.8334 179.5864 C
93.6667 179.5864 L
f
U
95 80 m
95 88.2841 88.2841 95 80 95 c
71.7158 95 65 88.2841 65 80 c
65 71.7158 71.7158 65 80 65 c
88.2841 65 95 71.7158 95 80 C
85 80 L
85 77.2386 82.7613 75 80 75 c
77.2386 75 75 77.2386 75 80 c
75 82.7614 77.2386 85 80 85 c
82.7613 85 85 82.7614 85 80 C
95 80 L
f
u
193.3334 582.9136 m
193.3334 589.1267 188.2964 594.1636 182.0833 594.1636 c
175.8702 594.1636 170.8333 589.1267 170.8333 582.9136 c
170.8333 576.7005 175.8702 571.6636 182.0833 571.6636 c
188.2964 571.6636 193.3334 576.7005 193.3334 582.9136 C
189.1667 582.9136 L
189.1667 579.0016 185.9953 575.8303 182.0833 575.8303 c
178.1713 575.8303 175 579.0016 175 582.9136 c
175 586.8256 178.1713 589.9969 182.0833 589.9969 c
185.9953 589.9969 189.1667 586.8256 189.1667 582.9136 C
193.3334 582.9136 L
f
193.6667 482.3272 m
193.6667 488.9545 188.2939 494.3273 181.6666 494.3273 c
175.0393 494.3273 169.6666 488.9545 169.6666 482.3272 c
169.6666 475.6998 175.0393 470.3272 181.6666 470.3272 c
188.2939 470.3272 193.6667 475.6998 193.6667 482.3272 C
188.3333 482.3272 L
188.3333 478.6454 185.3484 475.6606 181.6666 475.6606 c
177.9848 475.6606 175 478.6454 175 482.3272 c
175 486.0091 177.9848 488.9938 181.6666 488.9938 c
185.3484 488.9938 188.3333 486.0091 188.3333 482.3272 C
193.6667 482.3272 L
f
194 381.75 m
194 388.7915 188.2915 394.5 181.25 394.5 c
174.2084 394.5 168.5 388.7915 168.5 381.75 c
168.5 374.7084 174.2084 369 181.25 369 c
188.2915 369 194 374.7084 194 381.75 C
187.5 381.75 L
187.5 378.2982 184.7017 375.5 181.25 375.5 c
177.7982 375.5 175 378.2982 175 381.75 c
175 385.2017 177.7982 388 181.25 388 c
184.7017 388 187.5 385.2017 187.5 381.75 C
194 381.75 L
f
194.3334 281.1636 m
194.3334 288.6193 188.289 294.6636 180.8333 294.6636 c
173.3775 294.6636 167.3333 288.6193 167.3333 281.1636 c
167.3333 273.7078 173.3775 267.6636 180.8333 267.6636 c
188.289 267.6636 194.3334 273.7078 194.3334 281.1636 C
186.6667 281.1636 L
186.6667 277.942 184.0549 275.3303 180.8333 275.3303 c
177.6117 275.3303 175 277.942 175 281.1636 c
175 284.3852 177.6117 286.9969 180.8333 286.9969 c
184.0549 286.9969 186.6667 284.3852 186.6667 281.1636 C
194.3334 281.1636 L
f
194.6667 180.5864 m
194.6667 188.4563 188.2865 194.8364 180.4167 194.8364 c
172.5467 194.8364 166.1667 188.4563 166.1667 180.5864 c
166.1667 172.7164 172.5467 166.3364 180.4167 166.3364 c
188.2865 166.3364 194.6667 172.7164 194.6667 180.5864 C
185.8334 180.5864 L
185.8334 177.5949 183.4081 175.1697 180.4167 175.1697 c
177.4251 175.1697 175 177.5949 175 180.5864 c
175 183.5779 177.4251 186.0031 180.4167 186.0031 c
183.4081 186.0031 185.8334 183.5779 185.8334 180.5864 C
194.6667 180.5864 L
f
U
195 80 m
195 88.2841 188.2841 95 180 95 c
171.7158 95 165 88.2841 165 80 c
165 71.7158 171.7158 65 180 65 c
188.2841 65 195 71.7158 195 80 C
185 80 L
185 77.2386 182.7613 75 180 75 c
177.2386 75 175 77.2386 175 80 c
175 82.7614 177.2386 85 180 85 c
182.7613 85 185 82.7614 185 80 C
195 80 L
f
u
295.3334 584.9136 m
295.3334 591.1267 290.2964 596.1636 284.0833 596.1636 c
277.8702 596.1636 272.8333 591.1267 272.8333 584.9136 c
272.8333 578.7005 277.8702 573.6636 284.0833 573.6636 c
290.2964 573.6636 295.3334 578.7005 295.3334 584.9136 C
291.1667 584.9136 L
291.1667 581.0016 287.9953 577.8303 284.0833 577.8303 c
280.1713 577.8303 277 581.0016 277 584.9136 c
277 588.8256 280.1713 591.9969 284.0833 591.9969 c
287.9953 591.9969 291.1667 588.8256 291.1667 584.9136 C
295.3334 584.9136 L
f
295.6667 484.3272 m
295.6667 490.9545 290.2939 496.3273 283.6666 496.3273 c
277.0393 496.3273 271.6666 490.9545 271.6666 484.3272 c
271.6666 477.6998 277.0393 472.3272 283.6666 472.3272 c
290.2939 472.3272 295.6667 477.6998 295.6667 484.3272 C
290.3333 484.3272 L
290.3333 480.6454 287.3484 477.6606 283.6666 477.6606 c
279.9848 477.6606 277 480.6454 277 484.3272 c
277 488.0091 279.9848 490.9938 283.6666 490.9938 c
287.3484 490.9938 290.3333 488.0091 290.3333 484.3272 C
295.6667 484.3272 L
f
296 383.75 m
296 390.7915 290.2915 396.5 283.25 396.5 c
276.2084 396.5 270.5 390.7915 270.5 383.75 c
270.5 376.7084 276.2084 371 283.25 371 c
290.2915 371 296 376.7084 296 383.75 C
289.5 383.75 L
289.5 380.2982 286.7017 377.5 283.25 377.5 c
279.7982 377.5 277 380.2982 277 383.75 c
277 387.2017 279.7982 390 283.25 390 c
286.7017 390 289.5 387.2017 289.5 383.75 C
296 383.75 L
f
296.3334 283.1636 m
296.3334 290.6193 290.289 296.6636 282.8333 296.6636 c
275.3775 296.6636 269.3333 290.6193 269.3333 283.1636 c
269.3333 275.7078 275.3775 269.6636 282.8333 269.6636 c
290.289 269.6636 296.3334 275.7078 296.3334 283.1636 C
288.6667 283.1636 L
288.6667 279.942 286.0549 277.3303 282.8333 277.3303 c
279.6117 277.3303 277 279.942 277 283.1636 c
277 286.3852 279.6117 288.9969 282.8333 288.9969 c
286.0549 288.9969 288.6667 286.3852 288.6667 283.1636 C
296.3334 283.1636 L
f
296.6667 182.5864 m
296.6667 190.4563 290.2865 196.8364 282.4167 196.8364 c
274.5467 196.8364 268.1667 190.4563 268.1667 182.5864 c
268.1667 174.7164 274.5467 168.3364 282.4167 168.3364 c
290.2865 168.3364 296.6667 174.7164 296.6667 182.5864 C
287.8334 182.5864 L
287.8334 179.5949 285.4081 177.1697 282.4167 177.1697 c
279.4251 177.1697 277 179.5949 277 182.5864 c
277 185.5779 279.4251 188.0031 282.4167 188.0031 c
285.4081 188.0031 287.8334 185.5779 287.8334 182.5864 C
296.6667 182.5864 L
f
U
297 82 m
297 90.2841 290.2841 97 282 97 c
273.7158 97 267 90.2841 267 82 c
267 73.7158 273.7158 67 282 67 c
290.2841 67 297 73.7158 297 82 C
287 82 L
287 79.2386 284.7613 77 282 77 c
279.2386 77 277 79.2386 277 82 c
277 84.7614 279.2386 87 282 87 c
284.7613 87 287 84.7614 287 82 C
297 82 L
f
u
387.8334 573.247 m
387.8334 579.9204 382.4234 585.3303 375.75 585.3303 c
369.0767 585.3303 363.6667 579.9204 363.6667 573.247 c
363.6667 566.5736 369.0767 561.1636 375.75 561.1636 c
382.4234 561.1636 387.8334 566.5736 387.8334 573.247 C
383.6667 573.247 L
383.6667 568.8749 380.1221 565.3303 375.75 565.3303 c
371.3779 565.3303 367.8334 568.8749 367.8334 573.247 c
367.8334 577.6191 371.3779 581.1636 375.75 581.1636 c
380.1221 581.1636 383.6667 577.6191 383.6667 573.247 C
387.8334 573.247 L
f
388.6667 473.994 m
388.6667 480.9895 382.9955 486.6607 376 486.6607 c
369.0045 486.6607 363.3333 480.9895 363.3333 473.994 c
363.3333 466.9984 369.0045 461.3273 376 461.3273 c
382.9955 461.3273 388.6667 466.9984 388.6667 473.994 C
383.3333 473.994 L
383.3333 469.944 380.05 466.6607 376 466.6607 c
371.95 466.6607 368.6667 469.944 368.6667 473.994 c
368.6667 478.0439 371.95 481.3273 376 481.3273 c
380.05 481.3273 383.3333 478.0439 383.3333 473.994 C
388.6667 473.994 L
f
389.5 374.75 m
389.5 382.0677 383.5676 388 376.25 388 c
368.9323 388 363 382.0677 363 374.75 c
363 367.4323 368.9323 361.5 376.25 361.5 c
383.5676 361.5 389.5 367.4323 389.5 374.75 C
383 374.75 L
383 371.0222 379.9778 368 376.25 368 c
372.5221 368 369.5 371.0222 369.5 374.75 c
369.5 378.4778 372.5221 381.5 376.25 381.5 c
379.9778 381.5 383 378.4778 383 374.75 C
389.5 374.75 L
f
390.3334 275.497 m
390.3334 283.1368 384.1398 289.3303 376.5 289.3303 c
368.8601 289.3303 362.6667 283.1368 362.6667 275.497 c
362.6667 267.8571 368.8601 261.6636 376.5 261.6636 c
384.1398 261.6636 390.3334 267.8571 390.3334 275.497 C
382.6667 275.497 L
382.6667 272.0913 379.9056 269.3303 376.5 269.3303 c
373.0943 269.3303 370.3334 272.0913 370.3334 275.497 c
370.3334 278.9027 373.0943 281.6636 376.5 281.6636 c
379.9056 281.6636 382.6667 278.9027 382.6667 275.497 C
390.3334 275.497 L
f
391.1667 176.253 m
391.1667 184.2149 384.7119 190.6697 376.75 190.6697 c
368.788 190.6697 362.3334 184.2149 362.3334 176.253 c
362.3334 168.291 368.788 161.8364 376.75 161.8364 c
384.7119 161.8364 391.1667 168.291 391.1667 176.253 C
382.3334 176.253 L
382.3334 173.1694 379.8335 170.6697 376.75 170.6697 c
373.6664 170.6697 371.1667 173.1694 371.1667 176.253 c
371.1667 179.3366 373.6664 181.8364 376.75 181.8364 c
379.8335 181.8364 382.3334 179.3366 382.3334 176.253 C
391.1667 176.253 L
f
U
392 77 m
392 85.2841 385.2841 92 377 92 c
368.7158 92 362 85.2841 362 77 c
362 68.7158 368.7158 62 377 62 c
385.2841 62 392 68.7158 392 77 C
382 77 L
382 74.2386 379.7613 72 377 72 c
374.2386 72 372 74.2386 372 77 c
372 79.7614 374.2386 82 377 82 c
379.7613 82 382 79.7614 382 77 C
392 77 L
f
u
496.1667 585.7469 m
496.1667 591.96 491.1298 596.9969 484.9167 596.9969 c
478.7035 596.9969 473.6666 591.96 473.6666 585.7469 c
473.6666 579.5338 478.7035 574.4969 484.9167 574.4969 c
491.1298 574.4969 496.1667 579.5338 496.1667 585.7469 C
492 585.7469 L
492 581.835 488.8286 578.6636 484.9167 578.6636 c
481.0047 578.6636 477.8333 581.835 477.8333 585.7469 c
477.8333 589.6589 481.0047 592.8302 484.9167 592.8302 c
488.8286 592.8302 492 589.6589 492 585.7469 C
496.1667 585.7469 L
f
496.3333 484.9939 m
496.3333 491.6212 490.9606 496.9939 484.3333 496.9939 c
477.7059 496.9939 472.3332 491.6212 472.3332 484.9939 c
472.3332 478.3665 477.7059 472.9938 484.3333 472.9938 c
490.9606 472.9938 496.3333 478.3665 496.3333 484.9939 C
490.9999 484.9939 L
490.9999 481.312 488.0151 478.3272 484.3333 478.3272 c
480.6514 478.3272 477.6667 481.312 477.6667 484.9939 c
477.6667 488.6757 480.6514 491.6605 484.3333 491.6605 c
488.0151 491.6605 490.9999 488.6757 490.9999 484.9939 C
496.3333 484.9939 L
f
496.5 384.25 m
496.5 391.2915 490.7915 397 483.75 397 c
476.7084 397 471 391.2915 471 384.25 c
471 377.2084 476.7084 371.5 483.75 371.5 c
490.7915 371.5 496.5 377.2084 496.5 384.25 C
490 384.25 L
490 380.7982 487.2017 378 483.75 378 c
480.2982 378 477.5 380.7982 477.5 384.25 c
477.5 387.7017 480.2982 390.5 483.75 390.5 c
487.2017 390.5 490 387.7017 490 384.25 C
496.5 384.25 L
f
496.6667 283.4969 m
496.6667 290.9526 490.6224 296.9969 483.1667 296.9969 c
475.7109 296.9969 469.6666 290.9526 469.6666 283.4969 c
469.6666 276.0411 475.7109 269.9969 483.1667 269.9969 c
490.6224 269.9969 496.6667 276.0411 496.6667 283.4969 C
489 283.4969 L
489 280.2753 486.3882 277.6636 483.1667 277.6636 c
479.945 277.6636 477.3333 280.2753 477.3333 283.4969 c
477.3333 286.7186 479.945 289.3302 483.1667 289.3302 c
486.3882 289.3302 489 286.7186 489 283.4969 C
496.6667 283.4969 L
f
496.8333 182.7531 m
496.8333 190.623 490.4532 197.003 482.5834 197.003 c
474.7134 197.003 468.3334 190.623 468.3334 182.7531 c
468.3334 174.8831 474.7134 168.5031 482.5834 168.5031 c
490.4532 168.5031 496.8333 174.8831 496.8333 182.7531 C
488 182.7531 L
488 179.7615 485.5748 177.3364 482.5834 177.3364 c
479.5918 177.3364 477.1667 179.7615 477.1667 182.7531 c
477.1667 185.7446 479.5918 188.1697 482.5834 188.1697 c
485.5748 188.1697 488 185.7446 488 182.7531 C
496.8333 182.7531 L
f
U
497 82 m
497 90.2841 490.2841 97 482 97 c
473.7158 97 467 90.2841 467 82 c
467 73.7158 473.7158 67 482 67 c
490.2841 67 497 73.7158 497 82 C
487 82 L
487 79.2386 484.7613 77 482 77 c
479.2386 77 477 79.2386 477 82 c
477 84.7614 479.2386 87 482 87 c
484.7613 87 487 84.7614 487 82 C
497 82 L
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
