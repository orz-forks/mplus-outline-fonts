%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (2551.eps)
%%CreationDate: (5/25/04) (8:42 PM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
1 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
500 600 m
500 700 L
400 700 L
400 600 L
500 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
400 600 m
400 700 L
300 700 L
300 600 L
400 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
500 500 m
500 600 L
400 600 L
400 500 L
500 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
400 500 m
400 600 L
300 600 L
300 500 L
400 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
0 Ap
0 O
0 g
1 D
69.5 666.8 m
77.0312 649.6431 82.0948 633.3393 86 614 C
89 614.6 L
84.9858 634.4794 79.7148 651.0951 72.3 668 C
69.5 666.8 L
f
392.9 621.8 m
395 624 L
344.8963 669.7774 345.5625 670 340 670 c
334.5913 670 335.3689 669.8352 305 633 C
307.4 631.1 L
336.7624 666.896 336.25 667 340 667 c
343.9375 667 343.656 666.9257 392.9 621.8 C
f
275.991 680.9365 m
275.505 636.162 258.7847 618.2201 218.7 615 C
219 612 L
259.3798 615.2437 277.6119 632.955 278.9444 677.5606 C
275 683 L
210 683 L
210 680 L
276.8125 680 L
275.991 680.9365 L
f
120 657 m
141.6301 657 162.7702 659.0805 183 663.1 C
182.5 666 L
162.6391 662.0538 141.4573 660 120 660 C
120 688 L
117 688 L
117 635 L
117 617.0841 122.7879 612 140 612 C
182 612 L
182 615 L
140 615 l
124.1121 615 120 619.1121 120 635 c
120 657 L
f
474 676 m
471 676 L
451 676 L
451 692 L
448 692 L
448 676 L
409 676 L
409 673 L
448 673 L
448 624 L
448 613.0534 447.9467 613 430 613 C
430 613 L
430 610 L
450.0975 610 451 610.9114 451 624 C
451 673 L
474 673 L
474 676 L
f
470.3 656.6 m
477.1856 644.4959 484 632.0625 488.3 624 C
491 625.4 L
485.3125 635.9625 478.9375 647.5625 473 658 C
470.3 656.6 L
f
425 658 m
419.5625 647.3125 413.25 636 407 625.5 C
409.6 624 L
416.2306 635.1395 422.4922 646.4639 427.7 656.7 C
425 658 L
f
28 684 m
25.8035 658.8945 18.6963 636.8982 6 615.4 C
8.6 614 L
21.6072 636.0586 28.875 658.5625 31 684 C
28 684 L
f
88 682 m
88 677.3057 84.1943 673.5 79.5 673.5 c
74.8056 673.5 71 677.3057 71 682 c
71 686.6944 74.8056 690.5 79.5 690.5 c
84.1943 690.5 88 686.6944 88 682 C
91 682 L
91 688.3512 85.8512 693.5 79.5 693.5 c
73.1488 693.5 68 688.3512 68 682 c
68 675.6488 73.1488 670.5 79.5 670.5 c
85.8512 670.5 91 675.6488 91 682 C
88 682 L
f
188 682 m
188 677.3057 184.1943 673.5 179.5 673.5 c
174.8056 673.5 171 677.3057 171 682 c
171 686.6944 174.8056 690.5 179.5 690.5 c
184.1943 690.5 188 686.6944 188 682 C
191 682 L
191 688.3512 185.8512 693.5 179.5 693.5 c
173.1488 693.5 168 688.3512 168 682 c
168 675.6488 173.1488 670.5 179.5 670.5 c
185.8512 670.5 191 675.6488 191 682 C
188 682 L
f
293 685 m
293 680.3057 289.1943 676.5 284.5 676.5 c
279.8056 676.5 276 680.3057 276 685 c
276 689.6944 279.8056 693.5 284.5 693.5 c
289.1943 693.5 293 689.6944 293 685 C
296 685 L
296 691.3512 290.8512 696.5 284.5 696.5 c
278.1488 696.5 273 691.3512 273 685 c
273 678.6488 278.1488 673.5 284.5 673.5 c
290.8512 673.5 296 678.6488 296 685 C
293 685 L
f
385 673 m
385 668.3057 381.1943 664.5 376.5 664.5 c
371.8056 664.5 368 668.3057 368 673 c
368 677.6944 371.8056 681.5 376.5 681.5 c
381.1943 681.5 385 677.6944 385 673 C
388 673 L
388 679.3512 382.8512 684.5 376.5 684.5 c
370.1488 684.5 365 679.3512 365 673 c
365 666.6488 370.1488 661.5 376.5 661.5 c
382.8512 661.5 388 666.6488 388 673 C
385 673 L
f
490 681 m
490 676.3057 486.1943 672.5 481.5 672.5 c
476.8056 672.5 473 676.3057 473 681 c
473 685.6944 476.8056 689.5 481.5 689.5 c
486.1943 689.5 490 685.6944 490 681 C
493 681 L
493 687.3512 487.8512 692.5 481.5 692.5 c
475.1488 692.5 470 687.3512 470 681 c
470 674.6488 475.1488 669.5 481.5 669.5 c
487.8512 669.5 493 674.6488 493 681 C
490 681 L
f
u
391.4166 519.6636 m
395.6667 523.4969 L
345.764 570.2849 347.0243 570.497 340.1667 570.497 c
333.6385 570.497 334.5852 570.3041 304.3333 532.1636 C
309 528.9136 L
337.1041 564.5352 336.6042 564.6635 340.1667 564.6635 c
344.0417 564.6635 343.6022 564.56 391.4166 519.6636 C
f
389.9332 417.5271 m
396.3334 422.9939 L
346.6318 470.7923 348.4862 470.9939 340.3333 470.9939 c
332.6858 470.9939 333.8014 470.773 303.6666 431.3272 C
310.6001 426.7271 L
337.4458 462.1744 336.9584 462.3271 340.3333 462.3271 c
344.1458 462.3271 343.5484 462.1942 389.9332 417.5271 C
f
388.45 315.4 m
397 322.5 L
347.4996 371.3088 349.9479 371.5 340.5 371.5 c
331.7332 371.5 333.0178 371.2509 303 330.5 C
312.2 324.55 L
337.7874 359.823 337.3125 360 340.5 360 c
344.25 360 343.4947 359.8378 388.45 315.4 C
f
386.9666 213.2635 m
397.6667 221.9969 L
348.3673 271.8163 351.4097 271.997 340.6667 271.997 c
330.7804 271.997 332.2341 271.7198 302.3333 229.6636 C
313.8 222.3635 L
338.1291 257.4622 337.6667 257.6635 340.6667 257.6635 c
344.3542 257.6635 343.4409 257.4721 386.9666 213.2635 C
f
385.4834 111.1364 m
398.3333 121.5031 L
349.235 172.3328 352.8715 172.503 340.8333 172.503 c
329.8277 172.503 331.4504 172.1978 301.6667 128.8364 C
315.4 120.1864 L
338.4708 155.1108 338.0208 155.3365 340.8333 155.3365 c
344.4583 155.3365 343.3871 155.1157 385.4834 111.1364 C
f
U
317 18 m
338.8125 52.75 338.375 53 341 53 c
344.5625 53 343.3333 52.75 384 9 C
399 21 L
350.1028 72.8403 354.3333 73 341 73 c
328.875 73 330.6667 72.6667 301 28 C
317 18 L
f
u
26.6666 584.3303 m
24.8362 559.2056 17.7834 536.8116 5.3333 515.7303 C
10.4501 513.1636 L
23.3285 535.1089 30.5626 558.4245 32.3334 584.3303 C
26.6666 584.3303 L
f
25.3332 484.6606 m
23.8689 459.5166 16.8705 436.7251 4.6666 416.0606 C
12.3001 412.3272 L
25.0497 434.1592 32.2501 458.2864 33.6667 484.6606 C
25.3332 484.6606 L
f
24 385 m
22.9017 359.8368 15.9577 336.6477 4 316.4 C
14.15 311.5 L
26.7709 333.2187 33.9375 358.1576 35 385 C
24 385 L
f
22.6666 285.3303 m
21.9345 260.1479 15.0449 236.5611 3.3333 216.7303 C
16 210.6636 L
28.4921 232.2691 35.6251 258.0196 36.3334 285.3303 C
22.6666 285.3303 L
f
21.3334 185.6697 m
20.9673 160.468 14.1321 136.4837 2.6667 117.0697 C
17.8499 109.8364 L
30.2132 131.3286 37.3125 157.8907 37.6666 185.6697 C
21.3334 185.6697 L
f
U
u
273.3333 583.497 m
209.5 583.497 L
209.5 577.9969 L
276.6771 577.9969 L
273.7924 581.1941 L
273.263 537.2572 257.1431 520.1482 217.9166 516.997 C
218.5 511.4969 L
258.6692 514.7237 277.3194 532.1949 279.2568 575.6709 C
273.3333 583.497 L
f
271.6666 483.9939 m
209 483.9939 L
209 475.9938 L
276.5417 475.9938 L
271.5939 481.4516 L
271.0209 438.3524 255.5014 422.0762 217.1333 418.994 C
218 410.9939 L
257.9587 414.2037 277.0269 431.4349 279.5693 473.7811 C
271.6666 483.9939 L
f
270 384.5 m
208.5 384.5 L
208.5 374 L
276.4062 374 L
269.3955 381.7182 L
268.7791 339.4566 253.86 324.0132 216.35 321 C
217.5 310.5 L
257.2482 313.6929 276.7344 330.684 279.8817 371.9007 C
270 384.5 L
f
268.3333 284.997 m
208 284.997 L
208 271.9969 L
276.2708 271.9969 L
267.1969 281.9758 L
266.5371 240.5518 252.2183 225.9412 215.5666 222.997 C
217 209.9969 L
256.5377 213.173 276.4419 229.9239 280.1942 270.011 C
268.3333 284.997 L
f
266.6667 185.503 m
207.5 185.503 L
207.5 170.0031 L
276.1354 170.0031 L
264.9985 182.2424 L
264.2952 141.656 250.5768 127.8782 214.7834 125.003 C
216.5 109.5031 L
255.8272 112.6622 276.1494 129.1731 280.5066 168.1305 C
266.6667 185.503 L
f
U
265 86 m
207 86 L
207 68 L
276 68 L
262.8 82.5 L
262.0532 42.7512 248.9352 29.8063 214 27 C
216 9 L
255.1167 12.1422 275.8569 28.413 280.8191 66.2408 C
265 86 L
f
u
470.3333 576.8303 m
452.3334 576.8303 L
452.3334 592.3303 L
446.6666 592.3303 L
446.6666 576.8303 L
408.6667 576.8303 L
408.6667 571.4969 L
446.6666 571.4969 L
446.6666 524.6636 L
446.6666 514.8902 446.6084 514.8303 431 514.8303 C
429.3333 514.8303 L
429.3333 509.4969 L
451.5534 509.4969 452.3334 510.2904 452.3334 525.3303 C
452.3334 571.4969 L
474.8334 571.4969 L
474.8334 574.9969 L
470.3333 576.8303 L
f
469.6666 477.6606 m
453.6667 477.6606 L
453.6667 492.6606 L
445.3332 492.6606 L
445.3332 477.6606 L
408.3333 477.6606 L
408.3333 469.9938 L
445.3332 469.9938 L
445.3332 425.3273 L
445.3332 416.7269 445.2701 416.6607 432.0001 416.6607 C
428.6666 416.6607 L
428.6666 408.9939 L
453.0092 408.9939 453.6667 409.6693 453.6667 426.6607 C
453.6667 469.9938 L
475.6667 469.9938 L
475.6667 473.9938 L
469.6666 477.6606 L
f
469 378.5 m
455 378.5 L
455 393 L
444 393 L
444 378.5 L
408 378.5 L
408 368.5 L
444 368.5 L
444 326 L
444 318.5726 443.9319 318.5 433 318.5 C
428 318.5 L
428 308.5 L
454.465 308.5 455 309.0574 455 328 C
455 368.5 L
476.5 368.5 L
476.5 373 L
469 378.5 L
f
468.3333 279.3303 m
456.3334 279.3303 L
456.3334 293.3303 L
442.6666 293.3303 L
442.6666 279.3303 L
407.6667 279.3303 L
407.6667 266.9969 L
442.6666 266.9969 L
442.6666 226.6636 L
442.6666 220.4094 442.5936 220.3303 434 220.3303 C
427.3333 220.3303 L
427.3333 207.9969 L
455.9209 207.9969 456.3334 208.4364 456.3334 229.3303 C
456.3334 266.9969 L
477.3334 266.9969 L
477.3334 271.9969 L
468.3333 279.3303 L
f
467.6667 180.1697 m
457.6666 180.1697 L
457.6666 193.6697 L
441.3334 193.6697 L
441.3334 180.1697 L
407.3334 180.1697 L
407.3334 165.5031 L
441.3334 165.5031 L
441.3334 127.3364 L
441.3334 122.2551 441.2554 122.1697 435 122.1697 C
426.6667 122.1697 L
426.6667 107.5031 L
457.3766 107.5031 457.6666 107.8246 457.6666 130.6697 C
457.6666 165.5031 L
478.1667 165.5031 L
478.1667 171.0031 L
467.6667 180.1697 L
f
U
467 81 m
459 81 L
459 94 L
440 94 L
440 81 L
407 81 L
407 64 L
440 64 L
440 28 L
440 24.0919 439.9171 24 436 24 C
426 24 L
426 7 L
458.8325 7 459 7.2035 459 32 C
459 64 L
479 64 L
479 70 L
467 81 L
f
u
469.2833 555.9636 m
475.7484 544.1081 482.3125 531.4553 486.6499 522.6302 C
491.6667 524.897 L
486.1667 535.6845 479.9792 547.4865 474.1667 558.1636 C
469.2833 555.9636 L
f
468.2666 455.3272 m
474.3111 443.7203 480.6249 430.848 484.9999 421.2605 C
492.3334 424.3939 L
487.0209 435.4064 481.0209 447.4105 475.3334 458.3273 C
468.2666 455.3272 L
f
467.25 354.7 m
472.874 343.3417 478.9375 330.25 483.35 319.9 C
493 323.9 L
487.875 335.1375 482.0625 347.3437 476.5 358.5 C
467.25 354.7 L
f
466.2333 254.0636 m
471.4368 242.9539 477.25 229.6428 481.6999 218.5302 C
493.6667 223.3969 L
488.7292 234.8594 483.1042 247.2678 477.6667 258.6636 C
466.2333 254.0636 L
f
465.2167 153.4364 m
469.9997 142.5753 475.5626 129.0447 480.05 117.1697 C
494.3333 122.9031 L
489.5833 134.5905 484.1458 147.201 478.8333 158.8364 C
465.2167 153.4364 L
f
U
464.2 52.8 m
468.5625 42.1875 473.875 28.4375 478.4 15.8 C
495 22.4 L
490.4375 34.3125 485.1875 47.125 480 59 C
464.2 52.8 L
f
u
423.6666 557.9969 m
418.4375 547.0699 412.3646 535.6324 406.3333 525.0469 C
411.1667 522.6302 L
417.5627 533.9064 423.6514 545.5277 428.6833 556.0469 C
423.6666 557.9969 L
f
422.3332 457.9939 m
417.3124 446.8272 411.4791 435.2647 405.6666 424.5939 C
412.7334 421.2605 L
418.8948 432.6733 424.8107 444.5915 429.6667 455.3939 C
422.3332 457.9939 L
f
421 358 m
416.1875 346.5937 410.5937 334.9062 405 324.15 C
414.3 319.9 L
420.2268 331.4494 425.9699 343.6645 430.65 354.75 C
421 358 L
f
419.6666 257.9969 m
415.0625 246.3511 409.7083 234.5386 404.3333 223.6969 C
415.8667 218.5302 L
421.559 230.2163 427.1291 242.7283 431.6334 254.0969 C
419.6666 257.9969 L
f
418.3334 158.003 m
413.9375 146.1176 408.8229 134.1801 403.6667 123.253 C
417.4333 117.1697 L
422.891 128.9924 428.2883 141.8013 432.6166 153.4531 C
418.3334 158.003 L
f
U
417 58 m
412.8125 45.875 407.9375 33.8125 403 22.8 C
419 15.8 L
424.2231 27.7593 429.4476 40.8651 433.6 52.8 C
417 58 L
f
u
182.6833 566.997 m
163.1293 563.0748 142.4905 561.0333 121.8334 560.997 C
121.8334 588.3303 L
116.1667 588.3303 L
116.1667 534.8303 L
116.1667 516.7572 121.941 511.6636 139.3333 511.6636 C
182.5 511.6636 L
182.5 517.1637 L
139.5 517.1637 l
125.3199 517.1637 121.8334 520.6545 121.8334 534.8303 C
121.8334 555.5636 L
142.8533 555.6028 163.66 557.6873 183.6667 561.6969 C
182.6833 566.997 L
f
182.8667 468.994 m
163.6195 465.0957 143.5237 463.0667 123.6668 462.994 C
123.6668 488.6606 L
115.3333 488.6606 L
115.3333 434.6606 L
115.3333 416.4303 121.0941 411.3272 138.6666 411.3272 C
183 411.3272 L
183 419.3274 L
139 419.3274 l
126.5277 419.3274 123.6668 422.1968 123.6668 434.6606 C
123.6668 455.1271 L
144.0765 455.2056 164.5499 457.294 184.3334 461.2938 C
182.8667 468.994 L
f
183.05 369 m
164.1098 365.1257 144.5569 363.109 125.5 363 C
125.5 389 L
114.5 389 L
114.5 334.5 L
114.5 316.1125 120.2472 311 138 311 C
183.5 311 L
183.5 321.5 L
138.5 321.5 l
127.7354 321.5 125.5 323.7482 125.5 334.5 C
125.5 352.7 L
145.2996 352.8176 165.4397 354.9101 185 358.9 C
183.05 369 L
f
183.2333 269.997 m
164.6 266.1466 145.5901 264.1424 127.3334 263.997 C
127.3334 289.3303 L
113.6667 289.3303 L
113.6667 234.3303 L
113.6667 215.7856 119.4003 210.6636 137.3333 210.6636 C
184 210.6636 L
184 223.6637 L
138 223.6637 l
128.9433 223.6637 127.3334 225.2906 127.3334 234.3303 C
127.3334 251.2636 L
146.5228 251.4204 166.3295 253.5169 185.6667 257.4969 C
183.2333 269.997 L
f
183.4167 171.003 m
165.0902 167.1766 146.6232 165.1848 129.1666 165.003 C
129.1666 189.6697 L
112.8334 189.6697 L
112.8334 134.1697 L
112.8334 115.4679 118.5535 110.3364 136.6667 110.3364 C
184.5 110.3364 L
184.5 125.8363 L
137.5 125.8363 l
130.151 125.8363 129.1666 126.8419 129.1666 134.1697 C
129.1666 149.8364 L
147.7459 150.0325 167.2193 152.1329 186.3333 156.1031 C
183.4167 171.003 L
f
U
183.6 72 m
165.5804 68.1976 147.6564 66.2181 131 66 C
131 90 L
112 90 L
112 34 L
112 15.141 117.7066 10 136 10 C
185 10 L
185 28 L
137 28 l
131.3588 28 131 28.3843 131 34 C
131 48.4 L
148.9691 48.6353 168.1092 50.7397 187 54.7 C
183.6 72 L
f
u
187 582.4969 m
187 578.0328 183.3808 574.4136 178.9167 574.4136 c
174.4524 574.4136 170.8333 578.0328 170.8333 582.4969 c
170.8333 586.9612 174.4524 590.5803 178.9167 590.5803 c
183.3808 590.5803 187 586.9612 187 582.4969 C
191.3334 582.4969 L
191.3334 589.3544 185.7741 594.9136 178.9167 594.9136 c
172.0592 594.9136 166.5 589.3544 166.5 582.4969 c
166.5 575.6395 172.0592 570.0802 178.9167 570.0802 c
185.7741 570.0802 191.3334 575.6395 191.3334 582.4969 C
187 582.4969 L
f
185.9999 479.9939 m
185.9999 475.7598 182.5674 472.3272 178.3333 472.3272 c
174.0992 472.3272 170.6667 475.7598 170.6667 479.9939 c
170.6667 484.228 174.0992 487.6605 178.3333 487.6605 c
182.5674 487.6605 185.9999 484.228 185.9999 479.9939 C
191.6667 479.9939 L
191.6667 487.3576 185.697 493.3273 178.3333 493.3273 c
170.9696 493.3273 164.9999 487.3576 164.9999 479.9939 c
164.9999 472.6301 170.9696 466.6605 178.3333 466.6605 c
185.697 466.6605 191.6667 472.6301 191.6667 479.9939 C
185.9999 479.9939 L
f
185 380.5 m
185 376.496 181.754 373.25 177.75 373.25 c
173.746 373.25 170.5 376.496 170.5 380.5 c
170.5 384.5041 173.746 387.75 177.75 387.75 c
181.754 387.75 185 384.5041 185 380.5 C
192 380.5 L
192 388.3699 185.6199 394.75 177.75 394.75 c
169.88 394.75 163.5 388.3699 163.5 380.5 c
163.5 372.63 169.88 366.25 177.75 366.25 c
185.6199 366.25 192 372.63 192 380.5 C
185 380.5 L
f
184 280.9969 m
184 277.223 180.9405 274.1636 177.1667 274.1636 c
173.3928 274.1636 170.3333 277.223 170.3333 280.9969 c
170.3333 284.7709 173.3928 287.8302 177.1667 287.8302 c
180.9405 287.8302 184 284.7709 184 280.9969 C
192.3334 280.9969 L
192.3334 289.3731 185.5429 296.1636 177.1667 296.1636 c
168.7904 296.1636 162 289.3731 162 280.9969 c
162 272.6207 168.7904 265.8302 177.1667 265.8302 c
185.5429 265.8302 192.3334 272.6207 192.3334 280.9969 C
184 280.9969 L
f
183 179.5031 m
183 175.9593 180.1271 173.0864 176.5834 173.0864 c
173.0396 173.0864 170.1667 175.9593 170.1667 179.5031 c
170.1667 183.0469 173.0396 185.9197 176.5834 185.9197 c
180.1271 185.9197 183 183.0469 183 179.5031 C
192.6667 179.5031 L
192.6667 188.3855 185.4658 195.5864 176.5834 195.5864 c
167.7009 195.5864 160.5001 188.3855 160.5001 179.5031 c
160.5001 170.6206 167.7009 163.4197 176.5834 163.4197 c
185.4658 163.4197 192.6667 170.6206 192.6667 179.5031 C
183 179.5031 L
f
U
182 79 m
182 75.6863 179.3137 73 176 73 c
172.6864 73 170 75.6863 170 79 c
170 82.3137 172.6864 85 176 85 c
179.3137 85 182 82.3137 182 79 C
193 79 L
193 88.3887 185.3887 96 176 96 c
166.6113 96 159 88.3887 159 79 c
159 69.6113 166.6113 62 176 62 c
185.3887 62 193 69.6113 193 79 C
182 79 L
f
u
291.6666 583.9969 m
291.6666 579.5327 288.0475 575.9136 283.5833 575.9136 c
279.119 575.9136 275.5 579.5327 275.5 583.9969 c
275.5 588.4612 279.119 592.0802 283.5833 592.0802 c
288.0475 592.0802 291.6666 588.4612 291.6666 583.9969 C
296 583.9969 L
296 590.8544 290.4408 596.4136 283.5833 596.4136 c
276.7258 596.4136 271.1666 590.8544 271.1666 583.9969 c
271.1666 577.1395 276.7258 571.5802 283.5833 571.5802 c
290.4408 571.5802 296 577.1395 296 583.9969 C
291.6666 583.9969 L
f
290.3332 482.9938 m
290.3332 478.7598 286.9007 475.3272 282.6666 475.3272 c
278.4325 475.3272 275 478.7598 275 482.9938 c
275 487.228 278.4325 490.6605 282.6666 490.6605 c
286.9007 490.6605 290.3332 487.228 290.3332 482.9938 C
296 482.9938 L
296 490.3576 290.0303 496.3272 282.6666 496.3272 c
275.3029 496.3272 269.3332 490.3576 269.3332 482.9938 c
269.3332 475.6301 275.3029 469.6605 282.6666 469.6605 c
290.0303 469.6605 296 475.6301 296 482.9938 C
290.3332 482.9938 L
f
289 382 m
289 377.996 285.754 374.75 281.75 374.75 c
277.746 374.75 274.5 377.996 274.5 382 c
274.5 386.0041 277.746 389.25 281.75 389.25 c
285.754 389.25 289 386.0041 289 382 C
296 382 L
296 389.8699 289.6199 396.25 281.75 396.25 c
273.88 396.25 267.5 389.8699 267.5 382 c
267.5 374.13 273.88 367.75 281.75 367.75 c
289.6199 367.75 296 374.13 296 382 C
289 382 L
f
287.6666 280.9969 m
287.6666 277.223 284.6072 274.1636 280.8333 274.1636 c
277.0594 274.1636 274 277.223 274 280.9969 c
274 284.7708 277.0594 287.8302 280.8333 287.8302 c
284.6072 287.8302 287.6666 284.7708 287.6666 280.9969 C
296 280.9969 L
296 289.3731 289.2095 296.1636 280.8333 296.1636 c
272.4571 296.1636 265.6666 289.3731 265.6666 280.9969 c
265.6666 272.6207 272.4571 265.8302 280.8333 265.8302 c
289.2095 265.8302 296 272.6207 296 280.9969 C
287.6666 280.9969 L
f
286.3334 180.0031 m
286.3334 176.4593 283.4605 173.5864 279.9167 173.5864 c
276.3729 173.5864 273.5 176.4593 273.5 180.0031 c
273.5 183.5469 276.3729 186.4197 279.9167 186.4197 c
283.4605 186.4197 286.3334 183.5469 286.3334 180.0031 C
296 180.0031 L
296 188.8855 288.7991 196.0864 279.9167 196.0864 c
271.0343 196.0864 263.8334 188.8855 263.8334 180.0031 c
263.8334 171.1206 271.0343 163.9198 279.9167 163.9198 c
288.7991 163.9198 296 171.1206 296 180.0031 C
286.3334 180.0031 L
f
U
285 79 m
285 75.6863 282.3137 73 279 73 c
275.6864 73 273 75.6863 273 79 c
273 82.3137 275.6864 85 279 85 c
282.3137 85 285 82.3137 285 79 C
296 79 L
296 88.3887 288.3887 96 279 96 c
269.6113 96 262 88.3887 262 79 c
262 69.6113 269.6113 62 279 62 c
288.3887 62 296 69.6113 296 79 C
285 79 L
f
u
384.3333 573.6636 m
384.3333 569.1995 380.7142 565.5803 376.25 565.5803 c
371.7857 565.5803 368.1667 569.1995 368.1667 573.6636 c
368.1667 578.1279 371.7857 581.747 376.25 581.747 c
380.7142 581.747 384.3333 578.1279 384.3333 573.6636 C
388.6667 573.6636 L
388.6667 580.5211 383.1074 586.0803 376.25 586.0803 c
369.3925 586.0803 363.8333 580.5211 363.8333 573.6636 c
363.8333 566.8062 369.3925 561.2469 376.25 561.2469 c
383.1074 561.2469 388.6667 566.8062 388.6667 573.6636 C
384.3333 573.6636 L
f
383.6666 474.3273 m
383.6666 470.0932 380.2341 466.6606 376 466.6606 c
371.7658 466.6606 368.3333 470.0932 368.3333 474.3273 c
368.3333 478.5614 371.7658 481.9939 376 481.9939 c
380.2341 481.9939 383.6666 478.5614 383.6666 474.3273 C
389.3334 474.3273 L
389.3334 481.691 383.3637 487.6607 376 487.6607 c
368.6362 487.6607 362.6666 481.691 362.6666 474.3273 c
362.6666 466.9635 368.6362 460.9939 376 460.9939 c
383.3637 460.9939 389.3334 466.9635 389.3334 474.3273 C
383.6666 474.3273 L
f
383 375 m
383 370.996 379.754 367.75 375.75 367.75 c
371.746 367.75 368.5 370.996 368.5 375 c
368.5 379.0041 371.746 382.25 375.75 382.25 c
379.754 382.25 383 379.0041 383 375 C
390 375 L
390 382.8699 383.6199 389.25 375.75 389.25 c
367.88 389.25 361.5 382.8699 361.5 375 c
361.5 367.13 367.88 360.75 375.75 360.75 c
383.6199 360.75 390 367.13 390 375 C
383 375 L
f
382.3333 275.6636 m
382.3333 271.8897 379.2739 268.8303 375.5 268.8303 c
371.7261 268.8303 368.6667 271.8897 368.6667 275.6636 c
368.6667 279.4376 371.7261 282.4969 375.5 282.4969 c
379.2739 282.4969 382.3333 279.4376 382.3333 275.6636 C
390.6667 275.6636 L
390.6667 284.0399 383.8762 290.8303 375.5 290.8303 c
367.1238 290.8303 360.3333 284.0399 360.3333 275.6636 c
360.3333 267.2874 367.1238 260.4969 375.5 260.4969 c
383.8762 260.4969 390.6667 267.2874 390.6667 275.6636 C
382.3333 275.6636 L
f
381.6667 176.3364 m
381.6667 172.7926 378.7938 169.9197 375.25 169.9197 c
371.7062 169.9197 368.8333 172.7926 368.8333 176.3364 c
368.8333 179.8802 371.7062 182.753 375.25 182.753 c
378.7938 182.753 381.6667 179.8802 381.6667 176.3364 C
391.3333 176.3364 L
391.3333 185.2188 384.1324 192.4197 375.25 192.4197 c
366.3676 192.4197 359.1667 185.2188 359.1667 176.3364 c
359.1667 167.4539 366.3676 160.253 375.25 160.253 c
384.1324 160.253 391.3333 167.4539 391.3333 176.3364 C
381.6667 176.3364 L
f
U
381 77 m
381 73.6863 378.3137 71 375 71 c
371.6864 71 369 73.6863 369 77 c
369 80.3137 371.6864 83 375 83 c
378.3137 83 381 80.3137 381 77 C
392 77 L
392 86.3887 384.3887 94 375 94 c
365.6113 94 358 86.3887 358 77 c
358 67.6113 365.6113 60 375 60 c
384.3887 60 392 67.6113 392 77 C
381 77 L
f
u
489.3333 580.6636 m
489.3333 576.1994 485.7142 572.5803 481.25 572.5803 c
476.7857 572.5803 473.1667 576.1994 473.1667 580.6636 c
473.1667 585.1279 476.7857 588.7469 481.25 588.7469 c
485.7142 588.7469 489.3333 585.1279 489.3333 580.6636 C
493.6667 580.6636 L
493.6667 587.5211 488.1074 593.0803 481.25 593.0803 c
474.3925 593.0803 468.8333 587.5211 468.8333 580.6636 c
468.8333 573.8061 474.3925 568.2469 481.25 568.2469 c
488.1074 568.2469 493.6667 573.8061 493.6667 580.6636 C
489.3333 580.6636 L
f
488.6666 480.3272 m
488.6666 476.0931 485.2341 472.6606 481 472.6606 c
476.7658 472.6606 473.3333 476.0931 473.3333 480.3272 c
473.3333 484.5614 476.7658 487.9939 481 487.9939 c
485.2341 487.9939 488.6666 484.5614 488.6666 480.3272 C
494.3334 480.3272 L
494.3334 487.6909 488.3637 493.6606 481 493.6606 c
473.6362 493.6606 467.6666 487.6909 467.6666 480.3272 c
467.6666 472.9635 473.6362 466.9938 481 466.9938 c
488.3637 466.9938 494.3334 472.9635 494.3334 480.3272 C
488.6666 480.3272 L
f
488 380 m
488 375.996 484.754 372.75 480.75 372.75 c
476.746 372.75 473.5 375.996 473.5 380 c
473.5 384.0041 476.746 387.25 480.75 387.25 c
484.754 387.25 488 384.0041 488 380 C
495 380 L
495 387.8699 488.6199 394.25 480.75 394.25 c
472.88 394.25 466.5 387.8699 466.5 380 c
466.5 372.13 472.88 365.75 480.75 365.75 c
488.6199 365.75 495 372.13 495 380 C
488 380 L
f
487.3333 279.6636 m
487.3333 275.8897 484.2739 272.8303 480.5 272.8303 c
476.7261 272.8303 473.6667 275.8897 473.6667 279.6636 c
473.6667 283.4375 476.7261 286.4969 480.5 286.4969 c
484.2739 286.4969 487.3333 283.4375 487.3333 279.6636 C
495.6667 279.6636 L
495.6667 288.0398 488.8762 294.8303 480.5 294.8303 c
472.1238 294.8303 465.3333 288.0398 465.3333 279.6636 c
465.3333 271.2874 472.1238 264.4969 480.5 264.4969 c
488.8762 264.4969 495.6667 271.2874 495.6667 279.6636 C
487.3333 279.6636 L
f
486.6667 179.3364 m
486.6667 175.7926 483.7938 172.9197 480.25 172.9197 c
476.7062 172.9197 473.8333 175.7926 473.8333 179.3364 c
473.8333 182.8802 476.7062 185.7531 480.25 185.7531 c
483.7938 185.7531 486.6667 182.8802 486.6667 179.3364 C
496.3333 179.3364 L
496.3333 188.2188 489.1324 195.4197 480.25 195.4197 c
471.3676 195.4197 464.1667 188.2188 464.1667 179.3364 c
464.1667 170.454 471.3676 163.2531 480.25 163.2531 c
489.1324 163.2531 496.3333 170.454 496.3333 179.3364 C
486.6667 179.3364 L
f
U
486 79 m
486 75.6863 483.3137 73 480 73 c
476.6864 73 474 75.6863 474 79 c
474 82.3137 476.6864 85 480 85 c
483.3137 85 486 82.3137 486 79 C
497 79 L
497 88.3887 489.3887 96 480 96 c
470.6113 96 463 88.3887 463 79 c
463 69.6113 470.6113 62 480 62 c
489.3887 62 497 69.6113 497 79 C
486 79 L
f
19.7 9 m
31.9345 30.3789 39 57.7527 39 86 C
20 86 L
20 60.7791 13.2192 36.3971 2 17.4 C
19.7 9 L
f
u
68.4166 564.7136 m
75.3159 548.1847 80.1363 532.116 83.9666 513.1636 C
89.6667 514.3303 L
85.8004 533.4772 80.7929 549.7939 73.85 566.4636 C
68.4166 564.7136 L
f
67.3333 462.6271 m
73.6006 446.7264 78.1778 430.8927 81.9332 412.3272 C
90.3334 414.0606 L
86.615 432.4751 81.871 448.4927 75.4001 464.9272 C
67.3333 462.6271 L
f
66.25 360.55 m
71.8855 345.2773 76.2194 329.6787 79.9 311.5 C
91 313.8 L
87.4295 331.4821 82.949 347.2008 76.95 363.4 C
66.25 360.55 L
f
65.1666 258.4635 m
70.1702 243.8189 74.2609 228.4554 77.8666 210.6636 C
91.6667 213.5303 L
88.244 230.48 84.0272 245.8996 78.5001 261.8636 C
65.1666 258.4635 L
f
64.0834 156.3864 m
68.4551 142.3698 72.3026 127.2414 75.8334 109.8364 C
92.3333 113.2697 L
89.0586 129.4871 85.1052 144.6076 80.05 160.3364 C
64.0834 156.3864 L
f
U
63 54.3 m
66.7398 40.9114 70.3441 26.0181 73.8 9 C
93 13 L
89.8731 28.4849 86.1833 43.3064 81.6 58.8 C
63 54.3 L
f
u
87 581.4969 m
87 577.0328 83.3808 573.4136 78.9167 573.4136 c
74.4524 573.4136 70.8333 577.0328 70.8333 581.4969 c
70.8333 585.9612 74.4524 589.5803 78.9167 589.5803 c
83.3808 589.5803 87 585.9612 87 581.4969 C
91.3334 581.4969 L
91.3334 588.3544 85.7741 593.9136 78.9167 593.9136 c
72.0592 593.9136 66.5 588.3544 66.5 581.4969 c
66.5 574.6395 72.0592 569.0802 78.9167 569.0802 c
85.7741 569.0802 91.3334 574.6395 91.3334 581.4969 C
87 581.4969 L
f
85.9999 480.9939 m
85.9999 476.7598 82.5674 473.3272 78.3333 473.3272 c
74.0992 473.3272 70.6667 476.7598 70.6667 480.9939 c
70.6667 485.228 74.0992 488.6605 78.3333 488.6605 c
82.5674 488.6605 85.9999 485.228 85.9999 480.9939 C
91.6667 480.9939 L
91.6667 488.3576 85.697 494.3273 78.3333 494.3273 c
70.9696 494.3273 64.9999 488.3576 64.9999 480.9939 c
64.9999 473.6301 70.9696 467.6605 78.3333 467.6605 c
85.697 467.6605 91.6667 473.6301 91.6667 480.9939 C
85.9999 480.9939 L
f
85 380.5 m
85 376.496 81.754 373.25 77.75 373.25 c
73.746 373.25 70.5 376.496 70.5 380.5 c
70.5 384.5041 73.746 387.75 77.75 387.75 c
81.754 387.75 85 384.5041 85 380.5 C
92 380.5 L
92 388.3699 85.6199 394.75 77.75 394.75 c
69.8801 394.75 63.5 388.3699 63.5 380.5 c
63.5 372.63 69.8801 366.25 77.75 366.25 c
85.6199 366.25 92 372.63 92 380.5 C
85 380.5 L
f
84 279.9969 m
84 276.223 80.9405 273.1636 77.1667 273.1636 c
73.3928 273.1636 70.3333 276.223 70.3333 279.9969 c
70.3333 283.7709 73.3928 286.8302 77.1667 286.8302 c
80.9405 286.8302 84 283.7709 84 279.9969 C
92.3334 279.9969 L
92.3334 288.3731 85.5429 295.1636 77.1667 295.1636 c
68.7904 295.1636 62 288.3731 62 279.9969 c
62 271.6207 68.7904 264.8302 77.1667 264.8302 c
85.5429 264.8302 92.3334 271.6207 92.3334 279.9969 C
84 279.9969 L
f
83 179.5031 m
83 175.9593 80.1272 173.0864 76.5834 173.0864 c
73.0396 173.0864 70.1667 175.9593 70.1667 179.5031 c
70.1667 183.0469 73.0396 185.9197 76.5834 185.9197 c
80.1272 185.9197 83 183.0469 83 179.5031 C
92.6667 179.5031 L
92.6667 188.3855 85.4658 195.5864 76.5834 195.5864 c
67.7009 195.5864 60.5001 188.3855 60.5001 179.5031 c
60.5001 170.6206 67.7009 163.4197 76.5834 163.4197 c
85.4658 163.4197 92.6667 170.6206 92.6667 179.5031 C
83 179.5031 L
f
U
82 79 m
82 75.6863 79.3137 73 76 73 c
72.6864 73 70 75.6863 70 79 c
70 82.3137 72.6864 85 76 85 c
79.3137 85 82 82.3137 82 79 C
93 79 L
93 88.3887 85.3887 96 76 96 c
66.6113 96 59 88.3887 59 79 c
59 69.6113 66.6113 62 76 62 c
85.3887 62 93 69.6113 93 79 C
82 79 L
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
