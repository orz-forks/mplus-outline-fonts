%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (2536.eps)
%%CreationDate: (1/12/05) (1:22 PM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
500 600 m
500 700 L
400 700 L
400 600 L
500 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
400 600 m
400 700 L
300 700 L
300 600 L
400 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
500 500 m
500 600 L
400 600 L
400 500 L
500 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
400 500 m
400 600 L
300 600 L
300 500 L
400 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
0 O
0 g
1 D
186 671.5 m
178.8497 630.9501 163.3112 618.0781 116.7 614 C
117 611 L
164.9492 615.1951 181.583 628.9378 189 671 C
186 671.5 L
f
89 671 m
71 671 L
71 690 L
68 690 L
68 671 L
24 671 L
24 690 L
21 690 L
21 671 L
5 671 L
5 668 L
21 668 L
21 644 L
24 644 L
24 668 L
68 668 L
68 662 L
68 625.6735 58.8831 615.7459 24.7 613 C
25 610 L
60.4688 612.8492 71 623.5983 71 662 C
71 668 L
89 668 L
89 671 L
f
149 681 m
137.8125 683.1875 127.5625 685.0625 116 687 C
115.4 684 L
126.564 682.1293 136.8968 680.2688 148.5 678 C
149 681 L
f
144.6 657 m
133.4125 659.1875 123.1625 661.0625 111.6 663 C
111 660 L
122.164 658.1293 132.4968 656.2688 144.1 654 C
144.6 657 L
f
427.7 651 m
423.075 662.0625 418.0125 673.0625 412.7 684 C
410 682.7 L
415.7904 670.7786 420.6436 660.0809 424.9 649.9 C
427.7 651 L
f
384 615 m
353 615 l
336.9065 615 332 619.9065 332 636 c
332 691 L
329 691 L
329 636 L
329 618.0591 335.4797 612 353 612 C
384 612 L
384 615 L
f
481.7 674.3 m
479.0802 632.9815 462.7178 617.4136 423.7 614 C
424 611 L
464.7219 614.5627 482.1743 631.492 484.7 674.3 C
481.7 674.3 L
f
99 685 m
95.75 690.25 92.875 694.25 89 699 C
86.6 697.2 L
90.4897 692.4319 93.2563 688.5783 96.4 683.5 C
99 685 L
f
197 684 m
193.75 689.25 190.875 693.25 187 698 C
184.6 696.2 L
188.4897 691.4319 191.2563 687.5783 194.4 682.5 C
197 684 L
f
185.6 680.7 m
182.5234 685.6148 179.703 689.4608 176 694 C
173.6 692.2 L
177.2965 687.6688 180.0445 683.8155 183 679.1 C
185.6 680.7 L
f
396 682 m
392.75 687.25 389.875 691.25 386 696 C
383.6 694.2 L
387.4897 689.4319 390.2563 685.5783 393.4 680.5 C
396 682 L
f
384.6 678.7 m
381.5234 683.6148 378.703 687.4608 375 692 C
372.6 690.2 L
376.2965 685.6688 379.0445 681.8155 382 677.1 C
384.6 678.7 L
f
497 684 m
493.75 689.25 490.875 693.25 487 698 C
484.6 696.2 L
488.4897 691.4319 491.2563 687.5783 494.4 682.5 C
497 684 L
f
485.6 680.7 m
482.5234 685.6148 479.703 689.4608 476 694 C
473.6 692.2 L
477.2965 687.6688 480.0445 683.8155 483 679.1 C
485.6 680.7 L
f
u
149.4 581.7803 m
138.022 584.005 127.6799 585.8843 116.0666 587.8303 C
115 582.6136 L
126.3031 580.7195 136.7445 578.8524 148.45 576.5635 C
149.4 581.7803 L
f
149.8 482.5606 m
138.2315 484.8226 127.7974 486.7061 116.1333 488.6606 C
114.6 481.2271 L
126.0421 479.3098 136.5923 477.4359 148.4 475.1271 C
149.8 482.5606 L
f
150.2 383.35 m
138.4409 385.6492 127.9148 387.5369 116.2 389.5 C
114.2 379.85 L
125.7812 377.9093 136.44 376.0288 148.35 373.7 C
150.2 383.35 L
f
150.6 284.1303 m
138.6504 286.4668 128.0322 288.3587 116.2666 290.3303 C
113.8 278.4635 L
125.5203 276.4996 136.2878 274.6123 148.3 272.2635 C
150.6 284.1303 L
f
151 184.9197 m
138.8599 187.2934 128.1496 189.1896 116.3333 191.1697 C
113.4 177.0864 L
125.2594 175.0991 136.1355 173.2052 148.25 170.8364 C
151 184.9197 L
f
U
151.4 85.7 m
139.0694 88.111 128.2671 90.0114 116.4 92 C
113 75.7 L
124.9985 73.6894 135.9833 71.7888 148.2 69.4 C
151.4 85.7 L
f
u
144.9 557.6136 m
133.522 559.8384 123.1799 561.7176 111.5666 563.6636 C
110.5 558.4469 L
121.803 556.5529 132.2445 554.6857 143.95 552.3969 C
144.9 557.6136 L
f
145.2 458.2272 m
133.6315 460.4892 123.1974 462.3727 111.5333 464.3273 C
110 456.8938 L
121.4421 454.9764 131.9923 453.1026 143.8 450.7938 C
145.2 458.2272 L
f
145.5 358.85 m
133.7409 361.1492 123.2148 363.0369 111.5 365 C
109.5 355.35 L
121.0812 353.4093 131.74 351.5288 143.65 349.2 C
145.5 358.85 L
f
145.8 259.4636 m
133.8504 261.8001 123.2322 263.692 111.4666 265.6636 C
109 253.7969 L
120.7203 251.8329 131.4878 249.9457 143.5 247.5969 C
145.8 259.4636 L
f
146.1 160.0863 m
133.9599 162.4601 123.2496 164.3563 111.4333 166.3363 C
108.5 152.2531 L
120.3594 150.2658 131.2355 148.3719 143.35 146.0031 C
146.1 160.0863 L
f
U
146.4 60.7 m
134.0694 63.111 123.2671 65.0114 111.4 67 C
108 50.7 L
119.9985 48.6894 130.9833 46.7888 143.2 44.4 C
146.4 60.7 L
f
u
183.8833 570.7136 m
176.7526 532.2088 161.6768 519.9527 116.0833 515.9637 C
116.6666 510.4969 L
164.7852 514.7069 181.6273 528.3693 189.3333 569.8302 C
183.8833 570.7136 L
f
181.7665 469.9272 m
174.6555 433.4676 160.0425 421.8273 115.4666 417.9273 C
116.3333 409.9938 L
164.6212 414.2186 181.6716 427.8008 189.6667 468.6605 C
181.7665 469.9272 L
f
179.65 369.15 m
172.5586 334.7354 158.4083 323.7109 114.85 319.9 C
116 309.5 L
164.4573 313.7396 181.7159 327.2415 190 367.5 C
179.65 369.15 L
f
177.5332 268.3636 m
170.4615 235.9941 156.7739 225.5856 114.2333 221.8637 C
115.6666 208.9969 L
164.2933 213.2514 181.7602 226.673 190.3333 266.3302 C
177.5332 268.3636 L
f
175.4167 167.5864 m
168.3647 137.2619 155.1397 127.4692 113.6167 123.8363 C
115.3333 108.503 L
164.1293 112.7723 181.8045 126.1137 190.6666 165.1697 C
175.4167 167.5864 L
f
U
173.3 66.8 m
166.2676 38.5207 153.5054 29.3438 113 25.8 C
115 8 L
163.9654 12.2841 181.8488 25.5452 191 64 C
173.3 66.8 L
f
u
197.1667 583.1636 m
193.9175 588.5261 190.9837 592.788 187.1667 597.6636 C
183.4666 595.2303 L
187.248 590.4144 190.1158 586.2462 193.2666 581.0469 C
197.1667 583.1636 L
f
197.3333 482.3272 m
194.085 487.8022 191.0925 492.3261 187.3333 497.3272 C
182.3332 494.2605 L
186.0063 489.397 188.9753 484.9141 192.1332 479.5938 C
197.3333 482.3272 L
f
197.5 381.5 m
194.2525 387.0875 191.2012 391.8733 187.5 397 C
181.2 393.3 L
184.7647 388.3888 187.835 383.5912 191 378.15 C
197.5 381.5 L
f
197.6667 280.6636 m
194.42 286.3636 191.31 291.4113 187.6667 296.6636 C
180.0666 292.3302 L
183.523 287.3713 186.6945 282.2591 189.8666 276.6969 C
197.6667 280.6636 L
f
197.8333 179.8364 m
194.5875 185.649 191.4187 190.9586 187.8333 196.3364 C
178.9333 191.3697 L
182.2814 186.3631 185.5541 180.9363 188.7333 175.2531 C
197.8333 179.8364 L
f
U
198 79 m
194.755 84.9251 191.5275 90.4966 188 96 C
177.8 90.4 L
181.0397 85.3457 184.4137 79.6042 187.6 73.8 C
198 79 L
f
u
185.0666 579.8703 m
181.9728 584.9337 179.0953 589.0487 175.4333 593.7303 C
171.7673 591.3156 L
175.3768 586.714 178.2179 582.5652 181.2013 577.6876 C
185.0666 579.8703 L
f
184.5333 479.0405 m
181.4222 484.2526 178.4876 488.6366 174.8666 493.4605 C
169.9345 490.4312 L
173.4572 485.7593 176.3914 481.3149 179.4025 476.2752 C
184.5333 479.0405 L
f
184 378.22 m
180.8716 383.5807 177.8799 388.2337 174.3 393.2 C
168.102 389.556 L
171.5377 384.8138 174.565 380.0738 177.604 374.872 C
184 378.22 L
f
183.4666 277.3903 m
180.321 282.8997 177.2722 287.8217 173.7333 292.9303 C
166.2693 288.6716 L
169.6181 283.859 172.7384 278.8235 175.8052 273.4596 C
183.4666 277.3903 L
f
182.9333 176.5698 m
179.7705 182.2278 176.6646 187.4188 173.1667 192.6697 C
164.4367 187.7965 L
167.6986 182.9135 170.912 177.5825 174.0067 172.0565 C
182.9333 176.5698 L
f
U
182.4 75.7401 m
179.2199 81.5467 176.0569 87.0067 172.6 92.4 C
162.604 86.9121 L
165.779 81.9588 169.0855 76.3322 172.208 70.6441 C
182.4 75.7401 L
f
u
328.1667 591.1636 m
328.1667 535.9969 L
328.1667 517.6641 334.7231 511.4969 352.6667 511.4969 C
384.3334 511.4969 L
384.3334 516.8303 L
353.1667 516.8303 l
338.1478 516.8303 333.8334 521.1441 333.8334 536.3303 c
333.8334 591.1636 L
328.1667 591.1636 L
f
327.3333 491.3272 m
327.3333 435.9939 L
327.3333 417.2692 333.9664 410.9939 352.3333 410.9939 C
384.6667 410.9939 L
384.6667 418.6607 L
353.3333 418.6607 l
339.3892 418.6607 335.6668 422.3818 335.6668 436.6606 c
335.6668 491.3272 L
327.3333 491.3272 L
f
326.5 391.5 m
326.5 336 L
326.5 316.8834 333.2099 310.5 352 310.5 C
385 310.5 L
385 320.5 L
353.5 320.5 l
340.6304 320.5 337.5 323.6285 337.5 337 c
337.5 391.5 L
326.5 391.5 L
f
325.6667 291.6636 m
325.6667 235.9969 L
325.6667 216.4885 332.4533 209.9969 351.6667 209.9969 C
385.3334 209.9969 L
385.3334 222.3303 L
353.6667 222.3303 l
341.8718 222.3303 339.3334 224.8661 339.3334 237.3303 c
339.3334 291.6636 L
325.6667 291.6636 L
f
324.8334 191.8364 m
324.8334 136.003 L
324.8334 116.1027 331.6967 109.503 351.3334 109.503 C
385.6667 109.503 L
385.6667 124.1696 L
353.8333 124.1696 l
343.113 124.1696 341.1666 126.1128 341.1666 137.6697 c
341.1666 191.8364 L
324.8334 191.8364 L
f
U
u
324 92 m
324 36 L
324 15.7078 330.9401 9 351 9 C
386 9 L
386 26 L
354 26 l
344.3544 26 343 27.3505 343 38 c
343 92 L
324 92 L
f
U
249.8 643 m
262.0149 632.5215 273.2654 622.247 283.8 612 C
286 614 L
275.2142 624.4914 264.0858 634.7465 251.9 645.2 C
249.8 643 L
f
272.7 683.2 m
266.1559 657.5583 243.874 632.2511 210.1 614.6 C
211.6 612 L
246.255 630.1116 269.5576 656.0958 276 684 C
217 684 L
217 681 L
274 681 L
272.7 683.2 L
f
298 684 m
294.75 689.25 291.875 693.25 288 698 C
285.6 696.2 L
289.4897 691.4319 292.2563 687.5783 295.4 682.5 C
298 684 L
f
86.2 683.7 m
83.1234 688.6148 80.303 692.4608 76.6 697 C
74.2 695.2 L
77.8965 690.6688 80.6445 686.8155 83.6 682.1 C
86.2 683.7 L
f
285.2 682.7 m
282.1234 687.6148 279.303 691.4608 275.6 696 C
273.2 694.2 L
276.8965 689.6688 279.6445 685.8155 282.6 681.1 C
285.2 682.7 L
f
385.9512 672.8119 m
385.0654 652.4691 380.8432 645.1707 366 637.9 C
367.4 635.2 L
383.1856 642.9323 388.1963 650.9909 389 674 C
304.8793 656.1194 L
305.5031 653.185 L
388.6456 670.8576 L
385.9512 672.8119 L
f
u
89.5 571.1682 m
71.3333 571.1682 L
71.3333 590.0015 L
65.8334 590.0015 L
65.8334 571.1682 L
26 571.1682 L
26 590.0015 L
20.5 590.0015 L
20.5 571.1682 L
4.8333 571.1682 L
4.8333 565.8349 L
20.5 565.8349 L
20.5 543.3348 L
26 543.3348 L
26 565.8349 L
65.8334 565.8349 L
65.8334 560.1682 L
65.8334 526.3815 57.4793 517.3722 23.8167 514.6681 C
24.3333 509.3348 L
60.6631 512.2532 71.3333 522.9753 71.3333 560.1682 C
71.3333 565.8349 L
89.5 565.8349 L
89.5 571.1682 L
f
90 471.3318 m
71.6667 471.3318 L
71.6667 489.9985 L
63.6667 489.9985 L
63.6667 471.3318 L
28 471.3318 L
28 489.9985 L
20 489.9985 L
20 471.3318 L
4.6667 471.3318 L
4.6667 463.6651 L
20 463.6651 L
20 442.6651 L
28 442.6651 L
28 463.6651 L
63.6667 463.6651 L
63.6667 458.3318 L
63.6667 427.085 56.0756 418.9941 22.9333 416.3318 C
23.6667 408.6651 L
60.8575 411.6526 71.6667 422.3477 71.6667 458.3318 C
71.6667 463.6651 L
90 463.6651 L
90 471.3318 L
f
U
u
90.5 370.5 m
73.5 370.5 L
73.5 390 L
63 390 L
63 370.5 L
30 370.5 L
30 390 L
19.5 390 L
19.5 370.5 L
4.5 370.5 L
4.5 360.5 L
19.5 360.5 L
19.5 341 L
30 341 L
30 360.5 L
63 360.5 L
63 357.5 L
63 328.793 56.1718 320.6205 23.55 318 C
24.5 308 L
62.5518 311.0567 73.5 322.7247 73.5 357.5 C
73.5 360.5 L
90.5 360.5 L
90.5 370.5 L
f
U
u
91.5 270.4159 m
73.8333 270.4159 L
73.8333 289.9992 L
60.8333 289.9992 L
60.8333 270.4159 L
32.5 270.4159 L
32.5 289.9992 L
19.5 289.9992 L
19.5 270.4159 L
4.8333 270.4159 L
4.8333 258.0825 L
19.5 258.0825 L
19.5 240.3325 L
32.5 240.3325 L
32.5 258.0825 L
60.8333 258.0825 L
60.8333 254.6659 L
60.8333 228.4987 54.768 222.2446 22.6666 219.6659 C
23.8333 207.3325 L
62.7461 210.4584 73.8333 221.0994 73.8333 254.6659 C
73.8333 258.0825 L
91.5 258.0825 L
91.5 270.4159 L
f
U
u
92.5 171.3318 m
76.1667 171.3318 L
76.1667 189.9985 L
60.6667 189.9985 L
60.6667 171.3318 L
35 171.3318 L
35 189.9985 L
19.5 189.9985 L
19.5 171.3318 L
5.1667 171.3318 L
5.1667 156.6651 L
19.5 156.6651 L
19.5 140.6651 L
35 140.6651 L
35 156.6651 L
60.6667 156.6651 L
60.6667 152.8318 L
60.6667 129.2045 55.3643 123.8687 23.7833 121.3318 C
25.1667 106.6651 L
64.9405 109.8601 76.1667 120.4742 76.1667 152.8318 C
76.1667 156.6651 L
92.5 156.6651 L
92.5 171.3318 L
f
U
24 6 m
64.6348 9.2642 76 19.8512 76 51 C
76 55 L
92 55 L
92 72 L
76 72 L
76 90 L
58 90 L
58 72 L
36 72 L
36 90 L
18 90 L
18 72 L
4 72 L
4 55 L
18 55 L
18 40 L
36 40 L
36 55 L
58 55 L
58 51 l
58 29.9125 53.4606 25.4951 22.4 23 C
24 6 L
f
u
247.8469 542.7353 m
260.1633 532.1923 271.4935 521.8786 282.1666 511.4969 C
286.1667 515.247 L
275.3249 525.7928 264.0088 536.1784 251.597 546.802 C
247.8469 542.7353 L
f
U
u
245.8939 442.4705 m
258.3116 431.8632 269.7217 421.5103 280.5332 410.9939 C
286.3334 416.494 L
275.4356 427.0942 263.9317 437.6104 251.294 448.404 C
245.8939 442.4705 L
f
246.4409 342.215 m
258.9601 331.5432 270.4499 321.1511 281.4 310.5 C
289 317.75 L
278.0463 328.4046 266.3547 339.0514 253.4909 350.015 C
246.4409 342.215 L
f
U
u
244.6546 241.9549 m
257.2752 231.2186 268.8448 220.7873 279.9334 210.0015 C
289.3333 219.0015 L
278.3236 229.7106 266.4443 240.4879 253.3546 251.6215 C
244.6546 241.9549 L
f
242.8682 141.6901 m
255.5903 130.8894 267.2396 120.419 278.4666 109.4985 C
289.6667 120.2485 L
278.601 131.012 266.534 141.9198 253.2182 153.2235 C
242.8682 141.6901 L
f
U
241.0819 41.43 m
253.9054 30.5649 265.6345 20.0552 277 9 C
290 21.5 L
278.8784 32.3179 266.6236 43.3563 253.0819 54.83 C
241.0819 41.43 L
f
u
429.9667 551.1969 m
425.2523 562.3875 420.0585 573.6941 414.7501 584.6636 C
409.6 582.3469 L
415.3437 570.4795 420.3623 559.4317 424.7167 549.0969 C
429.9667 551.1969 L
f
432.2335 451.3939 m
427.4296 462.7125 422.1046 474.3257 416.8001 485.3273 C
409.2 481.9939 L
414.8971 470.1804 420.0809 458.7825 424.5333 448.2938 C
432.2335 451.3939 L
f
434.5 351.6 m
429.6067 363.0466 424.1504 374.9664 418.85 386 C
408.8 381.65 L
414.4505 369.8905 419.7996 358.1424 424.35 347.5 C
434.5 351.6 L
f
436.7667 251.7969 m
431.7841 263.3716 426.1965 275.5981 420.9001 286.6636 C
408.4 281.2969 L
414.0039 269.5915 419.5183 257.4932 424.1667 246.6969 C
436.7667 251.7969 L
f
439.0333 152.003 m
433.9612 163.7057 428.2423 176.2388 422.9499 187.3363 C
408 180.9531 L
413.5572 169.3016 419.237 156.8532 423.9833 145.9031 C
439.0333 152.003 L
f
U
407.6 80.6 m
413.1106 69.0025 418.9557 56.204 423.8 45.1 C
441.3 52.2 L
436.1385 64.0307 430.2884 76.8704 425 88 C
407.6 80.6 L
f
u
298.5 584.2266 m
295.2941 589.5102 292.4034 593.6978 288.6333 598.5 C
285.0693 596.1413 L
288.8075 591.3929 291.6303 587.3012 294.7386 582.1793 C
298.5 584.2266 L
f
U
u
299 484.4533 m
295.8382 489.7703 292.9318 494.1456 289.2667 499 C
284.5386 496.0826 L
288.1252 491.3539 291.0043 487.0241 294.0773 481.8586 C
299 484.4533 L
f
296.5 383.68 m
293.3823 389.0305 290.4601 393.5934 286.9 398.5 C
281.008 395.024 L
284.4431 390.315 287.3785 385.7471 290.416 380.5381 C
296.5 383.68 L
f
U
u
297.3333 283.5749 m
294.2597 288.9589 291.3218 293.7095 287.8666 298.6682 C
280.8107 294.6335 L
284.0943 289.9442 287.0859 285.1382 290.088 279.8856 C
297.3333 283.5749 L
f
298.1667 183.4651 m
295.1372 188.8827 292.1836 193.8209 288.8333 198.8318 C
280.6133 194.2385 L
283.7454 189.5689 286.7933 184.5248 289.76 179.2285 C
298.1667 183.4651 L
f
U
299 83.36 m
296.0146 88.8111 293.0453 93.9369 289.8 99 C
280.416 93.848 L
283.3966 89.1981 286.5007 83.9159 289.432 78.5761 C
299 83.36 L
f
u
285.2413 582.9768 m
282.1899 587.9628 279.3545 592.005 275.7387 596.6147 C
272.2059 594.2731 L
275.7732 589.7377 278.5702 585.6638 281.5119 580.8621 C
285.2413 582.9768 L
f
U
u
285.2826 483.2536 m
282.2563 488.3108 279.4061 492.5493 275.8773 497.2293 C
271.2118 494.3463 L
274.6498 489.8066 277.4958 485.5122 280.4237 480.6241 C
285.2826 483.2536 L
f
282.324 382.5304 m
279.3229 387.6588 276.4577 392.0935 273.016 396.844 C
267.2179 393.4195 L
270.5266 388.8755 273.4216 384.3606 276.3357 379.3863 C
282.324 382.5304 L
f
U
u
282.6987 282.4754 m
279.7227 287.6751 276.8426 292.3059 273.488 297.1268 C
266.5572 293.1609 L
269.7366 288.6126 272.6806 283.8772 275.5809 278.8166 C
282.6987 282.4754 L
f
283.0733 182.4159 m
280.1225 187.6867 277.2275 192.5138 273.96 197.4051 C
265.8965 192.8977 L
268.9467 188.3451 271.9396 183.3891 274.8262 178.2423 C
283.0733 182.4159 L
f
U
283.448 82.3609 m
280.5223 87.7029 277.6124 92.7262 274.432 97.688 C
265.2358 92.6391 L
268.1567 88.0822 271.1987 82.9057 274.0714 77.6726 C
283.448 82.3609 L
f
u
99 584.7282 m
95.7941 590.0117 92.9034 594.1993 89.1333 599.0015 C
85.5693 596.6429 L
89.3075 591.8945 92.1304 587.8028 95.2387 582.6809 C
99 584.7282 L
f
99 484.4518 m
95.8382 489.7688 92.9318 494.1441 89.2667 498.9985 C
84.5386 496.0811 L
88.1253 491.3524 91.0044 487.0226 94.0773 481.8572 C
99 484.4518 L
f
U
u
98 182.2984 m
94.9705 187.716 92.0169 192.6542 88.6667 197.6651 C
80.4466 193.0718 L
83.5788 188.4022 86.6266 183.3581 89.5933 178.0619 C
98 182.2984 L
f
U
99 82.36 m
96.0146 87.8111 93.0453 92.9369 89.8 98 C
80.416 92.848 L
83.3966 88.1981 86.5007 82.9159 89.432 77.5761 C
99 82.36 L
f
u
85.7413 583.4783 m
82.6899 588.4643 79.8546 592.5065 76.2387 597.1162 C
72.706 594.7747 L
76.2732 590.2392 79.0702 586.1654 82.0119 581.3636 C
85.7413 583.4783 L
f
85.2827 483.2521 m
82.2564 488.3093 79.4061 492.5477 75.8773 497.2278 C
71.2119 494.3448 L
74.6499 489.8051 77.4959 485.5107 80.4238 480.6226 C
85.2827 483.2521 L
f
U
84.648 79.3609 m
81.7223 84.7029 78.8124 89.7262 75.632 94.688 C
66.4358 89.6391 L
69.3567 85.0822 72.3987 79.9057 75.2714 74.6726 C
84.648 79.3609 L
f
u
396.5 582.2236 m
393.2941 587.5071 390.4034 591.6948 386.6334 596.4969 C
383.0693 594.1383 L
386.8075 589.3899 389.6303 585.2982 392.7386 580.1763 C
396.5 582.2236 L
f
397 482.4472 m
393.8382 487.7643 390.9318 492.1396 387.2667 496.9939 C
382.5386 494.0766 L
386.1253 489.3479 389.0044 485.018 392.0773 479.8526 C
397 482.4472 L
f
397.5 382.68 m
394.3823 388.0305 391.4601 392.5934 387.9 397.5 C
382.008 394.024 L
385.4431 389.315 388.3785 384.7471 391.416 379.5381 C
397.5 382.68 L
f
398 282.9036 m
394.9264 288.2877 391.9885 293.0382 388.5334 297.9969 C
381.4773 293.9623 L
384.7609 289.273 387.7525 284.467 390.7546 279.2143 C
398 282.9036 L
f
398.5 183.1364 m
395.4705 188.554 392.5169 193.4921 389.1666 198.503 C
380.9467 193.9097 L
384.0788 189.2401 387.1266 184.196 390.0933 178.8998 C
398.5 183.1364 L
f
U
399 83.36 m
396.0146 88.8111 393.0453 93.9369 389.8 99 C
380.416 93.848 L
383.3966 89.1981 386.5007 83.9159 389.432 78.5761 C
399 83.36 L
f
u
384.408 579.3071 m
381.3565 584.2931 378.5212 588.3353 374.9053 592.945 C
371.3726 590.6035 L
374.9398 586.068 377.7368 581.9941 380.6785 577.1924 C
384.408 579.3071 L
f
384.216 479.9142 m
381.1897 484.9714 378.3394 489.2099 374.8106 493.8899 C
370.1452 491.007 L
373.5831 486.4672 376.4291 482.1728 379.3571 477.2848 C
384.216 479.9142 L
f
384.024 380.5304 m
381.0229 385.6588 378.1577 390.0935 374.716 394.844 C
368.9179 391.4195 L
372.2266 386.8755 375.1216 382.3606 378.0357 377.3863 C
384.024 380.5304 L
f
383.832 281.1376 m
380.856 286.3372 377.9759 290.968 374.6213 295.789 C
367.6905 291.823 L
370.8699 287.2747 373.8139 282.5392 376.7142 277.4787 C
383.832 281.1376 L
f
383.64 181.7538 m
380.6891 187.0246 377.7942 191.8517 374.5267 196.743 C
366.4632 192.2356 L
369.5134 187.683 372.5064 182.727 375.3929 177.5802 C
383.64 181.7538 L
f
U
383.448 82.3609 m
380.5223 87.7029 377.6124 92.7262 374.432 97.688 C
365.2358 92.6391 L
368.1567 88.0822 371.1987 82.9057 374.0714 77.6726 C
383.448 82.3609 L
f
u
497.1667 583.8903 m
493.9608 589.1738 491.07 593.3614 487.3 598.1636 C
483.736 595.8049 L
487.4741 591.0565 490.297 586.9648 493.4053 581.8429 C
497.1667 583.8903 L
f
497.3333 483.7806 m
494.1716 489.0976 491.2651 493.4729 487.6 498.3272 C
482.8719 495.4099 L
486.4586 490.6812 489.3377 486.3514 492.4106 481.1859 C
497.3333 483.7806 L
f
497.5 383.68 m
494.3823 389.0305 491.4601 393.5934 487.9 398.5 C
482.008 395.024 L
485.4431 390.315 488.3785 385.7471 491.416 380.5381 C
497.5 383.68 L
f
497.6667 283.5703 m
494.5931 288.9544 491.6552 293.7049 488.2 298.6636 C
481.1439 294.6289 L
484.4276 289.9396 487.4192 285.1336 490.4213 279.881 C
497.6667 283.5703 L
f
497.8333 183.4697 m
494.8038 188.8873 491.8502 193.8255 488.5 198.8364 C
480.28 194.2431 L
483.4121 189.5735 486.46 184.5294 489.4267 179.2332 C
497.8333 183.4697 L
f
U
498 83.36 m
495.0146 88.8111 492.0453 93.9369 488.8 99 C
479.416 93.848 L
482.3966 89.1981 485.5007 83.9159 488.432 78.5761 C
498 83.36 L
f
u
485.0746 580.9738 m
482.0232 585.9598 479.1879 590.002 475.572 594.6116 C
472.0392 592.2701 L
475.6065 587.7346 478.4035 583.6608 481.3452 578.859 C
485.0746 580.9738 L
f
484.5493 481.2475 m
481.523 486.3047 478.6728 490.5432 475.144 495.2233 C
470.4785 492.3403 L
473.9165 487.8005 476.7625 483.5061 479.6904 478.6181 C
484.5493 481.2475 L
f
484.024 381.5304 m
481.0229 386.6588 478.1577 391.0935 474.716 395.844 C
468.9179 392.4195 L
472.2266 387.8755 475.1216 383.3606 478.0357 378.3863 C
484.024 381.5304 L
f
483.4986 281.8042 m
480.5226 287.0038 477.6426 291.6347 474.288 296.4556 C
467.3571 292.4897 L
470.5366 287.9414 473.4806 283.2059 476.3809 278.1453 C
483.4986 281.8042 L
f
482.9733 182.0871 m
480.0225 187.3579 477.1275 192.185 473.86 197.0764 C
465.7965 192.569 L
468.8467 188.0164 471.8397 183.0604 474.7262 177.9136 C
482.9733 182.0871 L
f
U
482.448 82.3609 m
479.5223 87.7029 476.6124 92.7262 473.432 97.688 C
464.2358 92.6391 L
467.1567 88.0822 470.1987 82.9057 473.0714 77.6726 C
482.448 82.3609 L
f
u
383.5422 572.5195 m
382.7804 552.4634 379.228 546.3205 364.5858 538.518 C
367.6692 534.1346 L
384.0598 543.0607 388.4994 550.3649 389.1692 574.4013 C
304.4606 556.9251 L
305.4724 551.7561 L
388.381 568.8853 L
383.5422 572.5195 L
f
381.1331 472.2271 m
380.4954 452.4576 377.6128 447.4704 363.1716 439.1361 C
367.9384 433.0693 L
384.9341 443.189 388.8025 449.7388 389.3384 474.8027 C
304.0419 457.7309 L
305.4418 450.3272 L
388.1165 466.9131 L
381.1331 472.2271 L
f
378.7244 371.9439 m
378.2107 352.4611 375.9978 348.6293 361.7576 339.7632 C
368.2076 332.0132 L
385.8083 343.3265 389.1056 349.122 389.5076 375.2132 C
303.6232 358.5457 L
305.4112 348.9076 L
387.8519 364.9502 L
378.7244 371.9439 L
f
376.3153 271.6515 m
375.9257 252.4554 374.3826 249.7791 360.3434 240.3812 C
368.4767 230.9478 L
386.6826 243.4549 389.4088 248.496 389.6768 275.6145 C
303.2045 259.3514 L
305.3805 247.4787 L
387.5873 262.9779 L
376.3153 271.6515 L
f
373.9065 171.3683 m
373.6409 152.4588 372.7676 150.938 358.9293 141.0083 C
368.7459 129.8917 L
387.5568 143.5924 389.7119 147.8792 389.8459 176.025 C
302.7859 160.1663 L
305.3498 146.0591 L
387.3228 161.015 L
373.9065 171.3683 L
f
U
371.4975 71.0759 m
371.3559 52.4531 371.1524 52.0879 357.5151 41.6264 C
369.0151 28.8264 L
388.431 43.7208 390.015 47.2532 390.0151 76.4264 C
302.3672 60.972 L
305.3192 44.6302 L
387.0582 59.0428 L
371.4975 71.0759 L
f
u
269.4499 583.6636 m
263.2324 557.5111 241.2879 532.6032 208.9167 516.4303 C
211.3333 511.4969 L
246.0039 528.6513 269.6341 555.7268 275.5 584.6636 C
216 584.6636 L
216 579.3302 L
273 579.3302 L
269.4499 583.6636 L
f
U
u
266.1999 484.1273 m
260.3088 457.4639 238.7017 432.9554 207.7333 418.2607 C
211.0667 410.9939 L
245.7528 427.191 269.7106 455.3578 275 485.3273 C
215 485.3273 L
215 477.6605 L
272 477.6605 L
266.1999 484.1273 L
f
266.95 384.6 m
261.6093 358.4388 239.6423 333.8038 209.05 320.1 C
213.3 310.5 L
248.0017 325.7399 273.787 354.9979 278.5 386 C
216.5 386 L
216.5 376 L
275 376 L
266.95 384.6 L
f
U
u
264.3667 285.0682 m
259.4271 258.7339 237.5652 234.3229 208.0334 221.9348 C
213.2 210.0015 L
247.9173 224.2843 274.5301 254.6335 278.6667 286.6682 C
215.6667 286.6682 L
215.6667 274.3349 L
274.6667 274.3349 L
264.3667 285.0682 L
f
261.7833 185.5318 m
257.2449 159.0244 235.4879 134.8374 207.0167 123.7652 C
213.1 109.4985 L
247.8328 122.824 275.2733 154.2645 278.8333 187.3318 C
214.8333 187.3318 L
214.8333 172.6651 L
274.3333 172.6651 L
261.7833 185.5318 L
f
U
259.2 86 m
255.0627 59.3194 233.4107 35.3565 206 25.6 C
213 9 L
247.7484 21.3683 276.0164 53.9001 279 88 C
214 88 L
214 71 L
274 71 L
259.2 86 L
f
u
480.1666 574.2803 m
477.5871 534.1718 461.8752 519.4225 423.4833 516.0637 C
424.2 510.6636 L
465.4477 514.2723 483.0669 531.2082 485.6667 574.2803 C
480.1666 574.2803 L
f
478.6332 474.2605 m
476.0941 435.3622 461.0326 421.4314 423.2666 418.1274 C
424.4 410.3272 L
466.1735 413.9819 483.9595 430.9245 486.6334 474.2605 C
478.6332 474.2605 L
f
477.1 374.25 m
474.6011 336.5616 460.1902 323.4493 423.05 320.2 C
424.6 310 L
466.8993 313.7007 484.852 330.6499 487.6 374.25 C
477.1 374.25 L
f
475.5666 274.2303 m
473.1081 237.7519 459.3476 225.4582 422.8333 222.2637 C
424.8 209.6636 L
467.6251 213.4103 485.7446 230.3662 488.5667 274.2303 C
475.5666 274.2303 L
f
474.0334 174.2197 m
471.6151 138.9514 458.5051 127.4761 422.6167 124.3363 C
425 109.3364 L
468.3509 113.1291 486.6372 130.0916 489.5333 174.2197 C
474.0334 174.2197 L
f
U
472.5 74.2 m
470.1221 40.1417 457.6625 29.485 422.4 26.4 C
425.2 9 L
469.0767 12.8387 487.5298 29.8079 490.5 74.2 C
472.5 74.2 L
f
u
84.0567 179.3325 m
81.1058 184.6033 78.2108 189.4304 74.9433 194.3218 C
66.8798 189.8144 L
69.93 185.2618 72.923 180.3058 75.8095 175.1589 C
84.0567 179.3325 L
f
U
u
98.5 282.7392 m
95.4264 288.1232 92.4885 292.8738 89.0333 297.8325 C
81.9773 293.7979 L
85.261 289.1086 88.2525 284.3026 91.2546 279.05 C
98.5 282.7392 L
f
U
99 383.18 m
95.8823 388.5305 92.9601 393.0934 89.4 398 C
83.508 394.524 L
86.9431 389.815 89.8785 385.2471 92.916 380.0381 C
99 383.18 L
f
u
85.3814 279.2217 m
82.4054 284.4213 79.5253 289.0522 76.1707 293.8731 C
69.2399 289.9072 L
72.4194 285.3589 75.3634 280.6234 78.2637 275.5628 C
85.3814 279.2217 L
f
U
86.7061 379.1109 m
83.705 384.2393 80.8398 388.674 77.3981 393.4245 C
71.6 390 L
74.9087 385.456 77.8037 380.9411 80.7178 375.9668 C
86.7061 379.1109 L
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
