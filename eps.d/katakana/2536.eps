%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (2536.eps)
%%CreationDate: (7/30/04) (10:58 AM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
1 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
500 600 m
500 700 L
400 700 L
400 600 L
500 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
400 600 m
400 700 L
300 700 L
300 600 L
400 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
500 500 m
500 600 L
400 600 L
400 500 L
500 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
400 500 m
400 600 L
300 600 L
300 500 L
400 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
0 Ap
0 O
0 g
1 D
186 672.5 m
178.8497 631.9501 163.3112 619.0781 116.7 615 C
117 612 L
164.9492 616.1951 181.583 629.9378 189 672 C
186 672.5 L
f
149 682 m
137.8125 684.1875 127.5625 686.0625 116 688 C
115.4 685 L
126.564 683.1293 136.8968 681.2688 148.5 679 C
149 682 L
f
144.6 658 m
133.4125 660.1875 123.1625 662.0625 111.6 664 C
111 661 L
122.164 659.1293 132.4968 657.2688 144.1 655 C
144.6 658 L
f
383 616 m
352 616 l
335.9065 616 331 620.9065 331 637 c
331 692 L
328 692 L
328 637 L
328 619.0591 334.4797 613 352 613 C
383 613 L
383 616 L
f
384.9512 673.8119 m
384.0654 653.4691 379.8431 646.1707 365 638.9 C
366.4 636.2 L
382.1856 643.9323 387.1963 651.9909 388 675 C
385.0291 674.5831 L
304.8243 663.3255 L
305.2418 660.3547 L
386.6886 671.8014 L
384.9512 673.8119 L
f
193 681 m
189.9719 686.7331 187.2844 691.4831 184 697 C
181.4 695.5 L
184.7848 689.8145 187.4289 685.0359 190.3 679.6 C
193 681 L
f
169.4 692.5 m
172.5265 687.2484 175.1108 682.5595 178.1 676.9 C
180.8 678.3 L
177.8325 683.9184 175.2187 688.5935 172 694 C
169.4 692.5 L
f
393 682 m
389.9719 687.7331 387.2844 692.4831 384 698 C
381.4 696.5 L
384.7848 690.8145 387.4289 686.0359 390.3 680.6 C
393 682 L
f
369.4 693.5 m
372.5265 688.2484 375.1108 683.5595 378.1 677.9 C
380.8 679.3 L
377.8325 684.9184 375.2187 689.5935 372 695 C
369.4 693.5 L
f
u
183.7166 571.5469 m
176.5859 533.0422 161.5102 520.7861 115.9166 516.797 C
116.5 511.3303 L
164.6185 515.5402 181.4606 529.2026 189.1667 570.6636 C
183.7166 571.5469 L
f
181.4332 470.5939 m
174.3222 434.1343 159.7091 422.494 115.1333 418.594 C
116 410.6605 L
164.2879 414.8853 181.3382 428.4674 189.3333 469.3272 C
181.4332 470.5939 L
f
179.15 369.65 m
172.0586 335.2354 157.9083 324.2109 114.35 320.4 C
115.5 310 L
163.9573 314.2396 181.2159 327.7415 189.5 368 C
179.15 369.65 L
f
176.8666 268.6969 m
169.7949 236.3275 156.1072 225.9189 113.5666 222.197 C
115 209.3303 L
163.6266 213.5847 181.0935 227.0063 189.6667 266.6636 C
176.8666 268.6969 L
f
174.5834 167.7531 m
167.5313 137.4286 154.3064 127.6358 112.7834 124.003 C
114.5 108.6697 L
163.296 112.939 180.9711 126.2804 189.8333 165.3364 C
174.5834 167.7531 L
f
U
172.3 66.8 m
165.2676 38.5207 152.5054 29.3438 112 25.8 C
114 8 L
162.9654 12.2841 180.8488 25.5452 190 64 C
172.3 66.8 L
f
u
149.2333 582.6136 m
137.8553 584.8384 127.5133 586.7176 115.9 588.6636 C
114.8333 583.4469 L
126.1364 581.5529 136.5779 579.6857 148.2833 577.3969 C
149.2333 582.6136 L
f
149.4667 483.2273 m
137.8981 485.4893 127.464 487.3727 115.8 489.3273 C
114.2666 481.8938 L
125.7088 479.9765 136.2589 478.1026 148.0666 475.7938 C
149.4667 483.2273 L
f
149.7 383.85 m
137.9409 386.1492 127.4148 388.0369 115.7 390 C
113.7 380.35 L
125.2812 378.4093 135.94 376.5288 147.85 374.2 C
149.7 383.85 L
f
149.9333 284.4636 m
137.9838 286.8001 127.3655 288.6921 115.6 290.6636 C
113.1333 278.7969 L
124.8536 276.8329 135.6211 274.9457 147.6333 272.5969 C
149.9333 284.4636 L
f
150.1667 185.0864 m
138.0266 187.4601 127.3163 189.3563 115.5 191.3364 C
112.5667 177.2531 L
124.4261 175.2658 135.3022 173.3719 147.4167 171.0031 C
150.1667 185.0864 L
f
U
150.4 85.7 m
138.0694 88.111 127.2671 90.0114 115.4 92 C
112 75.7 L
123.9985 73.6894 134.9833 71.7888 147.2 69.4 C
150.4 85.7 L
f
u
144.7333 558.447 m
133.3553 560.6717 123.0133 562.551 111.4 564.497 C
110.3333 559.2802 L
121.6364 557.3862 132.0779 555.519 143.7833 553.2302 C
144.7333 558.447 L
f
144.8667 458.8939 m
133.2981 461.1559 122.864 463.0394 111.2 464.9939 C
109.6666 457.5605 L
121.1088 455.6431 131.6589 453.7693 143.4666 451.4605 C
144.8667 458.8939 L
f
145 359.35 m
133.2409 361.6492 122.7148 363.5369 111 365.5 C
109 355.85 L
120.5812 353.9093 131.24 352.0288 143.15 349.7 C
145 359.35 L
f
145.1333 259.797 m
133.1837 262.1335 122.5655 264.0254 110.8 265.997 C
108.3333 254.1302 L
120.0536 252.1663 130.8211 250.279 142.8333 247.9302 C
145.1333 259.797 L
f
145.2666 160.253 m
133.1266 162.6268 122.4163 164.5229 110.6 166.503 C
107.6667 152.4198 L
119.5261 150.4325 130.4022 148.5386 142.5167 146.1698 C
145.2666 160.253 L
f
U
145.4 60.7 m
133.0694 63.111 122.2671 65.0114 110.4 67 C
107 50.7 L
118.9985 48.6894 129.9833 46.7888 142.2 44.4 C
145.4 60.7 L
f
327.1666 592.1636 m
327.1666 536.9969 L
327.1666 518.6642 333.7231 512.4969 351.6667 512.4969 C
383.3333 512.4969 L
383.3333 517.8303 L
352.1667 517.8303 l
337.1478 517.8303 332.8334 522.1442 332.8334 537.3303 c
332.8334 592.1636 L
327.1666 592.1636 L
f
326.3333 492.3273 m
326.3333 436.9939 L
326.3333 418.2692 332.9664 411.9939 351.3333 411.9939 C
383.6667 411.9939 L
383.6667 419.6607 L
352.3333 419.6607 l
338.3892 419.6607 334.6668 423.3818 334.6668 437.6606 c
334.6668 492.3273 L
326.3333 492.3273 L
f
325.5 392.5 m
325.5 337 L
325.5 317.8834 332.2099 311.5 351 311.5 C
384 311.5 L
384 321.5 L
352.5 321.5 l
339.6304 321.5 336.5 324.6285 336.5 338 c
336.5 392.5 L
325.5 392.5 L
f
u
324.6667 292.6682 m
324.6667 237.0015 L
324.6667 217.4931 331.4533 211.0015 350.6667 211.0015 C
384.3333 211.0015 L
384.3333 223.3348 L
352.6667 223.3348 l
340.8717 223.3348 338.3333 225.8707 338.3333 238.3348 c
338.3333 292.6682 L
324.6667 292.6682 L
f
323.8333 192.8318 m
323.8333 136.9985 L
323.8333 117.0981 330.6967 110.4985 350.3333 110.4985 C
384.6667 110.4985 L
384.6667 125.1652 L
352.8333 125.1652 l
342.1131 125.1652 340.1667 127.1083 340.1667 138.6651 c
340.1667 192.8318 L
323.8333 192.8318 L
f
U
u
323 93 m
323 37 L
323 16.7078 329.9401 10 350 10 C
385 10 L
385 27 L
353 27 l
343.3544 27 342 28.3505 342 39 c
342 93 L
323 93 L
f
U
u
248.1802 543.5686 m
260.4966 533.0257 271.8269 522.712 282.4999 512.3303 C
286.5 516.0803 L
275.6582 526.6262 264.3421 537.0118 251.9303 547.6353 C
248.1802 543.5686 L
f
246.5605 443.1372 m
258.9783 432.5299 270.3883 422.177 281.1999 411.6605 C
287 417.1606 L
276.1023 427.7609 264.5984 438.2771 251.9606 449.0707 C
246.5605 443.1372 L
f
244.9409 342.715 m
257.4601 332.0432 268.9499 321.6511 279.9 311 C
287.5 318.25 L
276.5463 328.9046 264.8547 339.5514 251.9909 350.515 C
244.9409 342.715 L
f
243.3212 242.2836 m
255.9418 231.5474 267.5114 221.1161 278.5999 210.3303 C
288 219.3303 L
276.9903 230.0394 265.111 240.8167 252.0213 251.9503 C
243.3212 242.2836 L
f
241.7016 141.8614 m
254.4237 131.0607 266.073 120.5902 277.3 109.6697 C
288.5 120.4197 L
277.4343 131.1831 265.3673 142.091 252.0516 153.3947 C
241.7016 141.8614 L
f
U
240.0819 41.43 m
252.9054 30.5649 264.6345 20.0552 276 9 C
289 21.5 L
277.8784 32.3179 265.6236 43.3563 252.0819 54.83 C
240.0819 41.43 L
f
272.3 87 m
213 87 L
213 70 L
271 70 L
256.2 85 L
252.0627 58.3194 232.4107 35.3565 205 25.6 C
212 9 L
243.2235 20.1137 267.5998 46.7001 274.3887 76.7193 C
272.3 87 L
f
286.0199 68.3801 m
281.8549 74.3213 276.6487 81.365 272.3 87 C
261.716 79.846 L
266.1138 74.1988 271.1072 67.4153 275.24 61.5201 C
286.0199 68.3801 L
f
377.6704 79.5992 m
303.4319 71.7974 L
304.8323 54.4856 L
383.9673 62.8023 L
369.9933 75.5404 L
369.8387 55.2017 369.4949 54.4348 356.011 44.0909 C
368.011 29.7909 L
382.1188 40.6134 386.8855 46.1544 388.3809 61.6809 C
377.6704 79.5992 L
f
u
193.8334 580.4969 m
190.7058 586.3579 187.7236 591.5471 184.3333 597.1636 C
180.2833 594.8469 L
183.7452 589.1051 186.6682 583.9167 189.65 578.3302 C
193.8334 580.4969 L
f
194.6667 479.9939 m
191.4396 485.9826 188.1628 491.611 184.6667 497.3273 C
179.1666 494.1939 L
182.7056 488.3957 185.9075 482.7974 188.9999 477.0605 C
194.6667 479.9939 L
f
195.5 379.5 m
192.1734 385.6165 188.6019 391.6841 185 397.5 C
178.05 393.55 L
181.6661 387.6955 185.1468 381.6875 188.35 375.8 C
195.5 379.5 L
f
196.3334 278.9969 m
192.9073 285.2413 189.0411 291.748 185.3333 297.6636 C
176.9333 292.8969 L
180.6265 286.9861 184.3861 280.5682 187.7 274.5302 C
196.3334 278.9969 L
f
197.1666 178.5031 m
193.6411 184.8752 189.4803 191.8211 185.6667 197.8364 C
175.8167 192.2531 L
179.587 186.2859 183.6255 179.4582 187.05 173.2698 C
197.1666 178.5031 L
f
U
174.7 91.6 m
178.5475 85.5765 182.8648 78.339 186.4 72 C
198 78 L
194.375 84.5 189.9195 91.8851 186 98 C
174.7 91.6 L
f
u
167.4833 591.6969 m
170.7171 586.3368 173.5815 581.2485 176.6499 575.4969 C
180.8 577.6469 L
177.735 583.3906 174.8224 588.4928 171.5 593.9969 C
167.4833 591.6969 L
f
165.5665 490.8939 m
168.9077 485.4251 172.0523 479.9376 175.1999 474.0938 C
180.8 476.9939 L
177.6375 482.8628 174.4261 488.392 171 493.9939 C
165.5665 490.8939 L
f
163.65 390.1 m
167.0985 384.5227 170.5231 378.6358 173.75 372.7 C
180.8 376.35 L
177.54 382.3442 174.0299 388.3004 170.5 394 C
163.65 390.1 L
f
161.7332 289.2969 m
165.2891 283.611 168.9939 277.3249 172.2999 271.2969 C
180.8 275.6969 L
177.4425 281.8164 173.6336 288.1997 170 293.9969 C
161.7332 289.2969 L
f
159.8167 188.5031 m
163.4799 182.7086 167.4647 176.0232 170.85 169.9031 C
180.8 175.0531 L
177.345 181.2978 173.2373 188.1081 169.5 194.003 C
159.8167 188.5031 L
f
U
157.9 87.7 m
161.6705 81.797 165.9355 74.7122 169.4 68.5 C
180.8 74.4 L
177.2475 80.77 172.8411 88.0074 169 94 C
157.9 87.7 L
f
393.8334 581.3303 m
390.7058 587.1912 387.7236 592.3804 384.3333 597.9969 C
380.2833 595.6803 L
383.7452 589.9384 386.6682 584.75 389.65 579.1636 C
393.8334 581.3303 L
f
394.6667 481.6605 m
391.4396 487.6493 388.1628 493.2777 384.6667 498.9939 C
379.1666 495.8605 L
382.7056 490.0624 385.9075 484.4641 388.9999 478.7272 C
394.6667 481.6605 L
f
397.5 380 m
394.1734 386.1165 390.6019 392.1841 387 398 C
380.05 394.05 L
383.6661 388.1955 387.1468 382.1875 390.35 376.3 C
397.5 380 L
f
u
397.6667 279.3348 m
394.2406 285.5792 390.3744 292.0859 386.6667 298.0015 C
378.2667 293.2349 L
381.9599 287.324 385.7195 280.9062 389.0333 274.8682 C
397.6667 279.3348 L
f
397.8333 178.6651 m
394.3078 185.0373 390.147 191.9832 386.3333 197.9985 C
376.4833 192.4151 L
380.2537 186.4479 384.2921 179.6203 387.7166 173.4318 C
397.8333 178.6651 L
f
U
374.7 91.6 m
378.5475 85.5765 382.8648 78.339 386.4 72 C
398 78 L
394.375 84.5 389.9195 91.8851 386 98 C
374.7 91.6 L
f
367.4833 592.5303 m
370.7171 587.1701 373.5815 582.0819 376.6499 576.3303 C
380.8 578.4803 L
377.735 584.2239 374.8224 589.3261 371.5 594.8303 C
367.4833 592.5303 L
f
365.5665 492.5605 m
368.9077 487.0918 372.0523 481.6042 375.1999 475.7605 C
380.8 478.6605 L
377.6375 484.5295 374.4261 490.0587 371 495.6606 C
365.5665 492.5605 L
f
365.65 390.6 m
369.0985 385.0227 372.5231 379.1358 375.75 373.2 C
382.8 376.85 L
379.54 382.8442 376.0299 388.8004 372.5 394.5 C
365.65 390.6 L
f
u
363.0667 289.6349 m
366.6225 283.949 370.3273 277.6628 373.6334 271.6349 C
382.1333 276.0348 L
378.7758 282.1543 374.967 288.5376 371.3334 294.3348 C
363.0667 289.6349 L
f
360.4833 188.6651 m
364.1464 182.8707 368.1313 176.1852 371.5166 170.0651 C
381.4666 175.2151 L
378.0117 181.4598 373.904 188.2702 370.1667 194.1651 C
360.4833 188.6651 L
f
U
357.9 87.7 m
361.6705 81.797 365.9355 74.7122 369.4 68.5 C
380.8 74.4 L
377.2475 80.77 372.8411 88.0074 369 94 C
357.9 87.7 L
f
u
293.4167 578.3303 m
289.571 583.7966 285.8854 588.8199 281.9167 593.997 C
278.1166 591.2803 L
282.0104 586.1949 285.4985 581.4344 289.5 575.7469 C
293.4167 578.3303 L
f
294.3334 478.6606 m
290.4068 484.2461 286.3959 489.7023 282.3333 494.994 C
277.1333 491.3606 L
281.1458 486.1397 284.9554 480.9469 289 475.1939 C
294.3334 478.6606 L
f
295.25 379 m
291.2426 384.7047 286.9062 390.5937 282.75 396 C
276.15 391.45 L
280.2812 386.0937 284.4123 380.4686 288.5 374.65 C
295.25 379 L
f
296.1667 279.3303 m
292.0784 285.1543 287.4167 291.4761 283.1667 296.997 C
275.1666 291.5303 L
279.4166 286.0386 283.8691 279.9812 288 274.0969 C
296.1667 279.3303 L
f
297.0833 179.6697 m
292.9141 185.6129 287.927 192.3676 283.5833 198.003 C
274.1833 191.6197 L
278.5521 185.9926 283.326 179.5029 287.5 173.5531 C
297.0833 179.6697 L
f
U
298 80 m
293.75 86.0625 288.4375 93.25 284 99 C
273.2 91.7 L
277.6875 85.9375 282.7829 79.0155 287 73 C
298 80 L
f
382.4581 573.097 m
381.6942 552.7548 378.1183 546.545 363.5018 538.7622 C
366.6685 534.1288 L
382.948 542.9695 387.4987 550.5275 388.1685 574.9621 C
384.7364 574.5142 L
304.5922 563.7345 L
305.1735 558.3735 L
386.5666 569.3333 L
382.4581 573.097 L
f
379.9651 472.382 m
379.323 452.0406 376.3936 446.9194 362.0036 438.6243 C
366.937 432.0575 L
383.7104 442.0067 387.8012 449.064 388.337 474.9243 C
384.4436 474.4453 L
304.3601 464.1435 L
305.1053 456.3922 L
386.4445 466.8652 L
379.9651 472.382 L
f
u
379.2936 178.8341 m
303.3306 170.3839 L
304.5672 155.4622 L
384.0881 164.2949 L
371.822 175.2103 L
371.5456 154.8709 370.5554 153.0154 356.845 143.1837 C
367.0783 130.817 L
381.7096 141.3787 386.3661 147.1825 387.6912 164.7017 C
379.2936 178.8341 L
f
380.9169 278.0736 m
303.2294 268.9749 L
304.3021 256.4435 L
384.209 265.7922 L
373.6509 274.8847 L
373.2526 254.5446 371.6159 251.6006 357.6789 242.2811 C
366.1456 231.8478 L
381.3004 242.1486 385.8467 248.2152 387.0015 267.7272 C
380.9169 278.0736 L
f
U
382.5401 377.3086 m
303.1281 367.5614 L
304.037 357.4201 L
384.3299 367.2848 L
375.4797 374.5546 L
374.9595 354.2138 372.6764 350.1812 358.5129 341.3739 C
365.2129 332.8739 L
380.8912 342.9138 385.3273 349.2433 386.3118 370.748 C
382.5401 377.3086 L
f
475.7 92.6 m
479.5475 86.5765 483.8648 79.339 487.4 73 C
499 79 L
495.375 85.5 490.9195 92.8851 487 99 C
475.7 92.6 L
f
458.9 88.7 m
462.6705 82.797 466.9355 75.7122 470.4 69.5 C
481.8 75.4 L
478.2475 81.77 473.8411 89.0074 470 95 C
458.9 88.7 L
f
406.6 80.6 m
412.1106 69.0025 417.9557 56.204 422.8 45.1 C
440.3 52.2 L
435.1385 64.0307 429.2884 76.8704 424 88 C
406.6 80.6 L
f
470.3 70.2 m
467.2803 39.8986 455.0788 29.4339 420.4 26.4 C
423.2 9 L
466.4098 12.7803 484.5484 29.1884 488.3 70.2 C
470.3 70.2 L
f
u
498.5333 179.4697 m
495.0078 185.8419 490.847 192.7878 487.0333 198.803 C
477.1834 193.2197 L
480.9537 187.2526 484.9922 180.4249 488.4167 174.2364 C
498.5333 179.4697 L
f
497.6666 280.3395 m
494.2406 286.5838 490.3744 293.0905 486.6667 299.0061 C
478.2667 294.2395 L
481.96 288.3287 485.7196 281.9108 489.0334 275.8728 C
497.6666 280.3395 L
f
497 381 m
493.6734 387.1165 490.1019 393.1841 486.5 399 C
479.55 395.05 L
483.1661 389.1955 486.6468 383.1874 489.85 377.3 C
497 381 L
f
496.3333 481.6697 m
493.1062 487.6585 489.8294 493.2868 486.3333 499.003 C
480.8334 495.8697 L
484.3724 490.0716 487.5742 484.4734 490.6667 478.7364 C
496.3333 481.6697 L
f
495.6667 582.3302 m
492.5391 588.1912 489.5569 593.3804 486.1667 598.9969 C
482.1166 596.6802 L
485.5785 590.9384 488.5015 585.75 491.4833 580.1636 C
495.6667 582.3302 L
f
U
495 683 m
491.9719 688.7331 489.2844 693.4831 486 699 C
483.4 697.5 L
486.7848 691.8145 489.4289 687.0359 492.3 681.6 C
495 683 L
f
u
461.1834 189.4697 m
464.8465 183.6753 468.8314 176.9898 472.2167 170.8697 C
482.1667 176.0197 L
478.7117 182.2645 474.604 189.0748 470.8667 194.9697 C
461.1834 189.4697 L
f
463.0668 290.6395 m
466.6226 284.9536 470.3273 278.6675 473.6334 272.6395 C
482.1333 277.0395 L
478.7758 283.1589 474.967 289.5422 471.3334 295.3394 C
463.0668 290.6395 L
f
465.15 391.6 m
468.5985 386.0227 472.0231 380.1358 475.25 374.2 C
482.3 377.85 L
479.04 383.8442 475.5299 389.8004 472 395.5 C
465.15 391.6 L
f
467.2334 492.5697 m
470.5745 487.101 473.7191 481.6135 476.8667 475.7698 C
482.4667 478.6697 L
479.3042 484.5387 476.0928 490.0679 472.6667 495.6697 C
467.2334 492.5697 L
f
469.3166 593.5302 m
472.5504 588.1701 475.4149 583.0818 478.4833 577.3302 C
482.6333 579.4803 L
479.5683 585.2239 476.6557 590.3261 473.3333 595.8303 C
469.3166 593.5302 L
f
U
471.4 694.5 m
474.5265 689.2484 477.1108 684.5595 480.1 678.9 C
482.8 680.3 L
479.8325 685.9184 477.2187 690.5935 474 696 C
471.4 694.5 L
f
u
407.3334 181.1197 m
412.8906 169.4683 418.5703 157.0199 423.3167 146.0697 C
438.3666 152.1697 L
433.2945 163.8723 427.5757 176.4054 422.2833 187.503 C
407.3334 181.1197 L
f
408.0667 281.6395 m
413.6706 269.934 419.185 257.8357 423.8334 247.0395 C
436.4332 252.1394 L
431.4505 263.714 425.863 275.9405 420.5666 287.0061 C
408.0667 281.6395 L
f
408.8 382.15 m
414.4505 370.3905 419.7996 358.6424 424.35 348 C
434.5 352.1 L
429.6067 363.5466 424.1504 375.4664 418.85 386.5 C
408.8 382.15 L
f
409.5334 482.6697 m
415.2305 470.8563 420.4143 459.4583 424.8667 448.9697 C
432.5666 452.0697 L
427.7628 463.3883 422.4377 475.0015 417.1333 486.003 C
409.5334 482.6697 L
f
410.2666 583.1802 m
416.0104 571.3128 421.0289 560.2649 425.3833 549.9302 C
430.6334 552.0303 L
425.919 563.2208 420.7252 574.5274 415.4167 585.4969 C
410.2666 583.1802 L
f
U
428.7 652 m
424.075 663.0625 419.0125 674.0625 413.7 685 C
411 683.7 L
416.7904 671.7786 421.6436 661.0809 425.9 650.9 C
428.7 652 L
f
u
472.2001 171.0531 m
469.247 138.9154 456.352 127.6002 420.95 124.503 C
423.3333 109.503 L
466.1285 113.2471 484.1527 129.7421 487.7 171.0531 C
472.2001 171.0531 L
f
474.1001 271.9062 m
471.2137 237.9322 457.6252 225.7665 421.5 222.606 C
423.4667 210.0061 L
465.8471 213.7139 483.757 230.2957 487.1 271.9062 C
474.1001 271.9062 L
f
476 372.75 m
473.1802 336.94 458.8983 323.9237 422.05 320.7 C
423.6 310.5 L
465.5659 314.1715 483.3614 330.8402 486.5 372.75 C
476 372.75 L
f
477.9001 473.6031 m
475.147 435.9569 460.1715 422.09 422.6 418.803 C
423.7333 411.003 L
465.2845 414.6383 482.9657 431.3939 485.9 473.6031 C
477.9001 473.6031 L
f
479.7999 574.4469 m
477.1135 534.9646 461.4446 520.2473 423.15 516.897 C
423.8667 511.4969 L
465.0032 515.0959 482.57 531.9383 485.3 574.4469 C
479.7999 574.4469 L
f
U
481.7 675.3 m
479.0802 633.9815 462.7178 618.4136 423.7 615 C
424 612 L
464.7219 615.5626 482.1743 632.492 484.7 675.3 C
481.7 675.3 L
f
u
272.4167 186.6697 m
213.5 186.6697 L
213.5 172.0031 L
271.3333 172.0031 L
258.7834 184.8697 L
254.245 158.3623 234.1546 135.0086 205.6834 123.9363 C
211.7667 109.6697 L
243.3272 121.827 267.4404 148.0858 274.3457 177.5368 C
272.4167 186.6697 L
f
272.5333 286.3394 m
214 286.3394 L
214 274.0062 L
271.6667 274.0062 L
261.3668 284.7394 L
256.4272 258.4051 235.8986 234.6608 206.3667 222.2727 C
211.5333 210.3395 L
243.4309 223.5404 267.2811 249.4714 274.3027 278.3543 C
272.5333 286.3394 L
f
272.65 386 m
214.5 386 L
214.5 376 L
272 376 L
263.95 384.6 L
258.6093 358.4389 237.6423 334.3038 207.05 320.6 C
211.3 311 L
243.5346 325.2444 267.1217 350.8478 274.2597 379.1626 C
272.65 386 L
f
272.7667 485.6697 m
215 485.6697 L
215 478.0031 L
272.3333 478.0031 L
266.5334 484.4697 L
260.7915 458.4817 239.3863 433.956 207.7333 418.9363 C
211.0666 411.6697 L
243.6383 426.9577 266.9624 452.2335 274.2167 479.9801 C
272.7667 485.6697 L
f
272.8833 585.3303 m
215.5 585.3303 L
215.5 579.9969 L
272.6667 579.9969 L
269.1166 584.3303 L
262.9736 558.5154 241.13 533.599 208.4166 517.2637 C
210.8333 512.3303 L
243.7421 528.6618 266.803 553.6099 274.1738 580.7884 C
272.8833 585.3303 L
f
U
273 685 m
216 685 L
216 682 L
273 682 L
271.7 684.2 L
265.1559 658.5583 242.874 633.2511 209.1 615.6 C
210.6 613 L
243.8458 630.3751 266.6437 654.9956 274.1308 681.6059 C
273 685 L
f
248.8 644 m
261.0149 633.5215 272.2654 623.247 282.8 613 C
285 615 L
274.2142 625.4914 263.0858 635.7465 250.9 646.2 C
248.8 644 L
f
292.5 678 m
288.7352 683.347 285.375 687.9375 281.5 693 C
279.1 691.2 L
282.875 686.25 286.0417 681.9218 290 676.3 C
292.5 678 L
f
u
263.5051 180.0012 m
267.671 174.6296 272.29 168.346 276.2834 162.6532 C
285.6832 168.6531 L
281.5849 174.4953 276.6864 181.1301 272.4167 186.6697 C
263.5051 180.0012 L
f
265.2941 280.1564 m
269.2282 275.0605 273.4728 269.2768 277.3267 263.7862 C
285.3466 268.9262 L
281.315 274.6693 276.7241 280.8952 272.5333 286.3394 C
265.2941 280.1564 L
f
267.083 380.3024 m
270.7852 375.4822 274.6555 370.1983 278.37 364.91 C
285.0099 369.19 L
281.045 374.8341 276.7619 380.6512 272.65 386 C
267.083 380.3024 L
f
268.8721 480.4577 m
272.3424 475.9131 275.8383 471.1291 279.4133 466.0431 C
284.6733 469.4631 L
280.7751 475.0082 276.7995 480.4164 272.7667 485.6697 C
268.8721 480.4577 L
f
270.661 580.6037 m
273.8995 576.3348 277.0211 572.0506 280.4566 567.1669 C
284.3367 569.727 L
280.5051 575.173 276.8373 580.1724 272.8833 585.3303 C
270.661 580.6037 L
f
U
272.4501 680.7589 m
275.4567 676.7656 278.2039 672.9813 281.5 668.3 C
284 670 L
280.2352 675.347 276.875 679.9375 273 685 C
272.4501 680.7589 L
f
85.1 672 m
71 672 L
71 691 L
68 691 L
68 672 L
25 672 L
25 691 L
22 691 L
22 672 L
4 672 L
4 669 L
22 669 L
22 645 L
25 645 L
25 669 L
68 669 L
68 663 L
68 626.6735 58.8831 616.7459 24.7 614 C
25 611 L
60.4688 613.8492 71 624.5983 71 663 C
71 669 L
85.1 669 L
85.1 672 L
f
98 676.5 m
94.9719 682.2331 92.2844 686.9831 89 692.5 C
86.4 691 L
89.7848 685.3145 92.4289 680.5359 95.3 675.1 C
98 676.5 L
f
76.4 684.6 m
79.5265 679.3484 82.1108 674.6595 85.1 669 C
87.8 670.4 L
84.8325 676.0184 82.2187 680.6935 79 686.1 C
76.4 684.6 L
f
u
84.2217 572.3348 m
70.1667 572.3348 L
70.1667 591.0015 L
64.6667 591.0015 L
64.6667 572.3348 L
26.3333 572.3348 L
26.3333 591.0015 L
20.8334 591.0015 L
20.8334 572.3348 L
4 572.3348 L
4 567.0015 L
20.8334 567.0015 L
20.8334 544.3348 L
26.3333 544.3348 L
26.3333 567.0015 L
64.8334 567.0015 L
64.8334 561.1682 L
64.8334 527.3815 56.4794 518.3722 22.8167 515.6681 C
23.3334 510.3348 L
59.6631 513.2532 70.3334 523.9753 70.3334 561.1682 C
70.3334 567.0015 L
84.2217 567.0015 L
84.2217 572.3348 L
f
80.3433 472.6651 m
71.3333 472.6651 L
71.3333 490.9985 L
63.3333 490.9985 L
63.3333 472.6651 L
27.6667 472.6651 L
27.6667 490.9985 L
19.6667 490.9985 L
19.6667 472.6651 L
4 472.6651 L
4 464.9984 L
19.6667 464.9984 L
19.6667 443.6651 L
27.6667 443.6651 L
27.6667 464.9984 L
63.6666 464.9984 L
63.6666 459.3318 L
63.6666 428.085 56.0755 419.9941 22.9333 417.3318 C
23.6667 409.6651 L
60.8574 412.6526 71.6667 423.3477 71.6667 459.3318 C
71.6667 464.9984 L
80.3433 464.9984 L
80.3433 472.6651 L
f
U
u
80.215 373.4988 m
71.5 373.4988 L
71.5 390.9989 L
61 390.9989 L
61 373.4988 L
29 373.4988 L
29 390.9989 L
18.5 390.9989 L
18.5 373.4988 L
3.5 373.4988 L
3.5 363.4988 L
18.5 363.4988 L
18.5 342.9988 L
29 342.9988 L
29 363.4988 L
61.5 363.4988 L
61.5 357.4988 L
61.5 328.7919 54.6717 321.6193 22.05 318.9988 C
23 308.9988 L
61.0518 312.0555 72 322.7236 72 357.4988 C
72 363.4988 L
80.215 363.4988 L
80.215 373.4988 L
f
80.0866 274.3325 m
71.6667 274.3325 L
71.6667 290.9992 L
58.6667 290.9992 L
58.6667 274.3325 L
30.3333 274.3325 L
30.3333 290.9992 L
17.3333 290.9992 L
17.3333 274.3325 L
3 274.3325 L
3 261.9992 L
17.3333 261.9992 L
17.3333 242.3325 L
30.3333 242.3325 L
30.3333 261.9992 L
59.3333 261.9992 L
59.3333 255.6659 L
59.3333 229.4987 53.268 223.2446 21.1666 220.6659 C
22.3333 208.3325 L
61.2461 211.4584 72.3333 222.0994 72.3333 255.6659 C
72.3333 261.9992 L
80.0866 261.9992 L
80.0866 274.3325 L
f
79.9583 175.1663 m
71.8333 175.1663 L
71.8333 190.9996 L
56.3333 190.9996 L
56.3333 175.1663 L
31.6667 175.1663 L
31.6667 190.9996 L
16.1667 190.9996 L
16.1667 175.1663 L
2.5 175.1663 L
2.5 160.4996 L
16.1667 160.4996 L
16.1667 141.6663 L
31.6667 141.6663 L
31.6667 160.4996 L
57.1667 160.4996 L
57.1667 153.8329 L
57.1667 130.2056 51.8643 124.8698 20.2833 122.3329 C
21.6667 107.6663 L
61.4405 110.8613 72.6667 121.4753 72.6667 153.8329 C
72.6667 160.4996 L
79.9583 160.4996 L
79.9583 175.1663 L
f
U
21 7 m
61.6348 10.2642 73 20.8512 73 52 C
73 59 L
79.83 59 L
79.83 76 L
72 76 L
72 91 L
54 91 L
54 76 L
33 76 L
33 91 L
15 91 L
15 76 L
2 76 L
2 59 L
15 59 L
15 41 L
33 41 L
33 59 L
55 59 L
55 52 l
55 30.9125 50.4606 26.4951 19.4 24 C
21 7 L
f
u
98.1667 576.9224 m
95.0692 582.7291 92.1242 587.8567 88.7667 593.4223 C
84.8108 591.159 L
88.2407 585.4674 91.1277 580.3393 94.08 574.8057 C
98.1667 576.9224 L
f
98.333 468.5268 m
95.1663 474.4073 91.9637 479.9125 88.533 485.5269 C
83.2213 482.5002 L
86.6963 476.8024 89.8261 471.3248 92.8597 465.6935 C
98.333 468.5268 L
f
U
u
98.4998 370.8951 m
95.2638 376.8492 91.8036 382.7321 88.2997 388.3952 C
81.6322 384.6051 L
85.1523 378.9012 88.525 373.0741 91.6398 367.3451 C
98.4998 370.8951 L
f
98.6665 273.2634 m
95.3613 279.2911 91.6436 285.5517 88.0665 291.2634 C
80.0432 286.7101 L
83.6083 281 87.2239 274.8234 90.4199 268.9968 C
98.6665 273.2634 L
f
98.8332 175.6318 m
95.4587 181.7331 91.4835 188.3713 87.8332 194.1317 C
78.4541 188.815 L
82.0642 183.0989 85.9227 176.5728 89.2 170.6484 C
98.8332 175.6318 L
f
U
76.8651 90.92 m
80.5202 85.1977 84.6216 78.3221 87.9801 72.3001 C
99 78.0001 L
95.5562 84.175 91.3235 91.1909 87.6 97 C
76.8651 90.92 L
f
u
75.1508 583.0415 m
78.3533 577.7306 81.1821 572.7014 84.2217 567.0015 C
88.2767 569.1024 L
85.2413 574.7929 82.3654 579.8348 79.075 585.289 C
75.1508 583.0415 L
f
73.9013 472.6651 m
77.1797 467.2948 80.2531 461.9254 83.343 456.1851 C
88.753 458.9868 L
85.6497 464.7495 82.5119 470.1582 79.1497 475.6602 C
73.9013 472.6651 L
f
U
u
72.6522 373.0525 m
76.0065 367.6228 79.3245 361.9132 82.4647 356.1325 C
89.2297 359.6351 L
86.0585 365.47 82.6586 371.2454 79.2247 376.7951 C
72.6522 373.0525 L
f
71.4031 273.44 m
74.8333 267.9509 78.3959 261.901 81.5865 256.08 C
89.7064 260.2834 L
86.4674 266.1904 82.8054 272.3326 79.2998 277.93 C
71.4031 273.44 L
f
70.154 173.8274 m
73.6601 168.279 77.4672 161.8888 80.7082 156.0275 C
90.1831 160.9317 L
86.8762 166.9109 82.9521 173.4198 79.3748 179.065 C
70.154 173.8274 L
f
U
68.9049 74.2149 m
72.4869 68.6071 76.5386 61.8766 79.8299 55.975 C
90.6598 61.58 L
87.285 67.6314 83.0989 74.507 79.4499 80.1999 C
68.9049 74.2149 L
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
