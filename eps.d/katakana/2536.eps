%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (2536.eps)
%%CreationDate: (5/19/04) (4:12 PM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
1 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
500 600 m
500 700 L
400 700 L
400 600 L
500 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
400 600 m
400 700 L
300 700 L
300 600 L
400 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
500 500 m
500 600 L
400 600 L
400 500 L
500 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
400 500 m
400 600 L
300 600 L
300 500 L
400 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
0 Ap
0 O
0 g
1 D
89 673 m
71 673 L
71 691 L
68 691 L
68 673 L
25 673 L
25 691 L
22 691 L
22 673 L
6 673 L
6 670 L
22 670 L
22 645 L
25 645 L
25 670 L
68 670 L
68 663 L
68 626.6735 58.8831 616.7459 24.7 614 C
25 611 L
60.4688 613.8492 71 624.5983 71 663 C
71 670 L
89 670 L
89 673 L
f
250.8 644 m
263.0149 633.5215 274.2654 623.247 284.8 613 C
287 615 L
276.2142 625.4914 265.0858 635.7465 252.9 646.2 C
250.8 644 L
f
274 685 m
218 685 L
218 682 L
275 682 L
273.6 684 L
266.3821 659.4214 245.101 634.8662 211 615.5 C
212.6 613 L
246.3388 632.1605 268.2361 656.3918 276.1908 682.1915 C
274 685 L
f
186 671.5 m
178.8497 630.9501 163.3112 618.0781 116.7 614 C
117 611 L
164.9492 615.1951 181.583 628.9378 189 671 C
186 671.5 L
f
149 681 m
137.8125 683.1875 127.5625 685.0625 116 687 C
115.4 684 L
126.564 682.1293 136.8968 680.2688 148.5 678 C
149 681 L
f
144.6 657 m
133.4125 659.1875 123.1625 661.0625 111.6 663 C
111 660 L
122.164 658.1293 132.4968 656.2688 144.1 654 C
144.6 657 L
f
481.3 670.8 m
477.9865 633.1468 462.0762 618.3575 423.7 615 C
424 612 L
463.2619 615.4349 480.8243 631.104 484.3 670.6 C
481.3 670.8 L
f
410 683.3 m
416.875 673.7625 423.697 663.5572 430 653.3 C
432.6 654.8 L
426.3308 665.0023 419.583 675.1739 412.5 685 C
410 683.3 L
f
384 616 m
353 616 l
336.9065 616 332 620.9065 332 637 c
332 692 L
329 692 L
329 637 L
329 619.0591 335.4797 613 353 613 C
384 613 L
384 616 L
f
385.9512 677.8119 m
385.0654 657.4691 380.8431 650.1707 366 642.9 C
367.4 640.2 L
383.1856 647.9323 388.1963 655.9909 389 679 C
305.8243 667.3255 L
306.2418 664.3547 L
387.6886 675.8014 L
385.9512 677.8119 L
f
96 646 m
92.2352 651.347 88.875 655.9375 85 661 C
82.6 659.2 L
86.375 654.25 89.5417 649.9218 93.5 644.3 C
96 646 L
f
83 639 m
79.2352 644.347 75.875 648.9375 72 654 C
69.6 652.2 L
73.375 647.25 76.5417 642.9218 80.5 637.3 C
83 639 L
f
196 681 m
192.2352 686.347 188.875 690.9375 185 696 C
182.6 694.2 L
186.375 689.25 189.5417 684.9218 193.5 679.3 C
196 681 L
f
180 677 m
176.2352 682.347 172.875 686.9375 169 692 C
166.6 690.2 L
170.375 685.25 173.5417 680.9218 177.5 675.3 C
180 677 L
f
296 681 m
292.2352 686.347 288.875 690.9375 285 696 C
282.6 694.2 L
286.375 689.25 289.5417 684.9218 293.5 679.3 C
296 681 L
f
281 677 m
277.2352 682.347 273.875 686.9375 270 692 C
267.6 690.2 L
271.375 685.25 274.5417 680.9218 278.5 675.3 C
281 677 L
f
396 681 m
392.2352 686.347 388.875 690.9375 385 696 C
382.6 694.2 L
386.375 689.25 389.5417 684.9218 393.5 679.3 C
396 681 L
f
380 677 m
376.2352 682.347 372.875 686.9375 369 692 C
366.6 690.2 L
370.375 685.25 373.5417 680.9218 377.5 675.3 C
380 677 L
f
496 681 m
492.2352 686.347 488.875 690.9375 485 696 C
482.6 694.2 L
486.375 689.25 489.5417 684.9218 493.5 679.3 C
496 681 L
f
480 677 m
476.2352 682.347 472.875 686.9375 469 692 C
466.6 690.2 L
470.375 685.25 473.5417 680.9218 477.5 675.3 C
480 677 L
f
u
88.8333 573.997 m
71.3334 573.997 L
71.3334 591.3303 L
65.8333 591.3303 L
65.8333 573.997 L
26.6667 573.997 L
26.6667 591.3303 L
21.1667 591.3303 L
21.1667 573.997 L
5.6667 573.997 L
5.6667 568.6636 L
21.1667 568.6636 L
21.1667 544.6636 L
26.6667 544.6636 L
26.6667 568.6636 L
65.8333 568.6636 L
65.8333 561.4969 L
65.8333 527.7103 57.4793 518.7011 23.8166 515.997 C
24.3333 510.6636 L
60.6631 513.582 71.3334 524.3041 71.3334 561.4969 C
71.3334 568.6636 L
88.8333 568.6636 L
88.8333 573.997 L
f
88.6667 474.994 m
71.6667 474.994 L
71.6667 491.6606 L
63.6665 491.6606 L
63.6665 474.994 L
28.3334 474.994 L
28.3334 491.6606 L
20.3333 491.6606 L
20.3333 474.994 L
5.3333 474.994 L
5.3333 467.3272 L
20.3333 467.3272 L
20.3333 444.3272 L
28.3334 444.3272 L
28.3334 467.3272 L
63.6665 467.3272 L
63.6665 459.9938 L
63.6665 428.7471 56.0755 420.6563 22.9333 417.994 C
23.6666 410.3272 L
60.8575 413.3147 71.6667 424.0098 71.6667 459.9938 C
71.6667 467.3272 L
88.6667 467.3272 L
88.6667 474.994 L
f
88.5 376 m
72 376 L
72 392 L
61.5 392 L
61.5 376 L
30 376 L
30 392 L
19.5 392 L
19.5 376 L
5 376 L
5 366 L
19.5 366 L
19.5 344 L
30 344 L
30 366 L
61.5 366 L
61.5 358.5 L
61.5 329.793 54.6718 322.6205 22.05 320 C
23 310 L
61.0518 313.0567 72 323.7247 72 358.5 C
72 366 L
88.5 366 L
88.5 376 L
f
88.3333 276.997 m
72.3334 276.997 L
72.3334 292.3303 L
59.3333 292.3303 L
59.3333 276.997 L
31.6667 276.997 L
31.6667 292.3303 L
18.6667 292.3303 L
18.6667 276.997 L
4.6667 276.997 L
4.6667 264.6636 L
18.6667 264.6636 L
18.6667 243.6636 L
31.6667 243.6636 L
31.6667 264.6636 L
59.3333 264.6636 L
59.3333 256.9969 L
59.3333 230.8298 53.268 224.5757 21.1666 221.997 C
22.3333 209.6636 L
61.2461 212.7895 72.3334 223.4305 72.3334 256.9969 C
72.3334 264.6636 L
88.3333 264.6636 L
88.3333 276.997 L
f
88.1667 178.003 m
72.6667 178.003 L
72.6667 192.6697 L
57.1667 192.6697 L
57.1667 178.003 L
33.3333 178.003 L
33.3333 192.6697 L
17.8334 192.6697 L
17.8334 178.003 L
4.3334 178.003 L
4.3334 163.3364 L
17.8334 163.3364 L
17.8334 143.3364 L
33.3333 143.3364 L
33.3333 163.3364 L
57.1667 163.3364 L
57.1667 155.5031 L
57.1667 131.8757 51.8644 126.5399 20.2834 124.003 C
21.6667 109.3364 L
61.4405 112.5314 72.6667 123.1454 72.6667 155.5031 C
72.6667 163.3364 L
88.1667 163.3364 L
88.1667 178.003 L
f
U
21 9 m
61.6348 12.2642 73 22.8512 73 54 C
73 62 L
88 62 L
88 79 L
73 79 L
73 93 L
55 93 L
55 79 L
35 79 L
35 93 L
17 93 L
17 79 L
4 79 L
4 62 L
17 62 L
17 43 L
35 43 L
35 62 L
55 62 L
55 54 l
55 32.9125 50.4606 28.4951 19.4 26 C
21 9 L
f
u
183.7166 570.7136 m
176.5859 532.2089 161.5102 519.9527 115.9166 515.9637 C
116.5 510.4969 L
164.6186 514.7069 181.4607 528.3693 189.1667 569.8302 C
183.7166 570.7136 L
f
181.4332 469.9272 m
174.3222 433.4676 159.7092 421.8273 115.1333 417.9273 C
116 409.9939 L
164.2879 414.2186 181.3383 427.8008 189.3333 468.6605 C
181.4332 469.9272 L
f
179.15 369.15 m
172.0586 334.7354 157.9083 323.7109 114.35 319.9 C
115.5 309.5 L
163.9573 313.7396 181.2159 327.2415 189.5 367.5 C
179.15 369.15 L
f
176.8666 268.3636 m
169.7949 235.9942 156.1073 225.5856 113.5666 221.8637 C
115 208.9969 L
163.6266 213.2513 181.0936 226.673 189.6667 266.3302 C
176.8666 268.3636 L
f
174.5834 167.5864 m
167.5313 137.2619 154.3064 127.4692 112.7834 123.8363 C
114.5 108.5031 L
163.296 112.7723 180.9712 126.1137 189.8333 165.1697 C
174.5834 167.5864 L
f
U
172.3 66.8 m
165.2676 38.5207 152.5054 29.3438 112 25.8 C
114 8 L
162.9654 12.284 180.8488 25.5452 190 64 C
172.3 66.8 L
f
u
149.2333 581.7803 m
137.8553 584.0051 127.5133 585.8843 115.9 587.8303 C
114.8333 582.6136 L
126.1364 580.7196 136.5779 578.8524 148.2833 576.5636 C
149.2333 581.7803 L
f
149.4667 482.5606 m
137.8981 484.8226 127.464 486.7061 115.8 488.6606 C
114.2666 481.2272 L
125.7088 479.3098 136.2589 477.4359 148.0666 475.1271 C
149.4667 482.5606 L
f
149.7 383.35 m
137.9409 385.6492 127.4148 387.5369 115.7 389.5 C
113.7 379.85 L
125.2812 377.9093 135.94 376.0288 147.85 373.7 C
149.7 383.35 L
f
149.9333 284.1303 m
137.9838 286.4668 127.3656 288.3587 115.6 290.3303 C
113.1333 278.4636 L
124.8536 276.4996 135.6211 274.6124 147.6333 272.2636 C
149.9333 284.1303 L
f
150.1667 184.9197 m
138.0266 187.2934 127.3163 189.1896 115.5 191.1697 C
112.5667 177.0864 L
124.4261 175.0991 135.3022 173.2052 147.4167 170.8364 C
150.1667 184.9197 L
f
U
150.4 85.7 m
138.0694 88.111 127.2671 90.0114 115.4 92 C
112 75.7 L
123.9985 73.6894 134.9833 71.7888 147.2 69.4 C
150.4 85.7 L
f
u
144.7333 557.6136 m
133.3553 559.8384 123.0133 561.7176 111.4 563.6636 C
110.3333 558.4469 L
121.6364 556.5529 132.0779 554.6857 143.7833 552.3969 C
144.7333 557.6136 L
f
144.8667 458.2273 m
133.2981 460.4893 122.864 462.3727 111.2 464.3273 C
109.6666 456.8938 L
121.1088 454.9765 131.6589 453.1026 143.4666 450.7938 C
144.8667 458.2273 L
f
145 358.85 m
133.2409 361.1492 122.7148 363.0369 111 365 C
109 355.35 L
120.5812 353.4093 131.24 351.5288 143.15 349.2 C
145 358.85 L
f
145.1333 259.4636 m
133.1838 261.8001 122.5655 263.6921 110.8 265.6636 C
108.3333 253.7969 L
120.0536 251.8329 130.8211 249.9457 142.8333 247.5969 C
145.1333 259.4636 L
f
145.2666 160.0864 m
133.1266 162.4601 122.4163 164.3563 110.6 166.3364 C
107.6667 152.2531 L
119.5261 150.2658 130.4022 148.3719 142.5167 146.0031 C
145.2666 160.0864 L
f
U
145.4 60.7 m
133.0694 63.111 122.2671 65.0114 110.4 67 C
107 50.7 L
118.9985 48.6894 129.9833 46.7888 142.2 44.4 C
145.4 60.7 L
f
u
249.0136 543.5686 m
261.3299 533.0257 272.6602 522.712 283.3333 512.3303 C
287.3334 516.0803 L
276.4916 526.6261 265.1754 537.0118 252.7636 547.6353 C
249.0136 543.5686 L
f
247.2272 443.1372 m
259.645 432.5298 271.055 422.1769 281.8666 411.6605 C
287.6667 417.1606 L
276.7689 427.7609 265.2651 438.2771 252.6273 449.0707 C
247.2272 443.1372 L
f
245.4409 342.715 m
257.9601 332.0432 269.4499 321.6511 280.4 311 C
288 318.25 L
277.0463 328.9046 265.3547 339.5514 252.4909 350.515 C
245.4409 342.715 L
f
243.6545 242.2836 m
256.2752 231.5474 267.8447 221.116 278.9333 210.3303 C
288.3334 219.3303 L
277.3236 230.0394 265.4443 240.8167 252.3546 251.9503 C
243.6545 242.2836 L
f
241.8683 141.8614 m
254.5904 131.0607 266.2397 120.5902 277.4667 109.6697 C
288.6667 120.4197 L
277.601 131.1831 265.534 142.091 252.2182 153.3946 C
241.8683 141.8614 L
f
U
240.0819 41.43 m
252.9054 30.5649 264.6345 20.0552 276 9 C
289 21.5 L
277.8784 32.3179 265.6236 43.3563 252.0819 54.83 C
240.0819 41.43 L
f
u
272.8333 585.3303 m
217.1667 585.3303 L
217.1667 579.9969 L
274.3333 579.9969 L
270.6999 584.1636 L
263.9954 559.2347 242.9859 534.9449 210 517.1803 C
212.5 512.3303 L
245.8196 530.1496 268.13 554.7734 275.8905 581.2764 C
272.8333 585.3303 L
f
271.6666 485.6606 m
216.3333 485.6606 L
216.3333 477.9938 L
273.6666 477.9938 L
267.7998 484.3273 L
261.6088 459.0479 240.8708 435.0235 208.9999 418.8607 C
212.4 411.6605 L
245.3004 428.1387 268.024 453.155 275.5901 480.3612 C
271.6666 485.6606 L
f
270.5 386 m
215.5 386 L
215.5 376 L
273 376 L
264.9 384.5 L
259.2224 358.8704 238.7559 335.1113 208 320.55 C
212.3 311 L
244.7812 326.1371 267.918 351.5459 275.2897 379.4554 C
270.5 386 L
f
269.3333 286.3303 m
214.6667 286.3303 L
214.6667 273.9969 L
272.3333 273.9969 L
261.9999 284.6636 L
256.8358 258.6837 236.6407 235.19 207 222.2303 C
212.2 210.3303 L
244.2619 224.1261 267.8119 249.9275 274.9894 278.5402 C
269.3333 286.3303 L
f
268.1667 186.6697 m
213.8334 186.6697 L
213.8334 172.0031 L
271.6667 172.0031 L
259.1001 184.8364 L
254.4493 158.5061 234.5258 135.2778 206 123.9196 C
212.1 109.6697 L
243.7427 122.1246 267.7059 148.3185 274.689 177.6344 C
268.1667 186.6697 L
f
U
267 87 m
213 87 L
213 70 L
271 70 L
256.2 85 L
252.0627 58.3194 232.4107 35.3565 205 25.6 C
212 9 L
243.2235 20.1136 267.5998 46.7001 274.3887 76.7193 C
267 87 L
f
u
479.4666 570.897 m
476.1914 534.2621 460.7189 520.3505 423.15 517.0637 C
423.8333 511.6636 L
463.4487 515.1295 481.3026 530.6843 484.9167 570.3636 C
479.4666 570.897 L
f
477.6332 470.9939 m
474.3963 435.3774 459.3616 422.3435 422.6 419.1274 C
423.6667 411.3272 L
463.6356 414.824 481.7808 430.2646 485.5334 470.1272 C
477.6332 470.9939 L
f
475.8 371.1 m
472.6014 336.5017 458.0044 324.3456 422.05 321.2 C
423.5 311 L
463.8224 314.5277 482.259 329.854 486.15 369.9 C
475.8 371.1 L
f
473.9666 271.197 m
470.8064 237.617 456.647 226.3386 421.5 223.2637 C
423.3333 210.6636 L
464.0092 214.2223 482.7373 229.4343 486.7667 269.6636 C
473.9666 271.197 L
f
472.1334 171.303 m
469.0115 138.7413 455.2898 128.3406 420.95 125.3363 C
423.1667 110.3364 L
464.196 113.926 483.2155 129.0237 487.3833 169.4364 C
472.1334 171.303 L
f
U
470.3 71.4 m
467.2164 39.8566 453.9325 30.3336 420.4 27.4 C
423 10 L
464.3829 13.6205 483.6937 28.604 488 69.2 C
470.3 71.4 L
f
u
409.3333 582.6803 m
416.241 572.9461 423.1904 562.4482 429.5 552.1802 C
434.4167 554.9636 L
428.0661 565.2984 421.1835 575.761 414.1501 585.6636 C
409.3333 582.6803 L
f
408.6666 482.0605 m
415.607 472.1296 422.6838 461.3392 429 451.0605 C
436.2334 455.1272 L
429.8014 465.5945 422.7841 476.3481 415.8001 486.3273 C
408.6666 482.0605 L
f
408 381.45 m
414.973 371.3224 422.1772 360.2394 428.5 349.95 C
438.05 355.3 L
431.5365 365.8997 424.3845 376.9443 417.45 387 C
408 381.45 L
f
407.3333 280.8302 m
414.339 270.5059 421.6706 259.1304 428 248.8302 C
439.8667 255.4636 L
433.2718 266.1958 425.985 277.5314 419.1 287.6636 C
407.3333 280.8302 L
f
406.6667 180.2197 m
413.7051 169.6987 421.164 158.0307 427.5 147.7197 C
441.6833 155.6363 L
435.0069 166.5011 427.5854 178.1276 420.7499 188.3364 C
406.6667 180.2197 L
f
U
406 79.6 m
413.0711 68.8823 420.6574 56.9217 427 46.6 C
443.5 55.8 L
436.7422 66.7972 429.1859 78.7147 422.4 89 C
406 79.6 L
f
u
328 592.1636 m
328 536.9969 L
328 518.6642 334.5564 512.4969 352.5 512.4969 C
384.1667 512.4969 L
384.1667 517.8303 L
353 517.8303 l
337.9812 517.8303 333.6667 522.1442 333.6667 537.3303 c
333.6667 592.1636 L
328 592.1636 L
f
326.9999 492.3273 m
326.9999 436.9939 L
326.9999 418.2692 333.6331 411.9939 352 411.9939 C
384.3333 411.9939 L
384.3333 419.6607 L
353 419.6607 l
339.0559 419.6607 335.3334 423.3818 335.3334 437.6606 c
335.3334 492.3273 L
326.9999 492.3273 L
f
326 392.5 m
326 337 L
326 317.8834 332.7099 311.5 351.5 311.5 C
384.5 311.5 L
384.5 321.5 L
353 321.5 l
340.1304 321.5 337 324.6285 337 338 c
337 392.5 L
326 392.5 L
f
325 292.6636 m
325 236.9969 L
325 217.4885 331.7866 210.9969 351 210.9969 C
384.6667 210.9969 L
384.6667 223.3303 L
353 223.3303 l
341.2051 223.3303 338.6667 225.8661 338.6667 238.3303 c
338.6667 292.6636 L
325 292.6636 L
f
324 192.8364 m
324 137.003 L
324 117.1027 330.8634 110.5031 350.5 110.5031 C
384.8333 110.5031 L
384.8333 125.1697 L
353 125.1697 l
342.2797 125.1697 340.3333 127.1128 340.3333 138.6697 c
340.3333 192.8364 L
324 192.8364 L
f
U
u
323 93 m
323 37 L
323 16.7078 329.9401 10 350 10 C
385 10 L
385 27 L
353 27 l
343.3544 27 342 28.3505 342 39 c
342 93 L
323 93 L
f
U
u
383.2915 577.4303 m
382.5275 557.0881 378.9517 550.8783 364.3351 543.0955 C
367.5018 538.4621 L
383.7814 547.3028 388.332 554.8608 389.0018 579.2955 C
305.4255 568.0678 L
306.0069 562.7067 L
387.0684 573.6318 L
383.2915 577.4303 L
f
380.6317 477.0486 m
379.9897 456.7072 377.0603 451.586 362.6702 443.2909 C
367.6036 436.7241 L
384.3772 446.6734 388.4678 453.7306 389.0036 479.5909 C
305.0268 468.8101 L
305.7719 461.0588 L
386.4481 471.4621 L
380.6317 477.0486 L
f
377.9723 376.6761 m
377.4521 356.3354 375.169 352.3027 361.0055 343.4954 C
367.7055 334.9955 L
384.9729 346.0531 388.6036 352.6097 389.0055 379.8955 C
304.6281 369.5614 L
305.537 359.4201 L
385.828 369.3018 L
377.9723 376.6761 L
f
375.3125 276.2945 m
374.9142 255.9544 373.2776 253.0104 359.3406 243.6909 C
367.8073 233.2575 L
385.5687 245.4236 388.7393 251.4796 389.0073 280.1909 C
304.2293 270.3037 L
305.3021 257.7722 L
385.2077 267.1322 L
375.3125 276.2945 L
f
372.6531 175.9221 m
372.3766 155.5827 371.3863 153.7271 357.6759 143.8955 C
367.9091 131.5289 L
386.1645 144.8034 388.8751 150.3587 389.0091 180.4955 C
303.8306 171.0551 L
305.0672 156.1335 L
384.5876 164.972 L
372.6531 175.9221 L
f
U
369.9933 75.5404 m
369.8387 55.2017 369.4949 54.4347 356.011 44.0909 C
368.011 29.7909 L
386.7602 44.1739 389.0108 49.2286 389.011 80.7909 C
303.4319 71.7974 L
304.8323 54.4856 L
383.9673 62.8023 L
369.9933 75.5404 L
f
u
196.5 580.6636 m
192.6543 586.1298 188.9687 591.1532 185 596.3303 C
181.1999 593.6136 L
185.0937 588.5282 188.5819 583.7677 192.5833 578.0802 C
196.5 580.6636 L
f
197 480.3272 m
193.0735 485.9127 189.0625 491.3689 185 496.6606 C
179.7999 493.0272 L
183.8124 487.8063 187.622 482.6135 191.6666 476.8605 C
197 480.3272 L
f
197.5 380 m
193.4926 385.7047 189.1562 391.5937 185 397 C
178.4 392.45 L
182.5312 387.0937 186.6623 381.4686 190.75 375.65 C
197.5 380 L
f
198 279.6636 m
193.9117 285.4876 189.25 291.8095 185 297.3303 C
177 291.8636 L
181.25 286.3719 185.7025 280.3145 189.8333 274.4302 C
198 279.6636 L
f
198.5 179.3364 m
194.3309 185.2796 189.3437 192.0343 185 197.6697 C
175.6 191.2864 L
179.9688 185.6593 184.7427 179.1696 188.9167 173.2197 C
198.5 179.3364 L
f
U
199 79 m
194.75 85.0625 189.4375 92.25 185 98 C
174.2 90.7 L
178.6875 84.9375 183.7829 78.0155 188 72 C
199 79 L
f
u
180 576.6636 m
176.1543 582.1298 172.4687 587.1532 168.5 592.3303 C
164.6999 589.6136 L
168.5937 584.5282 172.0818 579.7677 176.0833 574.0802 C
180 576.6636 L
f
180 476.3272 m
176.0735 481.9127 172.0625 487.3689 168 492.6606 C
162.7999 489.0272 L
166.8124 483.8063 170.622 478.6135 174.6666 472.8605 C
180 476.3272 L
f
180 376 m
175.9926 381.7047 171.6562 387.5937 167.5 393 C
160.9 388.45 L
165.0312 383.0937 169.1623 377.4686 173.25 371.65 C
180 376 L
f
180 275.6636 m
175.9117 281.4876 171.25 287.8095 167 293.3303 C
158.9999 287.8636 L
163.2499 282.3719 167.7024 276.3145 171.8333 270.4302 C
180 275.6636 L
f
180 175.3364 m
175.8309 181.2796 170.8438 188.0343 166.5 193.6697 C
157.1 187.2864 L
161.4688 181.6593 166.2427 175.1696 170.4167 169.2197 C
180 175.3364 L
f
U
180 75 m
175.75 81.0625 170.4375 88.25 166 94 C
155.2 86.7 L
159.6875 80.9375 164.7829 74.0155 169 68 C
180 75 L
f
u
296.5 580.8303 m
292.6543 586.2965 288.9687 591.3199 285 596.497 C
281.1999 593.7803 L
285.0937 588.6949 288.5819 583.9344 292.5833 578.2469 C
296.5 580.8303 L
f
297 480.6606 m
293.0735 486.246 289.0625 491.7023 285 496.9939 C
279.7999 493.3605 L
283.8124 488.1397 287.622 482.9469 291.6666 477.1938 C
297 480.6606 L
f
297.5 380.5 m
293.4926 386.2047 289.1562 392.0937 285 397.5 C
278.4 392.95 L
282.5312 387.5937 286.6623 381.9686 290.75 376.15 C
297.5 380.5 L
f
298 280.3303 m
293.9117 286.1543 289.25 292.4761 285 297.997 C
277 292.5303 L
281.25 287.0386 285.7025 280.9812 289.8333 275.0969 C
298 280.3303 L
f
298.5 180.1697 m
294.3309 186.113 289.3437 192.8676 285 198.503 C
275.6 192.1197 L
279.9688 186.4926 284.7427 180.0029 288.9167 174.0531 C
298.5 180.1697 L
f
U
299 80 m
294.75 86.0625 289.4375 93.25 285 99 C
274.2 91.7 L
278.6875 85.9375 283.7829 79.0155 288 73 C
299 80 L
f
u
281.1667 576.3303 m
277.321 581.7965 273.6354 586.8199 269.6667 591.9969 C
265.8666 589.2803 L
269.7604 584.1949 273.2485 579.4343 277.25 573.7469 C
281.1667 576.3303 L
f
281.3333 475.6605 m
277.4068 481.246 273.3958 486.7022 269.3333 491.9939 C
264.1332 488.3605 L
268.1457 483.1397 271.9553 477.9468 275.9999 472.1938 C
281.3333 475.6605 L
f
281.5 375 m
277.4926 380.7047 273.1562 386.5937 269 392 C
262.4 387.45 L
266.5312 382.0937 270.6623 376.4686 274.75 370.65 C
281.5 375 L
f
281.6667 274.3303 m
277.5784 280.1543 272.9167 286.4761 268.6667 291.9969 C
260.6666 286.5302 L
264.9166 281.0386 269.3691 274.9812 273.5 269.0969 C
281.6667 274.3303 L
f
281.8333 173.6697 m
277.6642 179.613 272.6771 186.3676 268.3334 192.003 C
258.9334 185.6197 L
263.3021 179.9926 268.0761 173.5029 272.25 167.5531 C
281.8333 173.6697 L
f
U
282 73 m
277.75 79.0625 272.4375 86.25 268 92 C
257.2 84.7 L
261.6875 78.9375 266.7829 72.0155 271 66 C
282 73 L
f
u
396.5 580.6636 m
392.6543 586.1298 388.9687 591.1532 385 596.3303 C
381.1999 593.6136 L
385.0937 588.5282 388.5819 583.7677 392.5833 578.0802 C
396.5 580.6636 L
f
398 480.3272 m
394.0735 485.9127 390.0625 491.3689 386 496.6606 C
380.7999 493.0272 L
384.8124 487.8063 388.622 482.6135 392.6666 476.8605 C
398 480.3272 L
f
397.5 380 m
393.4926 385.7047 389.1562 391.5937 385 397 C
378.4 392.45 L
382.5312 387.0937 386.6623 381.4686 390.75 375.65 C
397.5 380 L
f
398 279.6636 m
393.9117 285.4876 389.25 291.8095 385 297.3303 C
377 291.8636 L
381.25 286.3719 385.7025 280.3145 389.8333 274.4302 C
398 279.6636 L
f
398.5 179.3364 m
394.3309 185.2796 389.3437 192.0343 385 197.6697 C
375.6 191.2864 L
379.9688 185.6593 384.7427 179.1696 388.9167 173.2197 C
398.5 179.3364 L
f
U
399 79 m
394.75 85.0625 389.4375 92.25 385 98 C
374.2 90.7 L
378.6875 84.9375 383.7829 78.0155 388 72 C
399 79 L
f
u
380.3334 576.1636 m
376.4877 581.6298 372.8021 586.6532 368.8333 591.8303 C
365.0333 589.1136 L
368.927 584.0282 372.4152 579.2677 376.4166 573.5802 C
380.3334 576.1636 L
f
381.6667 475.3272 m
377.7402 480.9127 373.7292 486.3689 369.6667 491.6606 C
364.4666 488.0272 L
368.4791 482.8063 372.2887 477.6135 376.3333 471.8605 C
381.6667 475.3272 L
f
381 374.5 m
376.9926 380.2047 372.6562 386.0937 368.5 391.5 C
361.9 386.95 L
366.0312 381.5937 370.1623 375.9686 374.25 370.15 C
381 374.5 L
f
381.3334 273.6636 m
377.2451 279.4876 372.5833 285.8094 368.3333 291.3303 C
360.3333 285.8636 L
364.5833 280.3719 369.0358 274.3145 373.1666 268.4302 C
381.3334 273.6636 L
f
381.6667 172.8364 m
377.4975 178.7796 372.5104 185.5343 368.1667 191.1697 C
358.7667 184.7864 L
363.1355 179.1593 367.9094 172.6696 372.0834 166.7198 C
381.6667 172.8364 L
f
U
382 72 m
377.75 78.0625 372.4375 85.25 368 91 C
357.2 83.7 L
361.6875 77.9375 366.7829 71.0155 371 65 C
382 72 L
f
u
496.3334 580.8303 m
492.4877 586.2965 488.8021 591.3199 484.8333 596.497 C
481.0333 593.7803 L
484.927 588.6949 488.4152 583.9344 492.4166 578.2469 C
496.3334 580.8303 L
f
496.6667 480.6606 m
492.7402 486.246 488.7292 491.7023 484.6667 496.9939 C
479.4666 493.3605 L
483.4791 488.1397 487.2887 482.9469 491.3333 477.1938 C
496.6667 480.6606 L
f
497 380.5 m
492.9926 386.2047 488.6562 392.0937 484.5 397.5 C
477.9 392.95 L
482.0312 387.5937 486.1623 381.9686 490.25 376.15 C
497 380.5 L
f
497.3334 280.3303 m
493.2451 286.1543 488.5833 292.4761 484.3333 297.997 C
476.3333 292.5303 L
480.5833 287.0386 485.0358 280.9812 489.1666 275.0969 C
497.3334 280.3303 L
f
497.6667 180.1697 m
493.4975 186.113 488.5104 192.8676 484.1667 198.503 C
474.7667 192.1197 L
479.1355 186.4926 483.9094 180.0029 488.0834 174.0531 C
497.6667 180.1697 L
f
U
498 80 m
493.75 86.0625 488.4375 93.25 484 99 C
473.2 91.7 L
477.6875 85.9375 482.7829 79.0155 487 73 C
498 80 L
f
u
480.1667 576.3303 m
476.321 581.7965 472.6354 586.8199 468.6667 591.9969 C
464.8666 589.2803 L
468.7604 584.1949 472.2485 579.4343 476.25 573.7469 C
480.1667 576.3303 L
f
480.3333 475.6605 m
476.4068 481.246 472.3958 486.7022 468.3333 491.9939 C
463.1332 488.3605 L
467.1457 483.1397 470.9553 477.9468 474.9999 472.1938 C
480.3333 475.6605 L
f
479.5 376 m
475.4926 381.7047 471.1562 387.5937 467 393 C
460.4 388.45 L
464.5312 383.0937 468.6623 377.4686 472.75 371.65 C
479.5 376 L
f
480.6667 273.3303 m
476.5784 279.1543 471.9167 285.4761 467.6667 290.9969 C
459.6666 285.5302 L
463.9166 280.0386 468.3691 273.9812 472.5 268.0969 C
480.6667 273.3303 L
f
480.8333 173.6697 m
476.6642 179.613 471.6771 186.3676 467.3334 192.003 C
457.9334 185.6197 L
462.3021 179.9926 467.0761 173.5029 471.25 167.5531 C
480.8333 173.6697 L
f
U
481 73 m
476.75 79.0625 471.4375 86.25 467 92 C
456.2 84.7 L
460.6875 78.9375 465.7829 72.0155 470 66 C
481 73 L
f
u
96.5 545.1636 m
92.6543 550.6298 88.9687 555.6532 85 560.8303 C
81.1999 558.1136 L
85.0937 553.0282 88.5819 548.2677 92.5833 542.5802 C
96.5 545.1636 L
f
97 444.3272 m
93.0735 449.9127 89.0625 455.3689 85 460.6606 C
79.7999 457.0272 L
83.8124 451.8063 87.622 446.6135 91.6666 440.8605 C
97 444.3272 L
f
97.5 343.5 m
93.4926 349.2047 89.1562 355.0937 85 360.5 C
78.4 355.95 L
82.5312 350.5937 86.6623 344.9686 90.75 339.15 C
97.5 343.5 L
f
98 242.6636 m
93.9117 248.4876 89.25 254.8094 85 260.3303 C
77 254.8636 L
81.25 249.3719 85.7025 243.3145 89.8333 237.4302 C
98 242.6636 L
f
98.5 141.8364 m
94.3309 147.7796 89.3437 154.5343 85 160.1697 C
75.6 153.7864 L
79.9688 148.1593 84.7427 141.6696 88.9167 135.7198 C
98.5 141.8364 L
f
U
99 41 m
94.75 47.0625 89.4375 54.25 85 60 C
74.2 52.7 L
78.6875 46.9375 83.7829 40.0155 88 34 C
99 41 L
f
u
83.1667 537.4969 m
79.321 542.9631 75.6354 547.9865 71.6667 553.1636 C
67.8666 550.4469 L
71.7604 545.3615 75.2485 540.601 79.25 534.9135 C
83.1667 537.4969 L
f
83.3333 435.9938 m
79.4068 441.5793 75.3958 447.0355 71.3333 452.3272 C
66.1332 448.6938 L
70.1457 443.4729 73.9553 438.2801 77.9999 432.5271 C
83.3333 435.9938 L
f
83.5 334.5 m
79.4926 340.2047 75.1562 346.0937 71 351.5 C
64.4 346.95 L
68.5312 341.5937 72.6623 335.9686 76.75 330.15 C
83.5 334.5 L
f
83.6667 232.9969 m
79.5784 238.8209 74.9167 245.1428 70.6667 250.6636 C
62.6666 245.1969 L
66.9166 239.7052 71.3691 233.6478 75.5 227.7635 C
83.6667 232.9969 L
f
83.8333 131.5031 m
79.6642 137.4463 74.6771 144.201 70.3334 149.8364 C
60.9334 143.4531 L
65.3021 137.826 70.0761 131.3363 74.25 125.3864 C
83.8333 131.5031 L
f
U
84 30 m
79.75 36.0625 74.4375 43.25 70 49 C
59.2 41.7 L
63.6875 35.9375 68.7829 29.0155 73 23 C
84 30 L
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
