%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (2536.eps)
%%CreationDate: (5/25/04) (6:49 PM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
1 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
500 600 m
500 700 L
400 700 L
400 600 L
500 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
400 600 m
400 700 L
300 700 L
300 600 L
400 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
500 500 m
500 600 L
400 600 L
400 500 L
500 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
400 500 m
400 600 L
300 600 L
300 500 L
400 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
0 Ap
0 O
0 g
1 D
82 673 m
69 673 L
69 691 L
66 691 L
66 673 L
23 673 L
23 691 L
20 691 L
20 673 L
3 673 L
3 670 L
20 670 L
20 645 L
23 645 L
23 670 L
66 670 L
66 663 L
66 626.6735 56.8831 616.7459 22.7 614 C
23 611 L
58.4688 613.8492 69 624.5983 69 663 C
69 670 L
82 670 L
82 673 L
f
249.8 644 m
262.0149 633.5215 273.2654 623.247 283.8 613 C
286 615 L
275.2142 625.4914 264.0858 635.7465 251.9 646.2 C
249.8 644 L
f
273 685 m
217 685 L
217 682 L
274 682 L
272.6 684 L
265.3821 659.4214 244.101 634.8662 210 615.5 C
211.6 613 L
245.1643 632.0614 267.0092 656.1413 275.0662 681.7913 C
273 685 L
f
186 672.5 m
178.8497 631.9501 163.3112 619.0781 116.7 615 C
117 612 L
164.9492 616.1951 181.583 629.9378 189 672 C
186 672.5 L
f
149 682 m
137.8125 684.1875 127.5625 686.0625 116 688 C
115.4 685 L
126.564 683.1293 136.8968 681.2688 148.5 679 C
149 682 L
f
144.6 658 m
133.4125 660.1875 123.1625 662.0625 111.6 664 C
111 661 L
122.164 659.1293 132.4968 657.2688 144.1 655 C
144.6 658 L
f
481.3 670.6 m
477.9055 633.2115 462.045 618.3548 423.7 615 C
424 612 L
463.2619 615.4349 480.8243 631.104 484.3 670.6 C
481.3 670.6 L
f
410 683.3 m
416.875 673.7625 423.697 663.5572 430 653.3 C
432.6 654.8 L
426.3308 665.0023 419.583 675.1739 412.5 685 C
410 683.3 L
f
196 682 m
192.2352 687.347 188.875 691.9375 185 697 C
182.6 695.2 L
186.375 690.25 189.5417 685.9218 193.5 680.3 C
196 682 L
f
180 678 m
176.2352 683.347 172.875 687.9375 169 693 C
166.6 691.2 L
170.375 686.25 173.5417 681.9218 177.5 676.3 C
180 678 L
f
99 675 m
95.2352 680.347 91.875 684.9375 88 690 C
85.6 688.2 L
89.375 683.25 92.5417 678.9218 96.5 673.3 C
99 675 L
f
86 668 m
82.2352 673.347 78.875 677.9375 75 683 C
72.6 681.2 L
76.375 676.25 79.5417 671.9218 83.5 666.3 C
86 668 L
f
296 678 m
292.2352 683.347 288.875 687.9375 285 693 C
282.6 691.2 L
286.375 686.25 289.5417 681.9218 293.5 676.3 C
296 678 L
f
272.4501 680.7589 m
275.4567 676.7656 278.2039 672.9813 281.5 668.3 C
284 670 L
280.2352 675.347 276.875 679.9375 273 685 C
272.4501 680.7589 L
f
496 681 m
492.2352 686.347 488.875 690.9375 485 696 C
482.6 694.2 L
486.375 689.25 489.5417 684.9218 493.5 679.3 C
496 681 L
f
480 677 m
476.2352 682.347 472.875 686.9375 469 692 C
466.6 690.2 L
470.375 685.25 473.5417 680.9218 477.5 675.3 C
480 677 L
f
384 616 m
353 616 l
336.9065 616 332 620.9065 332 637 c
332 692 L
329 692 L
329 637 L
329 619.0591 335.4797 613 353 613 C
384 613 L
384 616 L
f
385.9512 672.8119 m
385.0654 652.4691 380.8431 645.1707 366 637.9 C
367.4 635.2 L
383.1856 642.9323 388.1963 650.9909 389 674 C
386.0291 673.5831 L
305.8243 662.3255 L
306.2418 659.3547 L
387.6886 670.8014 L
385.9512 672.8119 L
f
396 681 m
392.2352 686.347 388.875 690.9375 385 696 C
382.6 694.2 L
386.375 689.25 389.5417 684.9218 393.5 679.3 C
396 681 L
f
379 678 m
375.2352 683.347 371.875 687.9375 368 693 C
365.6 691.2 L
369.375 686.25 372.5417 681.9218 376.5 676.3 C
379 678 L
f
u
82.1667 573.497 m
69.5 573.497 L
69.5 590.9969 L
64 590.9969 L
64 573.497 L
24.6667 573.497 L
24.6667 590.9969 L
19.1667 590.9969 L
19.1667 573.497 L
2.8333 573.497 L
2.8333 568.1636 L
19.1667 568.1636 L
19.1667 544.3303 L
24.6667 544.3303 L
24.6667 568.1636 L
64.1666 568.1636 L
64.1666 561.1636 L
64.1666 527.377 55.8126 518.3678 22.15 515.6637 C
22.6667 510.3303 L
58.9965 513.2486 69.6667 523.9707 69.6667 561.1636 C
69.6667 568.1636 L
82.1667 568.1636 L
82.1667 573.497 L
f
83.3333 473.9939 m
70 473.9939 L
70 490.9939 L
61.9999 490.9939 L
61.9999 473.9939 L
26.3334 473.9939 L
26.3334 490.9939 L
18.3333 490.9939 L
18.3333 473.9939 L
2.6667 473.9939 L
2.6667 466.3271 L
18.3333 466.3271 L
18.3333 443.6605 L
26.3334 443.6605 L
26.3334 466.3271 L
62.3332 466.3271 L
62.3332 459.3271 L
62.3332 428.0804 54.7422 419.9897 21.6 417.3273 C
22.3333 409.6605 L
59.5242 412.6481 70.3334 423.3431 70.3334 459.3271 C
70.3334 466.3271 L
83.3333 466.3271 L
83.3333 473.9939 L
f
77.5 374.5 m
70.5 374.5 L
70.5 391 L
60 391 L
60 374.5 L
28 374.5 L
28 391 L
17.5 391 L
17.5 374.5 L
2.5 374.5 L
2.5 364.5 L
17.5 364.5 L
17.5 343 L
28 343 L
28 364.5 L
60.5 364.5 L
60.5 357.5 L
60.5 328.793 53.6718 321.6205 21.05 319 C
22 309 L
60.0518 312.0567 71 322.7248 71 357.5 C
71 364.5 L
77.5 364.5 L
77.5 374.5 L
f
78.6667 274.997 m
71 274.997 L
71 290.9969 L
58 290.9969 L
58 274.997 L
29.6667 274.997 L
29.6667 290.9969 L
16.6667 290.9969 L
16.6667 274.997 L
2.3333 274.997 L
2.3333 262.6636 L
16.6667 262.6636 L
16.6667 242.3303 L
29.6667 242.3303 L
29.6667 262.6636 L
58.6666 262.6636 L
58.6666 255.6636 L
58.6666 229.4965 52.6014 223.2424 20.5 220.6637 C
21.6667 208.3303 L
60.5795 211.4561 71.6667 222.0972 71.6667 255.6636 C
71.6667 262.6636 L
78.6667 262.6636 L
78.6667 274.997 L
f
77.8334 175.503 m
71.5 175.503 L
71.5 191.003 L
56.0001 191.003 L
56.0001 175.503 L
31.3333 175.503 L
31.3333 191.003 L
15.8334 191.003 L
15.8334 175.503 L
2.1667 175.503 L
2.1667 160.8364 L
15.8334 160.8364 L
15.8334 141.6697 L
31.3333 141.6697 L
31.3333 160.8364 L
56.8334 160.8364 L
56.8334 153.8364 L
56.8334 130.209 51.531 124.8732 19.95 122.3363 C
21.3334 107.6697 L
61.1071 110.8648 72.3333 121.4788 72.3333 153.8364 C
72.3333 160.8364 L
77.8334 160.8364 L
77.8334 175.503 L
f
U
21 7 m
61.6348 10.2642 73 20.8512 73 52 C
73 59 L
77 59 L
77 76 L
72 76 L
72 91 L
54 91 L
54 76 L
33 76 L
33 91 L
15 91 L
15 76 L
2 76 L
2 59 L
15 59 L
15 41 L
33 41 L
33 59 L
55 59 L
55 52 l
55 30.9125 50.4606 26.4951 19.4 24 C
21 7 L
f
u
183.7166 571.5469 m
176.5859 533.0422 161.5102 520.7861 115.9166 516.797 C
116.5 511.3303 L
164.6185 515.5402 181.4606 529.2026 189.1667 570.6636 C
183.7166 571.5469 L
f
181.4332 470.5939 m
174.3222 434.1343 159.7091 422.494 115.1333 418.594 C
116 410.6605 L
164.2879 414.8853 181.3383 428.4674 189.3333 469.3272 C
181.4332 470.5939 L
f
179.15 369.65 m
172.0587 335.2354 157.9083 324.2109 114.35 320.4 C
115.5 310 L
163.9573 314.2396 181.2159 327.7415 189.5 368 C
179.15 369.65 L
f
176.8666 268.6969 m
169.7949 236.3275 156.1072 225.9189 113.5666 222.197 C
115 209.3303 L
163.6266 213.5847 181.0935 227.0063 189.6667 266.6636 C
176.8666 268.6969 L
f
174.5834 167.7531 m
167.5314 137.4286 154.3064 127.6358 112.7834 124.003 C
114.5 108.6697 L
163.296 112.939 180.9712 126.2804 189.8333 165.3364 C
174.5834 167.7531 L
f
U
172.3 66.8 m
165.2676 38.5207 152.5054 29.3438 112 25.8 C
114 8 L
162.9654 12.2841 180.8488 25.5452 190 64 C
172.3 66.8 L
f
u
149.2333 582.6136 m
137.8553 584.8384 127.5133 586.7176 115.9 588.6636 C
114.8333 583.4469 L
126.1364 581.5529 136.5779 579.6857 148.2833 577.3969 C
149.2333 582.6136 L
f
149.4667 483.2273 m
137.8981 485.4893 127.464 487.3727 115.8 489.3273 C
114.2666 481.8938 L
125.7088 479.9765 136.2589 478.1026 148.0666 475.7938 C
149.4667 483.2273 L
f
149.7 383.85 m
137.9409 386.1492 127.4148 388.0369 115.7 390 C
113.7 380.35 L
125.2812 378.4093 135.94 376.5288 147.85 374.2 C
149.7 383.85 L
f
149.9333 284.4636 m
137.9838 286.8001 127.3656 288.6921 115.6 290.6636 C
113.1333 278.7969 L
124.8536 276.8329 135.6211 274.9457 147.6333 272.5969 C
149.9333 284.4636 L
f
150.1667 185.0864 m
138.0266 187.4601 127.3163 189.3563 115.5 191.3364 C
112.5667 177.2531 L
124.4261 175.2658 135.3022 173.3719 147.4167 171.0031 C
150.1667 185.0864 L
f
U
150.4 85.7 m
138.0694 88.111 127.2671 90.0114 115.4 92 C
112 75.7 L
123.9985 73.6894 134.9833 71.7888 147.2 69.4 C
150.4 85.7 L
f
u
144.7333 558.447 m
133.3553 560.6717 123.0133 562.551 111.4 564.497 C
110.3333 559.2802 L
121.6364 557.3862 132.0779 555.519 143.7833 553.2302 C
144.7333 558.447 L
f
144.8667 458.8939 m
133.2981 461.1559 122.864 463.0394 111.2 464.9939 C
109.6666 457.5605 L
121.1088 455.6431 131.6589 453.7693 143.4666 451.4605 C
144.8667 458.8939 L
f
145 359.35 m
133.2409 361.6492 122.7148 363.5369 111 365.5 C
109 355.85 L
120.5812 353.9093 131.24 352.0288 143.15 349.7 C
145 359.35 L
f
145.1333 259.797 m
133.1838 262.1335 122.5655 264.0254 110.8 265.997 C
108.3333 254.1302 L
120.0536 252.1663 130.8211 250.279 142.8333 247.9302 C
145.1333 259.797 L
f
145.2666 160.253 m
133.1266 162.6268 122.4163 164.5229 110.6 166.503 C
107.6667 152.4198 L
119.5261 150.4325 130.4022 148.5386 142.5167 146.1698 C
145.2666 160.253 L
f
U
145.4 60.7 m
133.0694 63.111 122.2671 65.0114 110.4 67 C
107 50.7 L
118.9985 48.6894 129.9833 46.7888 142.2 44.4 C
145.4 60.7 L
f
u
248.1802 543.5686 m
260.4966 533.0257 271.8269 522.712 282.5 512.3303 C
286.5 516.0803 L
275.6582 526.6262 264.3421 537.0118 251.9303 547.6353 C
248.1802 543.5686 L
f
246.5605 443.1372 m
258.9783 432.5299 270.3883 422.177 281.1999 411.6605 C
287 417.1606 L
276.1023 427.7609 264.5984 438.2771 251.9606 449.0707 C
246.5605 443.1372 L
f
244.9409 342.715 m
257.4601 332.0432 268.9499 321.6511 279.9 311 C
287.5 318.25 L
276.5463 328.9046 264.8547 339.5514 251.9909 350.515 C
244.9409 342.715 L
f
243.3212 242.2836 m
255.9418 231.5474 267.5114 221.1161 278.6 210.3303 C
288 219.3303 L
276.9903 230.0394 265.111 240.8167 252.0213 251.9503 C
243.3212 242.2836 L
f
241.7016 141.8614 m
254.4237 131.0607 266.073 120.5902 277.3 109.6697 C
288.5 120.4197 L
277.4343 131.1831 265.3673 142.091 252.0516 153.3947 C
241.7016 141.8614 L
f
U
240.0819 41.43 m
252.9054 30.5649 264.6345 20.0552 276 9 C
289 21.5 L
277.8784 32.3179 265.6236 43.3563 252.0819 54.83 C
240.0819 41.43 L
f
u
272.6667 585.3303 m
216.3333 585.3303 L
216.3333 579.9969 L
273.5 579.9969 L
269.8666 584.1636 L
263.1621 559.2347 242.1525 534.9449 209.1667 517.1803 C
211.6667 512.3303 L
244.8408 530.067 267.1076 554.5647 274.9533 580.9429 C
272.6667 585.3303 L
f
272.3333 485.6606 m
215.6666 485.6606 L
215.6666 477.9938 L
273 477.9938 L
267.1332 484.3273 L
260.9422 459.048 240.2041 435.0235 208.3333 418.8607 C
211.7333 411.6605 L
244.5173 428.0726 267.2061 452.988 274.8403 480.0945 C
272.3333 485.6606 L
f
272 386 m
215 386 L
215 376 L
272.5 376 L
264.4 384.5 L
258.7224 358.8704 238.2559 335.1113 207.5 320.55 C
211.8 311 L
244.1939 326.0875 267.3045 351.4207 274.7274 379.2553 C
272 386 L
f
271.6667 286.3303 m
214.3333 286.3303 L
214.3333 273.9969 L
272 273.9969 L
261.6666 284.6636 L
256.5024 258.6837 236.3074 235.19 206.6667 222.2303 C
211.8667 210.3303 L
243.8704 224.0932 267.4029 249.8441 274.6145 278.4069 C
271.6667 286.3303 L
f
271.3334 186.6697 m
213.6667 186.6697 L
213.6667 172.0031 L
271.5 172.0031 L
258.9334 184.8364 L
254.2827 158.5061 234.3591 135.2778 205.8334 123.9197 C
211.9333 109.6697 L
243.547 122.1081 267.5014 148.2767 274.5016 177.5677 C
271.3334 186.6697 L
f
U
271 87 m
213 87 L
213 70 L
271 70 L
256.2 85 L
252.0627 58.3194 232.4107 35.3565 205 25.6 C
212 9 L
243.2235 20.1137 267.5998 46.7001 274.3887 76.7193 C
271 87 L
f
u
479.4166 570.3636 m
476.0718 534.4567 460.7886 520.3567 423.15 517.0637 C
423.8333 511.6636 L
463.4487 515.1295 481.3025 530.6843 484.9167 570.3636 C
479.4166 570.3636 L
f
477.5332 470.1272 m
474.2381 435.7018 459.5321 422.3585 422.6 419.1274 C
423.6667 411.3272 L
463.6356 414.824 481.7808 430.2646 485.5334 470.1272 C
477.5332 470.1272 L
f
475.65 369.9 m
472.4045 336.9561 458.2758 324.3694 422.05 321.2 C
423.5 311 L
463.8224 314.5277 482.259 329.854 486.15 369.9 C
475.65 369.9 L
f
473.7666 269.6636 m
470.5708 238.2012 457.0193 226.3712 421.5 223.2637 C
423.3333 210.6636 L
464.0092 214.2222 482.7372 229.4343 486.7667 269.6636 C
473.7666 269.6636 L
f
471.8834 169.4364 m
468.7373 139.4554 455.763 128.382 420.95 125.3363 C
423.1667 110.3364 L
464.196 113.926 483.2154 129.0237 487.3833 169.4364 C
471.8834 169.4364 L
f
U
470 69.2 m
466.9036 40.7006 454.5066 30.3839 420.4 27.4 C
423 10 L
464.3829 13.6205 483.6937 28.604 488 69.2 C
470 69.2 L
f
u
409.3333 582.6803 m
416.241 572.9461 423.1904 562.4482 429.5 552.1802 C
434.4167 554.9636 L
428.0661 565.2984 421.1835 575.761 414.1501 585.6636 C
409.3333 582.6803 L
f
408.6666 482.0605 m
415.607 472.1296 422.6838 461.3392 429 451.0605 C
436.2334 455.1273 L
429.8014 465.5945 422.7841 476.3481 415.8001 486.3273 C
408.6666 482.0605 L
f
408 381.45 m
414.973 371.3224 422.1772 360.2395 428.5 349.95 C
438.05 355.3 L
431.5365 365.8997 424.3845 376.9443 417.45 387 C
408 381.45 L
f
407.3333 280.8303 m
414.339 270.506 421.6706 259.1304 428 248.8302 C
439.8667 255.4636 L
433.2718 266.1959 425.985 277.5314 419.1 287.6636 C
407.3333 280.8303 L
f
406.6667 180.2197 m
413.7051 169.6987 421.164 158.0307 427.5 147.7198 C
441.6833 155.6364 L
435.0069 166.5011 427.5854 178.1276 420.7499 188.3364 C
406.6667 180.2197 L
f
U
406 79.6 m
413.0711 68.8823 420.6574 56.9217 427 46.6 C
443.5 55.8 L
436.7422 66.7972 429.1859 78.7147 422.4 89 C
406 79.6 L
f
u
328 592.3303 m
328 537.1636 L
328 518.8309 334.5564 512.6636 352.5 512.6636 C
384.1667 512.6636 L
384.1667 517.997 L
353 517.997 l
337.9812 517.997 333.6667 522.3108 333.6667 537.497 c
333.6667 592.3303 L
328 592.3303 L
f
326.9999 492.6606 m
326.9999 437.3273 L
326.9999 418.6026 333.6331 412.3272 352 412.3272 C
384.3333 412.3272 L
384.3333 419.994 L
353 419.994 l
339.0559 419.994 335.3334 423.7152 335.3334 437.9939 c
335.3334 492.6606 L
326.9999 492.6606 L
f
325 393 m
325 337.5 L
325 318.3834 331.7099 312 350.5 312 C
383.5 312 L
383.5 322 L
352 322 l
339.1304 322 336 325.1285 336 338.5 c
336 393 L
325 393 L
f
326 293.3303 m
326 237.6636 L
326 218.1552 332.7866 211.6636 352 211.6636 C
385.6667 211.6636 L
385.6667 223.997 L
354 223.997 l
342.2051 223.997 339.6667 226.5328 339.6667 238.997 c
339.6667 293.3303 L
326 293.3303 L
f
324 193.6697 m
324 137.8364 L
324 117.9361 330.8634 111.3364 350.5 111.3364 C
384.8333 111.3364 L
384.8333 126.003 L
353 126.003 l
342.2797 126.003 340.3333 127.9462 340.3333 139.503 c
340.3333 193.6697 L
324 193.6697 L
f
U
u
323 94 m
323 38 L
323 17.7078 329.9401 11 350 11 C
385 11 L
385 28 L
353 28 l
343.3544 28 342 29.3505 342 40 c
342 94 L
323 94 L
f
U
u
396.5 581.8303 m
392.6543 587.2965 388.9687 592.3199 385 597.497 C
381.1999 594.7803 L
385.0937 589.6949 388.5819 584.9344 392.5833 579.2469 C
396.5 581.8303 L
f
397 481.6606 m
393.0735 487.2461 389.0625 492.7023 385 497.9939 C
379.7999 494.3605 L
383.8124 489.1397 387.622 483.9469 391.6666 478.1938 C
397 481.6606 L
f
398.5 380.5 m
394.4926 386.2047 390.1562 392.0937 386 397.5 C
379.4 392.95 L
383.5312 387.5937 387.6623 381.9686 391.75 376.15 C
398.5 380.5 L
f
398 280.3303 m
393.9117 286.1543 389.25 292.4761 385 297.997 C
377 292.5303 L
381.25 287.0386 385.7025 280.9812 389.8333 275.0969 C
398 280.3303 L
f
398.5 180.1697 m
394.3309 186.113 389.3437 192.8676 385 198.503 C
375.6 192.1197 L
379.9688 186.4926 384.7427 180.003 388.9167 174.0531 C
398.5 180.1697 L
f
U
399 80 m
394.75 86.0625 389.4375 93.25 385 99 C
374.2 91.7 L
378.6875 85.9375 383.7829 79.0155 388 73 C
399 80 L
f
u
379.1667 578.6636 m
375.321 584.1299 371.6354 589.1532 367.6667 594.3303 C
363.8666 591.6136 L
367.7604 586.5282 371.2485 581.7677 375.25 576.0802 C
379.1667 578.6636 L
f
378.5333 479.3272 m
374.6068 484.9127 370.5958 490.3689 366.5333 495.6606 C
361.3332 492.0272 L
365.3457 486.8063 369.1553 481.6135 373.1999 475.8605 C
378.5333 479.3272 L
f
382 375 m
377.9926 380.7047 373.6562 386.5937 369.5 392 C
362.9 387.45 L
367.0312 382.0937 371.1623 376.4686 375.25 370.65 C
382 375 L
f
380.4667 275.6636 m
376.3784 281.4876 371.7167 287.8095 367.4667 293.3303 C
359.4666 287.8636 L
363.7166 282.3719 368.1691 276.3145 372.3 270.4302 C
380.4667 275.6636 L
f
379.8333 176.3364 m
375.6642 182.2796 370.6771 189.0343 366.3334 194.6697 C
356.9334 188.2864 L
361.3021 182.6593 366.0761 176.1696 370.25 170.2198 C
379.8333 176.3364 L
f
U
380 76 m
375.75 82.0625 370.4375 89.25 366 95 C
355.2 87.7 L
359.6875 81.9375 364.7829 75.0155 369 69 C
380 76 L
f
u
196.5 581.4969 m
192.6543 586.9632 188.9687 591.9865 185 597.1636 C
181.1999 594.447 L
185.0937 589.3615 188.5819 584.601 192.5833 578.9136 C
196.5 581.4969 L
f
197 480.9939 m
193.0735 486.5794 189.0625 492.0356 185 497.3273 C
179.7999 493.6939 L
183.8124 488.473 187.622 483.2802 191.6666 477.5272 C
197 480.9939 L
f
197.5 380.5 m
193.4926 386.2047 189.1562 392.0937 185 397.5 C
178.4 392.95 L
182.5312 387.5937 186.6623 381.9686 190.75 376.15 C
197.5 380.5 L
f
198 279.9969 m
193.9117 285.8209 189.25 292.1428 185 297.6636 C
177 292.1969 L
181.25 286.7052 185.7025 280.6478 189.8333 274.7636 C
198 279.9969 L
f
198.5 179.5031 m
194.3309 185.4463 189.3437 192.201 185 197.8364 C
175.6 191.4531 L
179.9688 185.826 184.7427 179.3363 188.9167 173.3864 C
198.5 179.5031 L
f
U
199 79 m
194.75 85.0625 189.4375 92.25 185 98 C
174.2 90.7 L
178.6875 84.9375 183.7829 78.0155 188 72 C
199 79 L
f
u
180 577.4969 m
176.1543 582.9632 172.4687 587.9865 168.5 593.1636 C
164.6999 590.447 L
168.5937 585.3615 172.0818 580.601 176.0833 574.9136 C
180 577.4969 L
f
180 476.9939 m
176.0735 482.5794 172.0625 488.0356 168 493.3273 C
162.7999 489.6939 L
166.8124 484.473 170.622 479.2802 174.6666 473.5272 C
180 476.9939 L
f
180 376.5 m
175.9926 382.2047 171.6562 388.0937 167.5 393.5 C
160.9 388.95 L
165.0312 383.5937 169.1623 377.9686 173.25 372.15 C
180 376.5 L
f
180 275.9969 m
175.9117 281.8209 171.25 288.1428 167 293.6636 C
158.9999 288.1969 L
163.2499 282.7052 167.7024 276.6478 171.8333 270.7636 C
180 275.9969 L
f
180 175.5031 m
175.8309 181.4463 170.8438 188.201 166.5 193.8364 C
157.1 187.4531 L
161.4688 181.826 166.2427 175.3363 170.4167 169.3864 C
180 175.5031 L
f
U
180 75 m
175.75 81.0625 170.4375 88.25 166 94 C
155.2 86.7 L
159.6875 80.9375 164.7829 74.0155 169 68 C
180 75 L
f
u
296.3334 578.3303 m
292.4877 583.7966 288.8021 588.8199 284.8333 593.997 C
281.0333 591.2803 L
284.927 586.1949 288.4152 581.4344 292.4166 575.7469 C
296.3334 578.3303 L
f
296.6667 478.6606 m
292.7402 484.2461 288.7292 489.7023 284.6667 494.994 C
279.4666 491.3606 L
283.4791 486.1397 287.2887 480.9469 291.3333 475.1939 C
296.6667 478.6606 L
f
297 379 m
292.9926 384.7047 288.6562 390.5937 284.5 396 C
277.9 391.45 L
282.0312 386.0937 286.1623 380.4686 290.25 374.65 C
297 379 L
f
297.3334 279.3303 m
293.2451 285.1543 288.5833 291.4761 284.3333 296.997 C
276.3333 291.5303 L
280.5833 286.0386 285.0358 279.9812 289.1666 274.0969 C
297.3334 279.3303 L
f
297.6667 179.6697 m
293.4975 185.6129 288.5104 192.3676 284.1667 198.003 C
274.7667 191.6197 L
279.1355 185.9926 283.9094 179.5029 288.0834 173.5531 C
297.6667 179.6697 L
f
U
298 80 m
293.75 86.0625 288.4375 93.25 284 99 C
273.2 91.7 L
277.6875 85.9375 282.7829 79.0155 287 73 C
298 80 L
f
u
270.4083 580.5794 m
273.6618 576.2912 276.8003 571.9839 280.25 567.0802 C
284.1667 569.6636 L
280.321 575.1299 276.6354 580.1532 272.6667 585.3303 C
270.4083 580.5794 L
f
268.3666 480.3998 m
271.8668 475.8168 275.3968 470.9865 278.9999 465.8605 C
284.3333 469.3272 L
280.4068 474.9127 276.3958 480.3689 272.3333 485.6606 C
268.3666 480.3998 L
f
266.3251 380.2294 m
270.0721 375.3515 273.9934 369.9984 277.75 364.65 C
284.5 369 L
280.4926 374.7047 276.1562 380.5937 272 386 C
266.3251 380.2294 L
f
264.2833 280.0499 m
268.2772 274.8771 272.5898 269.001 276.5 263.4302 C
284.6667 268.6636 L
280.5784 274.4876 275.9167 280.8095 271.6667 286.3303 C
264.2833 280.0499 L
f
262.2417 179.8795 m
266.4824 174.4119 271.1864 168.0129 275.25 162.2198 C
284.8333 168.3364 L
280.6642 174.2796 275.6771 181.0343 271.3334 186.6697 C
262.2417 179.8795 L
f
U
285 68 m
280.75 74.0625 275.4375 81.25 271 87 C
260.2 79.7 L
264.6875 73.9375 269.7829 67.0155 274 61 C
285 68 L
f
u
496.3334 580.8303 m
492.4877 586.2965 488.8021 591.3199 484.8333 596.497 C
481.0333 593.7803 L
484.927 588.6949 488.4152 583.9344 492.4166 578.2469 C
496.3334 580.8303 L
f
496.6667 480.6606 m
492.7402 486.2461 488.7292 491.7023 484.6667 496.9939 C
479.4666 493.3605 L
483.4791 488.1397 487.2887 482.9469 491.3333 477.1938 C
496.6667 480.6606 L
f
497 381.5 m
492.9926 387.2047 488.6562 393.0937 484.5 398.5 C
477.9 393.95 L
482.0312 388.5937 486.1623 382.9686 490.25 377.15 C
497 381.5 L
f
497.3334 281.3303 m
493.2451 287.1543 488.5833 293.4761 484.3333 298.997 C
476.3333 293.5303 L
480.5833 288.0386 485.0358 281.9812 489.1666 276.0969 C
497.3334 281.3303 L
f
497.6667 179.1697 m
493.4975 185.113 488.5104 191.8676 484.1667 197.503 C
474.7667 191.1197 L
479.1355 185.4926 483.9094 179.003 488.0834 173.0531 C
497.6667 179.1697 L
f
U
498 80 m
493.75 86.0625 488.4375 93.25 484 99 C
473.2 91.7 L
477.6875 85.9375 482.7829 79.0155 487 73 C
498 80 L
f
u
480.1667 576.3303 m
476.321 581.7965 472.6354 586.8199 468.6667 591.9969 C
464.8666 589.2803 L
468.7604 584.1949 472.2485 579.4343 476.25 573.7469 C
480.1667 576.3303 L
f
480.3333 475.6605 m
476.4068 481.246 472.3958 486.7022 468.3333 491.9939 C
463.1332 488.3605 L
467.1457 483.1397 470.9553 477.9468 474.9999 472.1938 C
480.3333 475.6605 L
f
480.5 376 m
476.4926 381.7047 472.1562 387.5937 468 393 C
461.4 388.45 L
465.5312 383.0937 469.6623 377.4686 473.75 371.65 C
480.5 376 L
f
480.6667 275.3303 m
476.5784 281.1543 471.9167 287.4761 467.6667 292.9969 C
459.6666 287.5303 L
463.9166 282.0386 468.3691 275.9812 472.5 270.0969 C
480.6667 275.3303 L
f
480.8333 172.6697 m
476.6642 178.613 471.6771 185.3676 467.3334 191.003 C
457.9334 184.6197 L
462.3021 178.9926 467.0761 172.503 471.25 166.5531 C
480.8333 172.6697 L
f
U
481 73 m
476.75 79.0625 471.4375 86.25 467 92 C
456.2 84.7 L
460.6875 78.9375 465.7829 72.0155 470 66 C
481 73 L
f
u
99 576.8303 m
95.1543 582.2966 91.4687 587.3199 87.5 592.497 C
83.6999 589.7803 L
87.5937 584.6949 91.0818 579.9344 95.0833 574.2469 C
99 576.8303 L
f
99 480.2606 m
95.0735 485.8461 91.0625 491.3023 87 496.594 C
81.7999 492.9606 L
85.8124 487.7397 89.622 482.5469 93.6666 476.7939 C
99 480.2606 L
f
99 374.5 m
94.9926 380.2047 90.6562 386.0937 86.5 391.5 C
79.9 386.95 L
84.0312 381.5937 88.1623 375.9686 92.25 370.15 C
99 374.5 L
f
99 277.3303 m
94.9117 283.1543 90.25 289.4762 86 294.997 C
77.9999 289.5303 L
82.2499 284.0386 86.7024 277.9812 90.8333 272.0969 C
99 277.3303 L
f
99 179.1697 m
94.8309 185.1129 89.8438 191.8676 85.5 197.503 C
76.1 191.1197 L
80.4688 185.4926 85.2427 179.0029 89.4167 173.0531 C
99 179.1697 L
f
U
99 80 m
94.75 86.0625 89.4375 93.25 85 99 C
74.2 91.7 L
78.6875 85.9375 83.7829 79.0155 88 73 C
99 80 L
f
u
86.8334 567.8302 m
82.9877 573.2965 79.3021 578.3199 75.3334 583.4969 C
71.5333 580.7803 L
75.427 575.6948 78.9152 570.9343 82.9167 565.2469 C
86.8334 567.8302 L
f
89.6667 466.6605 m
85.7402 472.246 81.7292 477.7022 77.6667 482.9939 C
72.4666 479.3605 L
76.4791 474.1396 80.2887 468.9468 84.3333 463.1938 C
89.6667 466.6605 L
f
88.5 361.5 m
84.4926 367.2047 80.1562 373.0937 76 378.5 C
69.4 373.95 L
73.5312 368.5937 77.6623 362.9686 81.75 357.15 C
88.5 361.5 L
f
89.3334 262.3302 m
85.2451 268.1542 80.5833 274.4761 76.3334 279.9969 C
68.3333 274.5302 L
72.5833 269.0386 77.0358 262.9812 81.1667 257.0969 C
89.3334 262.3302 L
f
90.1667 162.1697 m
85.9975 168.113 81.0104 174.8676 76.6667 180.5031 C
67.2667 174.1197 L
71.6354 168.4927 76.4094 162.003 80.5834 156.0531 C
90.1667 162.1697 L
f
U
91 61 m
86.75 67.0625 81.4375 74.25 77 80 C
66.2 72.7 L
70.6875 66.9375 75.7829 60.0155 80 54 C
91 61 L
f
u
378.3177 178.3544 m
303.8306 170.0551 L
305.0672 155.1335 L
384.5875 163.9719 L
372.653 174.922 L
372.3766 154.5826 371.3863 152.7271 357.6759 142.8954 C
367.9091 130.5288 L
382.5619 141.048 387.2793 146.9956 388.568 164.4316 C
378.3177 178.3544 L
f
U
376.7753 80.5051 m
303.4319 72.7974 L
304.8323 55.4856 L
383.9673 63.8023 L
369.9933 76.5404 L
369.8387 56.2017 369.4949 55.4348 356.011 45.0909 C
368.011 30.7909 L
382.6363 42.0104 387.2226 47.5538 388.5326 64.4305 C
376.7753 80.5051 L
f
u
383.2929 573.4188 m
382.5287 553.0424 379.001 546.9381 364.3398 539.1209 C
367.5065 534.4875 L
383.9249 543.4348 388.3335 550.7149 389.0032 575.2839 C
386.0302 574.8846 L
305.4255 564.0678 L
306.0069 558.7068 L
387.0698 569.6203 L
383.2929 573.4188 L
f
380.6346 473.0256 m
379.992 452.6156 377.159 447.7054 362.6795 439.3417 C
367.613 432.775 L
384.6642 442.9373 388.4707 449.4389 389.0065 475.5679 C
386.0313 475.1862 L
305.0268 464.8101 L
305.7719 457.0589 L
386.451 467.4391 L
380.6346 473.0256 L
f
375.9839 372.5203 m
375.4629 352.0767 373.3245 348.3606 359.0269 339.4504 C
365.7269 330.9504 L
383.4109 342.3276 386.6152 348.0508 387.0171 375.7396 C
384.0398 375.3756 L
303.6281 365.5614 L
304.537 355.4201 L
383.8396 365.146 L
375.9839 372.5203 L
f
372.3449 272.7872 m
371.9455 252.31 370.5017 249.7879 356.3859 240.3313 C
364.8527 229.8979 L
383.1695 242.4901 385.7717 247.4348 386.0397 276.6835 C
383.0602 276.3372 L
305.2293 267.3038 L
306.3021 254.7722 L
382.2401 263.6249 L
372.3449 272.7872 L
f
U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
