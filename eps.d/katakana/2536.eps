%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (2536.eps)
%%CreationDate: (9/17/04) (4:14 PM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
500 600 m
500 700 L
400 700 L
400 600 L
500 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
400 600 m
400 700 L
300 700 L
300 600 L
400 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
500 500 m
500 600 L
400 600 L
400 500 L
500 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
400 500 m
400 600 L
300 600 L
300 500 L
400 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
0 O
0 g
1 D
186 671.5 m
178.8497 630.9501 163.3112 618.0781 116.7 614 C
117 611 L
164.9492 615.1951 181.583 628.9378 189 671 C
186 671.5 L
f
90 671 m
72 671 L
72 690 L
69 690 L
69 671 L
25 671 L
25 690 L
22 690 L
22 671 L
6 671 L
6 668 L
22 668 L
22 644 L
25 644 L
25 668 L
69 668 L
69 662 L
69 625.6735 59.8831 615.7459 25.7 613 C
26 610 L
61.4688 612.8492 72 623.5983 72 662 C
72 668 L
90 668 L
90 671 L
f
249.8 644 m
262.0149 633.5215 273.2654 623.247 283.8 613 C
286 615 L
275.2142 625.4914 264.0858 635.7465 251.9 646.2 C
249.8 644 L
f
272.7 684.2 m
266.1559 658.5583 243.874 633.2511 210.1 615.6 C
211.6 613 L
246.255 631.1116 269.5576 657.0958 276 685 C
217 685 L
217 682 L
274 682 L
272.7 684.2 L
f
149 681 m
137.8125 683.1875 127.5625 685.0625 116 687 C
115.4 684 L
126.564 682.1293 136.8968 680.2688 148.5 678 C
149 681 L
f
144.6 657 m
133.4125 659.1875 123.1625 661.0625 111.6 663 C
111 660 L
122.164 658.1293 132.4968 656.2688 144.1 654 C
144.6 657 L
f
427.7 651 m
423.075 662.0625 418.0125 673.0625 412.7 684 C
410 682.7 L
415.7904 670.7786 420.6436 660.0809 424.9 649.9 C
427.7 651 L
f
384 615 m
353 615 l
336.9065 615 332 619.9065 332 636 c
332 691 L
329 691 L
329 636 L
329 618.0591 335.4797 612 353 612 C
384 612 L
384 615 L
f
385.9512 671.8119 m
385.0654 651.4691 380.8432 644.1707 366 636.9 C
367.4 634.2 L
383.1856 641.9323 388.1963 649.9909 389 673 C
305.8243 661.3255 L
306.2418 658.3547 L
387.6886 669.8013 L
385.9512 671.8119 L
f
481.7 674.3 m
479.0802 632.9815 462.7178 617.4136 423.7 614 C
424 611 L
464.7219 614.5627 482.1743 631.492 484.7 674.3 C
481.7 674.3 L
f
98 684 m
94.75 689.25 91.875 693.25 88 698 C
85.6 696.2 L
89.4897 691.4319 92.2563 687.5783 95.4 682.5 C
98 684 L
f
85.8 681.7 m
82.7234 686.6148 79.903 690.4608 76.2 695 C
73.8 693.2 L
77.4965 688.6688 80.2445 684.8155 83.2 680.1 C
85.8 681.7 L
f
197 684 m
193.75 689.25 190.875 693.25 187 698 C
184.6 696.2 L
188.4897 691.4319 191.2563 687.5783 194.4 682.5 C
197 684 L
f
185.6 680.7 m
182.5234 685.6148 179.703 689.4608 176 694 C
173.6 692.2 L
177.2965 687.6688 180.0445 683.8155 183 679.1 C
185.6 680.7 L
f
298 657 m
294.75 662.25 291.875 666.25 288 671 C
285.6 669.2 L
289.4897 664.4319 292.2563 660.5783 295.4 655.5 C
298 657 L
f
286.6 653.7 m
283.5234 658.6148 280.703 662.4608 277 667 C
274.6 665.2 L
278.2965 660.6688 281.0445 656.8155 284 652.1 C
286.6 653.7 L
f
396 682 m
392.75 687.25 389.875 691.25 386 696 C
383.6 694.2 L
387.4897 689.4319 390.2563 685.5783 393.4 680.5 C
396 682 L
f
384.6 678.7 m
381.5234 683.6148 378.703 687.4608 375 692 C
372.6 690.2 L
376.2965 685.6688 379.0445 681.8155 382 677.1 C
384.6 678.7 L
f
497 684 m
493.75 689.25 490.875 693.25 487 698 C
484.6 696.2 L
488.4897 691.4319 491.2563 687.5783 494.4 682.5 C
497 684 L
f
485.6 680.7 m
482.5234 685.6148 479.703 689.4608 476 694 C
473.6 692.2 L
477.2965 687.6688 480.0445 683.8155 483 679.1 C
485.6 680.7 L
f
u
90.3333 571.4969 m
71.6667 571.4969 L
71.6667 589.9969 L
66.1666 589.9969 L
66.1666 571.4969 L
26.8334 571.4969 L
26.8334 589.9969 L
21.3333 589.9969 L
21.3333 571.4969 L
5.6666 571.4969 L
5.6666 566.1635 L
21.3333 566.1635 L
21.3333 543.3302 L
26.8334 543.3302 L
26.8334 566.1635 L
66.1666 566.1635 L
66.1666 560.1635 L
66.1666 526.3769 57.8126 517.3677 24.15 514.6636 C
24.6666 509.3302 L
60.9965 512.2486 71.6667 522.9707 71.6667 560.1635 C
71.6667 566.1635 L
90.3333 566.1635 L
90.3333 571.4969 L
f
91.6667 470.9939 m
74.3334 470.9939 L
74.3334 489.9939 L
66.3332 489.9939 L
66.3332 470.9939 L
29.6668 470.9939 L
29.6668 489.9939 L
21.6666 489.9939 L
21.6666 470.9939 L
6.3333 470.9939 L
6.3333 463.3271 L
21.6666 463.3271 L
21.6666 442.6605 L
29.6668 442.6605 L
29.6668 463.3271 L
66.3332 463.3271 L
66.3332 458.3271 L
66.3332 427.0804 58.7422 418.9896 25.5999 416.3273 C
26.3333 408.6605 L
63.5241 411.648 74.3334 422.3431 74.3334 458.3271 C
74.3334 463.3271 L
91.6667 463.3271 L
91.6667 470.9939 L
f
u
91.5 371.4954 m
74 371.4954 L
74 389.9954 L
63.4999 389.9954 L
63.4999 371.4954 L
31.0001 371.4954 L
31.0001 389.9954 L
20.5 389.9954 L
20.5 371.4954 L
5.5 371.4954 L
5.5 361.4953 L
20.5 361.4953 L
20.5 341.9954 L
31.0001 341.9954 L
31.0001 361.4953 L
63.4999 361.4953 L
63.4999 356.4953 L
63.4999 327.7884 56.6718 320.616 24.05 317.9955 C
25 307.9954 L
63.0518 311.0521 74 321.7201 74 356.4953 C
74 361.4953 L
91.5 361.4953 L
91.5 371.4954 L
f
U
91.3333 271.9969 m
73.6667 271.9969 L
73.6667 289.9969 L
60.6666 289.9969 L
60.6666 271.9969 L
32.3334 271.9969 L
32.3334 289.9969 L
19.3333 289.9969 L
19.3333 271.9969 L
4.6666 271.9969 L
4.6666 259.6635 L
19.3333 259.6635 L
19.3333 241.3302 L
32.3334 241.3302 L
32.3334 259.6635 L
60.6666 259.6635 L
60.6666 254.6635 L
60.6666 228.4964 54.6014 222.2423 22.5 219.6636 C
23.6666 207.3302 L
62.5795 210.4561 73.6667 221.0971 73.6667 254.6635 C
73.6667 259.6635 L
91.3333 259.6635 L
91.3333 271.9969 L
f
91.6666 172.503 m
75.3333 172.503 L
75.3333 190.003 L
59.8334 190.003 L
59.8334 172.503 L
34.1666 172.503 L
34.1666 190.003 L
18.6667 190.003 L
18.6667 172.503 L
4.3333 172.503 L
4.3333 157.8364 L
18.6667 157.8364 L
18.6667 140.6697 L
34.1666 140.6697 L
34.1666 157.8364 L
59.8334 157.8364 L
59.8334 152.8364 L
59.8334 129.209 54.531 123.8732 22.95 121.3363 C
24.3333 106.6697 L
64.1071 109.8647 75.3333 120.4788 75.3333 152.8364 C
75.3333 157.8364 L
91.6666 157.8364 L
91.6666 172.503 L
f
U
24 6 m
64.6348 9.2642 76 19.8512 76 51 C
76 57 L
92 57 L
92 74 L
76 74 L
76 90 L
58 90 L
58 74 L
36 74 L
36 90 L
18 90 L
18 74 L
4 74 L
4 57 L
18 57 L
18 40 L
36 40 L
36 57 L
58 57 L
58 51 l
58 29.9125 53.4606 25.4951 22.4 23 C
24 6 L
f
u
149.4 581.7803 m
138.022 584.005 127.6799 585.8843 116.0666 587.8303 C
115 582.6136 L
126.3031 580.7195 136.7445 578.8524 148.45 576.5635 C
149.4 581.7803 L
f
149.8 482.5606 m
138.2315 484.8226 127.7974 486.7061 116.1333 488.6606 C
114.6 481.2271 L
126.0421 479.3098 136.5923 477.4359 148.4 475.1271 C
149.8 482.5606 L
f
150.2 383.35 m
138.4409 385.6492 127.9148 387.5369 116.2 389.5 C
114.2 379.85 L
125.7812 377.9093 136.44 376.0288 148.35 373.7 C
150.2 383.35 L
f
150.6 284.1303 m
138.6504 286.4668 128.0322 288.3587 116.2666 290.3303 C
113.8 278.4635 L
125.5203 276.4996 136.2878 274.6123 148.3 272.2635 C
150.6 284.1303 L
f
151 184.9197 m
138.8599 187.2934 128.1496 189.1896 116.3333 191.1697 C
113.4 177.0864 L
125.2594 175.0991 136.1355 173.2052 148.25 170.8364 C
151 184.9197 L
f
U
151.4 85.7 m
139.0694 88.111 128.2671 90.0114 116.4 92 C
113 75.7 L
124.9985 73.6894 135.9833 71.7888 148.2 69.4 C
151.4 85.7 L
f
u
144.9 557.6136 m
133.522 559.8384 123.1799 561.7176 111.5666 563.6636 C
110.5 558.4469 L
121.803 556.5529 132.2445 554.6857 143.95 552.3969 C
144.9 557.6136 L
f
145.2 458.2272 m
133.6315 460.4892 123.1974 462.3727 111.5333 464.3273 C
110 456.8938 L
121.4421 454.9764 131.9923 453.1026 143.8 450.7938 C
145.2 458.2272 L
f
145.5 358.85 m
133.7409 361.1492 123.2148 363.0369 111.5 365 C
109.5 355.35 L
121.0812 353.4093 131.74 351.5288 143.65 349.2 C
145.5 358.85 L
f
145.8 259.4636 m
133.8504 261.8001 123.2322 263.692 111.4666 265.6636 C
109 253.7969 L
120.7203 251.8329 131.4878 249.9457 143.5 247.5969 C
145.8 259.4636 L
f
146.1 160.0863 m
133.9599 162.4601 123.2496 164.3563 111.4333 166.3363 C
108.5 152.2531 L
120.3594 150.2658 131.2355 148.3719 143.35 146.0031 C
146.1 160.0863 L
f
U
146.4 60.7 m
134.0694 63.111 123.2671 65.0114 111.4 67 C
108 50.7 L
119.9985 48.6894 130.9833 46.7888 143.2 44.4 C
146.4 60.7 L
f
u
248.3469 543.5686 m
260.6632 533.0256 271.9935 522.7119 282.6666 512.3302 C
286.6667 516.0803 L
275.8249 526.6261 264.5088 537.0118 252.097 547.6353 C
248.3469 543.5686 L
f
246.8939 443.1372 m
259.3116 432.5298 270.7217 422.1769 281.5332 411.6605 C
287.3334 417.1606 L
276.4356 427.7608 264.9317 438.277 252.294 449.0706 C
246.8939 443.1372 L
f
244.4409 342.715 m
256.9601 332.0432 268.4499 321.6511 279.4 311 C
287 318.25 L
276.0463 328.9046 264.3547 339.5514 251.4909 350.515 C
244.4409 342.715 L
f
243.9879 242.2836 m
256.6085 231.5473 268.1781 221.116 279.2666 210.3302 C
288.6667 219.3303 L
277.657 230.0394 265.7776 240.8167 252.6879 251.9503 C
243.9879 242.2836 L
f
242.5349 141.8614 m
255.257 131.0607 266.9063 120.5902 278.1334 109.6697 C
289.3333 120.4197 L
278.2677 131.1831 266.2006 142.091 252.8849 153.3946 C
242.5349 141.8614 L
f
U
241.0819 41.43 m
253.9054 30.5649 265.6345 20.0552 277 9 C
290 21.5 L
278.8784 32.3179 266.6236 43.3563 253.0819 54.83 C
241.0819 41.43 L
f
u
270.4499 584.6636 m
264.307 558.8487 242.13 533.5989 209.4166 517.2636 C
211.8333 512.3302 L
246.5039 529.4846 270.6341 556.7268 276.5 585.6636 C
216.5 585.6636 L
216.5 580.3302 L
274 580.3302 L
270.4499 584.6636 L
f
268.1998 485.1272 m
262.458 459.1392 240.3861 433.9468 208.7333 418.9273 C
212.0667 411.6605 L
246.7528 427.8576 271.7106 456.3578 277 486.3273 C
216 486.3273 L
216 478.6604 L
274 478.6604 L
268.1998 485.1272 L
f
264.95 385.6 m
259.6093 359.4388 237.6423 334.3038 207.05 320.6 C
211.3 311 L
246.0017 326.2399 271.787 355.9979 276.5 387 C
214.5 387 L
214.5 377 L
273 377 L
264.95 385.6 L
f
263.6999 286.0636 m
258.7604 259.7293 236.8984 234.6516 207.3666 222.2636 C
212.5333 210.3302 L
247.2506 224.6129 273.8635 255.6289 278 287.6636 C
215 287.6636 L
215 275.3302 L
274 275.3302 L
263.6999 286.0636 L
f
261.45 186.5364 m
256.9116 160.0289 235.1546 135.0086 206.6833 123.9363 C
212.7666 109.6697 L
247.4995 122.9953 274.9399 155.2691 278.5 188.3363 C
214.5 188.3363 L
214.5 173.6697 L
274 173.6697 L
261.45 186.5364 L
f
U
259.2 87 m
255.0627 60.3194 233.4107 35.3565 206 25.6 C
213 9 L
247.7484 21.3683 276.0164 54.9001 279 89 C
214 89 L
214 72 L
274 72 L
259.2 87 L
f
u
429.8 551.0303 m
425.0856 562.2208 419.8918 573.5274 414.5834 584.4969 C
409.4333 582.1802 L
415.177 570.3128 420.1956 559.265 424.55 548.9302 C
429.8 551.0303 L
f
431.9001 451.0605 m
427.0963 462.3791 421.7712 473.9924 416.4668 484.9939 C
408.8666 481.6605 L
414.5637 469.8471 419.7476 458.4491 424.1999 447.9605 C
431.9001 451.0605 L
f
434 351.1 m
429.1067 362.5466 423.6504 374.4664 418.35 385.5 C
408.3 381.15 L
413.9505 369.3905 419.2996 357.6424 423.85 347 C
434 351.1 L
f
436.1 251.1303 m
431.1174 262.7049 425.5298 274.9314 420.2334 285.9969 C
407.7333 280.6302 L
413.3372 268.9248 418.8516 256.8265 423.5 246.0302 C
436.1 251.1303 L
f
438.1999 151.1697 m
433.1278 162.8723 427.409 175.4054 422.1166 186.503 C
407.1667 180.1197 L
412.7239 168.4682 418.4037 156.0199 423.15 145.0697 C
438.1999 151.1697 L
f
U
406.6 79.6 m
412.1106 68.0025 417.9557 55.204 422.8 44.1 C
440.3 51.2 L
435.1385 63.0307 429.2884 75.8704 424 87 C
406.6 79.6 L
f
u
183.8833 570.7136 m
176.7526 532.2088 161.6768 519.9527 116.0833 515.9637 C
116.6666 510.4969 L
164.7852 514.7069 181.6273 528.3693 189.3333 569.8302 C
183.8833 570.7136 L
f
181.7665 469.9272 m
174.6555 433.4676 160.0425 421.8273 115.4666 417.9273 C
116.3333 409.9938 L
164.6212 414.2186 181.6716 427.8008 189.6667 468.6605 C
181.7665 469.9272 L
f
179.65 369.15 m
172.5586 334.7354 158.4083 323.7109 114.85 319.9 C
116 309.5 L
164.4573 313.7396 181.7159 327.2415 190 367.5 C
179.65 369.15 L
f
177.5332 268.3636 m
170.4615 235.9941 156.7739 225.5856 114.2333 221.8637 C
115.6666 208.9969 L
164.2933 213.2514 181.7602 226.673 190.3333 266.3302 C
177.5332 268.3636 L
f
175.4167 167.5864 m
168.3647 137.2619 155.1397 127.4692 113.6167 123.8363 C
115.3333 108.503 L
164.1293 112.7723 181.8045 126.1137 190.6666 165.1697 C
175.4167 167.5864 L
f
U
173.3 66.8 m
166.2676 38.5207 153.5054 29.3438 113 25.8 C
115 8 L
163.9654 12.2841 181.8488 25.5452 191 64 C
173.3 66.8 L
f
u
479.9666 573.4469 m
477.2801 533.9647 461.6112 519.2473 423.3166 515.897 C
424.0333 510.4969 L
465.1699 514.0959 482.7366 530.9383 485.4667 573.4469 C
479.9666 573.4469 L
f
478.2332 472.5938 m
475.4801 434.9478 460.5047 421.081 422.9333 417.794 C
424.0666 409.9938 L
465.6179 413.6291 483.299 430.3846 486.2333 472.5938 C
478.2332 472.5938 L
f
476.5 371.75 m
473.6802 335.94 459.3983 322.9237 422.55 319.7 C
424.1 309.5 L
466.0658 313.1715 483.8613 329.8402 487 371.75 C
476.5 371.75 L
f
474.7666 270.8969 m
471.8802 236.9232 458.2917 224.7575 422.1666 221.597 C
424.1333 208.9969 L
466.5138 212.7048 484.4237 229.2865 487.7667 270.8969 C
474.7666 270.8969 L
f
473.0334 170.0531 m
470.0803 137.9154 457.1853 126.6002 421.7833 123.503 C
424.1666 108.503 L
466.9618 112.2472 484.986 128.742 488.5333 170.0531 C
473.0334 170.0531 L
f
U
471.3 69.2 m
468.2803 38.8986 456.0788 28.4339 421.4 25.4 C
424.2 8 L
467.4098 11.7804 485.5484 28.1884 489.3 69.2 C
471.3 69.2 L
f
u
99 584.5 m
95.7508 589.8625 92.8171 594.1244 89 599 C
85.3 596.5666 L
89.0813 591.7508 91.9491 587.5826 95.1 582.3833 C
99 584.5 L
f
99 281.9889 m
95.7533 287.6889 92.6433 292.7366 89 297.9889 C
81.3999 293.6555 L
84.8563 288.6966 88.0279 283.5844 91.1999 278.0222 C
99 281.9889 L
f
98.8333 182.0429 m
95.5875 187.8555 92.4187 193.1651 88.8333 198.5429 C
79.9333 193.5763 L
83.2814 188.5697 86.5541 183.1428 89.7333 177.4596 C
98.8333 182.0429 L
f
U
99 82 m
95.755 87.9251 92.5275 93.4966 89 99 C
78.8 93.4 L
82.0397 88.3457 85.4137 82.6042 88.6 76.8 C
99 82 L
f
u
86.1833 582.2067 m
83.0895 587.2701 80.2119 591.3851 76.55 596.0667 C
72.8839 593.652 L
76.4935 589.0504 79.3346 584.9016 82.3179 580.024 C
86.1833 582.2067 L
f
86.1999 478.6032 m
83.0888 483.8153 80.1542 488.1993 76.5333 493.0232 C
71.6012 489.9939 L
75.1239 485.322 78.058 480.8775 81.0692 475.8378 C
86.1999 478.6032 L
f
u
85.4666 378.6594 m
82.3383 384.0201 79.3466 388.6731 75.7666 393.6394 C
69.5686 389.9954 L
73.0043 385.2531 76.0316 380.5132 79.0706 375.3114 C
85.4666 378.6594 L
f
U
84.7333 278.7156 m
81.5877 284.2249 78.5389 289.1469 75 294.2555 C
67.5359 289.9969 L
70.8848 285.1843 74.0051 280.1488 77.0719 274.7849 C
84.7333 278.7156 L
f
83.85 178.7764 m
80.6871 184.4343 77.5812 189.6253 74.0833 194.8762 C
65.3534 190.003 L
68.6153 185.1201 71.8287 179.789 74.9234 174.263 C
83.85 178.7764 L
f
U
83.3 78.7401 m
80.1199 84.5467 76.9569 90.0067 73.5 95.4 C
63.504 89.9121 L
66.679 84.9588 69.9855 79.3322 73.108 73.6441 C
83.3 78.7401 L
f
u
197.1667 583.1636 m
193.9175 588.5261 190.9837 592.788 187.1667 597.6636 C
183.4666 595.2303 L
187.248 590.4144 190.1158 586.2462 193.2666 581.0469 C
197.1667 583.1636 L
f
197.3333 482.3272 m
194.085 487.8022 191.0925 492.3261 187.3333 497.3272 C
182.3332 494.2605 L
186.0063 489.397 188.9753 484.9141 192.1332 479.5938 C
197.3333 482.3272 L
f
197.5 381.5 m
194.2525 387.0875 191.2012 391.8733 187.5 397 C
181.2 393.3 L
184.7647 388.3888 187.835 383.5912 191 378.15 C
197.5 381.5 L
f
197.6667 280.6636 m
194.42 286.3636 191.31 291.4113 187.6667 296.6636 C
180.0666 292.3302 L
183.523 287.3713 186.6945 282.2591 189.8666 276.6969 C
197.6667 280.6636 L
f
197.8333 179.8364 m
194.5875 185.649 191.4187 190.9586 187.8333 196.3364 C
178.9333 191.3697 L
182.2814 186.3631 185.5541 180.9363 188.7333 175.2531 C
197.8333 179.8364 L
f
U
198 79 m
194.755 84.9251 191.5275 90.4966 188 96 C
177.8 90.4 L
181.0397 85.3457 184.4137 79.6042 187.6 73.8 C
198 79 L
f
u
99 381.9393 m
95.7525 387.5269 92.7012 392.3127 89 397.4394 C
82.6999 393.7393 L
86.2646 388.8281 89.3349 384.0306 92.4999 378.5893 C
99 381.9393 L
f
U
u
185.0666 579.8703 m
181.9728 584.9337 179.0953 589.0487 175.4333 593.7303 C
171.7673 591.3156 L
175.3768 586.714 178.2179 582.5652 181.2013 577.6876 C
185.0666 579.8703 L
f
184.5333 479.0405 m
181.4222 484.2526 178.4876 488.6366 174.8666 493.4605 C
169.9345 490.4312 L
173.4572 485.7593 176.3914 481.3149 179.4025 476.2752 C
184.5333 479.0405 L
f
99 481.8898 m
95.7517 487.3649 92.7592 491.8887 89 496.8899 C
83.9999 493.8232 L
87.6729 488.9597 90.642 484.4767 93.7999 479.1565 C
99 481.8898 L
f
184 378.22 m
180.8716 383.5807 177.8799 388.2337 174.3 393.2 C
168.102 389.556 L
171.5377 384.8138 174.565 380.0738 177.604 374.872 C
184 378.22 L
f
183.4666 277.3903 m
180.321 282.8997 177.2722 287.8217 173.7333 292.9303 C
166.2693 288.6716 L
169.6181 283.859 172.7384 278.8235 175.8052 273.4596 C
183.4666 277.3903 L
f
182.9333 176.5698 m
179.7705 182.2278 176.6646 187.4188 173.1667 192.6697 C
164.4367 187.7965 L
167.6986 182.9135 170.912 177.5825 174.0067 172.0565 C
182.9333 176.5698 L
f
U
182.4 75.7401 m
179.2199 81.5467 176.0569 87.0067 172.6 92.4 C
162.604 86.9121 L
165.779 81.9588 169.0855 76.3322 172.208 70.6441 C
182.4 75.7401 L
f
u
298.3333 555.5015 m
295.0841 560.8641 292.1504 565.126 288.3333 570.0015 C
284.6333 567.5682 L
288.4147 562.7524 291.2825 558.5842 294.4333 553.3849 C
298.3333 555.5015 L
f
298.6667 453.9984 m
295.4183 459.4735 292.4258 463.9973 288.6667 468.9984 C
283.6666 465.9318 L
287.3397 461.0683 290.3087 456.5854 293.4666 451.2651 C
298.6667 453.9984 L
f
U
u
299 352.5 m
295.7525 358.0876 292.7012 362.8733 289 368 C
282.7 364.3 L
286.2647 359.3888 289.335 354.5913 292.5 349.15 C
299 352.5 L
f
297 258 m
293.7533 263.7 290.6433 268.7477 287 274 C
279.3999 269.6666 L
282.8563 264.7077 286.0279 259.5955 289.1999 254.0333 C
297 258 L
f
U
u
297.5 158 m
294.2541 163.8126 291.0854 169.1221 287.5 174.5 C
278.6 169.5333 L
281.948 164.5267 285.2208 159.0998 288.4 153.4166 C
297.5 158 L
f
U
298 58 m
294.755 63.9251 291.5275 69.4966 288 75 C
277.8 69.4 L
281.0397 64.3457 284.4137 58.6042 287.6 52.8 C
298 58 L
f
u
286.2333 552.2082 m
283.1395 557.2716 280.262 561.3867 276.6 566.0682 C
272.934 563.6536 L
276.5436 559.052 279.3847 554.9032 282.368 550.0256 C
286.2333 552.2082 L
f
285.8666 450.7118 m
282.7555 455.9239 279.8209 460.3079 276.2 465.1318 C
271.2679 462.1025 L
274.7906 457.4306 277.7248 452.9862 280.736 447.9465 C
285.8666 450.7118 L
f
U
u
285.5 349.2201 m
282.3716 354.5808 279.3799 359.2338 275.8 364.2 C
269.602 360.5561 L
273.0377 355.8138 276.065 351.0739 279.104 345.8721 C
285.5 349.2201 L
f
282.8 254.7267 m
279.6544 260.236 276.6056 265.158 273.0666 270.2667 C
265.6026 266.008 L
268.9514 261.1954 272.0718 256.1599 275.1386 250.796 C
282.8 254.7267 L
f
U
u
282.6 154.7334 m
279.4371 160.3914 276.3312 165.5824 272.8333 170.8333 C
264.1033 165.96 L
267.3652 161.0771 270.5786 155.7461 273.6733 150.22 C
282.6 154.7334 L
f
U
282.4 54.7401 m
279.2199 60.5467 276.0569 66.0067 272.6 71.4 C
262.604 65.9121 L
265.779 60.9588 269.0855 55.3322 272.208 49.6441 C
282.4 54.7401 L
f
u
396 582 m
392.7508 587.3625 389.8171 591.6244 386 596.5 C
382.3 594.0666 L
386.0813 589.2508 388.9492 585.0826 392.1 579.8833 C
396 582 L
f
396 482 m
392.7517 487.475 389.7592 491.9988 386 497 C
381 493.9333 L
384.673 489.0698 387.6421 484.5869 390.8 479.2666 C
396 482 L
f
396 382 m
392.7525 387.5875 389.7013 392.3733 386 397.5 C
379.6999 393.8 L
383.2646 388.8888 386.335 384.0912 389.5 378.65 C
396 382 L
f
U
u
396 282 m
392.7533 287.7 389.6433 292.7477 386 298 C
378.3999 293.6666 L
381.8563 288.7077 385.0279 283.5955 388.1999 278.0333 C
396 282 L
f
397 179.5 m
393.7542 185.3126 390.5854 190.6222 387 196 C
378.1 191.0333 L
381.4481 186.0267 384.7208 180.5999 387.9 174.9167 C
397 179.5 L
f
U
398 81 m
394.755 86.9251 391.5275 92.4966 388 98 C
377.8 92.4 L
381.0397 87.3457 384.4137 81.6042 387.6 75.8 C
398 81 L
f
u
383.575 579.2067 m
380.4811 584.2701 377.6036 588.3851 373.9416 593.0666 C
370.2756 590.652 L
373.8852 586.0504 376.7263 581.9016 379.7096 577.024 C
383.575 579.2067 L
f
382.55 479.7133 m
379.4389 484.9254 376.5043 489.3094 372.8833 494.1333 C
367.9513 491.104 L
371.474 486.4321 374.4081 481.9877 377.4193 476.948 C
382.55 479.7133 L
f
381.525 380.22 m
378.3966 385.5807 375.4049 390.2337 371.825 395.2 C
365.6269 391.556 L
369.0627 386.8138 372.0899 382.0738 375.1289 376.872 C
381.525 380.22 L
f
U
u
380.5 280.7267 m
377.3544 286.236 374.3056 291.158 370.7666 296.2667 C
363.3026 292.008 L
366.6514 287.1954 369.7718 282.1599 372.8386 276.796 C
380.5 280.7267 L
f
382.1 176.2334 m
378.9372 181.8914 375.8312 187.0824 372.3333 192.3333 C
363.6034 187.4601 L
366.8653 182.5771 370.0787 177.2461 373.1734 171.7201 C
382.1 176.2334 L
f
U
382.4 77.7401 m
379.2199 83.5467 376.0569 89.0067 372.6 94.4 C
362.604 88.9121 L
365.779 83.9588 369.0855 78.3322 372.208 72.6441 C
382.4 77.7401 L
f
u
497.1667 583.3302 m
493.9175 588.6928 490.9837 592.9547 487.1667 597.8303 C
483.4666 595.3969 L
487.248 590.5811 490.1158 586.4129 493.2666 581.2136 C
497.1667 583.3302 L
f
497.3333 482.6605 m
494.085 488.1356 491.0925 492.6594 487.3333 497.6605 C
482.3332 494.5938 L
486.0063 489.7303 488.9753 485.2474 492.1332 479.9271 C
497.3333 482.6605 L
f
497.5 382 m
494.2525 387.5875 491.2012 392.3733 487.5 397.5 C
481.2 393.8 L
484.7647 388.8888 487.835 384.0912 491 378.65 C
497.5 382 L
f
497.6667 281.3302 m
494.42 287.0303 491.31 292.078 487.6667 297.3303 C
480.0666 292.9969 L
483.523 288.038 486.6945 282.9258 489.8666 277.3636 C
497.6667 281.3302 L
f
497.8333 180.6697 m
494.5875 186.4823 491.4187 191.7919 487.8333 197.1697 C
478.9333 192.2031 L
482.2814 187.1965 485.5541 181.7696 488.7333 176.0864 C
497.8333 180.6697 L
f
U
498 80 m
494.755 85.9251 491.5275 91.4966 488 97 C
477.8 91.4 L
481.0397 86.3457 484.4137 80.6042 487.6 74.8 C
498 80 L
f
u
485.0666 580.0369 m
481.9728 585.1004 479.0953 589.2154 475.4333 593.8969 C
471.7673 591.4823 L
475.3768 586.8807 478.2179 582.7319 481.2013 577.8542 C
485.0666 580.0369 L
f
484.5333 479.3739 m
481.4222 484.5859 478.4876 488.97 474.8666 493.7939 C
469.9345 490.7646 L
473.4572 486.0926 476.3914 481.6482 479.4025 476.6085 C
484.5333 479.3739 L
f
484 378.72 m
480.8716 384.0807 477.8799 388.7337 474.3 393.7 C
468.102 390.056 L
471.5377 385.3138 474.565 380.5738 477.604 375.372 C
484 378.72 L
f
483.4666 278.057 m
480.321 283.5663 477.2722 288.4883 473.7333 293.5969 C
466.2693 289.3383 L
469.6181 284.5257 472.7384 279.4902 475.8052 274.1263 C
483.4666 278.057 L
f
482.9333 177.4031 m
479.7705 183.0611 476.6646 188.2521 473.1667 193.503 C
464.4367 188.6298 L
467.6986 183.7469 470.912 178.4158 474.0067 172.8898 C
482.9333 177.4031 L
f
U
482.4 76.7401 m
479.2199 82.5467 476.0569 88.0067 472.6 93.4 C
462.604 87.9121 L
465.779 82.9588 469.0855 77.3322 472.208 71.6441 C
482.4 76.7401 L
f
u
328.1666 591.1636 m
328.1666 535.9969 L
328.1666 517.6641 334.723 511.4969 352.6666 511.4969 C
384.3333 511.4969 L
384.3333 516.8303 L
353.1667 516.8303 l
338.1478 516.8303 333.8334 521.1441 333.8334 536.3303 c
333.8334 591.1636 L
328.1666 591.1636 L
f
327.3333 491.3272 m
327.3333 435.9939 L
327.3333 417.2692 333.9664 410.9938 352.3333 410.9938 C
384.6667 410.9938 L
384.6667 418.6607 L
353.3333 418.6607 l
339.3892 418.6607 335.6668 422.3818 335.6668 436.6606 c
335.6668 491.3272 L
327.3333 491.3272 L
f
326.5 391.5 m
326.5 336 L
326.5 316.8834 333.2099 310.5 352 310.5 C
385 310.5 L
385 320.5 L
353.5 320.5 l
340.6304 320.5 337.5 323.6285 337.5 337 c
337.5 391.5 L
326.5 391.5 L
f
325.6666 291.6636 m
325.6666 235.9969 L
325.6666 216.4885 332.4532 209.9969 351.6666 209.9969 C
385.3333 209.9969 L
385.3333 222.3303 L
353.6667 222.3303 l
341.8718 222.3303 339.3334 224.8661 339.3334 237.3303 c
339.3334 291.6636 L
325.6666 291.6636 L
f
324.8333 191.8364 m
324.8333 136.003 L
324.8333 116.1027 331.6967 109.503 351.3333 109.503 C
385.6666 109.503 L
385.6666 124.1696 L
353.8333 124.1696 l
343.113 124.1696 341.1666 126.1128 341.1666 137.6697 c
341.1666 191.8364 L
324.8333 191.8364 L
f
U
u
324 92 m
324 36 L
324 15.7078 330.9401 9 351 9 C
386 9 L
386 26 L
354 26 l
344.3544 26 343 27.3505 343 38 c
343 92 L
324 92 L
f
U
u
383.623 572.0507 m
382.8591 551.7086 379.2833 545.4988 364.6666 537.7159 C
367.8333 533.0825 L
384.1129 541.9233 388.6635 549.4813 389.3333 573.7492 C
305.4255 562.4867 L
306.0069 557.1257 L
387.3999 568.0855 L
383.623 572.0507 L
f
381.2949 472.2895 m
380.6528 451.9481 377.7234 446.8269 363.3333 438.5318 C
368.2667 431.9651 L
385.0402 441.9143 389.1308 448.9717 389.6667 474.4985 C
305.0268 463.6479 L
305.7719 455.8968 L
387.1112 466.3697 L
381.2949 472.2895 L
f
378.9667 372.5284 m
378.4465 352.1876 376.1635 348.155 362 339.3477 C
368.7 330.8477 L
385.9674 341.9053 389.5981 348.4621 390 375.2477 C
304.6281 364.8092 L
305.537 354.6678 L
386.8225 364.654 L
378.9667 372.5284 L
f
U
u
376.6386 272.7672 m
376.2402 252.4272 374.6036 249.4831 360.6666 240.1636 C
369.1333 229.7302 L
386.8947 241.8964 390.0653 247.9525 390.3333 275.997 C
304.2293 265.9704 L
305.3021 253.4389 L
386.5338 262.9382 L
376.6386 272.7672 L
f
374.3106 174.2629 m
374.0341 153.9235 373.0438 152.068 359.3334 142.2363 C
369.5666 129.8697 L
387.822 143.1442 390.5326 148.6998 390.6666 178.003 C
303.8306 168.3884 L
305.0672 153.4669 L
386.2451 162.4795 L
374.3106 174.2629 L
f
U
371.9824 74.7495 m
371.8278 54.4108 371.4839 53.6438 358 43.3 C
370 29 L
388.7493 43.383 390.9999 48.4379 391 79 C
303.4319 69.7974 L
304.8323 52.4856 L
385.9564 61.0114 L
371.9824 74.7495 L
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
