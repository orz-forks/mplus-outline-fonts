%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (2536.eps)
%%CreationDate: (5/31/04) (4:10 PM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
1 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
500 600 m
500 700 L
400 700 L
400 600 L
500 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
400 600 m
400 700 L
300 700 L
300 600 L
400 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
500 500 m
500 600 L
400 600 L
400 500 L
500 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
400 500 m
400 600 L
300 600 L
300 500 L
400 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
0 Ap
0 O
0 g
1 D
249.8 644 m
262.0149 633.5215 273.2654 623.247 283.8 613 C
286 615 L
275.2142 625.4914 264.0858 635.7465 251.9 646.2 C
249.8 644 L
f
273 685 m
217 685 L
217 682 L
274 682 L
272.6 684 L
265.3821 659.4214 244.101 634.8662 210 615.5 C
211.6 613 L
245.1643 632.0614 267.0092 656.1413 275.0662 681.7913 C
273 685 L
f
186 672.5 m
178.8497 631.9501 163.3112 619.0781 116.7 615 C
117 612 L
164.9492 616.1951 181.583 629.9378 189 672 C
186 672.5 L
f
149 682 m
137.8125 684.1875 127.5625 686.0625 116 688 C
115.4 685 L
126.564 683.1293 136.8968 681.2688 148.5 679 C
149 682 L
f
144.6 658 m
133.4125 660.1875 123.1625 662.0625 111.6 664 C
111 661 L
122.164 659.1293 132.4968 657.2688 144.1 655 C
144.6 658 L
f
481.3 670.6 m
477.9055 633.2115 462.045 618.3548 423.7 615 C
424 612 L
463.2619 615.4349 480.8243 631.104 484.3 670.6 C
481.3 670.6 L
f
410 683.3 m
416.875 673.7625 423.697 663.5572 430 653.3 C
432.6 654.8 L
426.3308 665.0023 419.583 675.1739 412.5 685 C
410 683.3 L
f
292.5 678 m
288.7352 683.347 285.375 687.9375 281.5 693 C
279.1 691.2 L
282.875 686.25 286.0417 681.9218 290 676.3 C
292.5 678 L
f
272.4501 680.7589 m
275.4567 676.7656 278.2039 672.9813 281.5 668.3 C
284 670 L
280.2352 675.347 276.875 679.9375 273 685 C
272.4501 680.7589 L
f
383 616 m
352 616 l
335.9065 616 331 620.9065 331 637 c
331 692 L
328 692 L
328 637 L
328 619.0591 334.4797 613 352 613 C
383 613 L
383 616 L
f
384.9512 673.8119 m
384.0654 653.4691 379.8431 646.1707 365 638.9 C
366.4 636.2 L
382.1856 643.9323 387.1963 651.9909 388 675 C
385.0291 674.5831 L
304.8243 663.3255 L
305.2418 660.3547 L
386.6886 671.8014 L
384.9512 673.8119 L
f
84 673 m
71 673 L
71 691 L
68 691 L
68 673 L
25 673 L
25 691 L
22 691 L
22 673 L
4 673 L
4 670 L
22 670 L
22 645 L
25 645 L
25 670 L
68 670 L
68 663 L
68 626.6735 58.8831 616.7459 24.7 614 C
25 611 L
60.4688 613.8492 71 624.5983 71 663 C
71 670 L
84 670 L
84 673 L
f
99 673 m
95.9719 678.7331 93.2844 683.4831 90 689 C
87.4 687.5 L
90.7848 681.8145 93.4289 677.0359 96.3 671.6 C
99 673 L
f
77.4 681.1 m
80.5265 675.8484 83.1108 671.1595 86.1 665.5 C
88.8 666.9 L
85.8325 672.5184 83.2187 677.1935 80 682.6 C
77.4 681.1 L
f
193 681 m
189.9719 686.7331 187.2844 691.4831 184 697 C
181.4 695.5 L
184.7848 689.8145 187.4289 685.0359 190.3 679.6 C
193 681 L
f
169.4 692.5 m
172.5265 687.2484 175.1108 682.5595 178.1 676.9 C
180.8 678.3 L
177.8325 683.9184 175.2187 688.5935 172 694 C
169.4 692.5 L
f
393 682 m
389.9719 687.7331 387.2844 692.4831 384 698 C
381.4 696.5 L
384.7848 690.8145 387.4289 686.0359 390.3 680.6 C
393 682 L
f
369.4 693.5 m
372.5265 688.2484 375.1108 683.5595 378.1 677.9 C
380.8 679.3 L
377.8325 684.9184 375.2187 689.5935 372 695 C
369.4 693.5 L
f
493 681 m
489.9719 686.7331 487.2844 691.4831 484 697 C
481.4 695.5 L
484.7848 689.8145 487.4289 685.0359 490.3 679.6 C
493 681 L
f
469.4 692.5 m
472.5265 687.2484 475.1108 682.5595 478.1 676.9 C
480.8 678.3 L
477.8325 683.9184 475.2187 688.5935 472 694 C
469.4 692.5 L
f
u
83.3333 573.497 m
71.1667 573.497 L
71.1667 590.9969 L
65.6666 590.9969 L
65.6666 573.497 L
26.3334 573.497 L
26.3334 590.9969 L
20.8333 590.9969 L
20.8333 573.497 L
3.6667 573.497 L
3.6667 568.1636 L
20.8333 568.1636 L
20.8333 544.3303 L
26.3334 544.3303 L
26.3334 568.1636 L
65.8333 568.1636 L
65.8333 561.1636 L
65.8333 527.377 57.4793 518.3678 23.8166 515.6637 C
24.3333 510.3303 L
60.6631 513.2486 71.3333 523.9707 71.3333 561.1636 C
71.3333 568.1636 L
83.3333 568.1636 L
83.3333 573.497 L
f
82.6666 473.9939 m
71.3333 473.9939 L
71.3333 490.9939 L
63.3332 490.9939 L
63.3332 473.9939 L
27.6667 473.9939 L
27.6667 490.9939 L
19.6666 490.9939 L
19.6666 473.9939 L
3.3333 473.9939 L
3.3333 466.3271 L
19.6666 466.3271 L
19.6666 443.6605 L
27.6667 443.6605 L
27.6667 466.3271 L
63.6665 466.3271 L
63.6665 459.3271 L
63.6665 428.0804 56.0755 419.9897 22.9333 417.3273 C
23.6666 409.6605 L
60.8575 412.6481 71.6667 423.3431 71.6667 459.3271 C
71.6667 466.3271 L
82.6666 466.3271 L
82.6666 473.9939 L
f
81.3333 274.997 m
72.6667 274.997 L
72.6667 290.9969 L
59.6666 290.9969 L
59.6666 274.997 L
31.3334 274.997 L
31.3334 290.9969 L
18.3333 290.9969 L
18.3333 274.997 L
3.6667 274.997 L
3.6667 262.6636 L
18.3333 262.6636 L
18.3333 242.3303 L
31.3334 242.3303 L
31.3334 262.6636 L
60.3333 262.6636 L
60.3333 255.6636 L
60.3333 229.4965 54.268 223.2424 22.1666 220.6637 C
23.3333 208.3303 L
62.2461 211.4561 73.3333 222.0972 73.3333 255.6636 C
73.3333 262.6636 L
81.3333 262.6636 L
81.3333 274.997 L
f
80.6667 175.503 m
72.8333 175.503 L
72.8333 191.003 L
57.3334 191.003 L
57.3334 175.503 L
32.6666 175.503 L
32.6666 191.003 L
17.1667 191.003 L
17.1667 175.503 L
3.3333 175.503 L
3.3333 160.8364 L
17.1667 160.8364 L
17.1667 141.6697 L
32.6666 141.6697 L
32.6666 160.8364 L
58.1667 160.8364 L
58.1667 153.8364 L
58.1667 130.209 52.8644 124.8732 21.2834 122.3363 C
22.6667 107.6697 L
62.4404 110.8648 73.6667 121.4788 73.6667 153.8364 C
73.6667 160.8364 L
80.6667 160.8364 L
80.6667 175.503 L
f
U
u
81 374.5 m
73.5 374.5 L
73.5 391 L
63 391 L
63 374.5 L
31 374.5 L
31 391 L
20.5 391 L
20.5 374.5 L
4 374.5 L
4 364.5 L
20.5 364.5 L
20.5 343 L
31 343 L
31 364.5 L
63.5 364.5 L
63.5 357.5 L
63.5 328.793 56.6718 321.6205 24.05 319 C
25 309 L
63.0518 312.0567 74 322.7248 74 357.5 C
74 364.5 L
81 364.5 L
81 374.5 L
f
U
21 7 m
61.6348 10.2642 73 20.8512 73 52 C
73 59 L
80 59 L
80 76 L
72 76 L
72 91 L
54 91 L
54 76 L
33 76 L
33 91 L
15 91 L
15 76 L
2 76 L
2 59 L
15 59 L
15 41 L
33 41 L
33 59 L
55 59 L
55 52 l
55 30.9125 50.4606 26.4951 19.4 24 C
21 7 L
f
u
183.7166 571.5469 m
176.5859 533.0422 161.5102 520.7861 115.9166 516.797 C
116.5 511.3303 L
164.6185 515.5402 181.4606 529.2026 189.1667 570.6636 C
183.7166 571.5469 L
f
181.4332 470.5939 m
174.3222 434.1343 159.7091 422.494 115.1333 418.594 C
116 410.6605 L
164.2879 414.8853 181.3382 428.4674 189.3333 469.3272 C
181.4332 470.5939 L
f
179.15 369.65 m
172.0586 335.2354 157.9083 324.2109 114.35 320.4 C
115.5 310 L
163.9573 314.2396 181.2159 327.7415 189.5 368 C
179.15 369.65 L
f
176.8666 268.6969 m
169.7949 236.3275 156.1072 225.9189 113.5666 222.197 C
115 209.3303 L
163.6266 213.5847 181.0935 227.0063 189.6667 266.6636 C
176.8666 268.6969 L
f
174.5834 167.7531 m
167.5313 137.4286 154.3064 127.6358 112.7834 124.003 C
114.5 108.6697 L
163.296 112.939 180.9711 126.2804 189.8333 165.3364 C
174.5834 167.7531 L
f
U
172.3 66.8 m
165.2676 38.5207 152.5054 29.3438 112 25.8 C
114 8 L
162.9654 12.2841 180.8488 25.5452 190 64 C
172.3 66.8 L
f
u
149.2333 582.6136 m
137.8553 584.8384 127.5133 586.7176 115.9 588.6636 C
114.8333 583.4469 L
126.1364 581.5529 136.5779 579.6857 148.2833 577.3969 C
149.2333 582.6136 L
f
149.4667 483.2273 m
137.8981 485.4893 127.464 487.3727 115.8 489.3273 C
114.2666 481.8938 L
125.7088 479.9765 136.2589 478.1026 148.0666 475.7938 C
149.4667 483.2273 L
f
149.7 383.85 m
137.9409 386.1492 127.4148 388.0369 115.7 390 C
113.7 380.35 L
125.2812 378.4093 135.94 376.5288 147.85 374.2 C
149.7 383.85 L
f
149.9333 284.4636 m
137.9838 286.8001 127.3655 288.6921 115.6 290.6636 C
113.1333 278.7969 L
124.8536 276.8329 135.6211 274.9457 147.6333 272.5969 C
149.9333 284.4636 L
f
150.1667 185.0864 m
138.0266 187.4601 127.3163 189.3563 115.5 191.3364 C
112.5667 177.2531 L
124.4261 175.2658 135.3022 173.3719 147.4167 171.0031 C
150.1667 185.0864 L
f
U
150.4 85.7 m
138.0694 88.111 127.2671 90.0114 115.4 92 C
112 75.7 L
123.9985 73.6894 134.9833 71.7888 147.2 69.4 C
150.4 85.7 L
f
u
144.7333 558.447 m
133.3553 560.6717 123.0133 562.551 111.4 564.497 C
110.3333 559.2802 L
121.6364 557.3862 132.0779 555.519 143.7833 553.2302 C
144.7333 558.447 L
f
144.8667 458.8939 m
133.2981 461.1559 122.864 463.0394 111.2 464.9939 C
109.6666 457.5605 L
121.1088 455.6431 131.6589 453.7693 143.4666 451.4605 C
144.8667 458.8939 L
f
145 359.35 m
133.2409 361.6492 122.7148 363.5369 111 365.5 C
109 355.85 L
120.5812 353.9093 131.24 352.0288 143.15 349.7 C
145 359.35 L
f
145.1333 259.797 m
133.1837 262.1335 122.5655 264.0254 110.8 265.997 C
108.3333 254.1302 L
120.0536 252.1663 130.8211 250.279 142.8333 247.9302 C
145.1333 259.797 L
f
145.2666 160.253 m
133.1266 162.6268 122.4163 164.5229 110.6 166.503 C
107.6667 152.4198 L
119.5261 150.4325 130.4022 148.5386 142.5167 146.1698 C
145.2666 160.253 L
f
U
145.4 60.7 m
133.0694 63.111 122.2671 65.0114 110.4 67 C
107 50.7 L
118.9985 48.6894 129.9833 46.7888 142.2 44.4 C
145.4 60.7 L
f
u
479.2499 570.3636 m
475.9051 534.4567 460.6219 520.3567 422.9833 517.0637 C
423.6667 511.6636 L
463.2821 515.1295 481.1359 530.6843 484.75 570.3636 C
479.2499 570.3636 L
f
477.1999 470.1272 m
473.9047 435.7018 459.1988 422.3585 422.2666 419.1274 C
423.3333 411.3272 L
463.3022 414.824 481.4474 430.2646 485.2 470.1272 C
477.1999 470.1272 L
f
475.15 369.9 m
471.9045 336.9561 457.7758 324.3694 421.55 321.2 C
423 311 L
463.3224 314.5277 481.759 329.854 485.65 369.9 C
475.15 369.9 L
f
473.0999 269.6636 m
469.9042 238.2012 456.3527 226.3712 420.8333 223.2637 C
422.6667 210.6636 L
463.3425 214.2222 482.0706 229.4343 486.1 269.6636 C
473.0999 269.6636 L
f
471.05 169.4364 m
467.904 139.4554 454.9297 128.382 420.1167 125.3363 C
422.3333 110.3364 L
463.3627 113.926 482.3821 129.0237 486.55 169.4364 C
471.05 169.4364 L
f
U
469 69.2 m
465.9036 40.7006 453.5066 30.3839 419.4 27.4 C
422 10 L
463.3829 13.6205 482.6937 28.604 487 69.2 C
469 69.2 L
f
u
409.3333 582.6803 m
416.241 572.9461 423.1904 562.4482 429.5 552.1802 C
434.4167 554.9636 L
428.0661 565.2984 421.1835 575.761 414.15 585.6636 C
409.3333 582.6803 L
f
408.6666 482.0605 m
415.607 472.1296 422.6838 461.3392 429 451.0605 C
436.2334 455.1273 L
429.8013 465.5945 422.7841 476.3481 415.8001 486.3273 C
408.6666 482.0605 L
f
408 381.45 m
414.973 371.3224 422.1772 360.2395 428.5 349.95 C
438.05 355.3 L
431.5365 365.8997 424.3844 376.9443 417.45 387 C
408 381.45 L
f
407.3333 280.8303 m
414.339 270.506 421.6706 259.1304 428 248.8302 C
439.8667 255.4636 L
433.2718 266.1959 425.985 277.5314 419.1 287.6636 C
407.3333 280.8303 L
f
406.6667 180.2197 m
413.7051 169.6987 421.164 158.0307 427.5 147.7198 C
441.6833 155.6364 L
435.0069 166.5011 427.5854 178.1276 420.7499 188.3364 C
406.6667 180.2197 L
f
U
406 79.6 m
413.0711 68.8823 420.6574 56.9217 427 46.6 C
443.5 55.8 L
436.7422 66.7972 429.1859 78.7147 422.4 89 C
406 79.6 L
f
u
327.1666 592.1636 m
327.1666 536.9969 L
327.1666 518.6642 333.7231 512.4969 351.6667 512.4969 C
383.3333 512.4969 L
383.3333 517.8303 L
352.1667 517.8303 l
337.1478 517.8303 332.8334 522.1442 332.8334 537.3303 c
332.8334 592.1636 L
327.1666 592.1636 L
f
326.3333 492.3273 m
326.3333 436.9939 L
326.3333 418.2692 332.9664 411.9939 351.3333 411.9939 C
383.6667 411.9939 L
383.6667 419.6607 L
352.3333 419.6607 l
338.3892 419.6607 334.6668 423.3818 334.6668 437.6606 c
334.6668 492.3273 L
326.3333 492.3273 L
f
325.5 392.5 m
325.5 337 L
325.5 317.8834 332.2099 311.5 351 311.5 C
384 311.5 L
384 321.5 L
352.5 321.5 l
339.6304 321.5 336.5 324.6285 336.5 338 c
336.5 392.5 L
325.5 392.5 L
f
324.6666 292.6636 m
324.6666 236.9969 L
324.6666 217.4885 331.4532 210.9969 350.6667 210.9969 C
384.3333 210.9969 L
384.3333 223.3303 L
352.6667 223.3303 l
340.8718 223.3303 338.3334 225.8662 338.3334 238.3303 c
338.3334 292.6636 L
324.6666 292.6636 L
f
323.8334 192.8364 m
323.8334 137.003 L
323.8334 117.1027 330.6967 110.5031 350.3333 110.5031 C
384.6667 110.5031 L
384.6667 125.1697 L
352.8333 125.1697 l
342.113 125.1697 340.1666 127.1128 340.1666 138.6697 c
340.1666 192.8364 L
323.8334 192.8364 L
f
U
u
323 93 m
323 37 L
323 16.7078 329.9401 10 350 10 C
385 10 L
385 27 L
353 27 l
343.3544 27 342 28.3505 342 39 c
342 93 L
323 93 L
f
U
u
248.1802 543.5686 m
260.4966 533.0257 271.8269 522.712 282.4999 512.3303 C
286.5 516.0803 L
275.6582 526.6262 264.3421 537.0118 251.9303 547.6353 C
248.1802 543.5686 L
f
246.5605 443.1372 m
258.9783 432.5299 270.3883 422.177 281.1999 411.6605 C
287 417.1606 L
276.1023 427.7609 264.5984 438.2771 251.9606 449.0707 C
246.5605 443.1372 L
f
244.9409 342.715 m
257.4601 332.0432 268.9499 321.6511 279.9 311 C
287.5 318.25 L
276.5463 328.9046 264.8547 339.5514 251.9909 350.515 C
244.9409 342.715 L
f
243.3212 242.2836 m
255.9418 231.5474 267.5114 221.1161 278.5999 210.3303 C
288 219.3303 L
276.9903 230.0394 265.111 240.8167 252.0213 251.9503 C
243.3212 242.2836 L
f
241.7016 141.8614 m
254.4237 131.0607 266.073 120.5902 277.3 109.6697 C
288.5 120.4197 L
277.4343 131.1831 265.3673 142.091 252.0516 153.3947 C
241.7016 141.8614 L
f
U
240.0819 41.43 m
252.9054 30.5649 264.6345 20.0552 276 9 C
289 21.5 L
277.8784 32.3179 265.6236 43.3563 252.0819 54.83 C
240.0819 41.43 L
f
u
272.8833 585.3303 m
216.3333 585.3303 L
216.3333 579.9969 L
273.5 579.9969 L
269.8666 584.1636 L
263.1621 559.2347 242.1525 534.9449 209.1666 517.1803 C
211.6667 512.3303 L
244.8408 530.067 267.1076 554.5647 274.9533 580.9429 C
272.8833 585.3303 L
f
272.7666 485.6606 m
215.6666 485.6606 L
215.6666 477.9938 L
273 477.9938 L
267.1332 484.3273 L
260.9421 459.048 240.2041 435.0235 208.3333 418.8607 C
211.7333 411.6605 L
244.5173 428.0726 267.2061 452.988 274.8403 480.0945 C
272.7666 485.6606 L
f
272.65 386 m
215 386 L
215 376 L
272.5 376 L
264.4 384.5 L
258.7224 358.8704 238.2558 335.1113 207.5 320.55 C
211.8 311 L
244.1939 326.0875 267.3045 351.4207 274.7274 379.2553 C
272.65 386 L
f
272.5333 286.3303 m
214.3333 286.3303 L
214.3333 273.9969 L
272 273.9969 L
261.6666 284.6636 L
256.5024 258.6837 236.3074 235.19 206.6666 222.2303 C
211.8666 210.3303 L
243.8704 224.0932 267.4029 249.8441 274.6145 278.4069 C
272.5333 286.3303 L
f
272.4167 186.6697 m
213.6667 186.6697 L
213.6667 172.0031 L
271.5 172.0031 L
258.9334 184.8364 L
254.2826 158.5061 234.3591 135.2778 205.8334 123.9197 C
211.9333 109.6697 L
243.5469 122.1081 267.5013 148.2767 274.5016 177.5677 C
272.4167 186.6697 L
f
U
272.3 87 m
213 87 L
213 70 L
271 70 L
256.2 85 L
252.0627 58.3194 232.4107 35.3565 205 25.6 C
212 9 L
243.2235 20.1137 267.5998 46.7001 274.3887 76.7193 C
272.3 87 L
f
u
270.661 580.6037 m
273.8995 576.3348 277.0211 572.0506 280.4566 567.1669 C
284.3367 569.727 L
280.5051 575.173 276.8373 580.1724 272.8833 585.3303 C
270.661 580.6037 L
f
268.8719 480.4485 m
272.3423 475.9039 275.8382 471.1198 279.4132 466.0339 C
284.6733 469.4539 L
280.7751 474.999 276.7996 480.4073 272.7666 485.6606 C
268.8719 480.4485 L
f
267.083 380.3024 m
270.7852 375.4822 274.6555 370.1983 278.37 364.91 C
285.0099 369.19 L
281.045 374.8341 276.7618 380.6512 272.65 386 C
267.083 380.3024 L
f
265.294 280.1472 m
269.228 275.0513 273.4727 269.2676 277.3266 263.777 C
285.3466 268.917 L
281.315 274.6601 276.7241 280.8861 272.5333 286.3303 C
265.294 280.1472 L
f
263.505 180.0012 m
267.671 174.6296 272.29 168.346 276.2833 162.6532 C
285.6832 168.6531 L
281.5849 174.4953 276.6864 181.1301 272.4167 186.6697 C
263.505 180.0012 L
f
U
286.0199 68.3801 m
281.8549 74.3213 276.6487 81.365 272.3 87 C
261.716 79.846 L
266.1138 74.1988 271.1072 67.4153 275.24 61.5201 C
286.0199 68.3801 L
f
u
380.1232 277.9241 m
303.896 268.9704 L
304.9688 256.4389 L
384.8744 265.7989 L
374.9792 274.9612 L
374.5808 254.6211 372.9442 251.6771 359.0073 242.3576 C
367.474 231.9242 L
382.141 241.7166 386.9891 248.0968 388.2539 266.1175 C
380.1232 277.9241 L
f
378.8969 178.7662 m
303.6639 170.3884 L
304.9005 155.4669 L
384.4208 164.3052 L
372.4863 175.2554 L
372.2099 154.916 371.2196 153.0605 357.5092 143.2288 C
367.7425 130.8622 L
381.8489 140.9683 386.7458 146.8957 388.2326 162.9333 C
378.8969 178.7662 L
f
U
377.6704 79.5992 m
303.4319 71.7974 L
304.8323 54.4856 L
383.9673 62.8023 L
369.9933 75.5404 L
369.8387 55.2017 369.4949 54.4348 356.011 44.0909 C
368.011 29.7909 L
382.1188 40.6134 386.8855 46.1544 388.3809 61.6809 C
377.6704 79.5992 L
f
u
193.8334 580.4969 m
190.7058 586.3579 187.7236 591.5471 184.3333 597.1636 C
180.2833 594.8469 L
183.7452 589.1051 186.6682 583.9167 189.65 578.3302 C
193.8334 580.4969 L
f
194.6667 479.9939 m
191.4396 485.9826 188.1628 491.611 184.6667 497.3273 C
179.1666 494.1939 L
182.7056 488.3957 185.9075 482.7974 188.9999 477.0605 C
194.6667 479.9939 L
f
195.5 379.5 m
192.1734 385.6165 188.6019 391.6841 185 397.5 C
178.05 393.55 L
181.6661 387.6955 185.1468 381.6875 188.35 375.8 C
195.5 379.5 L
f
196.3334 278.9969 m
192.9073 285.2413 189.0411 291.748 185.3333 297.6636 C
176.9333 292.8969 L
180.6265 286.9861 184.3861 280.5682 187.7 274.5302 C
196.3334 278.9969 L
f
197.1666 178.5031 m
193.6411 184.8752 189.4803 191.8211 185.6667 197.8364 C
175.8167 192.2531 L
179.587 186.2859 183.6255 179.4582 187.05 173.2698 C
197.1666 178.5031 L
f
U
174.7 91.6 m
178.5475 85.5765 182.8648 78.339 186.4 72 C
198 78 L
194.375 84.5 189.9195 91.8851 186 98 C
174.7 91.6 L
f
u
167.4833 591.6969 m
170.7171 586.3368 173.5815 581.2485 176.6499 575.4969 C
180.8 577.6469 L
177.735 583.3906 174.8224 588.4928 171.5 593.9969 C
167.4833 591.6969 L
f
165.5665 490.8939 m
168.9077 485.4251 172.0523 479.9376 175.1999 474.0938 C
180.8 476.9939 L
177.6375 482.8628 174.4261 488.392 171 493.9939 C
165.5665 490.8939 L
f
163.65 390.1 m
167.0985 384.5227 170.5231 378.6358 173.75 372.7 C
180.8 376.35 L
177.54 382.3442 174.0299 388.3004 170.5 394 C
163.65 390.1 L
f
161.7332 289.2969 m
165.2891 283.611 168.9939 277.3249 172.2999 271.2969 C
180.8 275.6969 L
177.4425 281.8164 173.6336 288.1997 170 293.9969 C
161.7332 289.2969 L
f
159.8167 188.5031 m
163.4799 182.7086 167.4647 176.0232 170.85 169.9031 C
180.8 175.0531 L
177.345 181.2978 173.2373 188.1081 169.5 194.003 C
159.8167 188.5031 L
f
U
157.9 87.7 m
161.6705 81.797 165.9355 74.7122 169.4 68.5 C
180.8 74.4 L
177.2475 80.77 172.8411 88.0074 169 94 C
157.9 87.7 L
f
u
393.8334 581.3303 m
390.7058 587.1912 387.7236 592.3804 384.3333 597.9969 C
380.2833 595.6803 L
383.7452 589.9384 386.6682 584.75 389.65 579.1636 C
393.8334 581.3303 L
f
394.6667 481.6605 m
391.4396 487.6493 388.1628 493.2777 384.6667 498.9939 C
379.1666 495.8605 L
382.7056 490.0624 385.9075 484.4641 388.9999 478.7272 C
394.6667 481.6605 L
f
397.5 380 m
394.1734 386.1165 390.6019 392.1841 387 398 C
380.05 394.05 L
383.6661 388.1955 387.1468 382.1875 390.35 376.3 C
397.5 380 L
f
396.3334 279.3303 m
392.9073 285.5746 389.0411 292.0814 385.3333 297.9969 C
376.9333 293.2303 L
380.6265 287.3194 384.3861 280.9015 387.7 274.8636 C
396.3334 279.3303 L
f
397.3666 178.6697 m
393.8411 185.0419 389.6803 191.9878 385.8666 198.003 C
376.0167 192.4197 L
379.787 186.4526 383.8255 179.6249 387.25 173.4364 C
397.3666 178.6697 L
f
U
374.7 91.6 m
378.5475 85.5765 382.8648 78.339 386.4 72 C
398 78 L
394.375 84.5 389.9195 91.8851 386 98 C
374.7 91.6 L
f
u
367.4833 592.5303 m
370.7171 587.1701 373.5815 582.0819 376.6499 576.3303 C
380.8 578.4803 L
377.735 584.2239 374.8224 589.3261 371.5 594.8303 C
367.4833 592.5303 L
f
365.5665 492.5605 m
368.9077 487.0918 372.0523 481.6042 375.1999 475.7605 C
380.8 478.6605 L
377.6375 484.5295 374.4261 490.0587 371 495.6606 C
365.5665 492.5605 L
f
365.65 390.6 m
369.0985 385.0227 372.5231 379.1358 375.75 373.2 C
382.8 376.85 L
379.54 382.8442 376.0299 388.8004 372.5 394.5 C
365.65 390.6 L
f
361.7332 289.6302 m
365.2891 283.9444 368.9939 277.6582 372.2999 271.6302 C
380.8 276.0303 L
377.4425 282.1497 373.6336 288.533 370 294.3303 C
361.7332 289.6302 L
f
360.0167 188.6697 m
363.6799 182.8753 367.6647 176.1898 371.05 170.0697 C
381 175.2197 L
377.545 181.4645 373.4373 188.2748 369.7 194.1697 C
360.0167 188.6697 L
f
U
357.9 87.7 m
361.6705 81.797 365.9355 74.7122 369.4 68.5 C
380.8 74.4 L
377.2475 80.77 372.8411 88.0074 369 94 C
357.9 87.7 L
f
u
493.8334 580.4969 m
490.7058 586.3579 487.7236 591.5471 484.3333 597.1636 C
480.2833 594.8469 L
483.7452 589.1051 486.6682 583.9167 489.65 578.3302 C
493.8334 580.4969 L
f
494.6667 479.9939 m
491.4396 485.9826 488.1628 491.611 484.6667 497.3273 C
479.1666 494.1939 L
482.7056 488.3957 485.9075 482.7974 488.9999 477.0605 C
494.6667 479.9939 L
f
495.5 379.5 m
492.1734 385.6165 488.6019 391.6841 485 397.5 C
478.05 393.55 L
481.6661 387.6955 485.1468 381.6875 488.35 375.8 C
495.5 379.5 L
f
496.3334 278.9969 m
492.9073 285.2413 489.0411 291.748 485.3333 297.6636 C
476.9333 292.8969 L
480.6265 286.9861 484.3861 280.5682 487.7 274.5302 C
496.3334 278.9969 L
f
497.1666 176.5031 m
493.6411 182.8752 489.4803 189.8211 485.6667 195.8364 C
475.8167 190.2531 L
479.587 184.2859 483.6255 177.4582 487.05 171.2698 C
497.1666 176.5031 L
f
U
474.7 91.6 m
478.5475 85.5765 482.8648 78.339 486.4 72 C
498 78 L
494.375 84.5 489.9195 91.8851 486 98 C
474.7 91.6 L
f
u
467.4833 591.6969 m
470.7171 586.3368 473.5815 581.2485 476.6499 575.4969 C
480.8 577.6469 L
477.735 583.3906 474.8224 588.4928 471.5 593.9969 C
467.4833 591.6969 L
f
465.5665 490.8939 m
468.9077 485.4251 472.0523 479.9376 475.1999 474.0938 C
480.8 476.9939 L
477.6375 482.8628 474.4261 488.392 471 493.9939 C
465.5665 490.8939 L
f
463.65 390.1 m
467.0985 384.5227 470.5231 378.6358 473.75 372.7 C
480.8 376.35 L
477.54 382.3442 474.0299 388.3004 470.5 394 C
463.65 390.1 L
f
461.7332 289.2969 m
465.2891 283.611 468.9939 277.3249 472.2999 271.2969 C
480.8 275.6969 L
477.4425 281.8164 473.6336 288.1997 470 293.9969 C
461.7332 289.2969 L
f
459.8167 186.5031 m
463.4799 180.7086 467.4647 174.0232 470.85 167.9031 C
480.8 173.0531 L
477.345 179.2978 473.2373 186.1081 469.5 192.003 C
459.8167 186.5031 L
f
U
457.9 87.7 m
461.6705 81.797 465.9355 74.7122 469.4 68.5 C
480.8 74.4 L
477.2475 80.77 472.8411 88.0074 469 94 C
457.9 87.7 L
f
u
99 573.6637 m
95.9026 579.4704 92.9576 584.5981 89.6 590.1636 C
85.6441 587.9003 L
89.074 582.2087 91.961 577.0806 94.9133 571.547 C
99 573.6637 L
f
99 475.3273 m
95.8333 481.2077 92.6307 486.713 89.2 492.3273 C
83.8883 489.3006 L
87.3631 483.6028 90.493 478.1252 93.5266 472.4939 C
99 475.3273 L
f
99 275.6637 m
95.6948 281.6913 91.9771 287.9519 88.4 293.6636 C
80.3767 289.1103 L
83.9416 283.4003 87.5573 277.2236 90.7533 271.397 C
99 275.6637 L
f
99 176.3364 m
95.6255 182.4377 91.6503 189.0759 88 194.8363 C
78.621 189.5197 L
82.231 183.8035 86.0895 177.2774 89.3668 171.3531 C
99 176.3364 L
f
U
u
98 374 m
94.764 379.9541 91.3039 385.837 87.8 391.5 C
81.1325 387.71 L
84.6525 382.0061 88.0252 376.179 91.14 370.45 C
98 374 L
f
U
76.8651 89.92 m
80.5202 84.1977 84.6216 77.3221 87.9801 71.3001 C
99 77.0001 L
95.5562 83.175 91.3235 90.1909 87.6 96 C
76.8651 89.92 L
f
u
75.9841 579.7828 m
79.1865 574.4718 82.0154 569.4426 85.055 563.7427 C
89.11 565.8436 L
86.0746 571.5342 83.1988 576.5761 79.9084 582.0303 C
75.9841 579.7828 L
f
74.5683 479.4655 m
77.8466 474.0951 80.9201 468.7257 84.01 462.9855 C
89.42 465.7872 L
86.3167 471.5499 83.1788 476.9586 79.8167 482.4605 C
74.5683 479.4655 L
f
71.7367 275.8402 m
75.1668 270.3512 78.7294 264.3012 81.92 258.4803 C
90.04 262.6837 L
86.8009 268.5907 83.1389 274.7328 79.6334 280.3303 C
71.7367 275.8402 L
f
70.3209 174.5323 m
73.827 168.9838 77.6341 162.5936 80.8751 156.7324 C
90.35 161.6365 L
87.0431 167.6157 83.119 174.1246 79.5417 179.7697 C
70.3209 174.5323 L
f
U
u
72.1525 376.1575 m
75.5068 370.7278 78.8248 365.0181 81.965 359.2375 C
88.73 362.74 L
85.5588 368.5749 82.1589 374.3503 78.725 379.9 C
72.1525 376.1575 L
f
U
68.9051 73.215 m
72.4871 67.6072 76.5388 60.8767 79.8301 54.9751 C
90.66 60.5801 L
87.2852 66.6315 83.0991 73.5071 79.4501 79.2 C
68.9051 73.215 L
f
u
293.4167 578.3303 m
289.571 583.7966 285.8854 588.8199 281.9167 593.997 C
278.1166 591.2803 L
282.0104 586.1949 285.4985 581.4344 289.5 575.7469 C
293.4167 578.3303 L
f
294.3334 478.6606 m
290.4068 484.2461 286.3959 489.7023 282.3333 494.994 C
277.1333 491.3606 L
281.1458 486.1397 284.9554 480.9469 289 475.1939 C
294.3334 478.6606 L
f
295.25 379 m
291.2426 384.7047 286.9062 390.5937 282.75 396 C
276.15 391.45 L
280.2812 386.0937 284.4123 380.4686 288.5 374.65 C
295.25 379 L
f
296.1667 279.3303 m
292.0784 285.1543 287.4167 291.4761 283.1667 296.997 C
275.1666 291.5303 L
279.4166 286.0386 283.8691 279.9812 288 274.0969 C
296.1667 279.3303 L
f
297.0833 179.6697 m
292.9141 185.6129 287.927 192.3676 283.5833 198.003 C
274.1833 191.6197 L
278.5521 185.9926 283.326 179.5029 287.5 173.5531 C
297.0833 179.6697 L
f
U
298 80 m
293.75 86.0625 288.4375 93.25 284 99 C
273.2 91.7 L
277.6875 85.9375 282.7829 79.0155 287 73 C
298 80 L
f
u
382.4581 573.097 m
381.6942 552.7548 378.1183 546.545 363.5018 538.7622 C
366.6685 534.1288 L
382.948 542.9695 387.4987 550.5275 388.1685 574.9621 C
384.7364 574.5142 L
304.5922 563.7345 L
305.1735 558.3735 L
386.5666 569.3333 L
382.4581 573.097 L
f
379.9651 472.382 m
379.323 452.0406 376.3936 446.9194 362.0036 438.6243 C
366.937 432.0575 L
383.7104 442.0067 387.8012 449.064 388.337 474.9243 C
384.4436 474.4453 L
304.3601 464.1435 L
305.1053 456.3922 L
386.4445 466.8652 L
379.9651 472.382 L
f
375.4797 374.5546 m
374.9595 354.2138 372.6764 350.1812 358.5129 341.3739 C
365.2129 332.8739 L
382.4802 343.9314 386.111 350.4882 386.5129 377.7739 C
382.1583 377.2639 L
303.1281 367.5614 L
304.037 357.4201 L
384.3299 367.2848 L
375.4797 374.5546 L
f
374.9792 274.9612 m
374.5809 254.6212 372.9442 251.6771 359.0073 242.3576 C
367.474 231.9242 L
385.2352 244.0902 388.406 250.1463 388.674 278.8576 C
383.8582 278.3166 L
303.896 268.9704 L
304.9688 256.4389 L
386.2004 265.9383 L
374.9792 274.9612 L
f
U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
