%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (253F.eps)
%%CreationDate: (6/1/04) (4:13 PM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
1 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
500 600 m
500 700 L
400 700 L
400 600 L
500 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
400 600 m
400 700 L
300 700 L
300 600 L
400 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
500 500 m
500 600 L
400 600 L
400 500 L
500 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
400 500 m
400 600 L
300 600 L
300 500 L
400 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
0 Ap
0 O
0 g
1 D
14.1 647.9 m
27.5635 660.7781 34.2 673.9336 36 692 C
33 692 L
31.3134 675.0718 24.7961 662.2397 12 650 C
14.1 647.9 L
f
80 680.1 m
79.7878 636.792 61.0459 617.4016 18.7 614 C
19 611 L
62.7057 614.5108 83 635.4009 83 681 C
32 681 L
32 678 L
82 678 L
80 680.1 L
f
25 662 m
40.5825 655.2646 57.5 647.3125 72 640 C
73.4 642.7 L
58.2754 650.3275 41.6873 658.0922 26.4 664.7 C
25 662 L
f
181 690 m
161.8079 682.4281 142.9291 679 119 679 C
119 676 L
143.7346 676 162.8734 679.6144 182.1 687.2 C
181 690 L
f
153 681 m
153 656 l
153 624.6298 146.7707 616.4741 124.4 613 C
125 610 L
148.6073 613.9898 156 623.0585 156 656 C
156 681 L
153 681 L
f
192 649 m
192 652 L
108 652 L
108 649 L
192 649 L
f
392 656 m
392 659 L
308 659 L
308 656 L
353 656 L
353 622.4019 348.7914 616.8387 324.4 613 C
325 610 L
351.0439 614.4016 356 620.6844 356 656 C
392 656 L
f
380 683 m
380 686 L
320 686 L
320 683 L
380 683 L
f
427.3 657.1 m
446.512 652.5566 468.1965 646.0314 486.9 639.2 C
488 642 L
468.525 649.1131 446.5 655.625 428 660 C
428 690 L
425 690 L
425 610 L
428 610 L
428 658 L
427.3 657.1 L
f
u
15.0834 546.4802 m
28.7947 559.7041 35.6707 573.4684 37.5334 592.1636 C
32 592.1636 L
30.3134 575.2354 23.7961 562.4033 11 550.1636 C
15.0834 546.4802 L
f
16.0667 445.0605 m
30.0259 458.6301 37.1415 473.0033 39.0668 492.3272 C
30.9999 492.3272 L
29.3133 475.399 22.796 462.5669 9.9999 450.3272 C
16.0667 445.0605 L
f
17.05 343.65 m
31.257 357.5653 38.6121 372.5473 40.6 392.5 C
30 392.5 L
28.3134 375.5718 21.7961 362.7397 9 350.5 C
17.05 343.65 L
f
18.0334 242.2302 m
32.4882 256.4913 40.0828 272.0822 42.1334 292.6636 C
29 292.6636 L
27.3134 275.7354 20.7961 262.9033 8 250.6636 C
18.0334 242.2302 L
f
19.0166 140.8197 m
33.7193 155.4265 41.5534 171.6262 43.6666 192.8364 C
28 192.8364 L
26.3134 175.9082 19.7961 163.0761 7 150.8364 C
19.0166 140.8197 L
f
U
20 39.4 m
34.9505 54.3525 43.0242 71.1611 45.2 93 C
27 93 L
25.3134 76.0718 18.7961 63.2397 6 51 C
20 39.4 L
f
u
78.1666 580.1469 m
77.8192 537.3255 60.0428 518.9914 18.6166 515.6636 C
19.1667 510.3302 L
63.5853 513.8983 83.8334 535.0352 83.8334 581.6636 C
31.8333 581.6636 L
31.8333 576.3302 L
81.8333 576.3302 L
78.1666 580.1469 L
f
76.3332 480.1939 m
75.8507 437.8589 59.0398 420.5812 18.5333 417.3273 C
19.3333 409.6605 L
64.4648 413.2858 84.6667 434.6695 84.6667 482.3273 C
31.6667 482.3273 L
31.6667 474.6605 L
81.6667 474.6605 L
76.3332 480.1939 L
f
74.5 380.25 m
73.8823 338.4014 58.0368 322.1799 18.45 319 C
19.5 309 L
65.3443 312.6826 85.5 334.3129 85.5 383 C
31.5 383 L
31.5 373 L
81.5 373 L
74.5 380.25 L
f
72.6666 280.2969 m
71.9137 238.9349 57.0337 223.7697 18.3667 220.6636 C
19.6667 208.3302 L
66.2239 212.0701 86.3334 233.9472 86.3334 283.6636 C
31.3333 283.6636 L
31.3333 271.3302 L
81.3333 271.3302 L
72.6666 280.2969 L
f
70.8334 180.353 m
69.9454 139.4774 56.0308 125.3685 18.2833 122.3363 C
19.8333 107.6697 L
67.1034 111.4669 87.1667 133.5907 87.1667 184.3363 C
31.1667 184.3363 L
31.1667 169.6697 L
81.1667 169.6697 L
70.8334 180.353 L
f
U
69 80.4 m
67.9768 40.0109 55.0277 26.9583 18.2 24 C
20 7 L
67.983 10.8544 88 33.225 88 85 C
31 85 L
31 68 L
81 68 L
69 80.4 L
f
u
24 560.0802 m
39.6506 553.3153 56.7158 545.2683 71.3 537.8469 C
73.8333 542.5803 L
58.6982 550.2803 41.8625 558.2013 26.3333 564.9136 C
24 560.0802 L
f
22.9999 458.1604 m
38.7187 451.3661 55.9315 443.224 70.6 435.6938 C
74.2667 442.4606 L
59.1211 450.233 42.0376 458.3104 26.2667 465.1272 C
22.9999 458.1604 L
f
22 356.25 m
37.7868 349.4262 55.1473 341.1891 69.9 333.55 C
74.7 342.35 L
59.5439 350.195 42.2128 358.4286 26.2 365.35 C
22 356.25 L
f
21 254.3302 m
36.8549 247.477 54.3631 239.1449 69.2 231.3969 C
75.1333 242.2303 L
59.9668 250.1478 42.388 258.5377 26.1333 265.5636 C
21 254.3302 L
f
20 152.4198 m
35.9231 145.5371 53.5789 137.11 68.5 129.2531 C
75.5667 142.1197 L
60.3896 150.1097 42.5631 158.6559 26.0667 165.7864 C
20 152.4198 L
f
U
76 42 m
60.8125 50.0625 42.7383 58.765 26 66 C
19 50.5 L
34.9912 43.5879 52.7947 35.0658 67.8 27.1 C
76 42 L
f
u
180.8333 590.4969 m
162.329 583.1964 144.2814 579.997 118.6667 579.997 C
118.6667 574.6636 L
145.3509 574.6636 163.9302 578.092 182.7833 585.5302 C
180.8333 590.4969 L
f
180.6667 490.9939 m
162.8502 483.9647 145.6338 480.994 118.3333 480.994 C
118.3333 473.3271 L
146.9671 473.3271 164.9871 476.5696 183.4667 483.8605 C
180.6667 490.9939 L
f
180.5 391.5 m
163.3712 384.742 146.986 382 118 382 C
118 372 L
148.5833 372 166.0439 375.0564 184.15 382.2 C
180.5 391.5 L
f
180.3333 291.9969 m
163.8924 285.5103 148.3384 282.997 117.6667 282.997 C
117.6667 270.6636 L
150.1996 270.6636 167.1007 273.534 184.8334 280.5302 C
180.3333 291.9969 L
f
180.1667 192.503 m
164.4134 186.2877 149.6906 184.003 117.3334 184.003 C
117.3334 169.3364 L
151.8157 169.3364 168.1575 172.0209 185.5166 178.8698 C
180.1667 192.503 L
f
U
180 93 m
164.9346 87.056 151.043 85 117 85 C
117 68 L
153.432 68 169.2144 70.4985 186.2 77.2 C
180 93 L
f
u
151.5 580.9969 m
151.5 555.8303 l
151.5 525.7055 145.7379 518.2327 123.7 514.7637 C
125 509.4969 L
149.4884 513.6357 157.1667 522.8588 157.1667 555.8303 C
157.1667 580.9969 L
151.5 580.9969 L
f
149.9999 480.9939 m
149.9999 455.6606 l
149.9999 426.7811 144.7052 419.9912 123 416.5273 C
125 408.9939 L
150.3695 413.2815 158.3334 422.6591 158.3334 455.6606 C
158.3334 480.9939 L
149.9999 480.9939 L
f
148.5 381 m
148.5 355.5 l
148.5 327.8658 143.6726 321.7588 122.3 318.3 C
125 308.5 L
151.2505 312.9365 159.5 322.4685 159.5 355.5 C
159.5 381 L
148.5 381 L
f
147 280.9969 m
147 255.3303 l
147 228.9415 142.6398 223.5174 121.6 220.0637 C
125 207.9969 L
152.1315 212.5824 160.6667 222.2688 160.6667 255.3303 C
160.6667 280.9969 L
147 280.9969 L
f
145.5 181.003 m
145.5 155.1697 l
145.5 130.0262 141.6072 125.2849 120.9 121.8363 C
125 107.5031 L
153.0125 112.2374 161.8333 122.0782 161.8333 155.1697 C
161.8333 181.003 L
145.5 181.003 L
f
U
144 81 m
144 55 l
144 31.1018 140.5745 27.0435 120.2 23.6 C
125 7 L
153.8936 11.8833 163 21.8785 163 55 C
163 81 L
144 81 L
f
u
192.3334 547.4969 m
192.3334 552.8303 L
107.6667 552.8303 L
107.6667 547.4969 L
192.3334 547.4969 L
f
192.6667 445.9938 m
192.6667 453.6606 L
107.3333 453.6606 L
107.3333 445.9938 L
192.6667 445.9938 L
f
193 344.5 m
193 354.5 L
107 354.5 L
107 344.5 L
193 344.5 L
f
193.3334 242.9969 m
193.3334 255.3303 L
106.6667 255.3303 L
106.6667 242.9969 L
193.3334 242.9969 L
f
193.6667 141.5031 m
193.6667 156.1697 L
106.3334 156.1697 L
106.3334 141.5031 L
193.6667 141.5031 L
f
U
194 40 m
194 57 L
106 57 L
106 40 L
194 40 L
f
u
428.5167 555.3302 m
447.3243 550.8515 468.4688 544.4936 486.7667 537.8303 C
488.6667 542.997 L
469.6146 549.935 448.1105 556.3097 429.8334 560.6636 C
429.8334 590.3303 L
424 590.3303 L
424 509.6636 L
429.8334 509.6636 L
429.8334 556.6636 L
428.5167 555.3302 L
f
429.7334 453.5605 m
448.1365 449.1464 468.7411 442.9559 486.6333 436.4605 C
489.3334 443.994 L
470.7042 450.7568 449.7211 456.9943 431.6668 461.3273 C
431.6668 490.6606 L
422.9999 490.6606 L
422.9999 409.3272 L
431.6668 409.3272 L
431.6668 455.3272 L
429.7334 453.5605 L
f
430.95 351.8 m
448.9487 347.4506 469.0133 341.4274 486.5 335.1 C
490 345 L
471.7938 351.5878 451.3315 357.688 433.5 362 C
433.5 391 L
422 391 L
422 309 L
433.5 309 L
433.5 354 L
430.95 351.8 L
f
432.1667 250.0302 m
449.7609 245.7455 469.2856 239.8897 486.3667 233.7302 C
490.6667 245.997 L
472.8834 252.4097 452.942 258.3727 435.3334 262.6636 C
435.3334 291.3303 L
421 291.3303 L
421 208.6636 L
435.3334 208.6636 L
435.3334 252.6636 L
432.1667 250.0302 L
f
433.3833 148.2698 m
450.5731 144.0497 469.5578 138.3612 486.2333 132.3697 C
491.3333 147.003 L
473.9729 153.2406 454.5524 159.0665 437.1666 163.3364 C
437.1666 191.6697 L
420 191.6697 L
420 108.3364 L
437.1666 108.3364 L
437.1666 151.3364 L
433.3833 148.2698 L
f
U
434.6 46.5 m
451.3854 42.3446 469.8301 36.8235 486.1 31 C
492 48 L
475.0625 54.0625 456.163 59.7511 439 64 C
439 92 L
419 92 L
419 8 L
439 8 L
439 50 L
434.6 46.5 L
f
u
392.3334 559.6636 m
307.6667 559.6636 L
307.6667 554.3302 L
351.5 554.3302 L
351.2722 523.931 347.0671 518.6432 323.7 514.9303 C
325 509.6636 L
351.1868 514.0894 356.8231 520.8391 357.1667 554.3302 C
392.3334 554.3302 L
392.3334 559.6636 L
f
392.6667 460.3273 m
307.3333 460.3273 L
307.3333 452.6605 L
349.9999 452.6605 L
349.5443 425.4601 345.3428 420.4477 323 416.8607 C
325 409.3272 L
351.3297 413.7771 357.6462 420.9937 358.3334 452.6605 C
392.6667 452.6605 L
392.6667 460.3273 L
f
393 361 m
307 361 L
307 351 L
348.5 351 L
347.8166 326.9982 343.6186 322.2612 322.3 318.8 C
325 309 L
351.4727 313.4741 358.4692 321.1575 359.5 351 C
393 351 L
393 361 L
f
393.3334 261.6636 m
306.6667 261.6636 L
306.6667 249.3302 L
347 249.3302 L
346.0887 228.5273 341.8943 224.0657 321.6 220.7303 C
325 208.6636 L
351.6156 213.1618 359.2923 221.3122 360.6667 249.3302 C
393.3334 249.3302 L
393.3334 261.6636 L
f
393.6667 162.3363 m
306.3334 162.3363 L
306.3334 147.6697 L
345.5001 147.6697 L
344.361 130.0654 340.1701 125.8792 320.9 122.6696 C
325 108.3364 L
351.7585 112.8588 360.1153 121.476 361.8333 147.6697 C
393.6667 147.6697 L
393.6667 162.3363 L
f
U
394 63 m
306 63 L
306 46 L
344 46 L
342.6332 31.5945 338.4458 27.6837 320.2 24.6 C
325 8 L
351.9014 12.5466 360.9384 21.6307 363 46 C
394 46 L
394 63 L
f
u
380.3334 581.3302 m
380.3334 586.6636 L
319.6667 586.6636 L
319.6667 581.3302 L
380.3334 581.3302 L
f
380.6667 479.6605 m
380.6667 487.3273 L
319.3333 487.3273 L
319.3333 479.6605 L
380.6667 479.6605 L
f
381 378 m
381 388 L
319 388 L
319 378 L
381 378 L
f
381.3334 276.3302 m
381.3334 288.6636 L
318.6667 288.6636 L
318.6667 276.3302 L
381.3334 276.3302 L
f
381.6667 174.6697 m
381.6667 189.3363 L
318.3334 189.3363 L
318.3334 174.6697 L
381.6667 174.6697 L
f
U
382 73 m
382 90 L
318 90 L
318 73 L
382 73 L
f
274 88 m
274 42.2885 262.4798 29.819 223.4 26.4 C
226 9 L
273.5091 13.1565 292 32.3471 292 88 C
274 88 L
f
207 82 m
209.9732 71.2295 213.375 58.3125 216 47 C
233.7 50.5 L
231.0082 62.1001 227.375 75.6875 224.5 86 C
207 82 L
f
235 85 m
237.9732 74.2295 241.375 61.3125 244 50 C
261.7 53.5 L
259.0082 65.1001 255.375 78.6875 252.5 89 C
235 85 L
f
u
275.8334 187.8364 m
275.8334 141.3549 263.5468 127.9672 223.95 124.503 C
226.1667 109.503 L
273.1342 113.6122 291.3333 132.871 291.3333 187.8364 C
275.8334 187.8364 L
f
277.6668 287.6728 m
277.6668 240.4213 264.6139 226.1155 224.5 222.606 C
226.3333 210.0061 L
272.7593 214.0679 290.6666 233.3949 290.6666 287.6728 C
277.6668 287.6728 L
f
279.5 387.5 m
279.5 339.4786 265.6808 324.2547 225.05 320.7 C
226.5 310.5 L
272.3844 314.5143 290 333.9096 290 387.5 C
279.5 387.5 L
f
281.3334 487.3364 m
281.3334 438.5451 266.7479 422.403 225.6 418.803 C
226.6667 411.003 L
272.0095 414.97 289.3333 434.4335 289.3333 487.3364 C
281.3334 487.3364 L
f
283.1666 587.1636 m
283.1666 537.6024 267.8148 520.5422 226.15 516.897 C
226.8333 511.4969 L
271.6347 515.4165 288.6667 534.9482 288.6667 587.1636 C
283.1666 587.1636 L
f
U
227 612 m
271.2598 615.8722 288 635.4721 288 687 C
285 687 L
285 636.6688 268.8819 618.6905 226.7 615 C
227 612 L
f
u
207.6667 182.003 m
210.6399 171.2325 214.0417 158.3155 216.6667 147.003 C
231.8999 150.0197 L
229.1741 161.7663 225.5493 175.3536 222.7333 185.4697 C
207.6667 182.003 L
f
208.3334 282.0061 m
211.3066 271.2356 214.7084 258.3186 217.3334 247.0061 C
230.0999 249.5394 L
227.3401 261.4325 223.7237 275.0198 220.9665 284.9394 C
208.3334 282.0061 L
f
209 382 m
211.9732 371.2295 215.375 358.3125 218 347 C
228.3 349.05 L
225.5063 361.0895 221.8982 374.6768 219.2 384.4 C
209 382 L
f
209.6667 482.003 m
212.6399 471.2325 216.0417 458.3155 218.6667 447.003 C
226.4999 448.5697 L
223.6722 460.7557 220.0725 474.343 217.4333 483.8697 C
209.6667 482.003 L
f
210.3333 581.9969 m
213.3065 571.2264 216.7083 558.3094 219.3333 546.9969 C
224.7001 548.0803 L
221.8383 560.4128 218.2471 574 215.6667 583.3303 C
210.3333 581.9969 L
f
U
211 682 m
213.9732 671.2295 217.375 658.3125 220 647 C
222.9 647.6 L
220.0043 660.079 216.4214 673.6662 213.9 682.8 C
211 682 L
f
u
235.6834 185.0364 m
238.6565 174.2659 242.0583 161.3489 244.6834 150.0364 C
259.9166 153.053 L
257.1908 164.7996 253.566 178.387 250.75 188.503 C
235.6834 185.0364 L
f
236.3667 285.0728 m
239.3399 274.3023 242.7417 261.3853 245.3667 250.0728 C
258.1332 252.6061 L
255.3734 264.4991 251.757 278.0865 248.9999 288.0061 C
236.3667 285.0728 L
f
237.05 385.1 m
240.0232 374.3295 243.425 361.4125 246.05 350.1 C
256.35 352.15 L
253.5563 364.1895 249.9482 377.7768 247.25 387.5 C
237.05 385.1 L
f
237.7333 485.1364 m
240.7066 474.3659 244.1083 461.4489 246.7333 450.1364 C
254.5666 451.703 L
251.7389 463.8891 248.1392 477.4763 245.5 487.003 C
237.7333 485.1364 L
f
238.4166 585.1636 m
241.3898 574.3931 244.7916 561.4761 247.4166 550.1636 C
252.7834 551.2469 L
249.9217 563.5795 246.3304 577.1667 243.7501 586.4969 C
238.4166 585.1636 L
f
U
239.1 685.2 m
242.0732 674.4295 245.475 661.5125 248.1 650.2 C
251 650.8 L
248.1043 663.279 244.5214 676.8662 242 686 C
239.1 685.2 L
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
