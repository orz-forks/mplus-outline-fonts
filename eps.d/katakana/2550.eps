%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (2550.eps)
%%CreationDate: (5/19/04) (4:46 PM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
1 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
500 600 m
500 700 L
400 700 L
400 600 L
500 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
400 600 m
400 700 L
300 700 L
300 600 L
400 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
500 500 m
500 600 L
400 600 L
400 500 L
500 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
400 500 m
400 600 L
300 600 L
300 500 L
400 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
0 Ap
0 O
0 g
1 D
392.9 621.8 m
395 624 L
344.8963 669.7774 345.5625 670 340 670 c
334.5913 670 335.3689 669.8352 305 633 C
307.4 631.1 L
336.7624 666.896 336.25 667 340 667 c
343.9375 667 343.656 666.9257 392.9 621.8 C
f
276 682.1 m
275.7914 636.4722 259.1302 618.2477 218.7 615 C
219 612 L
260.9828 615.3724 279 634.3834 279 683 C
210 683 L
210 680 L
278 680 L
276 682.1 L
f
68.6 668.8 m
76.5853 650.9627 81.9534 634.0397 86 614 C
89 614.6 L
84.831 635.246 79.2711 652.4179 71.4 670 C
68.6 668.8 L
f
120 659 m
141.6301 659 162.7702 661.0805 183 665.1 C
182.5 668 L
162.6391 664.0538 141.4573 662 120 662 C
120 688 L
117 688 L
117 635 L
117 617.0841 122.7879 612 140 612 C
182 612 L
182 615 L
140 615 l
124.1121 615 120 619.1121 120 635 c
120 659 L
f
430 613 m
430 610 L
450.0975 610 451 610.9114 451 624 C
451 674 L
487 674 L
487 677 L
451 677 L
451 692 L
448 692 L
448 677 L
409 677 L
409 674 L
448 674 L
448 624 L
448 613.0534 447.9467 613 430 613 C
430 613 L
f
470.3 656.6 m
477.1856 644.4959 484 632.0625 488.3 624 C
491 625.4 L
485.3125 635.9625 478.9375 647.5625 473 658 C
470.3 656.6 L
f
425 658 m
419.5625 647.3125 413.25 636 407 625.5 C
409.6 624 L
416.2306 635.1395 422.4922 646.4639 427.7 656.7 C
425 658 L
f
28 684 m
25.8035 658.8945 18.6963 636.8982 6 615.4 C
8.6 614 L
21.6072 636.0586 28.875 658.5625 31 684 C
28 684 L
f
95 680 m
91.2352 685.347 87.875 689.9375 84 695 C
81.6 693.2 L
85.375 688.25 88.5417 683.9218 92.5 678.3 C
95 680 L
f
79 676 m
75.2352 681.347 71.875 685.9375 68 691 C
65.6 689.2 L
69.375 684.25 72.5417 679.9218 76.5 674.3 C
79 676 L
f
195 680 m
191.2352 685.347 187.875 689.9375 184 695 C
181.6 693.2 L
185.375 688.25 188.5417 683.9218 192.5 678.3 C
195 680 L
f
180 676 m
176.2352 681.347 172.875 685.9375 169 691 C
166.6 689.2 L
170.375 684.25 173.5417 679.9218 177.5 674.3 C
180 676 L
f
392 671 m
388.2352 676.347 384.875 680.9375 381 686 C
378.6 684.2 L
382.375 679.25 385.5417 674.9218 389.5 669.3 C
392 671 L
f
375 667 m
371.2352 672.347 367.875 676.9375 364 682 C
361.6 680.2 L
365.375 675.25 368.5417 670.9218 372.5 665.3 C
375 667 L
f
496 681 m
492.2352 686.347 488.875 690.9375 485 696 C
482.6 694.2 L
486.375 689.25 489.5417 684.9218 493.5 679.3 C
496 681 L
f
481 677 m
477.2352 682.347 473.875 686.9375 470 692 C
467.6 690.2 L
471.375 685.25 474.5417 680.9218 478.5 675.3 C
481 677 L
f
299 681 m
295.2352 686.347 291.875 690.9375 288 696 C
285.6 694.2 L
289.375 689.25 292.5417 684.9218 296.5 679.3 C
299 681 L
f
284 677 m
280.2352 682.347 276.875 686.9375 273 692 C
270.6 690.2 L
274.375 685.25 277.5417 680.9218 281.5 675.3 C
284 677 L
f
u
391.4166 519.6635 m
395.6667 523.4969 L
345.764 570.2848 347.0243 570.4969 340.1667 570.4969 c
333.6385 570.4969 334.5852 570.3041 304.3333 532.1636 C
309 528.9135 L
337.1041 564.5352 336.6042 564.6635 340.1667 564.6635 c
344.0417 564.6635 343.6022 564.5599 391.4166 519.6635 C
f
389.9332 417.5271 m
396.3334 422.9938 L
346.6318 470.7923 348.4862 470.9939 340.3333 470.9939 c
332.6858 470.9939 333.8014 470.7729 303.6666 431.3272 C
310.6001 426.7271 L
337.4458 462.1744 336.9584 462.3271 340.3333 462.3271 c
344.1458 462.3271 343.5484 462.1942 389.9332 417.5271 C
f
388.45 315.4 m
397 322.5 L
347.4995 371.3088 349.9479 371.5 340.5 371.5 c
331.7332 371.5 333.0178 371.2509 303 330.5 C
312.2 324.55 L
337.7874 359.823 337.3125 360 340.5 360 c
344.25 360 343.4946 359.8378 388.45 315.4 C
f
386.9666 213.2635 m
397.6667 221.9969 L
348.3673 271.8163 351.4097 271.9969 340.6667 271.9969 c
330.7804 271.9969 332.2341 271.7198 302.3333 229.6636 C
313.8 222.3635 L
338.1291 257.4622 337.6667 257.6635 340.6667 257.6635 c
344.3542 257.6635 343.4409 257.4721 386.9666 213.2635 C
f
385.4834 111.1364 m
398.3333 121.503 L
349.235 172.3328 352.8714 172.503 340.8333 172.503 c
329.8277 172.503 331.4504 172.1978 301.6667 128.8364 C
315.3999 120.1864 L
338.4708 155.1108 338.0208 155.3364 340.8333 155.3364 c
344.4583 155.3364 343.3871 155.1157 385.4834 111.1364 C
f
U
317 18 m
338.8125 52.75 338.375 53 341 53 c
344.5625 53 343.3333 52.75 384 9 C
399 21 L
350.1028 72.8403 354.3333 73 341 73 c
328.875 73 330.6667 72.6667 301 28 C
317 18 L
f
u
26.8333 584.3303 m
25.0029 559.2055 17.9501 536.8116 5.5 515.7303 C
10.6167 513.1636 L
23.4951 535.1089 30.7292 558.4244 32.5 584.3303 C
26.8333 584.3303 L
f
25.6666 484.6606 m
24.2023 459.5166 17.2039 436.725 5 416.0606 C
12.6334 412.3272 L
25.3831 434.1592 32.5834 458.2864 34.0001 484.6606 C
25.6666 484.6606 L
f
24.5 385 m
23.4017 359.8368 16.4577 336.6476 4.5 316.4 C
14.65 311.5 L
27.2708 333.2187 34.4375 358.1576 35.5 385 C
24.5 385 L
f
23.3333 285.3303 m
22.6011 260.1478 15.7115 236.561 4 216.7303 C
16.6667 210.6636 L
29.1588 232.269 36.2917 258.0195 37 285.3303 C
23.3333 285.3303 L
f
22.1667 185.6697 m
21.8006 160.468 14.9654 136.4836 3.5 117.0697 C
18.6833 109.8364 L
31.0465 131.3286 38.1458 157.8907 38.5 185.6697 C
22.1667 185.6697 L
f
U
20.7 9 m
32.9345 30.3789 40 57.7527 40 86 C
21 86 L
21 60.7791 14.2192 36.3971 3 17.4 C
20.7 9 L
f
u
67.4666 567.6969 m
74.8901 550.262 80.0683 533.2751 84.1333 513.1636 C
89.8334 514.3302 L
85.744 534.5819 80.3604 551.7717 72.8334 569.5303 C
67.4666 567.6969 L
f
66.3333 466.5938 m
73.1949 449.5613 78.1831 432.5104 82.2665 412.3272 C
90.6667 414.0605 L
86.657 433.9178 81.4497 451.1256 74.2667 469.0605 C
66.3333 466.5938 L
f
65.2 365.5 m
71.4999 348.8697 76.2982 331.7551 80.4 311.5 C
91.5 313.8 L
87.5699 333.2628 82.539 350.4886 75.7 368.6 C
65.2 365.5 L
f
64.0666 264.3969 m
69.8046 248.169 74.4131 230.9905 78.5333 210.6636 C
92.3334 213.5303 L
88.4829 232.5987 83.6283 249.8424 77.1334 268.1303 C
64.0666 264.3969 L
f
62.9334 163.3031 m
68.1096 147.4775 72.5281 130.2351 76.6667 109.8364 C
93.1666 113.2697 L
89.3958 131.9438 84.7175 149.2054 78.5666 167.6697 C
62.9334 163.3031 L
f
U
61.8 62.2 m
66.4144 46.7767 70.643 29.4705 74.8 9 C
94 13 L
90.3088 31.2796 85.8069 48.5592 80 67.2 C
61.8 62.2 L
f
u
272.7999 582.1636 m
272.5016 537.5157 256.431 520.1712 216.9166 516.997 C
217.5 511.4969 L
260.044 514.9145 278.5 534.3051 278.5 583.4969 C
208.5 583.4969 L
208.5 577.9969 L
276.6667 577.9969 L
272.7999 582.1636 L
f
275 483.9939 m
208 483.9939 L
208 475.9938 L
276.3333 475.9938 L
270.5998 482.2272 L
270.2118 438.5592 254.7317 422.0946 216.1333 418.994 C
217 410.9938 L
258.5563 414.332 277.611 432.8271 278.9266 478.7451 C
275 483.9939 L
f
269.4 382.3 m
268.9223 339.6117 254.0327 324.027 216.35 321 C
217.5 310.5 L
261.1663 314.0077 280.5 334.1575 280.5 384.5 C
208.5 384.5 L
208.5 374 L
277 374 L
269.4 382.3 L
f
267.1999 282.3636 m
266.6325 240.6552 252.3335 225.9505 215.5666 222.997 C
217 209.9969 L
261.2274 213.5497 281 234.0791 281 284.9969 C
208 284.9969 L
208 271.9969 L
276.6667 271.9969 L
267.1999 282.3636 L
f
265 182.4364 m
264.343 141.7077 250.6344 127.8829 214.7834 125.003 C
216.5 109.503 L
261.2886 113.1009 281.5 134.0099 281.5 185.503 C
207.5 185.503 L
207.5 170.0031 L
276.3333 170.0031 L
265 182.4364 L
f
U
262.8 82.5 m
262.0532 42.7512 248.9352 29.8063 214 27 C
216 9 L
261.3497 12.6429 282 33.9316 282 86 C
207 86 L
207 68 L
276 68 L
262.8 82.5 L
f
u
487.3333 577.6636 m
452.3334 577.6636 L
452.3334 592.3303 L
446.6666 592.3303 L
446.6666 577.6636 L
408.6667 577.6636 L
408.6667 572.3302 L
446.6666 572.3302 L
446.6666 524.6636 L
446.6666 514.8901 446.6084 514.8303 431 514.8303 C
429.3333 514.8303 L
429.3333 509.4969 L
451.5534 509.4969 452.3334 510.2903 452.3334 525.3303 C
452.3334 572.3302 L
487.3333 572.3302 L
487.3333 577.6636 L
f
487.6667 478.3273 m
453.6667 478.3273 L
453.6667 492.6606 L
445.3332 492.6606 L
445.3332 478.3273 L
408.3333 478.3273 L
408.3333 470.6604 L
445.3332 470.6604 L
445.3332 425.3273 L
445.3332 416.7269 445.2701 416.6607 432.0001 416.6607 C
428.6666 416.6607 L
428.6666 408.9938 L
453.0092 408.9938 453.6667 409.6693 453.6667 426.6606 C
453.6667 470.6604 L
487.6667 470.6604 L
487.6667 478.3273 L
f
488 379 m
455 379 L
455 393 L
444 393 L
444 379 L
408 379 L
408 369 L
444 369 L
444 326 L
444 318.5726 443.9319 318.5 433 318.5 C
428 318.5 L
428 308.5 L
454.465 308.5 455 309.0574 455 328 C
455 369 L
488 369 L
488 379 L
f
488.3333 279.6636 m
456.3334 279.6636 L
456.3334 293.3303 L
442.6666 293.3303 L
442.6666 279.6636 L
407.6667 279.6636 L
407.6667 267.3302 L
442.6666 267.3302 L
442.6666 226.6636 L
442.6666 220.4094 442.5936 220.3303 434 220.3303 C
427.3333 220.3303 L
427.3333 207.9969 L
455.9208 207.9969 456.3334 208.4364 456.3334 229.3303 C
456.3334 267.3302 L
488.3333 267.3302 L
488.3333 279.6636 L
f
488.6667 180.3363 m
457.6666 180.3363 L
457.6666 193.6697 L
441.3334 193.6697 L
441.3334 180.3363 L
407.3333 180.3363 L
407.3333 165.6697 L
441.3334 165.6697 L
441.3334 127.3363 L
441.3334 122.2551 441.2554 122.1696 435 122.1696 C
426.6667 122.1696 L
426.6667 107.503 L
457.3766 107.503 457.6666 107.8245 457.6666 130.6697 C
457.6666 165.6697 L
488.6667 165.6697 L
488.6667 180.3363 L
f
U
489 81 m
459 81 L
459 94 L
440 94 L
440 81 L
407 81 L
407 64 L
440 64 L
440 28 L
440 24.0919 439.9171 24 436 24 C
426 24 L
426 7 L
458.8325 7 459 7.2035 459 32 C
459 64 L
489 64 L
489 81 L
f
u
469.2833 556.1302 m
475.7484 544.2747 482.3125 531.6219 486.6499 522.7969 C
491.6667 525.0636 L
486.1667 535.8511 479.9792 547.6532 474.1667 558.3303 C
469.2833 556.1302 L
f
468.2666 455.6605 m
474.3111 444.0536 480.6249 431.1813 484.9999 421.5938 C
492.3334 424.7272 L
487.0209 435.7397 481.0209 447.7439 475.3334 458.6606 C
468.2666 455.6605 L
f
467.25 355.2 m
472.874 343.8417 478.9375 330.75 483.35 320.4 C
493 324.4 L
487.875 335.6375 482.0625 347.8437 476.5 359 C
467.25 355.2 L
f
466.2333 254.7302 m
471.4368 243.6206 477.2499 230.3094 481.6999 219.1969 C
493.6667 224.0636 L
488.7292 235.5261 483.1042 247.9344 477.6667 259.3303 C
466.2333 254.7302 L
f
465.2167 154.2697 m
469.9997 143.4086 475.5625 129.878 480.05 118.003 C
494.3333 123.7364 L
489.5833 135.4239 484.1458 148.0343 478.8333 159.6697 C
465.2167 154.2697 L
f
U
464.2 53.8 m
468.5625 43.1875 473.875 29.4375 478.4 16.8 C
495 23.4 L
490.4375 35.3125 485.1875 48.125 480 60 C
464.2 53.8 L
f
u
423.6666 558.1636 m
418.4375 547.2365 412.3646 535.799 406.3333 525.2136 C
411.1667 522.7969 L
417.5627 534.073 423.6514 545.6943 428.6833 556.2136 C
423.6666 558.1636 L
f
422.3332 458.3272 m
417.3124 447.1605 411.4791 435.598 405.6666 424.9272 C
412.7334 421.5938 L
418.8948 433.0066 424.8107 444.9248 429.6667 455.7272 C
422.3332 458.3272 L
f
421 358.5 m
416.1875 347.0937 410.5937 335.4062 405 324.65 C
414.3 320.4 L
420.2268 331.9494 425.9699 344.1645 430.65 355.25 C
421 358.5 L
f
419.6666 258.6636 m
415.0625 247.0178 409.7083 235.2053 404.3333 224.3636 C
415.8667 219.1969 L
421.559 230.8829 427.1291 243.3949 431.6333 254.7636 C
419.6666 258.6636 L
f
418.3334 158.8364 m
413.9375 146.951 408.8229 135.0135 403.6667 124.0864 C
417.4333 118.003 L
422.891 129.8257 428.2883 142.6346 432.6166 154.2864 C
418.3334 158.8364 L
f
U
417 59 m
412.8125 46.875 407.9375 34.8125 403 23.8 C
419 16.8 L
424.2231 28.7593 429.4476 41.8651 433.6 53.8 C
417 59 L
f
u
182.6833 568.6636 m
163.1293 564.7414 142.4905 562.7 121.8334 562.6636 C
121.8334 588.3303 L
116.1666 588.3303 L
116.1666 534.8303 L
116.1666 516.7572 121.941 511.6636 139.3333 511.6636 C
182.5 511.6636 L
182.5 517.1637 L
139.5 517.1637 l
125.3199 517.1637 121.8334 520.6544 121.8334 534.8303 C
121.8727 557.2305 L
142.8926 557.2697 163.66 559.3539 183.6667 563.3635 C
182.6833 568.6636 L
f
182.8667 469.3273 m
163.6195 465.429 143.5237 463.3999 123.6668 463.3273 C
123.6668 488.6606 L
115.3333 488.6606 L
115.3333 434.6605 L
115.3333 416.4302 121.0941 411.3272 138.6666 411.3272 C
183 411.3272 L
183 419.3273 L
139 419.3273 l
126.5277 419.3273 123.6668 422.1968 123.6668 434.6605 C
123.7453 455.4609 L
144.155 455.5394 164.5499 457.6273 184.3334 461.6271 C
182.8667 469.3273 L
f
183.05 370 m
164.1097 366.1257 144.5568 364.109 125.5 364 C
125.5 389 L
114.5 389 L
114.5 334.5 L
114.5 316.1125 120.2472 311 138 311 C
183.5 311 L
183.5 321.5 L
138.5 321.5 l
127.7354 321.5 125.5 323.7482 125.5 334.5 C
125.6178 353.7007 L
145.4174 353.8184 165.4397 355.9101 185 359.9 C
183.05 370 L
f
183.2333 270.6636 m
164.6 266.8133 145.59 264.809 127.3334 264.6636 C
127.3334 289.3303 L
113.6666 289.3303 L
113.6666 234.3303 L
113.6666 215.7856 119.4003 210.6636 137.3333 210.6636 C
184 210.6636 L
184 223.6637 L
138 223.6637 l
128.9432 223.6637 127.3334 225.2905 127.3334 234.3303 C
127.4904 251.9312 L
146.6799 252.0881 166.3295 254.1835 185.6667 258.1635 C
183.2333 270.6636 L
f
183.4166 171.3363 m
165.0901 167.51 146.6231 165.5181 129.1666 165.3363 C
129.1666 189.6697 L
112.8334 189.6697 L
112.8334 134.1697 L
112.8334 115.4679 118.5535 110.3364 136.6667 110.3364 C
184.5 110.3364 L
184.5 125.8363 L
137.5 125.8363 l
130.151 125.8363 129.1666 126.8419 129.1666 134.1697 C
129.3629 150.171 L
147.9422 150.3671 167.2193 152.4662 186.3333 156.4364 C
183.4166 171.3363 L
f
U
183.6 72 m
165.5804 68.1976 147.6564 66.2181 131 66 C
131 90 L
112 90 L
112 34 L
112 15.141 117.7066 10 136 10 C
185 10 L
185 28 L
137 28 l
131.3588 28 131 28.3843 131 34 C
131.2356 48.4015 L
149.2047 48.6368 168.1092 50.7397 187 54.7 C
183.6 72 L
f
u
95.6667 579.8303 m
91.821 585.2965 88.1354 590.3199 84.1667 595.4969 C
80.3666 592.7802 L
84.2604 587.6948 87.7485 582.9343 91.75 577.2469 C
95.6667 579.8303 L
f
96.3334 479.6605 m
92.4068 485.246 88.3958 490.7022 84.3333 495.9939 C
79.1333 492.3605 L
83.1458 487.1397 86.9554 481.9468 91 476.1938 C
96.3334 479.6605 L
f
97 379.5 m
92.9926 385.2047 88.6562 391.0937 84.5 396.5 C
77.9 391.95 L
82.0312 386.5937 86.1623 380.9686 90.25 375.15 C
97 379.5 L
f
97.6667 279.3303 m
93.5784 285.1543 88.9167 291.4761 84.6667 296.9969 C
76.6666 291.5302 L
80.9166 286.0386 85.3691 279.9812 89.5 274.0969 C
97.6667 279.3303 L
f
98.3333 179.1697 m
94.1642 185.1129 89.1771 191.8676 84.8333 197.503 C
75.4333 191.1197 L
79.8021 185.4926 84.576 179.0029 88.75 173.0531 C
98.3333 179.1697 L
f
U
99 79 m
94.75 85.0625 89.4375 92.25 85 98 C
74.2 90.7 L
78.6875 84.9375 83.7829 78.0155 88 72 C
99 79 L
f
u
79 575.8303 m
75.1543 581.2965 71.4687 586.3199 67.5 591.4969 C
63.6999 588.7802 L
67.5937 583.6948 71.0818 578.9343 75.0833 573.2469 C
79 575.8303 L
f
79 475.6605 m
75.0735 481.246 71.0625 486.7022 67 491.9939 C
61.7999 488.3605 L
65.8124 483.1397 69.622 477.9468 73.6666 472.1938 C
79 475.6605 L
f
79 375.5 m
74.9926 381.2047 70.6562 387.0937 66.5 392.5 C
59.9 387.95 L
64.0312 382.5937 68.1623 376.9686 72.25 371.15 C
79 375.5 L
f
79 275.3303 m
74.9117 281.1543 70.25 287.4761 66 292.9969 C
57.9999 287.5302 L
62.2499 282.0386 66.7024 275.9812 70.8333 270.0969 C
79 275.3303 L
f
79 175.1697 m
74.8309 181.1129 69.8437 187.8676 65.5 193.503 C
56.1 187.1197 L
60.4688 181.4926 65.2427 175.0029 69.4167 169.0531 C
79 175.1697 L
f
U
79 75 m
74.75 81.0625 69.4375 88.25 65 94 C
54.2 86.7 L
58.6875 80.9375 63.7829 74.0155 68 68 C
79 75 L
f
u
195.6667 579.8303 m
191.821 585.2965 188.1354 590.3199 184.1667 595.4969 C
180.3666 592.7802 L
184.2604 587.6948 187.7485 582.9343 191.75 577.2469 C
195.6667 579.8303 L
f
196.3334 479.6605 m
192.4068 485.246 188.3958 490.7022 184.3333 495.9939 C
179.1333 492.3605 L
183.1458 487.1397 186.9554 481.9468 191 476.1938 C
196.3334 479.6605 L
f
197 379.5 m
192.9926 385.2047 188.6562 391.0937 184.5 396.5 C
177.9 391.95 L
182.0312 386.5937 186.1623 380.9686 190.25 375.15 C
197 379.5 L
f
197.6667 279.3303 m
193.5784 285.1543 188.9167 291.4761 184.6667 296.9969 C
176.6666 291.5302 L
180.9166 286.0386 185.3691 279.9812 189.5 274.0969 C
197.6667 279.3303 L
f
198.3333 179.1697 m
194.1642 185.1129 189.1771 191.8676 184.8333 197.503 C
175.4333 191.1197 L
179.8021 185.4926 184.576 179.0029 188.75 173.0531 C
198.3333 179.1697 L
f
U
199 79 m
194.75 85.0625 189.4375 92.25 185 98 C
174.2 90.7 L
178.6875 84.9375 183.7829 78.0155 188 72 C
199 79 L
f
u
179.8333 575.6636 m
175.9877 581.1298 172.3021 586.1532 168.3333 591.3303 C
164.5333 588.6136 L
168.427 583.5282 171.9152 578.7677 175.9166 573.0802 C
179.8333 575.6636 L
f
179.6667 475.3272 m
175.7401 480.9127 171.7291 486.3689 167.6666 491.6606 C
162.4665 488.0272 L
166.479 482.8063 170.2886 477.6135 174.3332 471.8605 C
179.6667 475.3272 L
f
179.5 375 m
175.4926 380.7047 171.1562 386.5937 167 392 C
160.4 387.45 L
164.5312 382.0937 168.6623 376.4686 172.75 370.65 C
179.5 375 L
f
178.3333 275.6636 m
174.245 281.4876 169.5833 287.8094 165.3333 293.3303 C
157.3332 287.8636 L
161.5832 282.3719 166.0358 276.3145 170.1666 270.4302 C
178.3333 275.6636 L
f
179.1667 173.3364 m
174.9975 179.2796 170.0104 186.0343 165.6667 191.6697 C
156.2667 185.2864 L
160.6355 179.6593 165.4094 173.1696 169.5834 167.2197 C
179.1667 173.3364 L
f
U
179 74 m
174.75 80.0625 169.4375 87.25 165 93 C
154.2 85.7 L
158.6875 79.9375 163.7829 73.0155 168 67 C
179 74 L
f
u
299 580.8303 m
295.1543 586.2965 291.4687 591.3199 287.5 596.4969 C
283.6999 593.7802 L
287.5937 588.6948 291.0818 583.9343 295.0833 578.2469 C
299 580.8303 L
f
299 480.6605 m
295.0735 486.246 291.0625 491.7022 287 496.9939 C
281.7999 493.3605 L
285.8124 488.1397 289.622 482.9468 293.6666 477.1938 C
299 480.6605 L
f
299 380.5 m
294.9926 386.2047 290.6562 392.0937 286.5 397.5 C
279.9 392.95 L
284.0312 387.5937 288.1623 381.9686 292.25 376.15 C
299 380.5 L
f
299 280.3303 m
294.9117 286.1543 290.25 292.4761 286 297.9969 C
277.9999 292.5302 L
282.2499 287.0386 286.7024 280.9812 290.8333 275.0969 C
299 280.3303 L
f
298 180.1697 m
293.8309 186.1129 288.8437 192.8676 284.5 198.503 C
275.1 192.1197 L
279.4688 186.4926 284.2427 180.0029 288.4167 174.0531 C
298 180.1697 L
f
U
299 80 m
294.75 86.0625 289.4375 93.25 285 99 C
274.2 91.7 L
278.6875 85.9375 283.7829 79.0155 288 73 C
299 80 L
f
u
284 577.1636 m
280.1543 582.6298 276.4687 587.6532 272.5 592.8303 C
268.6999 590.1136 L
272.5937 585.0282 276.0818 580.2677 280.0832 574.5802 C
284 577.1636 L
f
281.9999 477.3272 m
278.0734 482.9127 274.0624 488.3689 269.9999 493.6606 C
264.7998 490.0272 L
268.8123 484.8064 272.6219 479.6135 276.6665 473.8605 C
281.9999 477.3272 L
f
280 377.5 m
275.9926 383.2047 271.6562 389.0937 267.5 394.5 C
260.9 389.95 L
265.0312 384.5937 269.1623 378.9686 273.25 373.15 C
280 377.5 L
f
280 277.6636 m
275.9117 283.4876 271.25 289.8095 267 295.3303 C
258.9999 289.8636 L
263.2499 284.3719 267.7024 278.3145 271.8332 272.4302 C
280 277.6636 L
f
278 177.8364 m
273.8309 183.7796 268.8438 190.5343 264.5 196.1697 C
255.1001 189.7864 L
259.4688 184.1593 264.2427 177.6696 268.4167 171.7197 C
278 177.8364 L
f
U
278 78 m
273.75 84.0625 268.4375 91.25 264 97 C
253.2 89.7 L
257.6875 83.9375 262.7829 77.0155 267 71 C
278 78 L
f
u
393 571.4969 m
389.1544 576.9632 385.4688 581.9865 381.5 587.1636 C
377.7 584.4469 L
381.5937 579.3615 385.0819 574.601 389.0833 568.9136 C
393 571.4969 L
f
394.0001 471.9939 m
390.0735 477.5794 386.0625 483.0356 382 488.3273 C
376.7999 484.6939 L
380.8125 479.473 384.6221 474.2802 388.6666 468.5272 C
394.0001 471.9939 L
f
395 372.5 m
390.9926 378.2047 386.6562 384.0937 382.5 389.5 C
375.9 384.95 L
380.0312 379.5937 384.1623 373.9686 388.25 368.15 C
395 372.5 L
f
396 272.9969 m
391.9117 278.8209 387.25 285.1428 383 290.6636 C
375 285.1969 L
379.25 279.7053 383.7025 273.6479 387.8333 267.7636 C
396 272.9969 L
f
397 173.503 m
392.8308 179.4463 387.8437 186.2009 383.5 191.8363 C
374.1 185.453 L
378.4688 179.8259 383.2427 173.3362 387.4167 167.3864 C
397 173.503 L
f
U
398 74 m
393.75 80.0625 388.4375 87.25 384 93 C
373.2 85.7 L
377.6875 79.9375 382.7829 73.0155 387 67 C
398 74 L
f
u
375.5 567.4969 m
371.6543 572.9632 367.9687 577.9865 364 583.1636 C
360.1999 580.4469 L
364.0937 575.3615 367.5819 570.601 371.5833 564.9136 C
375.5 567.4969 L
f
376 467.9939 m
372.0735 473.5794 368.0625 479.0356 364 484.3273 C
358.7999 480.6939 L
362.8124 475.473 366.622 470.2802 370.6666 464.5272 C
376 467.9939 L
f
376.5 368.5 m
372.4926 374.2047 368.1562 380.0937 364 385.5 C
357.4 380.95 L
361.5312 375.5937 365.6623 369.9686 369.75 364.15 C
376.5 368.5 L
f
377 268.9969 m
372.9117 274.8209 368.25 281.1428 364 286.6636 C
355.9999 281.1969 L
360.2499 275.7053 364.7024 269.6479 368.8333 263.7636 C
377 268.9969 L
f
377.5 169.503 m
373.3308 175.4463 368.3437 182.2009 364 187.8363 C
354.6 181.453 L
358.9688 175.8259 363.7427 169.3362 367.9167 163.3864 C
377.5 169.503 L
f
U
378 70 m
373.75 76.0625 368.4375 83.25 364 89 C
353.2 81.7 L
357.6875 75.9375 362.7829 69.0155 367 63 C
378 70 L
f
u
496.5 580.8303 m
492.6543 586.2965 488.9687 591.3199 485 596.4969 C
481.1999 593.7802 L
485.0937 588.6948 488.5819 583.9343 492.5833 578.2469 C
496.5 580.8303 L
f
497 480.6605 m
493.0735 486.246 489.0625 491.7022 485 496.9939 C
479.7999 493.3605 L
483.8124 488.1397 487.622 482.9468 491.6666 477.1938 C
497 480.6605 L
f
498.5 380.5 m
494.4926 386.2047 490.1562 392.0937 486 397.5 C
479.4 392.95 L
483.5312 387.5937 487.6623 381.9686 491.75 376.15 C
498.5 380.5 L
f
498 280.3303 m
493.9117 286.1543 489.25 292.4761 485 297.9969 C
476.9999 292.5302 L
481.2499 287.0386 485.7024 280.9812 489.8333 275.0969 C
498 280.3303 L
f
499.5 180.1697 m
495.3308 186.1129 490.3437 192.8676 486 198.503 C
476.6 192.1197 L
480.9688 186.4926 485.7427 180.0029 489.9167 174.0531 C
499.5 180.1697 L
f
U
499 80 m
494.75 86.0625 489.4375 93.25 485 99 C
474.2 91.7 L
478.6875 85.9375 483.7829 79.0155 488 73 C
499 80 L
f
u
480.6 576.8303 m
476.7543 582.2965 473.0687 587.3199 469.1 592.4969 C
465.2999 589.7802 L
469.1937 584.6948 472.6818 579.9343 476.6833 574.2469 C
480.6 576.8303 L
f
480.2 476.6605 m
476.2734 482.246 472.2624 487.7022 468.1999 492.9939 C
462.9999 489.3605 L
467.0124 484.1397 470.822 478.9468 474.8665 473.1938 C
480.2 476.6605 L
f
480.8 376.5 m
476.7926 382.2047 472.4562 388.0937 468.3 393.5 C
461.7 388.95 L
465.8312 383.5937 469.9623 377.9686 474.05 372.15 C
480.8 376.5 L
f
479.4 276.3303 m
475.3117 282.1543 470.65 288.4761 466.4 293.9969 C
458.3999 288.5302 L
462.6499 283.0386 467.1024 276.9812 471.2333 271.0969 C
479.4 276.3303 L
f
480 176.1697 m
475.8309 182.1129 470.8438 188.8676 466.5 194.503 C
457.1 188.1197 L
461.4688 182.4926 466.2427 176.0029 470.4167 170.0531 C
480 176.1697 L
f
U
478.6 76 m
474.35 82.0625 469.0375 89.25 464.6 95 C
453.8 87.7 L
458.2875 81.9375 463.3829 75.0155 467.6 69 C
478.6 76 L
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
