%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (2550.eps)
%%CreationDate: (7/28/04) (2:17 PM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
1 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
500 600 m
500 700 L
400 700 L
400 600 L
500 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
400 600 m
400 700 L
300 700 L
300 600 L
400 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
500 500 m
500 600 L
400 600 L
400 500 L
500 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
400 500 m
400 600 L
300 600 L
300 500 L
400 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
0 Ap
0 O
0 g
1 D
119 654 m
119 688 L
116 688 L
116 635 L
116 617.0841 121.7879 612 139 612 C
184 612 L
184 615 L
139 615 l
123.1121 615 119 619.1121 119 635 c
119 653 L
118 652 L
141.2864 655.6882 163.5625 661.375 185 669 C
184.1 671.9 L
162.789 664.32 140.3219 658.5728 117.5307 654.963 C
119 654 L
f
392.9 621.8 m
395 624 L
344.8963 669.7774 345.5625 670 340 670 c
334.5913 670 335.3689 669.8352 305 633 C
307.4 631.1 L
336.7624 666.896 336.25 667 340 667 c
343.9375 667 343.656 666.9257 392.9 621.8 C
f
69.5 666.8 m
77.0312 649.6431 82.0948 633.3393 86 614 C
89 614.6 L
84.9858 634.4794 79.7148 651.0951 72.3 668 C
69.5 666.8 L
f
28 684 m
25.8035 658.8945 18.6963 636.8982 6 615.4 C
8.6 614 L
21.6072 636.0586 28.875 658.5625 31 684 C
28 684 L
f
89 677 m
85.9719 682.7331 83.2844 687.4831 80 693 C
77.4 691.5 L
80.7848 685.8145 83.4289 681.0359 86.3 675.6 C
89 677 L
f
64.4 688.5 m
67.5265 683.2484 70.1108 678.5595 73.1 672.9 C
75.8 674.3 L
72.8325 679.9184 70.2187 684.5935 67 690 C
64.4 688.5 L
f
190 680 m
186.9719 685.7331 184.2844 690.4831 181 696 C
178.4 694.5 L
181.7848 688.8145 184.4289 684.0359 187.3 678.6 C
190 680 L
f
166.4 691.5 m
169.5265 686.2484 172.1108 681.5595 175.1 675.9 C
177.8 677.3 L
174.8325 682.9184 172.2187 687.5935 169 693 C
166.4 691.5 L
f
386 667.2 m
382.785 673.185 379.9487 678.2072 376.5 684 C
373.9 682.5 L
377.2869 676.811 380.0736 671.8061 383.3 665.8 C
386 667.2 L
f
372.2 664.5 m
369.0841 670.3994 366.3797 675.3231 363 681 C
360.4223 679.4654 L
363.8054 673.7828 366.4187 669.0223 369.5473 663.0989 C
372.2 664.5 L
f
275.5 85 m
208 85 L
208 67 L
278 67 L
264.8 81.5 L
264.0867 43.5338 250.5682 29.8572 215 27 C
217 9 L
259.1631 12.3869 279.8622 31.1527 283.439 71.5513 C
275.5 85 L
f
u
387.8334 567.8303 m
384.5198 573.9553 381.3765 579.4329 377.8167 585.3303 C
373.6725 582.9603 L
377.1682 577.1653 380.246 571.728 383.5533 565.6136 C
387.8334 567.8303 L
f
389.6668 468.4606 m
386.2546 474.7256 382.8043 480.6585 379.1334 486.6606 C
373.4449 483.4206 L
377.0495 477.5197 380.4184 471.6499 383.8067 465.4272 C
389.6668 468.4606 L
f
391.5 369.0999 m
387.9893 375.505 384.2321 381.8932 380.45 388 C
373.2174 383.89 L
376.9308 377.8831 380.5908 371.581 384.06 365.2499 C
391.5 369.0999 L
f
393.3334 269.7302 m
389.7242 276.2753 385.6599 283.1189 381.7667 289.3303 C
372.9899 284.3503 L
376.8122 278.2375 380.7632 271.5029 384.3133 265.0635 C
393.3334 269.7302 L
f
395.1666 170.3696 m
391.4589 177.0547 387.0876 184.3536 383.0833 190.6697 C
372.7624 184.8197 L
376.6935 178.6009 380.9356 171.434 384.5666 164.8863 C
395.1666 170.3696 L
f
U
372.5349 85.28 m
376.5748 78.9553 381.108 71.3559 384.82 64.6999 C
397 70.9999 L
393.1937 77.825 388.5154 85.5793 384.4 92 C
372.5349 85.28 L
f
u
373.3233 564.9503 m
370.1051 570.9812 367.0803 576.3508 363.5917 582.1303 C
359.501 579.7489 L
362.9801 573.9804 365.9042 568.7735 369.1177 562.7501 C
373.3233 564.9503 L
f
374.4467 465.4005 m
371.126 471.563 367.7808 477.3786 364.1833 483.2606 C
358.5798 480.0325 L
362.1548 474.178 365.3898 468.5246 368.6881 462.4014 C
374.4467 465.4005 L
f
375.57 365.8599 m
372.147 372.1539 368.4813 378.4154 364.7749 384.4 C
357.6586 380.3252 L
361.3296 374.3848 364.8755 368.285 368.2586 362.0619 C
375.57 365.8599 L
f
376.6933 266.3102 m
373.1679 272.7357 369.1819 279.4432 365.3666 285.5303 C
356.7373 280.6087 L
360.5044 274.5824 364.361 268.0362 367.829 261.7132 C
376.6933 266.3102 L
f
377.8165 166.7696 m
374.1888 173.3266 369.8824 180.48 365.9582 186.6697 C
355.8162 180.9014 L
359.6792 174.7892 363.8466 167.7965 367.3995 161.3736 C
377.8165 166.7696 L
f
U
354.8949 81.185 m
358.8539 74.9868 363.3322 67.5477 366.9699 61.0249 C
378.9399 67.2199 L
375.2098 73.9084 370.583 81.5078 366.5499 87.8 C
354.8949 81.185 L
f
u
26.8333 584.3303 m
25.0029 559.2055 17.9501 536.8116 5.5 515.7303 C
10.6167 513.1636 L
23.4951 535.1089 30.7292 558.4244 32.5001 584.3303 C
26.8333 584.3303 L
f
25.6666 484.6606 m
24.2023 459.5166 17.2039 436.725 5 416.0606 C
12.6334 412.3272 L
25.3831 434.1592 32.5834 458.2864 34.0001 484.6606 C
25.6666 484.6606 L
f
24.5 385 m
23.4017 359.8368 16.4577 336.6476 4.5 316.4 C
14.65 311.5 L
27.2709 333.2187 34.4375 358.1576 35.5 385 C
24.5 385 L
f
23.3333 285.3303 m
22.6011 260.1479 15.7115 236.5611 4 216.7303 C
16.6667 210.6636 L
29.1588 232.269 36.2917 258.0196 37.0001 285.3303 C
23.3333 285.3303 L
f
22.1667 185.6697 m
21.8006 160.468 14.9654 136.4837 3.5 117.0697 C
18.6833 109.8364 L
31.0466 131.3286 38.1458 157.8907 38.5 185.6697 C
22.1667 185.6697 L
f
U
20.7 9 m
32.9345 30.3789 40 57.7527 40 86 C
21 86 L
21 60.7791 14.2192 36.3971 3 17.4 C
20.7 9 L
f
u
68.3166 565.6969 m
75.3244 548.9111 80.2151 532.5484 84.1333 513.1636 C
89.8334 514.3303 L
85.8954 533.8319 80.7797 550.4649 73.6834 567.5303 C
68.3166 565.6969 L
f
67.1333 464.5938 m
73.6175 448.1792 78.3355 431.7576 82.2666 412.3272 C
90.6667 414.0605 L
86.8051 433.1843 81.8446 449.8346 75.0667 467.0605 C
67.1333 464.5938 L
f
65.95 363.5 m
71.9109 347.4564 76.456 330.9759 80.4 311.5 C
91.5 313.8 L
87.7147 332.546 82.9094 349.2136 76.45 366.6 C
65.95 363.5 L
f
64.7666 262.3969 m
70.2041 246.7245 74.5763 230.1851 78.5333 210.6636 C
92.3334 213.5303 L
88.6243 231.8985 83.9742 248.5834 77.8334 266.1303 C
64.7666 262.3969 L
f
63.5834 161.3031 m
68.4974 146.0018 72.6968 129.4035 76.6667 109.8364 C
93.1667 113.2697 L
89.5338 131.2602 85.039 147.9623 79.2166 165.6697 C
63.5834 161.3031 L
f
U
62.4 60.2 m
66.7906 45.2698 70.8172 28.6126 74.8 9 C
94 13 L
90.4435 30.6127 86.1039 47.3321 80.6 65.2 C
62.4 60.2 L
f
474.3333 281.3303 m
456.5 281.3303 L
456.5 293.3303 L
442.8333 293.3303 L
442.8333 281.3303 L
407.8333 281.3303 L
407.8333 268.9969 L
442.8333 268.9969 L
442.8333 226.6636 L
442.8333 220.4094 442.7602 220.3303 434.1667 220.3303 C
427.5 220.3303 L
427.5 207.9969 L
456.0875 207.9969 456.5 208.4364 456.5 229.3303 C
456.5 268.9969 L
474.3333 268.9969 L
474.3333 281.3303 L
f
473.6667 181.3697 m
457.75 181.3697 L
457.75 193.6697 L
441.4167 193.6697 L
441.4167 181.3697 L
407.4167 181.3697 L
407.4167 166.7031 L
441.4167 166.7031 L
441.4167 127.3363 L
441.4167 122.2551 441.3387 122.1696 435.0833 122.1696 C
426.75 122.1696 L
426.75 107.503 L
457.4599 107.503 457.75 107.8246 457.75 130.6697 C
457.75 166.7031 L
473.6667 166.7031 L
473.6667 181.3697 L
f
u
476.35 379.5 m
455.25 379.5 L
455.25 393 L
444.25 393 L
444.25 379.5 L
408.25 379.5 L
408.25 369.5 L
444.25 369.5 L
444.25 326 L
444.25 318.5726 444.1819 318.5 433.25 318.5 C
428.25 318.5 L
428.25 308.5 L
454.715 308.5 455.25 309.0574 455.25 328 C
455.25 369.5 L
476.35 369.5 L
476.35 379.5 L
f
U
473 82 m
459 82 L
459 94 L
440 94 L
440 82 L
407 82 L
407 65 L
440 65 L
440 28 L
440 24.0919 439.9171 24 436 24 C
426 24 L
426 7 L
458.8325 7 459 7.2035 459 32 C
459 65 L
473 65 L
473 82 L
f
467.5 355.2 m
473.124 343.8417 479.1875 330.75 483.6 320.4 C
493.25 324.4 L
488.125 335.6375 482.3125 347.8437 476.75 359 C
467.5 355.2 L
f
466.4 254.7303 m
471.6035 243.6206 477.4166 230.3094 481.8666 219.1969 C
493.8334 224.0636 L
488.8959 235.5261 483.2709 247.9344 477.8334 259.3303 C
466.4 254.7303 L
f
465.3 154.2697 m
470.083 143.4086 475.6459 129.878 480.1334 118.0031 C
494.4167 123.7364 L
489.6666 135.4239 484.2291 148.0343 478.9166 159.6697 C
465.3 154.2697 L
f
464.2 53.8 m
468.5625 43.1875 473.875 29.4375 478.4 16.8 C
495 23.4 L
490.4375 35.3125 485.1875 48.125 480 60 C
464.2 53.8 L
f
421.25 358.5 m
416.4375 347.0937 410.8437 335.4062 405.25 324.65 C
414.55 320.4 L
420.4768 331.9494 426.2199 344.1645 430.9 355.25 C
421.25 358.5 L
f
419.8333 258.6636 m
415.2291 247.0178 409.875 235.2053 404.5 224.3636 C
416.0334 219.1969 L
421.7256 230.8829 427.2958 243.3949 431.8 254.7636 C
419.8333 258.6636 L
f
418.4167 158.8364 m
414.0209 146.951 408.9063 135.0135 403.75 124.0864 C
417.5166 118.0031 L
422.9743 129.8257 428.3717 142.6346 432.7 154.2864 C
418.4167 158.8364 L
f
417 59 m
412.8125 46.875 407.9375 34.8125 403 23.8 C
419 16.8 L
424.2231 28.7593 429.4476 41.8651 433.6 53.8 C
417 59 L
f
496.6667 275.3303 m
493.2407 281.5747 489.3745 288.0814 485.6667 293.997 C
477.2666 289.2303 L
480.9599 283.3195 484.7195 276.9016 488.0333 270.8636 C
496.6667 275.3303 L
f
497.3333 177.1697 m
493.8078 183.5419 489.647 190.4878 485.8333 196.503 C
475.9834 190.9197 L
479.7537 184.9525 483.7922 178.1249 487.2167 171.9364 C
497.3333 177.1697 L
f
u
496 379.8 m
492.6734 385.9165 489.1019 391.9841 485.5 397.8 C
478.55 393.85 L
482.1661 387.9955 485.6468 381.9874 488.85 376.1 C
496 379.8 L
f
U
474.7 91.6 m
478.5475 85.5765 482.8648 78.339 486.4 72 C
498 78 L
494.375 84.5 489.9195 91.8851 486 98 C
474.7 91.6 L
f
464.8666 280.9636 m
468.4225 275.2777 472.1272 268.9915 475.4333 262.9636 C
483.9333 267.3636 L
480.5758 273.4831 476.767 279.8664 473.1333 285.6636 C
464.8666 280.9636 L
f
463.4834 181.3364 m
467.1465 175.542 471.1314 168.8565 474.5167 162.7364 C
484.4667 167.8864 L
481.0117 174.1311 476.904 180.9414 473.1667 186.8364 C
463.4834 181.3364 L
f
u
466.25 386.9 m
469.6985 381.3227 473.1231 375.4358 476.35 369.5 C
483.4 373.15 L
480.14 379.1442 476.6299 385.1004 473.1 390.8 C
466.25 386.9 L
f
U
462.1 80.7 m
465.8705 74.797 470.1355 67.7122 473.6 61.5 C
485 67.4 L
481.4475 73.77 477.0411 81.0074 473.2 87 C
462.1 80.7 L
f
275.7 91.6 m
279.5475 85.5765 283.8648 78.339 287.4 72 C
299 78 L
295.375 84.5 290.9195 91.8851 287 98 C
275.7 91.6 L
f
257.7 89.7 m
261.4705 83.797 265.7355 76.7122 269.2 70.5 C
280.6 76.4 L
277.0475 82.77 272.6411 90.0074 268.8 96 C
257.7 89.7 L
f
u
90 576.9969 m
86.8724 582.8579 83.8903 588.0471 80.5 593.6636 C
76.45 591.3469 L
79.9119 585.6051 82.8349 580.4167 85.8166 574.8302 C
90 576.9969 L
f
91.0001 476.9939 m
87.773 482.9826 84.4961 488.611 81 494.3273 C
75.4999 491.1939 L
79.039 485.3957 82.2408 479.7975 85.3333 474.0605 C
91.0001 476.9939 L
f
92 377 m
88.6734 383.1165 85.1019 389.1841 81.5 395 C
74.55 391.05 L
78.1661 385.1955 81.6468 379.1874 84.85 373.3 C
92 377 L
f
93 276.9969 m
89.574 283.2413 85.7078 289.7481 82 295.6636 C
73.6 290.8969 L
77.2932 284.9861 81.0528 278.5682 84.3666 272.5302 C
93 276.9969 L
f
94 177.003 m
90.4744 183.3752 86.3136 190.3211 82.5 196.3363 C
72.65 190.753 L
76.4204 184.7859 80.4588 177.9582 83.8833 171.7697 C
94 177.003 L
f
U
71.7 90.6 m
75.5475 84.5765 79.8648 77.339 83.4 71 C
95 77 L
91.375 83.5 86.9195 90.8851 83 97 C
71.7 90.6 L
f
u
62.8166 588.1969 m
66.0504 582.8368 68.9149 577.7485 71.9833 571.9969 C
76.1333 574.1469 L
73.0683 579.8906 70.1558 584.9928 66.8333 590.4969 C
62.8166 588.1969 L
f
61.2332 487.8939 m
64.5744 482.4251 67.719 476.9376 70.8666 471.0938 C
76.4667 473.9939 L
73.3042 479.8628 70.0928 485.392 66.6667 490.9939 C
61.2332 487.8939 L
f
59.65 387.6 m
63.0985 382.0227 66.5231 376.1358 69.75 370.2 C
76.8 373.85 L
73.54 379.8442 70.0299 385.8004 66.5 391.5 C
59.65 387.6 L
f
58.0666 287.2969 m
61.6224 281.6111 65.3272 275.3249 68.6333 269.2969 C
77.1333 273.6969 L
73.7758 279.8164 69.967 286.1997 66.3333 291.9969 C
58.0666 287.2969 L
f
56.4834 187.003 m
60.1465 181.2086 64.1314 174.5231 67.5167 168.4031 C
77.4666 173.553 L
74.0117 179.7978 69.904 186.6081 66.1667 192.503 C
56.4834 187.003 L
f
U
54.9 86.7 m
58.6705 80.797 62.9355 73.7122 66.4 67.5 C
77.8 73.4 L
74.2475 79.77 69.8411 87.0074 66 93 C
54.9 86.7 L
f
u
391.4166 519.4969 m
395.6667 523.3302 L
345.764 570.1182 346.7577 570.3303 340.1667 570.3303 c
333.9052 570.3303 334.5852 570.1374 304.3333 531.9969 C
309 528.7469 L
337.1041 564.3685 336.782 564.4969 340.1667 564.4969 c
343.8639 564.4969 343.6022 564.3933 391.4166 519.4969 C
f
389.9332 417.1937 m
396.3334 422.6605 L
346.6318 470.4589 347.9528 470.6606 340.3333 470.6606 c
333.2191 470.6606 333.8014 470.4396 303.6666 430.9938 C
310.6001 426.3937 L
337.4458 461.8411 337.3139 461.9937 340.3333 461.9937 c
343.7902 461.9937 343.5484 461.8609 389.9332 417.1937 C
f
388.45 314.9 m
397 322 L
347.4996 370.8088 349.1479 371 340.5 371 c
332.5331 371 333.0178 370.7509 303 330 C
312.2 324.05 L
337.7874 359.323 337.8458 359.5 340.5 359.5 c
343.7167 359.5 343.4947 359.3378 388.45 314.9 C
f
386.9666 212.5969 m
397.6667 221.3302 L
348.3673 271.1496 350.343 271.3303 340.6667 271.3303 c
331.847 271.3303 332.2341 271.0531 302.3333 228.9969 C
313.8 221.6969 L
338.1291 256.7955 338.3778 256.9969 340.6667 256.9969 c
343.643 256.9969 343.4409 256.8054 386.9666 212.5969 C
f
385.4834 110.3031 m
398.3333 120.6697 L
349.235 171.4995 351.5381 171.6697 340.8333 171.6697 c
331.161 171.6697 331.4504 171.3645 301.6667 128.0031 C
315.4 119.3531 L
338.4708 154.2774 338.9097 154.5031 340.8333 154.5031 c
343.5694 154.5031 343.3871 154.2824 385.4834 110.3031 C
f
U
317 17 m
338.8125 51.75 339.4416 52 341 52 c
343.4958 52 343.3333 51.75 384 8 C
399 20 L
350.1028 71.8403 352.7332 72 341 72 c
330.4749 72 330.6667 71.6667 301 27 C
317 17 L
f
u
191.5 580.0015 m
188.3724 585.8624 185.3902 591.0516 182 596.6682 C
177.95 594.3515 L
181.4119 588.6097 184.3349 583.4213 187.3166 577.8348 C
191.5 580.0015 L
f
193 479.9985 m
189.773 485.9872 186.4961 491.6156 183 497.3318 C
177.5 494.1985 L
181.039 488.4003 184.2409 482.802 187.3333 477.0651 C
193 479.9985 L
f
U
194.5 380 m
191.1734 386.1165 187.6019 392.1841 184 398 C
177.05 394.05 L
180.6661 388.1955 184.1468 382.1874 187.35 376.3 C
194.5 380 L
f
197.0001 278.6636 m
193.574 284.908 189.7078 291.4147 186 297.3303 C
177.6 292.5636 L
181.2932 286.6528 185.0528 280.2349 188.3667 274.1969 C
197.0001 278.6636 L
f
197.5 178.3364 m
193.9744 184.7086 189.8136 191.6545 186 197.6697 C
176.15 192.0864 L
179.9204 186.1192 183.9588 179.2916 187.3833 173.1031 C
197.5 178.3364 L
f
175.7 91.6 m
179.5475 85.5765 183.8648 78.339 187.4 72 C
199 78 L
195.375 84.5 190.9195 91.8851 187 98 C
175.7 91.6 L
f
u
165.15 591.2015 m
168.3838 585.8414 171.2483 580.7531 174.3167 575.0015 C
178.4666 577.1515 L
175.4017 582.8952 172.4891 587.9973 169.1667 593.5015 C
165.15 591.2015 L
f
163.9 490.8985 m
167.2411 485.4297 170.3857 479.9422 173.5333 474.0984 C
179.1333 476.9985 L
175.9708 482.8674 172.7595 488.3966 169.3333 493.9985 C
163.9 490.8985 L
f
U
162.65 390.6 m
166.0985 385.0227 169.5231 379.1358 172.75 373.2 C
179.8 376.85 L
176.54 382.8442 173.0299 388.8004 169.5 394.5 C
162.65 390.6 L
f
162.3999 288.9636 m
165.9558 283.2777 169.6606 276.9915 172.9666 270.9636 C
181.4667 275.3636 L
178.1092 281.4831 174.3003 287.8664 170.6667 293.6636 C
162.3999 288.9636 L
f
160.15 188.3364 m
163.8132 182.542 167.7981 175.8565 171.1833 169.7364 C
181.1333 174.8864 L
177.6783 181.1311 173.5707 187.9414 169.8333 193.8364 C
160.15 188.3364 L
f
158.9 87.7 m
162.6705 81.797 166.9355 74.7122 170.4 68.5 C
181.8 74.4 L
178.2475 80.77 173.8411 88.0074 170 94 C
158.9 87.7 L
f
u
120.8333 554.8348 m
120.8333 588.3348 L
115.1667 588.3348 L
115.1667 534.8348 L
115.1667 516.7618 120.941 511.6682 138.3334 511.6682 C
183.8333 511.6682 L
183.8333 517.1681 L
138.5 517.1681 l
124.3199 517.1681 120.8333 520.659 120.8333 534.8348 C
120.8333 552.3348 L
117.5 549.6682 L
140.5703 553.2405 162.8854 558.8349 184.3334 566.3349 C
182.75 571.5848 L
161.5819 564.1781 139.2225 558.549 116.7756 555.0707 C
120.8333 554.8348 L
f
122.6667 455.6651 m
122.6667 488.6651 L
114.3333 488.6651 L
114.3333 434.6651 L
114.3333 416.4348 120.0941 411.3318 137.6667 411.3318 C
183.6667 411.3318 L
183.6667 419.3318 L
138 419.3318 l
125.5277 419.3318 122.6667 422.2013 122.6667 434.6651 C
122.6667 451.6651 L
117 447.3318 L
139.8542 450.7882 162.2083 456.2901 183.6667 463.6651 C
181.4 471.2651 L
160.3747 464.0316 138.1229 458.5205 116.0204 455.1738 C
122.6667 455.6651 L
f
U
124.5 356.5 m
124.5 389 L
113.5 389 L
113.5 334.5 L
113.5 316.1125 119.2472 311 137 311 C
183.5 311 L
183.5 321.5 L
137.5 321.5 l
126.7354 321.5 124.5 323.7482 124.5 334.5 C
124.5 351 L
116.5 345 L
139.1381 348.3405 161.5312 353.75 183 361 C
180.05 370.95 L
159.1676 363.8897 137.0235 358.4967 115.2653 355.2815 C
124.5 356.5 L
f
126.3334 257.3303 m
126.3334 289.3303 L
112.6667 289.3303 L
112.6667 234.3303 L
112.6667 215.7856 118.4003 210.6636 136.3333 210.6636 C
183.3333 210.6636 L
183.3333 223.6637 L
137 223.6637 l
127.9433 223.6637 126.3334 225.2906 126.3334 234.3303 C
126.3334 250.3302 L
115 246.6636 L
137.422 249.8882 159.8541 255.2052 181.3333 262.3302 C
177.7 274.6303 L
156.9604 267.7433 134.924 262.4684 113.5102 259.3846 C
126.3334 257.3303 L
f
128.1666 158.1697 m
128.1666 189.6697 L
111.8334 189.6697 L
111.8334 134.1697 L
111.8334 115.4679 117.5535 110.3364 135.6667 110.3364 C
183.1667 110.3364 L
183.1667 125.8363 L
136.5 125.8363 l
129.151 125.8363 128.1666 126.8419 128.1666 134.1697 C
128.1666 149.6697 L
114.5 145.3364 L
136.706 148.4451 159.1771 153.6697 180.6667 160.6697 C
176.35 175.3197 L
155.7533 168.6059 133.8246 163.449 112.7551 160.4968 C
128.1666 158.1697 L
f
130 59 m
130 90 L
111 90 L
111 34 L
111 15.141 116.7066 10 135 10 C
183 10 L
183 28 L
136 28 l
130.3588 28 130 28.3843 130 34 C
130 49 L
115 44 L
136.9899 46.9928 159.5 52.125 181 59 C
176 76 L
155.5461 69.4595 133.7251 64.4207 113 61.6 C
130 59 L
f
u
276.225 184.503 m
208.5 184.503 L
208.5 169.0031 L
278.3334 169.0031 L
267.0001 181.4614 L
266.3748 142.3073 252.2589 127.9331 215.7834 125.003 C
217.5 109.503 L
259.6107 112.8858 279.9592 131.5405 283.0304 172.9251 C
276.225 184.503 L
f
276.95 284.0061 m
209 284.0061 L
209 271.0062 L
278.6667 271.0062 L
269.2001 281.4228 L
268.6629 241.0807 253.9496 226.009 216.5667 223.006 C
218 210.0061 L
260.0584 213.3846 280.0562 231.9282 282.6219 274.2989 C
276.95 284.0061 L
f
277.675 383.5 m
209.5 383.5 L
209.5 373 L
279 373 L
271.4 381.375 L
270.9508 339.8451 255.6402 324.0758 217.35 321 C
218.5 310.5 L
260.506 313.8743 280.1533 332.3068 282.2133 375.6633 C
277.675 383.5 L
f
278.4 483.003 m
210 483.003 L
210 475.0031 L
279.3334 475.0031 L
273.6001 481.3364 L
273.2389 438.6186 257.3309 422.1517 218.1334 419.003 C
219 411.003 L
260.9537 414.3732 280.2503 432.6946 281.8048 477.0371 C
278.4 483.003 L
f
279.125 582.4969 m
210.5 582.4969 L
210.5 576.9969 L
279.6667 576.9969 L
275.7999 581.2886 L
275.5268 537.383 259.0215 520.2186 218.9166 516.997 C
219.5 511.4969 L
261.4013 514.8628 280.3473 533.0732 281.3962 578.4016 C
279.125 582.4969 L
f
U
279.85 682 m
211 682 L
211 679 L
280 679 L
278 681.25 L
277.8149 636.1565 260.7122 618.2945 219.7 615 C
220 612 L
261.8489 615.3617 280.4443 633.461 280.9877 679.7754 C
279.85 682 L
f
u
298.1667 178.503 m
294.6411 184.8752 290.4803 191.8211 286.6667 197.8364 C
276.8167 192.2531 L
280.5871 186.2859 284.6255 179.4582 288.05 173.2697 C
298.1667 178.503 L
f
297.3333 279.0061 m
293.9073 285.2505 290.0411 291.7572 286.3333 297.6728 C
277.9334 292.9061 L
281.6267 286.9953 285.3862 280.5774 288.7 274.5395 C
297.3333 279.0061 L
f
296.5 379.5 m
293.1734 385.6165 289.6019 391.6841 286 397.5 C
279.05 393.55 L
282.6661 387.6955 286.1468 381.6874 289.35 375.8 C
296.5 379.5 L
f
295.6667 480.003 m
292.4396 485.9918 289.1627 491.6201 285.6667 497.3364 C
280.1667 494.203 L
283.7057 488.4049 286.9075 482.8067 290 477.0697 C
295.6667 480.003 L
f
294.8334 580.4969 m
291.7058 586.3578 288.7236 591.547 285.3334 597.1636 C
281.2833 594.8469 L
284.7452 589.1051 287.6682 583.9166 290.65 578.3302 C
294.8334 580.4969 L
f
U
294 681 m
290.9719 686.7331 288.2844 691.4831 285 697 C
282.4 695.5 L
285.7848 689.8145 288.4289 685.0359 291.3 679.6 C
294 681 L
f
u
259.8167 190.1697 m
263.3897 184.5268 267.313 177.9631 270.5966 172.0463 C
280.5561 177.1775 L
277.1965 183.2284 273.1477 189.9254 269.5 195.6697 C
259.8167 190.1697 L
f
261.9335 290.6395 m
265.3089 285.2566 268.8905 279.2141 271.9933 273.5926 C
280.5123 277.955 L
277.3455 283.6868 273.6543 289.8435 270.2 295.3394 C
261.9335 290.6395 L
f
264.05 391.1 m
267.2279 385.9771 270.4678 380.4557 273.3898 375.1295 C
280.4685 378.7232 L
277.4945 384.136 274.1609 389.7523 270.9 395 C
264.05 391.1 L
f
266.1667 491.5697 m
269.1471 486.7069 272.0453 481.7067 274.7864 476.6758 C
280.4246 479.5007 L
277.6436 484.5944 274.6674 489.6704 271.6 494.6697 C
266.1667 491.5697 L
f
268.2833 592.0303 m
271.0662 587.4275 273.6226 582.9484 276.1829 578.2128 C
280.3807 580.269 L
277.7926 585.0436 275.174 589.5793 272.3 594.3303 C
268.2833 592.0303 L
f
U
280.3369 681.0465 m
277.9416 685.502 275.6806 689.4973 273 694 C
270.4 692.5 L
272.9854 688.1573 275.2001 684.1993 277.5795 679.7591 C
280.3369 681.0465 L
f
u
477.2666 478.6651 m
454 478.6651 L
454 492.6651 L
445.6666 492.6651 L
445.6666 478.6651 L
408.6667 478.6651 L
408.6667 470.9984 L
445.6666 470.9984 L
445.6666 425.3318 L
445.6666 416.7313 445.6035 416.6652 432.3333 416.6652 C
429 416.6652 L
429 408.9985 L
453.3425 408.9985 454 409.6739 454 426.6651 C
454 470.9984 L
477.2666 470.9984 L
477.2666 478.6651 L
f
478.1833 577.8348 m
452.75 577.8348 L
452.75 592.3348 L
447.0834 592.3348 L
447.0834 577.8348 L
409.0833 577.8348 L
409.0833 572.5015 L
447.0834 572.5015 L
447.0834 524.6682 L
447.0834 514.8946 447.0251 514.8348 431.4167 514.8348 C
429.75 514.8348 L
429.75 509.5015 L
451.97 509.5015 452.75 510.2949 452.75 525.3348 C
452.75 572.5015 L
478.1833 572.5015 L
478.1833 577.8348 L
f
U
430.5 613 m
430.5 610 L
450.5975 610 451.5 610.9114 451.5 624 C
451.5 674 L
479.1 674 L
479.1 677 L
451.5 677 L
451.5 692 L
448.5 692 L
448.5 677 L
409.5 677 L
409.5 674 L
448.5 674 L
448.5 624 L
448.5 613.0534 448.4467 613 430.5 613 C
430.5 613 L
f
u
468.6 455.6651 m
474.6445 444.0582 480.9583 431.186 485.3333 421.5984 C
492.6667 424.7318 L
487.3542 435.7443 481.3542 447.7484 475.6667 458.6651 C
468.6 455.6651 L
f
469.7 556.1349 m
476.1651 544.2794 482.7292 531.6265 487.0667 522.8015 C
492.0833 525.0682 L
486.5833 535.8557 480.3958 547.6577 474.5833 558.3348 C
469.7 556.1349 L
f
U
470.8 656.6 m
477.6856 644.4959 484.5 632.0625 488.8 624 C
491.5 625.4 L
485.8125 635.9625 479.4375 647.5625 473.5 658 C
470.8 656.6 L
f
u
422.6666 458.3318 m
417.6458 447.1651 411.8124 435.6026 406 424.9318 C
413.0667 421.5984 L
419.2281 433.0112 425.144 444.9294 430 455.7318 C
422.6666 458.3318 L
f
424.0834 558.1682 m
418.8542 547.2411 412.7812 535.8036 406.75 525.2182 C
411.5833 522.8015 L
417.9793 534.0777 424.0681 545.699 429.1 556.2182 C
424.0834 558.1682 L
f
U
425.5 658 m
420.0625 647.3125 413.75 636 407.5 625.5 C
410.1 624 L
416.7306 635.1395 422.9922 646.4639 428.2 656.7 C
425.5 658 L
f
u
495.3334 479.2318 m
492.1062 485.2205 488.8294 490.8489 485.3333 496.5651 C
479.8333 493.4318 L
483.3723 487.6336 486.5741 482.0354 489.6666 476.2985 C
495.3334 479.2318 L
f
494.6667 578.6682 m
491.539 584.5291 488.5569 589.7183 485.1667 595.3348 C
481.1167 593.0182 L
484.5786 587.2763 487.5015 582.0879 490.4833 576.5015 C
494.6667 578.6682 L
f
U
494 678.1 m
490.9719 683.8331 488.2844 688.5831 485 694.1 C
482.4 692.6 L
485.7848 686.9145 488.4289 682.1359 491.3 676.7 C
494 678.1 L
f
u
467.6333 487.7984 m
470.9745 482.3297 474.119 476.8421 477.2666 470.9984 C
482.8667 473.8984 L
479.7042 479.7674 476.4928 485.2966 473.0667 490.8984 C
467.6333 487.7984 L
f
469.0167 588.7015 m
472.2505 583.3414 475.1149 578.2531 478.1833 572.5015 C
482.3333 574.6515 L
479.2683 580.3952 476.3558 585.4973 473.0333 591.0015 C
469.0167 588.7015 L
f
U
470.4 689.6 m
473.5265 684.3484 476.1108 679.6595 479.1 674 C
481.8 675.4 L
478.8325 681.0184 476.2187 685.6935 473 691.1 C
470.4 689.6 L
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
