%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (2550.eps)
%%CreationDate: (12/15/04) (4:57 PM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
500 600 m
500 700 L
400 700 L
400 600 L
500 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
400 600 m
400 700 L
300 700 L
300 600 L
400 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
500 500 m
500 600 L
400 600 L
400 500 L
500 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
400 500 m
400 600 L
300 600 L
300 500 L
400 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
0 O
0 g
1 D
391.9 622.8 m
394 625 L
343.8963 670.7774 344.5625 671 339 671 c
333.5913 671 334.3689 670.8352 304 634 C
306.4 632.1 L
335.7624 667.896 335.25 668 339 668 c
342.9375 668 342.656 667.9257 391.9 622.8 C
f
278 681.2 m
277.7756 635.2503 259.6786 616.2918 218.7 613 C
219 610 L
261.6502 613.4261 281 634.1632 281 682 C
210 682 L
210 679 L
280 679 L
278 681.2 L
f
119 651 m
119 687 L
116 687 L
116 634 L
116 616.0841 121.7879 611 139 611 C
184 611 L
184 614 L
139 614 l
123.1121 614 119 618.1121 119 634 c
119 650 L
118 649 L
141.2864 652.6882 163.5625 658.375 185 666 C
184.1 668.9 L
162.789 661.32 140.3219 655.5728 117.5307 651.9631 C
119 651 L
f
430 612 m
430 609 L
450.0975 609 451 609.9114 451 623 C
451 671 L
489 671 L
489 674 L
451 674 L
451 691 L
448 691 L
448 674 L
409 674 L
409 671 L
448 671 L
448 623 L
448 612.0534 447.9467 612 430 612 C
430 612 L
f
470.3 654.6 m
477.1856 642.4959 484 630.0625 488.3 622 C
491 623.4 L
485.3125 633.9625 478.9375 645.5625 473 656 C
470.3 654.6 L
f
425 656 m
419.5625 645.3125 413.25 634 407 623.5 C
409.6 622 L
416.2306 633.1395 422.4922 644.4639 427.7 654.7 C
425 656 L
f
28 684 m
25.8035 658.8945 18.6963 636.8982 6 615.4 C
8.6 614 L
21.6072 636.0586 28.875 658.5625 31 684 C
28 684 L
f
69.5 666.8 m
77.0312 649.6431 82.0948 633.3393 86 614 C
89 614.6 L
84.9858 634.4794 79.7148 651.0951 72.3 668 C
69.5 666.8 L
f
89 680 m
85.75 685.25 82.875 689.25 79 694 C
76.6 692.2 L
80.4897 687.4319 83.2563 683.5783 86.4 678.5 C
89 680 L
f
77.6 676.7 m
74.5234 681.6148 71.703 685.4608 68 690 C
65.6 688.2 L
69.2965 683.6688 72.0445 679.8155 75 675.1 C
77.6 676.7 L
f
191 682 m
187.75 687.25 184.875 691.25 181 696 C
178.6 694.2 L
182.4897 689.4319 185.2563 685.5783 188.4 680.5 C
191 682 L
f
179.6 678.7 m
176.5234 683.6148 173.703 687.4608 170 692 C
167.6 690.2 L
171.2965 685.6688 174.0445 681.8155 177 677.1 C
179.6 678.7 L
f
299 685 m
295.75 690.25 292.875 694.25 289 699 C
286.6 697.2 L
290.4897 692.4319 293.2563 688.5783 296.4 683.5 C
299 685 L
f
287.6 681.7 m
284.5234 686.6148 281.703 690.4608 278 695 C
275.6 693.2 L
279.2965 688.6688 282.0445 684.8155 285 680.1 C
287.6 681.7 L
f
496 683 m
492.75 688.25 489.875 692.25 486 697 C
483.6 695.2 L
487.4897 690.4319 490.2563 686.5783 493.4 681.5 C
496 683 L
f
484.6 679.7 m
481.5234 684.6148 478.703 688.4608 475 693 C
472.6 691.2 L
476.2965 686.6688 479.0445 682.8155 482 678.1 C
484.6 679.7 L
f
385 671 m
381.5 676.375 377.875 681.25 374 686 C
371.6 684.2 L
375.6415 679.2459 379.2671 674.3648 382.5 669.4 C
385 671 L
f
372.4 666.9 m
369.0824 671.9223 365.658 676.516 362 681 C
359.6 679.2 L
363.2734 674.6971 366.69 670.1491 369.9 665.3 C
372.4 666.9 L
f
u
390.5833 520.8302 m
394.8334 524.6636 L
344.9307 571.4515 345.9243 571.6636 339.3333 571.6636 c
333.0719 571.6636 333.7518 571.4707 303.5 533.3302 C
308.1667 530.0802 L
336.2707 565.7019 335.9486 565.8302 339.3333 565.8302 c
343.0305 565.8302 342.7689 565.7266 390.5833 520.8302 C
f
389.2666 418.8604 m
395.6667 424.3272 L
345.9652 472.1256 347.2861 472.3273 339.6667 472.3273 c
332.5525 472.3273 333.1348 472.1063 303 432.6605 C
309.9334 428.0604 L
336.7791 463.5077 336.6472 463.6604 339.6667 463.6604 c
343.1236 463.6604 342.8818 463.5275 389.2666 418.8604 C
f
387.95 316.9 m
396.5 324 L
346.9995 372.8088 348.6478 373 340 373 c
332.0331 373 332.5178 372.7509 302.5 332 C
311.7 326.05 L
337.2874 361.323 337.3458 361.5 340 361.5 c
343.2166 361.5 342.9946 361.3378 387.95 316.9 C
f
386.6333 214.9302 m
397.3334 223.6636 L
348.034 273.4829 350.0096 273.6636 340.3333 273.6636 c
331.5137 273.6636 331.9007 273.3865 302 231.3302 C
313.4667 224.0302 L
337.7958 259.1289 338.0444 259.3302 340.3333 259.3302 c
343.3097 259.3302 343.1075 259.1388 386.6333 214.9302 C
f
385.3167 112.9698 m
398.1666 123.3364 L
349.0683 174.1661 351.3713 174.3363 340.6667 174.3363 c
330.9943 174.3363 331.2837 174.0311 301.5 130.6697 C
315.2333 122.0198 L
338.3041 156.9441 338.7429 157.1698 340.6667 157.1698 c
343.4027 157.1698 343.2204 156.949 385.3167 112.9698 C
f
U
317 20 m
338.8125 54.75 339.4416 55 341 55 c
343.4958 55 343.3333 54.75 384 11 C
399 23 L
350.1028 74.8403 352.7332 75 341 75 c
330.4749 75 330.6667 74.6667 301 30 C
317 20 L
f
u
26.8333 584.3303 m
25.0029 559.2055 17.9501 536.8116 5.5 515.7303 C
10.6167 513.1636 L
23.4951 535.1089 30.7292 558.4244 32.5 584.3303 C
26.8333 584.3303 L
f
25.6666 484.6606 m
24.2023 459.5166 17.2039 436.725 5 416.0606 C
12.6334 412.3272 L
25.3831 434.1592 32.5834 458.2864 34.0001 484.6606 C
25.6666 484.6606 L
f
24.5 385 m
23.4017 359.8368 16.4577 336.6476 4.5 316.4 C
14.65 311.5 L
27.2708 333.2187 34.4375 358.1576 35.5 385 C
24.5 385 L
f
23.3333 285.3303 m
22.6011 260.1478 15.7115 236.561 4 216.7303 C
16.6667 210.6636 L
29.1588 232.269 36.2917 258.0195 37 285.3303 C
23.3333 285.3303 L
f
22.1667 185.6697 m
21.8006 160.468 14.9654 136.4836 3.5 117.0697 C
18.6833 109.8364 L
31.0465 131.3286 38.1458 157.8907 38.5 185.6697 C
22.1667 185.6697 L
f
U
20.7 9 m
32.9345 30.3789 40 57.7527 40 86 C
21 86 L
21 60.7791 14.2192 36.3971 3 17.4 C
20.7 9 L
f
u
489.1667 574.3348 m
452.3333 574.3348 L
452.3333 591.1682 L
446.6667 591.1682 L
446.6667 574.3348 L
408.5 574.3348 L
408.5 569.0015 L
446.6667 569.0015 L
446.6667 523.5015 L
446.6667 513.728 446.6084 513.6681 431 513.6681 C
429.3334 513.6681 L
429.3334 508.3348 L
451.5533 508.3348 452.3333 509.1282 452.3333 524.1681 C
452.3333 569.0015 L
489.1667 569.0015 L
489.1667 574.3348 L
f
489.3333 474.6651 m
453.6667 474.6651 L
453.6667 491.3318 L
445.3333 491.3318 L
445.3333 474.6651 L
408 474.6651 L
408 466.9984 L
445.3333 466.9984 L
445.3333 423.9985 L
445.3333 415.398 445.2701 415.3318 432 415.3318 C
428.6667 415.3318 L
428.6667 407.6651 L
453.0092 407.6651 453.6667 408.3405 453.6667 425.3318 C
453.6667 466.9984 L
489.3333 466.9984 L
489.3333 474.6651 L
f
U
u
489.5 375 m
455 375 L
455 391.5 L
444 391.5 L
444 375 L
407.5 375 L
407.5 365 L
444 365 L
444 324.5 L
444 317.0726 443.9319 317 433 317 C
428 317 L
428 307 L
454.465 307 455 307.5574 455 326.5 C
455 365 L
489.5 365 L
489.5 375 L
f
489.6667 276.6636 m
456.3334 276.6636 L
456.3334 291.6636 L
442.6666 291.6636 L
442.6666 276.6636 L
407 276.6636 L
407 264.3302 L
442.6666 264.3302 L
442.6666 224.9969 L
442.6666 218.7427 442.5936 218.6636 434 218.6636 C
427.3333 218.6636 L
427.3333 206.3302 L
455.9208 206.3302 456.3334 206.7697 456.3334 227.6636 C
456.3334 264.3302 L
489.6667 264.3302 L
489.6667 276.6636 L
f
489.8333 176.3363 m
457.6666 176.3363 L
457.6666 191.8364 L
441.3334 191.8364 L
441.3334 176.3363 L
406.5 176.3363 L
406.5 161.6697 L
441.3334 161.6697 L
441.3334 125.503 L
441.3334 120.4218 441.2554 120.3363 435 120.3363 C
426.6667 120.3363 L
426.6667 105.6697 L
457.3766 105.6697 457.6666 105.9912 457.6666 128.8363 C
457.6666 161.6697 L
489.8333 161.6697 L
489.8333 176.3363 L
f
U
490 78 m
459 78 L
459 92 L
440 92 L
440 78 L
406 78 L
406 61 L
440 61 L
440 26 L
440 22.0919 439.9171 22 436 22 C
426 22 L
426 5 L
458.8325 5 459 5.2035 459 30 C
459 61 L
490 61 L
490 78 L
f
u
469.1166 553.9636 m
475.5817 542.1081 482.1458 529.4552 486.4833 520.6302 C
491.5 522.8969 L
486 533.6844 479.8125 545.4865 474 556.1636 C
469.1166 553.9636 L
f
467.9332 453.3272 m
473.9778 441.7203 480.2915 428.848 484.6665 419.2604 C
492 422.3938 L
486.6875 433.4064 480.6875 445.4105 475.0001 456.3272 C
467.9332 453.3272 L
f
466.75 352.7 m
472.374 341.3417 478.4375 328.25 482.85 317.9 C
492.5 321.9 L
487.375 333.1375 481.5625 345.3437 476 356.5 C
466.75 352.7 L
f
465.5666 252.0636 m
470.7701 240.9539 476.5833 227.6427 481.0333 216.5302 C
493 221.3969 L
488.0625 232.8594 482.4375 245.2678 477 256.6636 C
465.5666 252.0636 L
f
464.3833 151.4364 m
469.1664 140.5753 474.7292 127.0447 479.2167 115.1697 C
493.5 120.903 L
488.75 132.5905 483.3125 145.201 478 156.8364 C
464.3833 151.4364 L
f
U
463.2 50.8 m
467.5625 40.1875 472.875 26.4375 477.4 13.8 C
494 20.4 L
489.4375 32.3125 484.1875 45.125 479 57 C
463.2 50.8 L
f
u
423.5 555.9969 m
418.2708 545.0698 412.1979 533.6323 406.1666 523.0469 C
411 520.6302 L
417.396 531.9064 423.4848 543.5277 428.5167 554.0469 C
423.5 555.9969 L
f
421.9999 455.9939 m
416.9791 444.8272 411.1458 433.2647 405.3333 422.5938 C
412.4001 419.2604 L
418.5615 430.6732 424.4774 442.5915 429.3334 453.3938 C
421.9999 455.9939 L
f
420.5 356 m
415.6875 344.5937 410.0937 332.9062 404.5 322.15 C
413.8 317.9 L
419.7268 329.4494 425.4699 341.6645 430.15 352.75 C
420.5 356 L
f
419 255.9969 m
414.3958 244.3511 409.0416 232.5386 403.6666 221.6969 C
415.2 216.5302 L
420.8923 228.2162 426.4625 240.7283 430.9667 252.0969 C
419 255.9969 L
f
417.5 156.003 m
413.1042 144.1176 407.9896 132.1801 402.8334 121.253 C
416.5999 115.1697 L
422.0576 126.9924 427.455 139.8013 431.7833 151.453 C
417.5 156.003 L
f
U
416 56 m
411.8125 43.875 406.9375 31.8125 402 20.8 C
418 13.8 L
423.2231 25.7593 428.4476 38.8651 432.6 50.8 C
416 56 L
f
u
121.0001 551.8303 m
121.0001 587.3303 L
115.3333 587.3303 L
115.3333 533.8303 L
115.3333 515.7572 121.1076 510.6636 138.5 510.6636 C
184.1667 510.6636 L
184.1667 516.1637 L
138.6667 516.1637 l
124.4866 516.1637 121.0001 519.6544 121.0001 533.8303 C
121.0001 549.3302 L
118.6667 547.6636 L
141.737 551.2359 164.0521 556.8302 185.5 564.3302 C
183.9166 569.5803 L
162.7485 562.1735 140.3891 556.5444 117.9422 553.0662 C
121.0001 551.8303 L
f
123.0001 452.6606 m
123.0001 487.6606 L
114.6666 487.6606 L
114.6666 433.6605 L
114.6666 415.4302 120.4274 410.3272 138 410.3272 C
184.3333 410.3272 L
184.3333 418.3273 L
138.3333 418.3273 l
125.8611 418.3273 123.0001 421.1968 123.0001 433.6605 C
123.0001 448.6605 L
119.3334 446.3271 L
142.1876 449.7835 164.5417 455.2854 186 462.6604 C
183.7333 470.2606 L
162.708 463.0271 140.4563 457.516 118.3538 454.1693 C
123.0001 452.6606 L
f
125 353.5 m
125 388 L
114 388 L
114 333.5 L
114 315.1125 119.7472 310 137.5 310 C
184.5 310 L
184.5 320.5 L
138 320.5 l
127.2354 320.5 125 322.7482 125 333.5 C
125 348 L
120 345 L
142.6381 348.3405 165.0312 353.75 186.5 361 C
183.55 370.95 L
162.6675 363.8897 140.5235 358.4967 118.7653 355.2815 C
125 353.5 L
f
127.0001 254.3303 m
127.0001 288.3303 L
113.3333 288.3303 L
113.3333 233.3303 L
113.3333 214.7856 119.067 209.6636 137 209.6636 C
184.6667 209.6636 L
184.6667 222.6637 L
137.6667 222.6637 l
128.6099 222.6637 127.0001 224.2905 127.0001 233.3303 C
127.0001 247.3302 L
120.6667 243.6636 L
143.0887 246.8881 165.5208 252.2052 187 259.3302 C
183.3666 271.6303 L
162.627 264.7433 140.5907 259.4683 119.1769 256.3847 C
127.0001 254.3303 L
f
128.9999 155.1697 m
128.9999 188.6697 L
112.6667 188.6697 L
112.6667 133.1697 L
112.6667 114.4679 118.3868 109.3364 136.5 109.3364 C
184.8333 109.3364 L
184.8333 124.8363 L
137.3333 124.8363 l
129.9843 124.8363 128.9999 125.8419 128.9999 133.1697 C
128.9999 146.6697 L
121.3333 142.3364 L
143.5393 145.4451 166.0104 150.6697 187.5 157.6697 C
183.1833 172.3197 L
162.5866 165.6059 140.6579 160.449 119.5884 157.4968 C
128.9999 155.1697 L
f
U
131 56 m
131 89 L
112 89 L
112 33 L
112 14.141 117.7066 9 136 9 C
185 9 L
185 27 L
137 27 l
131.3588 27 131 27.3843 131 33 C
131 46 L
122 41 L
143.9899 43.9928 166.5 49.125 188 56 C
183 73 L
162.5461 66.4595 140.7251 61.4207 120 58.6 C
131 56 L
f
u
68.3166 565.6969 m
75.3244 548.9111 80.2151 532.5484 84.1333 513.1636 C
89.8334 514.3303 L
85.8954 533.8319 80.7797 550.4649 73.6834 567.5303 C
68.3166 565.6969 L
f
67.1333 464.5938 m
73.6175 448.1792 78.3355 431.7576 82.2665 412.3272 C
90.6667 414.0605 L
86.8051 433.1843 81.8446 449.8346 75.0667 467.0605 C
67.1333 464.5938 L
f
65.95 363.5 m
71.9109 347.4564 76.456 330.9759 80.4 311.5 C
91.5 313.8 L
87.7146 332.546 82.9093 349.2136 76.45 366.6 C
65.95 363.5 L
f
64.7666 262.3969 m
70.2041 246.7245 74.5763 230.1851 78.5333 210.6636 C
92.3334 213.5303 L
88.6243 231.8985 83.9742 248.5834 77.8334 266.1303 C
64.7666 262.3969 L
f
63.5834 161.3031 m
68.4974 146.0018 72.6968 129.4035 76.6667 109.8364 C
93.1666 113.2697 L
89.5338 131.2602 85.039 147.9623 79.2166 165.6697 C
63.5834 161.3031 L
f
U
62.4 60.2 m
66.7906 45.2698 70.8172 28.6126 74.8 9 C
94 13 L
90.4435 30.6127 86.1039 47.3321 80.6 65.2 C
62.4 60.2 L
f
u
89.6667 579.4369 m
86.3742 584.8784 83.3975 589.2146 79.5334 594.1636 C
75.6973 591.6556 L
79.5219 586.7724 82.4347 582.5276 85.628 577.2509 C
89.6667 579.4369 L
f
90.3334 478.8738 m
86.9985 484.5069 83.9199 489.1793 80.0667 494.3272 C
74.7946 491.1112 L
78.554 486.1129 81.6131 481.4769 84.8559 476.0018 C
90.3334 478.8738 L
f
91 378.32 m
87.6227 384.1445 84.4423 389.1531 80.6 394.5 C
73.892 390.576 L
77.5863 385.4626 80.7915 380.4354 84.084 374.762 C
91 378.32 L
f
91.6667 277.7569 m
88.2469 283.773 84.9648 289.1178 81.1333 294.6636 C
72.9893 290.0316 L
76.6184 284.8031 79.9699 279.3847 83.3119 273.5129 C
91.6667 277.7569 L
f
92.3333 177.2031 m
88.8711 183.4106 85.4872 189.0916 81.6666 194.8364 C
72.0867 189.4964 L
75.6507 184.1528 79.1484 178.3432 82.54 172.2731 C
92.3333 177.2031 L
f
U
93 76.64 m
89.4954 83.0391 86.0097 89.0563 82.2 95 C
71.184 88.952 L
74.6829 83.4933 78.3268 77.2925 81.768 71.024 C
93 76.64 L
f
u
77.3586 576.1001 m
74.2224 581.241 71.3027 585.4288 67.5947 590.1823 C
63.7953 587.6944 L
67.4472 583.0268 70.3324 578.8029 73.3574 573.8495 C
77.3586 576.1001 L
f
77.1173 475.5003 m
73.9214 480.8672 70.9024 485.3968 67.1893 490.3646 C
61.9906 487.1889 L
65.5979 482.3849 68.6203 477.7904 71.7147 472.599 C
77.1173 475.5003 L
f
76.8759 374.9096 m
73.6204 380.5026 70.5022 385.374 66.784 390.556 C
60.1861 386.6925 L
63.7488 381.7521 66.9083 376.7871 70.0723 371.3578 C
76.8759 374.9096 L
f
76.6346 274.3098 m
73.3194 280.1288 70.1019 285.342 66.3786 290.7383 C
58.3815 286.1869 L
61.8995 281.1102 65.1962 275.7745 68.4297 270.1073 C
76.6346 274.3098 L
f
76.3932 173.7191 m
73.0185 179.7642 69.7017 185.3192 65.9733 190.9297 C
56.5769 185.6906 L
60.0504 180.4774 63.4843 174.7712 66.7872 168.8661 C
76.3932 173.7191 L
f
U
76.1519 73.1193 m
72.7175 79.3904 69.3014 85.2872 65.568 91.112 C
54.7723 85.185 L
58.2012 79.8355 61.7722 73.7587 65.1446 67.6156 C
76.1519 73.1193 L
f
u
386.6667 571.1036 m
383.1659 576.6493 379.5642 581.7147 375.7001 586.6636 C
371.864 584.1556 L
375.8151 579.1174 379.4437 574.0163 382.7113 568.8343 C
386.6667 571.1036 L
f
388.3334 471.2072 m
384.8319 476.9236 381.2533 482.1793 377.4001 487.3273 C
372.128 484.1112 L
375.9886 478.9889 379.6203 473.6679 382.9227 468.2685 C
388.3334 471.2072 L
f
390 371.32 m
386.4977 377.207 382.9423 382.6531 379.1 388 C
372.392 384.076 L
376.1622 378.8696 379.7969 373.3286 383.134 367.712 C
390 371.32 L
f
391.6667 271.4236 m
388.1636 277.4813 384.6315 283.1178 380.8 288.6636 C
372.656 284.0316 L
376.3358 278.7411 379.9736 272.9802 383.3453 267.1463 C
391.6667 271.4236 L
f
393.3333 171.5364 m
389.8294 177.7648 386.3205 183.5916 382.4999 189.3363 C
372.92 183.9964 L
376.5093 178.6218 380.1502 172.6409 383.5566 166.5897 C
393.3333 171.5364 L
f
U
395 71.64 m
391.4954 78.0391 388.0097 84.0563 384.2 90 C
373.184 83.952 L
376.6829 78.4933 380.3268 72.2925 383.768 66.024 C
395 71.64 L
f
u
373.3587 567.1002 m
370.0216 572.3306 366.5986 577.1415 362.928 581.849 C
359.1287 579.3611 L
362.7613 574.7171 366.2037 569.9143 369.4407 564.8495 C
373.3587 567.1002 L
f
374.3173 467.3003 m
370.9608 472.7389 367.5392 477.767 363.856 482.6979 C
358.6574 479.5222 L
362.2493 474.7371 365.7174 469.6795 368.9815 464.399 C
374.3173 467.3003 L
f
375.2759 367.5096 m
371.8999 373.1563 368.4797 378.4016 364.784 383.556 C
358.1861 379.6925 L
361.7373 374.7663 365.2311 369.4539 368.5223 363.9578 C
375.2759 367.5096 L
f
376.2346 267.7098 m
372.8391 273.5646 369.4203 279.0271 365.712 284.405 C
357.7148 279.8536 L
361.2252 274.7863 364.7447 269.2191 368.063 263.5073 C
376.2346 267.7098 L
f
377.1932 167.9191 m
373.7783 173.9821 370.3608 179.6617 366.6399 185.263 C
357.2436 180.0239 L
360.7132 174.8155 364.2585 168.9935 367.6038 163.066 C
377.1932 167.9191 L
f
U
378.1519 68.1193 m
374.7175 74.3904 371.3014 80.2872 367.568 86.112 C
356.7723 80.185 L
360.2012 74.8355 363.7722 68.7587 367.1446 62.6156 C
378.1519 68.1193 L
f
u
496.5 582.8303 m
493.2508 588.1928 490.3171 592.4547 486.5 597.3303 C
482.8 594.8969 L
486.5813 590.0811 489.4492 585.9129 492.6 580.7136 C
496.5 582.8303 L
f
497 482.6605 m
493.7517 488.1356 490.7592 492.6594 487 497.6606 C
481.9999 494.5939 L
485.673 489.7304 488.642 485.2474 491.7999 479.9272 C
497 482.6605 L
f
497.5 382.5 m
494.2525 388.0875 491.2012 392.8733 487.5 398 C
481.2 394.3 L
484.7647 389.3888 487.835 384.5912 491 379.15 C
497.5 382.5 L
f
498 282.3303 m
494.7533 288.0303 491.6433 293.078 488 298.3303 C
480.3999 293.9969 L
483.8563 289.038 487.0279 283.9258 490.1999 278.3636 C
498 282.3303 L
f
498.5 182.1697 m
495.2541 187.9823 492.0854 193.2919 488.5 198.6697 C
479.6 193.703 L
482.948 188.6965 486.2208 183.2696 489.4 177.5864 C
498.5 182.1697 L
f
U
499 82 m
495.755 87.9251 492.5275 93.4966 489 99 C
478.8 93.4 L
482.0397 88.3457 485.4137 82.6042 488.6 76.8 C
499 82 L
f
u
484.2 579.8703 m
481.1061 584.9337 478.2286 589.0487 474.5666 593.7303 C
470.9006 591.3156 L
474.5102 586.7141 477.3513 582.5652 480.3346 577.6876 C
484.2 579.8703 L
f
483.8 480.0406 m
480.6889 485.2527 477.7543 489.6367 474.1333 494.4606 C
469.2012 491.4313 L
472.7239 486.7594 475.658 482.3149 478.6692 477.2752 C
483.8 480.0406 L
f
483.4 380.22 m
480.2716 385.5807 477.2799 390.2337 473.7 395.2 C
467.502 391.556 L
470.9377 386.8138 473.965 382.0738 477.004 376.872 C
483.4 380.22 L
f
483.6 279.3903 m
480.4544 284.8997 477.4055 289.8217 473.8666 294.9303 C
466.4026 290.6717 L
469.7514 285.8591 472.8717 280.8236 475.9386 275.4597 C
483.6 279.3903 L
f
483.2 179.5698 m
480.0371 185.2277 476.9312 190.4187 473.4333 195.6697 C
464.7033 190.7965 L
467.9653 185.9135 471.1787 180.5825 474.2734 175.0565 C
483.2 179.5698 L
f
U
482.2 80.7401 m
479.0199 86.5467 475.8569 92.0067 472.4 97.4 C
462.404 91.9121 L
465.579 86.9588 468.8855 81.3322 472.008 75.6441 C
482.2 80.7401 L
f
u
192 581.8303 m
188.7509 587.1928 185.8171 591.4547 182 596.3303 C
178.3 593.8969 L
182.0813 589.0811 184.9492 584.9129 188.1 579.7136 C
192 581.8303 L
f
193.0001 481.6605 m
189.7517 487.1356 186.7592 491.6594 183.0001 496.6606 C
178 493.5939 L
181.673 488.7304 184.6421 484.2474 187.8 478.9272 C
193.0001 481.6605 L
f
194 381.5 m
190.7525 387.0875 187.7012 391.8733 184 397 C
177.7 393.3 L
181.2647 388.3888 184.335 383.5912 187.5 378.15 C
194 381.5 L
f
195 281.3303 m
191.7533 287.0303 188.6434 292.078 185 297.3303 C
177.4 292.9969 L
180.8563 288.038 184.0279 282.9258 187.2 277.3636 C
195 281.3303 L
f
196 181.1697 m
192.7541 186.9823 189.5854 192.2919 186 197.6697 C
177.1 192.703 L
180.448 187.6965 183.7208 182.2696 186.9 176.5864 C
196 181.1697 L
f
U
197 81 m
193.755 86.9251 190.5275 92.4966 187 98 C
176.8 92.4 L
180.0397 87.3457 183.4137 81.6042 186.6 75.8 C
197 81 L
f
u
179.8 578.7036 m
176.7061 583.7671 173.8286 587.8821 170.1667 592.5636 C
166.5006 590.149 L
170.1102 585.5474 172.9513 581.3985 175.9346 576.5209 C
179.8 578.7036 L
f
180 478.7073 m
176.8889 483.9193 173.9543 488.3033 170.3333 493.1272 C
165.4013 490.0979 L
168.9239 485.426 171.8581 480.9816 174.8693 475.9419 C
180 478.7073 L
f
180.2 378.72 m
177.0716 384.0807 174.0799 388.7337 170.5 393.7 C
164.302 390.056 L
167.7377 385.3138 170.765 380.5738 173.804 375.372 C
180.2 378.72 L
f
180.4 278.7237 m
177.2544 284.233 174.2056 289.155 170.6667 294.2636 C
163.2026 290.005 L
166.5514 285.1924 169.6718 280.1569 172.7386 274.793 C
180.4 278.7237 L
f
180.6 178.7365 m
177.4371 184.3944 174.3312 189.5854 170.8333 194.8363 C
162.1033 189.9631 L
165.3653 185.0802 168.5787 179.7491 171.6734 174.2231 C
180.6 178.7365 L
f
U
180.8 78.7401 m
177.6199 84.5467 174.4569 90.0067 171 95.4 C
161.004 89.9121 L
164.179 84.9588 167.4855 79.3322 170.608 73.6441 C
180.8 78.7401 L
f
u
276.7999 581.2469 m
276.4899 536.4075 258.9699 518.2144 218.9166 514.997 C
219.5 509.4969 L
262.7113 512.9681 282.5 534.057 282.5 582.4969 C
210.3333 582.4969 L
210.3333 576.9969 L
280.6667 576.9969 L
276.7999 581.2469 L
f
274.0998 481.2939 m
273.7042 437.5647 256.7611 420.1371 217.6333 416.994 C
218.5 408.9938 L
262.2724 412.5101 282.5 433.9509 282.5 482.9939 C
209.1666 482.9939 L
209.1666 474.9938 L
279.8333 474.9938 L
274.0998 481.2939 L
f
271.4 381.35 m
270.9187 338.7309 254.5526 322.0688 216.35 319 C
217.5 308.5 L
261.8335 312.0613 282.5 333.854 282.5 383.5 C
208 383.5 L
208 373 L
279 373 L
271.4 381.35 L
f
283.7 283.9969 m
209.3333 283.9969 L
209.3333 270.9969 L
280.6667 270.9969 L
271.1999 281.3969 L
270.633 239.8881 254.8439 223.9914 217.5666 220.997 C
219 207.9969 L
263.2767 211.5536 284.4145 233.1418 284.988 281.938 C
283.7 283.9969 L
f
U
u
298 584.7236 m
294.7941 590.0071 291.9034 594.1947 288.1333 598.9969 C
284.5693 596.6383 L
288.3075 591.8898 291.1303 587.7982 294.2386 582.6763 C
298 584.7236 L
f
298.5 484.4472 m
295.3382 489.7642 292.4318 494.1395 288.7667 498.9939 C
284.0386 496.0765 L
287.6252 491.3478 290.5043 487.018 293.5773 481.8525 C
298.5 484.4472 L
f
299 384.18 m
295.8823 389.5305 292.9601 394.0934 289.4 399 C
283.508 395.524 L
286.9431 390.815 289.8785 386.2471 292.916 381.038 C
299 384.18 L
f
299 283.9067 m
295.9264 289.2908 292.9885 294.0413 289.5333 299 C
282.4773 294.9653 L
285.7609 290.276 288.7525 285.47 291.7546 280.2174 C
299 283.9067 L
f
U
u
299 183.6333 m
295.9705 189.0509 293.0169 193.9891 289.6666 199 C
281.4466 194.4066 L
284.5787 189.737 287.6266 184.6929 290.5933 179.3967 C
299 183.6333 L
f
U
299 83.36 m
296.0146 88.8111 293.0453 93.9369 289.8 99 C
280.416 93.848 L
283.3966 89.1981 286.5007 83.9159 289.432 78.5761 C
299 83.36 L
f
u
285.908 581.8071 m
282.8565 586.7931 280.0212 590.8353 276.4053 595.4449 C
272.8726 593.1035 L
276.4398 588.568 279.2368 584.4941 282.1785 579.6923 C
285.908 581.8071 L
f
285.716 481.9142 m
282.6896 486.9714 279.8394 491.2098 276.3106 495.8899 C
271.6452 493.0069 L
275.0831 488.4672 277.9291 484.1728 280.857 479.2847 C
285.716 481.9142 L
f
285.524 382.0304 m
282.5228 387.1588 279.6577 391.5935 276.216 396.344 C
270.4179 392.9195 L
273.7266 388.3755 276.6216 383.8606 279.5357 378.8863 C
285.524 382.0304 L
f
284.832 282.1406 m
281.856 287.3403 278.9759 291.9711 275.6213 296.792 C
268.6905 292.8261 L
271.8699 288.2778 274.8139 283.5423 277.7142 278.4818 C
284.832 282.1406 L
f
U
u
284.14 182.2507 m
281.1891 187.5216 278.2941 192.3486 275.0267 197.24 C
266.9631 192.7326 L
270.0133 188.18 273.0063 183.224 275.8928 178.0772 C
284.14 182.2507 L
f
U
283.448 82.3609 m
280.5223 87.7029 277.6124 92.7262 274.432 97.688 C
265.2358 92.6391 L
268.1567 88.0822 271.1987 82.9057 274.0714 77.6726 C
283.448 82.3609 L
f
u
282.85 184.4984 m
207.6667 184.4984 L
207.6667 168.9984 L
279.3333 168.9984 L
267.9999 181.4484 L
267.3474 141.0498 252.1352 125.9186 215.7833 122.9985 C
217.5 107.4984 L
262.1181 111.0826 283.7133 132.8241 284.494 181.719 C
282.85 184.4984 L
f
U
282 85 m
206 85 L
206 67 L
278 67 L
264.8 81.5 L
264.0619 42.2116 249.4266 27.8458 214 25 C
216 7 L
260.9595 10.6116 283.012 32.3065 284 81.3 C
282 85 L
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
