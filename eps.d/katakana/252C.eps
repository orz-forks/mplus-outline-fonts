%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (252C.eps)
%%CreationDate: (12/15/04) (3:08 PM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
400 600 m
400 700 L
500 700 L
500 600 L
400 600 L
n
100 600 m
100 700 L
200 700 L
200 600 L
100 600 L
n
200 600 m
200 700 L
300 700 L
300 600 L
200 600 L
n
300 600 m
300 700 L
400 700 L
400 600 L
300 600 L
n
0 500 m
0 600 L
100 600 L
100 500 L
0 500 L
n
400 500 m
400 600 L
500 600 L
500 500 L
400 500 L
n
100 500 m
100 600 L
200 600 L
200 500 L
100 500 L
n
200 500 m
200 600 L
300 600 L
300 500 L
200 500 L
n
300 500 m
300 600 L
400 600 L
400 500 L
300 500 L
n
0 400 m
0 500 L
100 500 L
100 400 L
0 400 L
n
400 400 m
400 500 L
500 500 L
500 400 L
400 400 L
n
100 400 m
100 500 L
200 500 L
200 400 L
100 400 L
n
200 400 m
200 500 L
300 500 L
300 400 L
200 400 L
n
300 400 m
300 500 L
400 500 L
400 400 L
300 400 L
n
0 300 m
0 400 L
100 400 L
100 300 L
0 300 L
n
400 300 m
400 400 L
500 400 L
500 300 L
400 300 L
n
100 300 m
100 400 L
200 400 L
200 300 L
100 300 L
n
200 300 m
200 400 L
300 400 L
300 300 L
200 300 L
n
300 300 m
300 400 L
400 400 L
400 300 L
300 300 L
n
0 200 m
0 300 L
100 300 L
100 200 L
0 200 L
n
400 200 m
400 300 L
500 300 L
500 200 L
400 200 L
n
100 200 m
100 300 L
200 300 L
200 200 L
100 200 L
n
200 200 m
200 300 L
300 300 L
300 200 L
200 200 L
n
300 200 m
300 300 L
400 300 L
400 200 L
300 200 L
n
0 100 m
0 200 L
100 200 L
100 100 L
0 100 L
n
400 100 m
400 200 L
500 200 L
500 100 L
400 100 L
n
100 100 m
100 200 L
200 200 L
200 100 L
100 100 L
n
200 100 m
200 200 L
300 200 L
300 100 L
200 100 L
n
300 100 m
300 200 L
400 200 L
400 100 L
300 100 L
n
0 0 m
0 100 L
100 100 L
100 0 L
0 0 L
n
400 0 m
400 100 L
500 100 L
500 0 L
400 0 L
n
100 0 m
100 100 L
200 100 L
200 0 L
100 0 L
n
200 0 m
200 100 L
300 100 L
300 0 L
200 0 L
n
300 0 m
300 100 L
400 100 L
400 0 L
300 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
0 O
0 g
1 D
212.1 646.9 m
225.5635 659.7781 232.2 672.9336 234 691 C
231 691 L
229.3134 674.0718 222.7961 661.2397 210 649 C
212.1 646.9 L
f
278 677.1 m
277.7924 634.7392 259.7068 616.4547 216.7 613 C
217 610 L
261.0391 613.5376 281 632.8747 281 678 C
230 678 L
230 675 L
280 675 L
278 677.1 L
f
322 691 m
320.301 673.947 314.6256 660.6742 305 649 C
307.4 647.2 L
317.6455 659.6261 323.2137 673.0706 325 691 C
322 691 L
f
361 671 m
361 628.5342 352.1876 617.625 323.4 613 C
324 610 L
354.2994 615.1208 364 626.6489 364 671 C
391 671 L
391 674 L
320 674 L
320 671 L
361 671 L
f
479 682 m
411 682 L
411 679 L
476 679 L
476 619 L
411 619 L
411 616 L
479 616 L
479 682 L
f
36 692 m
36 642.1508 29.8699 627.3581 11 613.3 C
12.9 611 L
32.4498 625.5647 39 640.4639 39 692 C
36 692 L
f
80 656 m
80 614 80 614 53 614 C
53 614 L
53 611 L
82.5 611 83 611.5082 83 656 C
83 674 L
13 674 L
13 671 L
80 671 L
80 656 l
f
185 669 m
185 672 L
113 672 L
113 669 L
185 669 L
f
189 637 m
189 640 L
109 640 L
109 637 L
189 637 L
f
155.1747 607 m
147.8253 691 L
144.8253 691 L
152.1747 607 L
155.1747 607 L
f
96 682 m
92.75 687.25 89.875 691.25 86 696 C
83.6 694.2 L
87.4897 689.4319 90.2563 685.5783 93.4 680.5 C
96 682 L
f
84.6 678.7 m
81.5234 683.6148 78.703 687.4608 75 692 C
72.6 690.2 L
76.2965 685.6688 79.0445 681.8155 82 677.1 C
84.6 678.7 L
f
196 682 m
192.75 687.25 189.875 691.25 186 696 C
183.6 694.2 L
187.4897 689.4319 190.2563 685.5783 193.4 680.5 C
196 682 L
f
184.6 678.7 m
181.5234 683.6148 178.703 687.4608 175 692 C
172.6 690.2 L
176.2965 685.6688 179.0445 681.8155 182 677.1 C
184.6 678.7 L
f
298 684 m
294.75 689.25 291.875 693.25 288 698 C
285.6 696.2 L
289.4897 691.4319 292.2563 687.5783 295.4 682.5 C
298 684 L
f
285.2 682.7 m
282.1234 687.6148 279.303 691.4608 275.6 696 C
273.2 694.2 L
276.8965 689.6688 279.6445 685.8155 282.6 681.1 C
285.2 682.7 L
f
396 683 m
392.75 688.25 389.875 692.25 386 697 C
383.6 695.2 L
387.4897 690.4319 390.2563 686.5783 393.4 681.5 C
396 683 L
f
384.6 679.7 m
381.5234 684.6148 378.703 688.4608 375 693 C
372.6 691.2 L
376.2965 686.6688 379.0445 682.8155 382 678.1 C
384.6 679.7 L
f
498 684 m
494.75 689.25 491.875 693.25 488 698 C
485.6 696.2 L
489.4897 691.4319 492.2563 687.5783 495.4 682.5 C
498 684 L
f
486.6 680.7 m
483.5234 685.6148 480.703 689.4608 477 694 C
474.6 692.2 L
478.2965 687.6688 481.0445 683.8155 484 679.1 C
486.6 680.7 L
f
u
213.0833 545.3159 m
226.942 558.685 233.5234 570.8254 235.5334 590.9992 C
230 590.9992 L
228.3134 574.071 221.7961 561.2389 209 548.9992 C
213.0833 545.3159 L
f
214.0667 443.7317 m
228.3204 457.5919 234.8468 468.7173 237.0667 490.9984 C
229 490.9984 L
227.3134 474.0702 220.7961 461.2381 208 448.9984 C
214.0667 443.7317 L
f
215.05 342.1477 m
229.6989 356.4989 236.1702 366.6092 238.6 390.9977 C
228 390.9977 L
226.3134 374.0695 219.7961 361.2374 207 348.9977 C
215.05 342.1477 L
f
U
u
216.0334 240.5635 m
231.0773 255.4058 237.4936 264.501 240.1334 290.9969 C
227 290.9969 L
225.3134 274.0687 218.7961 261.2366 206 248.9969 C
216.0334 240.5635 L
f
217.0166 138.9864 m
231.7193 153.5932 239.5534 169.7929 241.6666 191.003 C
226 191.003 L
224.3134 174.0748 217.7961 161.2427 205 149.003 C
217.0166 138.9864 L
f
U
218 37.4 m
232.9505 52.3525 241.0242 69.1611 243.2 91 C
225 91 L
223.3134 74.0718 216.7961 61.2397 204 49 C
218 37.4 L
f
u
276.1667 575.9825 m
275.8376 534.5881 259.3013 518.0947 216.6167 514.6659 C
217.1667 509.3325 L
262.3213 512.9597 281.8333 531.6872 281.8333 577.4992 C
229.8333 577.4992 L
229.8333 572.1659 L
279.8333 572.1659 L
276.1667 575.9825 L
f
274.3333 474.8651 m
273.8828 434.4371 258.8957 419.7347 216.5333 416.3318 C
217.3333 408.6651 L
263.6035 412.3819 282.6667 430.4998 282.6667 476.9984 C
229.6667 476.9984 L
229.6667 469.3317 L
279.6667 469.3317 L
274.3333 474.8651 L
f
272.5 373.7477 m
271.928 334.2861 258.4902 321.3748 216.45 317.9977 C
217.5 307.9977 L
264.8857 311.8041 283.5 329.3123 283.5 376.4977 C
229.5 376.4977 L
229.5 366.4976 L
279.5 366.4976 L
272.5 373.7477 L
f
U
u
270.6666 272.6302 m
269.9732 234.135 258.0847 223.0148 216.3667 219.6636 C
217.6667 207.3302 L
266.1679 211.2262 284.3334 228.1249 284.3334 275.9969 C
229.3333 275.9969 L
229.3333 263.6635 L
279.3333 263.6635 L
270.6666 272.6302 L
f
268.8334 174.0197 m
267.9978 135.3391 256.4501 124.5628 216.2834 121.3363 C
217.8333 106.6697 L
266.8256 110.6052 285.1667 128.8691 285.1667 178.003 C
229.1667 178.003 L
229.1667 163.3364 L
279.1667 163.3364 L
268.8334 174.0197 L
f
U
267 73.4 m
266.0388 35.4554 255.7987 26.1809 216.2 23 C
218 6 L
267.9829 10.015 286 28.0643 286 78 C
229 78 L
229 61 L
279 61 L
267 73.4 L
f
u
321.5 591.3303 m
319.8091 574.3587 314.173 561.062 304.5 549.3303 C
309.0834 546.2636 L
319.5126 559.0268 325.191 572.8374 327.0334 591.3303 C
321.5 591.3303 L
f
321 491.6606 m
319.3172 474.7704 313.7204 461.4498 304 449.6606 C
310.7668 445.3271 L
321.3796 458.4275 327.1682 472.6042 329.0668 491.6606 C
321 491.6606 L
f
320.5 392 m
318.8253 375.1912 313.2679 361.8467 303.5 350 C
312.45 344.4 L
323.2465 357.8374 329.1453 372.3802 331.1 392 C
320.5 392 L
f
320 292.3303 m
318.3334 275.6029 312.8153 262.2345 303 250.3303 C
314.1334 243.4636 L
325.1136 257.2381 331.1226 272.147 333.1334 292.3303 C
320 292.3303 L
f
319.5 192.6697 m
317.8416 176.0237 312.3627 162.6315 302.5 150.6697 C
315.8166 142.5364 L
326.9804 156.6481 333.0996 171.923 335.1666 192.6697 C
319.5 192.6697 L
f
U
317.5 41.6 m
328.8475 56.0488 335.0769 71.6898 337.2 93 C
319 93 L
317.3497 76.4354 311.9101 63.0193 302 51 C
317.5 41.6 L
f
483 79.3 m
480.4 84 L
410 84 L
410 67 L
464 67 L
464 29 L
410 29 L
410 12 L
483 12 L
483 79.3 L
f
u
35.0166 592.1636 m
35.0166 542.9887 29.0072 528.4257 10.3333 514.5136 C
13.9167 510.4969 L
33.9666 525.4342 40.5167 540.5325 40.5167 592.1636 C
35.0166 592.1636 L
f
34.0333 492.3272 m
34.0333 443.8266 28.1445 429.4933 9.6666 415.7273 C
14.9334 409.9938 L
35.4835 425.3038 42.0334 440.601 42.0334 492.3272 C
34.0333 492.3272 L
f
33.05 392.5 m
33.05 344.6737 27.2819 330.57 9 316.95 C
15.95 309.5 L
37.0002 325.1825 43.55 340.6788 43.55 392.5 C
33.05 392.5 L
f
32.0666 292.6636 m
32.0666 245.5116 26.4191 231.6377 8.3333 218.1636 C
16.9667 208.9969 L
38.517 225.0521 45.0667 240.7474 45.0667 292.6636 C
32.0666 292.6636 L
f
31.0834 192.8364 m
31.0834 146.3586 25.5565 132.7144 7.6667 119.3863 C
17.9833 108.503 L
40.0338 124.9308 46.5833 140.8251 46.5833 192.8364 C
31.0834 192.8364 L
f
U
19 8 m
41.5506 24.8004 48.1 40.8937 48.1 93 C
30.1 93 L
30.1 47.1966 24.6938 33.782 7 20.6 C
19 8 L
f
u
77.8334 555.8355 m
77.8334 515.8369 77.8334 515.8354 53.6667 515.8354 C
52.3334 515.8354 L
52.3334 510.5021 L
82.7611 510.5021 83.5 511.2397 83.5 555.8355 C
83.5 574.3021 L
12.1667 574.3021 L
12.1667 568.9688 L
77.8334 568.9688 L
77.8334 555.8355 l
f
75.6668 455.6709 m
75.6668 417.6738 75.6668 417.6708 54.3333 417.6708 C
51.6667 417.6708 L
51.6667 410.0043 L
83.0222 410.0043 84 410.9711 84 455.6709 C
84 474.6042 L
11.3334 474.6042 L
11.3334 466.9377 L
75.6668 466.9377 L
75.6668 455.6709 l
f
73.5 355.4988 m
73.5 319.5032 73.5 319.4988 55 319.4988 C
51 319.4988 L
51 309.4988 L
83.2834 309.4988 84.5 310.6949 84.5 355.4988 C
84.5 374.8988 L
10.5 374.8988 L
10.5 364.8987 L
73.5 364.8987 L
73.5 355.4988 l
f
71.3334 255.3342 m
71.3334 221.3401 71.3334 221.3342 55.6667 221.3342 C
50.3334 221.3342 L
50.3334 209.0009 L
83.5445 209.0009 85 210.4264 85 255.3342 C
85 275.2009 L
9.6667 275.2009 L
9.6667 262.8676 L
71.3334 262.8676 L
71.3334 255.3342 l
f
U
u
69.1667 155.1697 m
69.1667 123.177 69.1667 123.1696 56.3333 123.1696 C
49.6667 123.1696 L
49.6667 108.503 L
83.8056 108.503 85.5 110.1579 85.5 155.1697 C
85.5 175.503 L
8.8334 175.503 L
8.8334 160.8364 L
69.1667 160.8364 L
69.1667 155.1697 l
f
U
67 60 m
67 55 l
67 25.0088 67 25 57 25 C
49 25 L
49 8 L
84.0667 8 86 9.8842 86 55 c
86 77 L
8 77 L
8 60 L
67 60 L
f
u
185.1667 567.1635 m
185.1667 572.4969 L
112.3333 572.4969 L
112.3333 567.1635 L
185.1667 567.1635 L
f
185.3333 465.3271 m
185.3333 472.9939 L
111.6666 472.9939 L
111.6666 465.3271 L
185.3333 465.3271 L
f
185.5 363.5 m
185.5 373.5 L
111 373.5 L
111 363.5 L
185.5 363.5 L
f
185.6667 261.6635 m
185.6667 273.9969 L
110.3333 273.9969 L
110.3333 261.6635 L
185.6667 261.6635 L
f
185.8333 159.8364 m
185.8333 174.503 L
109.6667 174.503 L
109.6667 159.8364 L
185.8333 159.8364 L
f
U
186 58 m
186 75 L
109 75 L
109 58 L
186 58 L
f
u
189 535.3302 m
189 540.6636 L
108.3333 540.6636 L
108.3333 535.3302 L
189 535.3302 L
f
189 433.6604 m
189 441.3273 L
107.6666 441.3273 L
107.6666 433.6604 L
189 433.6604 L
f
189 332 m
189 342 L
107 342 L
107 332 L
189 332 L
f
189 230.3302 m
189 242.6636 L
106.3333 242.6636 L
106.3333 230.3302 L
189 230.3302 L
f
189 128.6697 m
189 143.3363 L
105.6667 143.3363 L
105.6667 128.6697 L
189 128.6697 L
f
U
189 27 m
189 44 L
105 44 L
105 27 L
189 27 L
f
u
156.2956 506.6636 m
148.8878 591.3303 L
143.0377 591.3303 L
150.4455 506.6636 L
156.2956 506.6636 L
f
157.4164 406.3272 m
149.9504 491.6606 L
141.2502 491.6606 L
148.7163 406.3272 L
157.4164 406.3272 L
f
158.5372 306 m
151.0128 392 L
139.4628 392 L
146.9872 306 L
158.5372 306 L
f
159.6581 205.6636 m
152.0753 292.3303 L
137.6752 292.3303 L
145.258 205.6636 L
159.6581 205.6636 L
f
160.7788 105.3364 m
153.1378 192.6697 L
135.8879 192.6697 L
143.5289 105.3364 L
160.7788 105.3364 L
f
U
161.8997 5 m
154.2003 93 L
134.1003 93 L
141.7997 5 L
161.8997 5 L
f
u
359.1667 568.9355 m
359.1667 528.9706 351.4076 519.508 323.1667 514.9354 C
324.3333 509.6688 L
355.1761 514.8814 364.8333 526.1262 364.8333 568.9355 C
390.8333 568.9355 L
390.8333 574.2688 L
319.8333 574.2688 L
319.8333 568.9355 L
359.1667 568.9355 L
f
357.3334 466.871 m
357.3334 429.4071 350.6277 421.391 322.9333 416.8708 C
324.6667 409.3376 L
356.0529 414.6421 365.6666 425.6035 365.6666 466.871 C
390.6667 466.871 L
390.6667 474.5376 L
319.6667 474.5376 L
319.6667 466.871 L
357.3334 466.871 L
f
355.5 364.7987 m
355.5 329.8359 349.8477 323.2665 322.7 318.7988 C
325 308.9988 L
356.9296 314.3951 366.5 325.0732 366.5 364.7987 C
390.5 364.7987 L
390.5 374.7988 L
319.5 374.7988 L
319.5 364.7987 L
355.5 364.7987 L
f
353.6667 262.7342 m
353.6667 230.2724 349.0678 225.1494 322.4667 220.7342 C
325.3333 208.6676 L
357.8064 214.1558 367.3333 224.5505 367.3333 262.7342 C
390.3334 262.7342 L
390.3334 275.0675 L
319.3334 275.0675 L
319.3334 262.7342 L
353.6667 262.7342 L
f
U
u
351.8334 160.6697 m
351.8334 130.7088 348.2878 127.0324 322.2333 122.6696 C
325.6667 108.3364 L
358.6831 113.9164 368.1667 124.0278 368.1667 160.6697 C
390.1667 160.6697 L
390.1667 175.3363 L
319.1667 175.3363 L
319.1667 160.6697 L
351.8334 160.6697 L
f
U
326 8 m
358.9603 13.5706 369 23.0011 369 61 C
390 61 L
390 78 L
319 78 L
319 61 L
350 61 L
350 30.8066 347.108 28.8434 322 24.6 C
326 8 L
f
u
498.1667 583.6636 m
494.9175 589.0261 491.9838 593.288 488.1667 598.1636 C
484.4666 595.7302 L
488.248 590.9144 491.1158 586.7462 494.2666 581.5469 C
498.1667 583.6636 L
f
498.3333 483.3272 m
495.085 488.8022 492.0925 493.3261 488.3333 498.3272 C
483.3333 495.2605 L
487.0063 490.397 489.9754 485.9141 493.1333 480.5938 C
498.3333 483.3272 L
f
498.5 383 m
495.2525 388.5875 492.2013 393.3733 488.5 398.5 C
482.2 394.8 L
485.7647 389.8888 488.835 385.0912 492 379.65 C
498.5 383 L
f
498.6667 282.6636 m
495.42 288.3636 492.31 293.4113 488.6667 298.6636 C
481.0666 294.3302 L
484.523 289.3713 487.6945 284.2591 490.8666 278.6969 C
498.6667 282.6636 L
f
498.8333 182.3364 m
495.5875 188.149 492.4187 193.4585 488.8333 198.8364 C
479.9334 193.8697 L
483.2814 188.8631 486.5542 183.4363 489.7334 177.753 C
498.8333 182.3364 L
f
U
499 82 m
495.755 87.9251 492.5275 93.4966 489 99 C
478.8 93.4 L
482.0397 88.3457 485.4137 82.6042 488.6 76.8 C
499 82 L
f
482.8 79.7401 m
479.6199 85.5467 476.4569 91.0067 473 96.4 C
463.004 90.9121 L
466.179 85.9588 469.4855 80.3322 472.608 74.6441 C
482.8 79.7401 L
f
u
196.5 581.9969 m
193.2508 587.3594 190.3171 591.6214 186.5 596.4969 C
182.8 594.0636 L
186.5813 589.2478 189.4492 585.0795 192.6 579.8802 C
196.5 581.9969 L
f
197 481.9939 m
193.7517 487.4689 190.7592 491.9928 187 496.9939 C
182 493.9272 L
185.673 489.0637 188.642 484.5808 191.8 479.2605 C
197 481.9939 L
f
197.5 382 m
194.2525 387.5875 191.2013 392.3733 187.5 397.5 C
181.2 393.8 L
184.7647 388.8888 187.835 384.0912 191 378.65 C
197.5 382 L
f
198 281.9969 m
194.7533 287.697 191.6434 292.7447 188 297.9969 C
180.4 293.6636 L
183.8563 288.7047 187.0279 283.5925 190.2 278.0302 C
198 281.9969 L
f
198.5 182.003 m
195.2542 187.8156 192.0854 193.1252 188.5 198.503 C
179.6 193.5364 L
182.9481 188.5298 186.2208 183.1029 189.4 177.4197 C
198.5 182.003 L
f
U
199 82 m
195.755 87.9251 192.5275 93.4966 189 99 C
178.8 93.4 L
182.0397 88.3457 185.4137 82.6042 188.6 76.8 C
199 82 L
f
u
184.1 579.2036 m
181.0061 584.2671 178.1286 588.3821 174.4667 593.0636 C
170.8006 590.649 L
174.4102 586.0474 177.2513 581.8985 180.2346 577.0209 C
184.1 579.2036 L
f
183.6 479.7073 m
180.4889 484.9194 177.5543 489.3034 173.9333 494.1273 C
169.0012 491.0979 L
172.5239 486.426 175.458 481.9816 178.4692 476.9419 C
183.6 479.7073 L
f
183.1 380.22 m
179.9717 385.5807 176.98 390.2337 173.4 395.2 C
167.202 391.556 L
170.6378 386.8138 173.665 382.0738 176.704 376.872 C
183.1 380.22 L
f
182.6 280.7237 m
179.4544 286.233 176.4056 291.155 172.8666 296.2636 C
165.4026 292.005 L
168.7514 287.1924 171.8718 282.1569 174.9386 276.793 C
182.6 280.7237 L
f
182.1 181.2364 m
178.9372 186.8944 175.8313 192.0854 172.3334 197.3363 C
163.6034 192.4631 L
166.8653 187.5802 170.0787 182.2491 173.1734 176.7231 C
182.1 181.2364 L
f
U
181.6 81.7401 m
178.4199 87.5467 175.2569 93.0067 171.8 98.4 C
161.804 92.9121 L
164.979 87.9588 168.2855 82.3322 171.408 76.6441 C
181.6 81.7401 L
f
u
298.1667 583.6659 m
294.9175 589.0284 291.9837 593.2903 288.1667 598.1659 C
284.4667 595.7325 L
288.248 590.9167 291.1158 586.7485 294.2667 581.5492 C
298.1667 583.6659 L
f
298.3333 483.3318 m
295.085 488.8068 292.0925 493.3306 288.3333 498.3318 C
283.3333 495.2651 L
287.0063 490.4016 289.9754 485.9187 293.1333 480.5984 C
298.3333 483.3318 L
f
298.5 382.9977 m
295.2525 388.5852 292.2013 393.371 288.5 398.4977 C
282.2 394.7977 L
285.7647 389.8865 288.835 385.0889 292 379.6477 C
298.5 382.9977 L
f
U
u
298.6667 282.6636 m
295.42 288.3636 292.31 293.4113 288.6667 298.6636 C
281.0666 294.3302 L
284.523 289.3713 287.6945 284.2591 290.8666 278.6969 C
298.6667 282.6636 L
f
298.8333 182.3364 m
295.5875 188.149 292.4187 193.4585 288.8333 198.8364 C
279.9334 193.8697 L
283.2814 188.8631 286.5542 183.4363 289.7334 177.753 C
298.8333 182.3364 L
f
U
299 82 m
295.755 87.9251 292.5275 93.4966 289 99 C
278.8 93.4 L
282.0397 88.3457 285.4137 82.6042 288.6 76.8 C
299 82 L
f
u
284.7167 582.3726 m
281.6228 587.436 278.7453 591.551 275.0833 596.2326 C
271.4173 593.8179 L
275.0269 589.2164 277.868 585.0675 280.8513 580.1899 C
284.7167 582.3726 L
f
284.2333 482.0451 m
281.1222 487.2572 278.1876 491.6412 274.5667 496.4651 C
269.6346 493.4358 L
273.1573 488.7639 276.0915 484.3195 279.1026 479.2798 C
284.2333 482.0451 L
f
283.75 381.7177 m
280.6216 387.0784 277.6299 391.7314 274.05 396.6977 C
267.8519 393.0537 L
271.2877 388.3115 274.315 383.5715 277.354 378.3697 C
283.75 381.7177 L
f
U
u
283.2666 281.3903 m
280.121 286.8997 277.0722 291.8217 273.5333 296.9303 C
266.0693 292.6717 L
269.4181 287.8591 272.5384 282.8236 275.6053 277.4596 C
283.2666 281.3903 L
f
282.4334 181.5698 m
279.2705 187.2277 276.1646 192.4187 272.6667 197.6697 C
263.9367 192.7964 L
267.1986 187.9135 270.4121 182.5825 273.5067 177.0565 C
282.4334 181.5698 L
f
U
281.6 81.7401 m
278.4199 87.5467 275.2569 93.0067 271.8 98.4 C
261.804 92.9121 L
264.979 87.9588 268.2855 82.3322 271.408 76.6441 C
281.6 81.7401 L
f
u
396.5 582.8303 m
393.2508 588.1928 390.3171 592.4547 386.5 597.3303 C
382.8 594.8969 L
386.5813 590.0811 389.4492 585.9129 392.6 580.7136 C
396.5 582.8303 L
f
397 482.6605 m
393.7517 488.1356 390.7592 492.6594 387 497.6606 C
382 494.5939 L
385.673 489.7303 388.642 485.2474 391.8 479.9272 C
397 482.6605 L
f
397.5 382.5 m
394.2525 388.0875 391.2013 392.8733 387.5 398 C
381.2 394.3 L
384.7647 389.3888 387.835 384.5912 391 379.15 C
397.5 382.5 L
f
398 282.3303 m
394.7533 288.0303 391.6434 293.078 388 298.3303 C
380.4 293.9969 L
383.8563 289.038 387.0279 283.9258 390.2 278.3636 C
398 282.3303 L
f
398.5 182.1697 m
395.2542 187.9823 392.0854 193.2919 388.5 198.6697 C
379.6 193.703 L
382.9481 188.6964 386.2208 183.2696 389.4 177.5864 C
398.5 182.1697 L
f
U
399 82 m
395.755 87.9251 392.5275 93.4966 389 99 C
378.8 93.4 L
382.0397 88.3457 385.4137 82.6042 388.6 76.8 C
399 82 L
f
u
384.1 580.037 m
381.0061 585.1004 378.1286 589.2154 374.4667 593.897 C
370.8006 591.4823 L
374.4102 586.8807 377.2513 582.7319 380.2346 577.8543 C
384.1 580.037 L
f
383.6 480.3739 m
380.4889 485.586 377.5543 489.97 373.9333 494.7939 C
369.0012 491.7646 L
372.5239 487.0927 375.458 482.6483 378.4692 477.6085 C
383.6 480.3739 L
f
383.1 380.72 m
379.9717 386.0807 376.98 390.7337 373.4 395.7 C
367.202 392.056 L
370.6378 387.3138 373.665 382.5738 376.704 377.372 C
383.1 380.72 L
f
382.6 281.057 m
379.4544 286.5663 376.4056 291.4884 372.8666 296.597 C
365.4026 292.3383 L
368.7514 287.5257 371.8718 282.4902 374.9386 277.1263 C
382.6 281.057 L
f
382.1 181.4031 m
378.9372 187.0611 375.8313 192.252 372.3334 197.503 C
363.6034 192.6298 L
366.8653 187.7468 370.0787 182.4158 373.1734 176.8898 C
382.1 181.4031 L
f
U
381.6 81.7401 m
378.4199 87.5467 375.2569 93.0067 371.8 98.4 C
361.804 92.9121 L
364.979 87.9588 368.2855 82.3322 371.408 76.6441 C
381.6 81.7401 L
f
476.6667 582.3303 m
408.8333 582.3303 L
408.8333 576.9969 L
471 576.9969 L
471 520.6636 L
408.8333 520.6636 L
408.8333 515.3302 L
476.6667 515.3302 L
476.6667 582.3303 L
f
480.3334 482.6606 m
410.6667 482.6606 L
410.6667 474.9938 L
471.9999 474.9938 L
471.9999 422.3273 L
410.6667 422.3273 L
410.6667 414.6605 L
480.3334 414.6605 L
480.3334 482.6606 L
f
u
480.0001 382.9954 m
410 382.9954 L
410 372.9953 L
468.9999 372.9953 L
468.9999 323.9955 L
410 323.9955 L
410 313.9954 L
480.0001 313.9954 L
480.0001 382.9954 L
f
U
479.6667 283.3303 m
409.3334 283.3303 L
409.3334 270.9969 L
466 270.9969 L
466 225.6636 L
409.3334 225.6636 L
409.3334 213.3302 L
479.6667 213.3302 L
479.6667 283.3303 L
f
479.2709 183.6697 m
410.1667 183.6697 L
410.1667 169.0031 L
466.0001 169.0031 L
466.0001 127.3363 L
410.1667 127.3363 L
410.1667 112.6697 L
482.3334 112.6697 L
482.3334 179.347 L
479.2709 183.6697 L
f
464.9368 191.1298 m
468.1987 186.2468 471.412 180.9158 474.5067 175.3898 C
482.3334 179.347 L
482.3334 181.837 L
479.5441 186.7485 476.7585 191.3618 473.6667 196.003 C
464.9368 191.1298 L
f
u
96.5 581.9969 m
93.2508 587.3594 90.3171 591.6214 86.5 596.4969 C
82.8 594.0636 L
86.5813 589.2478 89.4492 585.0795 92.6 579.8802 C
96.5 581.9969 L
f
97 481.9939 m
93.7517 487.4689 90.7592 491.9928 87 496.9939 C
82 493.9272 L
85.673 489.0637 88.642 484.5808 91.8 479.2605 C
97 481.9939 L
f
97.5 382 m
94.2525 387.5875 91.2013 392.3733 87.5 397.5 C
81.2 393.8 L
84.7647 388.8888 87.835 384.0912 91 378.65 C
97.5 382 L
f
98 281.9969 m
94.7533 287.697 91.6434 292.7447 88 297.9969 C
80.4 293.6636 L
83.8563 288.7047 87.0279 283.5925 90.2 278.0302 C
98 281.9969 L
f
98.5 182.003 m
95.2542 187.8156 92.0854 193.1252 88.5 198.503 C
79.6 193.5364 L
82.9481 188.5298 86.2208 183.1029 89.4 177.4197 C
98.5 182.003 L
f
U
99 82 m
95.755 87.9251 92.5275 93.4966 89 99 C
78.8 93.4 L
82.0397 88.3457 85.4137 82.6042 88.6 76.8 C
99 82 L
f
u
84.1 579.2036 m
81.0061 584.2671 78.1286 588.3821 74.4667 593.0636 C
70.8006 590.649 L
74.4102 586.0474 77.2513 581.8985 80.2346 577.0209 C
84.1 579.2036 L
f
83.6 479.7073 m
80.4889 484.9194 77.5543 489.3034 73.9333 494.1273 C
69.0012 491.0979 L
72.5239 486.426 75.458 481.9816 78.4692 476.9419 C
83.6 479.7073 L
f
83.1 380.22 m
79.9717 385.5807 76.98 390.2337 73.4 395.2 C
67.202 391.556 L
70.6378 386.8138 73.665 382.0738 76.704 376.872 C
83.1 380.22 L
f
82.6 280.7237 m
79.4544 286.233 76.4056 291.155 72.8666 296.2636 C
65.4026 292.005 L
68.7514 287.1924 71.8718 282.1569 74.9386 276.793 C
82.6 280.7237 L
f
82.1 181.2364 m
78.9372 186.8944 75.8313 192.0854 72.3334 197.3363 C
63.6034 192.4631 L
66.8653 187.5802 70.0787 182.2491 73.1734 176.7231 C
82.1 181.2364 L
f
U
81.6 81.7401 m
78.4199 87.5467 75.2569 93.0067 71.8 98.4 C
61.804 92.9121 L
64.979 87.9588 68.2855 82.3322 71.408 76.6441 C
81.6 81.7401 L
f
u
485.9666 580.5369 m
482.8728 585.6004 479.9953 589.7154 476.3333 594.3969 C
472.6673 591.9823 L
476.2769 587.3807 479.1179 583.2319 482.1013 578.3542 C
485.9666 580.5369 L
f
485.3333 480.3739 m
482.2222 485.586 479.2876 489.97 475.6666 494.7939 C
470.7346 491.7646 L
474.2572 487.0926 477.1914 482.6482 480.2025 477.6085 C
485.3333 480.3739 L
f
484.7 380.22 m
481.5717 385.5807 478.58 390.2337 475 395.2 C
468.802 391.556 L
472.2378 386.8138 475.265 382.0738 478.304 376.872 C
484.7 380.22 L
f
484.0666 280.057 m
480.921 285.5663 477.8722 290.4883 474.3333 295.5969 C
466.8693 291.3383 L
470.2181 286.5257 473.3384 281.4902 476.4053 276.1263 C
484.0666 280.057 L
f
U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
