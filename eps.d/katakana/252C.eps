%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (252C.eps)
%%CreationDate: (5/19/04) (3:59 PM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
1 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
500 600 m
500 700 L
400 700 L
400 600 L
500 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
400 600 m
400 700 L
300 700 L
300 600 L
400 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
500 500 m
500 600 L
400 600 L
400 500 L
500 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
400 500 m
400 600 L
300 600 L
300 500 L
400 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
0 Ap
0 O
0 g
1 D
214.1 646.9 m
227.5635 659.7781 234.2 672.9336 236 691 C
233 691 L
231.3134 674.0718 224.7961 661.2397 212 649 C
214.1 646.9 L
f
280 678.1 m
279.7484 635.579 261.0002 616.3979 218.7 613 C
219 610 L
262.7057 613.5108 283 633.4009 283 679 C
232 679 L
232 676 L
282 676 L
280 678.1 L
f
322 692 m
320.301 674.947 314.6256 661.6742 305 650 C
307.4 648.2 L
317.6455 660.6261 323.2137 674.0706 325 692 C
322 692 L
f
363 670 m
363 628.6206 355.1624 619.03 325.4 614 C
326 611 L
356.7995 616.2053 366 626.2306 366 670 C
391 670 L
391 673 L
319 673 L
319 670 L
363 670 L
f
481 681 m
413 681 L
413 678 L
478 678 L
478 619 L
413 619 L
413 616 L
481 616 L
481 681 L
f
37 692 m
37 642.1508 30.8699 627.3581 12 613.3 C
13.9 611 L
33.4498 625.5647 40 640.4639 40 692 C
37 692 L
f
81 656 m
81 614 81 614 54 614 C
54 614 L
54 611 L
83.5 611 84 611.5082 84 656 C
84 673 L
14 673 L
14 670 L
81 670 L
81 656 l
f
185 670 m
185 673 L
113 673 L
113 670 L
185 670 L
f
189 638 m
189 641 L
109 641 L
109 638 L
189 638 L
f
154.1747 608 m
146.8253 692 L
143.8253 692 L
151.1747 608 L
154.1747 608 L
f
96 681 m
92.2352 686.347 88.875 690.9375 85 696 C
82.6 694.2 L
86.375 689.25 89.5417 684.9218 93.5 679.3 C
96 681 L
f
81 677 m
77.2352 682.347 73.875 686.9375 70 692 C
67.6 690.2 L
71.375 685.25 74.5417 680.9218 78.5 675.3 C
81 677 L
f
196 681 m
192.2352 686.347 188.875 690.9375 185 696 C
182.6 694.2 L
186.375 689.25 189.5417 684.9218 193.5 679.3 C
196 681 L
f
181 677 m
177.2352 682.347 173.875 686.9375 170 692 C
167.6 690.2 L
171.375 685.25 174.5417 680.9218 178.5 675.3 C
181 677 L
f
396 681 m
392.2352 686.347 388.875 690.9375 385 696 C
382.6 694.2 L
386.375 689.25 389.5417 684.9218 393.5 679.3 C
396 681 L
f
381 677 m
377.2352 682.347 373.875 686.9375 370 692 C
367.6 690.2 L
371.375 685.25 374.5417 680.9218 378.5 675.3 C
381 677 L
f
496 681 m
492.2352 686.347 488.875 690.9375 485 696 C
482.6 694.2 L
486.375 689.25 489.5417 684.9218 493.5 679.3 C
496 681 L
f
477.8526 680.0289 m
474.9151 684.1418 472.1249 687.9174 469 692 C
466.6 690.2 L
469.6573 686.1911 472.3156 682.59 475.3186 678.3792 C
477.8526 680.0289 L
f
294 681 m
290.2352 686.347 286.875 690.9375 283 696 C
280.6 694.2 L
284.375 689.25 287.5417 684.9218 291.5 679.3 C
294 681 L
f
278 677 m
274.2352 682.347 270.875 686.9375 267 692 C
264.6 690.2 L
268.0865 685.6283 271.0541 681.587 274.6057 676.5671 C
278 677 L
f
u
214.75 545.6469 m
228.4613 558.8708 235.3374 572.6351 237.2 591.3303 C
231.6666 591.3303 L
229.98 574.4021 223.4627 561.57 210.6666 549.3303 C
214.75 545.6469 L
f
215.4 444.3938 m
229.3592 457.9634 236.4748 472.3366 238.4001 491.6606 C
230.3332 491.6606 L
228.6466 474.7324 222.1293 461.9003 209.3332 449.6606 C
215.4 444.3938 L
f
216.05 343.15 m
230.257 357.0653 237.6121 372.0473 239.6 392 C
229 392 L
227.3134 375.0718 220.7961 362.2397 208 350 C
216.05 343.15 L
f
216.7 241.8969 m
231.1548 256.1579 238.7495 271.7489 240.8 292.3303 C
227.6666 292.3303 L
225.98 275.4021 219.4627 262.57 206.6666 250.3303 C
216.7 241.8969 L
f
217.35 140.6531 m
232.0526 155.2598 239.8868 171.4595 242 192.6697 C
226.3334 192.6697 L
224.6468 175.7415 218.1295 162.9094 205.3334 150.6697 C
217.35 140.6531 L
f
U
218 39.4 m
232.9505 54.3525 241.0242 71.1611 243.2 93 C
225 93 L
223.3134 76.0718 216.7961 63.2397 204 51 C
218 39.4 L
f
u
277.8333 577.9803 m
277.4595 536.0707 259.9426 518.3434 218.2833 514.997 C
218.8333 509.6636 L
263.3908 513.2428 283.5 532.9962 283.5 579.497 C
231.5 579.497 L
231.5 574.1636 L
281.5 574.1636 L
277.8333 577.9803 L
f
275.6665 477.8605 m
275.1707 436.5623 258.885 420.289 217.8666 416.994 C
218.6667 409.3272 L
264.0759 412.9748 284 432.5916 284 479.9939 C
231 479.9939 L
231 472.3271 L
281 472.3271 L
275.6665 477.8605 L
f
273.5 377.75 m
272.8821 337.0631 257.8276 322.2434 217.45 319 C
218.5 309 L
264.7609 312.716 284.5 332.1961 284.5 380.5 C
230.5 380.5 L
230.5 370.5 L
280.5 370.5 L
273.5 377.75 L
f
271.3333 277.6303 m
270.5932 237.5547 256.77 224.189 217.0333 220.997 C
218.3333 208.6636 L
265.446 212.4481 285 231.7914 285 280.997 C
230 280.997 L
230 268.6636 L
280 268.6636 L
271.3333 277.6303 L
f
269.1667 177.5197 m
268.3046 138.0555 255.7125 126.1435 216.6167 123.003 C
218.1667 108.3364 L
266.1311 112.1893 285.5 131.396 285.5 181.503 C
229.5 181.503 L
229.5 166.8364 L
279.5 166.8364 L
269.1667 177.5197 L
f
U
267 77.4 m
266.0158 38.5472 254.655 28.089 216.2 25 C
218 8 L
266.8162 11.9213 286 30.9913 286 82 C
229 82 L
229 65 L
279 65 L
267 77.4 L
f
u
321.6667 592.1636 m
319.9758 575.192 314.3397 561.8953 304.6667 550.1636 C
309.25 547.0969 L
319.6792 559.8601 325.3576 573.6707 327.2001 592.1636 C
321.6667 592.1636 L
f
321.3333 492.3273 m
319.6505 475.437 314.0537 462.1165 304.3333 450.3273 C
311.1001 445.9938 L
321.7129 459.0942 327.5016 473.2709 329.4001 492.3273 C
321.3333 492.3273 L
f
321 392.5 m
319.3253 375.6912 313.7678 362.3467 304 350.5 C
312.95 344.9 L
323.7465 358.3374 329.6453 372.8802 331.6 392.5 C
321 392.5 L
f
320.6667 292.6636 m
319.0001 275.9362 313.4819 262.5679 303.6667 250.6636 C
314.8 243.7969 L
325.7802 257.5715 331.7892 272.4803 333.8001 292.6636 C
320.6667 292.6636 L
f
320.3334 192.8364 m
318.6749 176.1904 313.196 162.7981 303.3334 150.8364 C
316.6499 142.7031 L
327.8137 156.8148 333.933 172.0896 335.9999 192.8364 C
320.3334 192.8364 L
f
U
318.5 41.6 m
329.8475 56.0488 336.0769 71.6898 338.2 93 C
320 93 L
318.3497 76.4354 312.9101 63.0193 303 51 C
318.5 41.6 L
f
u
481.3334 581.1636 m
412.6667 581.1636 L
412.6667 575.8302 L
475.6666 575.8302 L
475.6666 520.8303 L
412.6667 520.8303 L
412.6667 515.4969 L
481.3334 515.4969 L
481.3334 581.1636 L
f
481.6667 481.3273 m
412.3333 481.3273 L
412.3333 473.6604 L
473.3332 473.6604 L
473.3332 422.6607 L
412.3333 422.6607 L
412.3333 414.9939 L
481.6667 414.9939 L
481.6667 481.3273 L
f
482 381.5 m
412 381.5 L
412 371.5 L
471 371.5 L
471 324.5 L
412 324.5 L
412 314.5 L
482 314.5 L
482 381.5 L
f
482.3334 281.6636 m
411.6667 281.6636 L
411.6667 269.3302 L
468.6666 269.3302 L
468.6666 226.3303 L
411.6667 226.3303 L
411.6667 213.9969 L
482.3334 213.9969 L
482.3334 281.6636 L
f
482.6667 181.8364 m
411.3334 181.8364 L
411.3334 167.1698 L
466.3334 167.1698 L
466.3334 128.1697 L
411.3334 128.1697 L
411.3334 113.5031 L
482.6667 113.5031 L
482.6667 181.8364 L
f
U
483 82 m
411 82 L
411 65 L
464 65 L
464 30 L
411 30 L
411 13 L
483 13 L
483 82 L
f
u
35.6833 592.3303 m
35.6833 543.1554 29.6738 528.5924 11 514.6803 C
14.5834 510.6636 L
34.6333 525.6009 41.1834 540.6992 41.1834 592.3303 C
35.6833 592.3303 L
f
34.3666 492.6606 m
34.3666 444.16 28.4778 429.8267 9.9999 416.0606 C
15.2667 410.3272 L
35.8168 425.6372 42.3667 440.9344 42.3667 492.6606 C
34.3666 492.6606 L
f
33.05 393 m
33.05 345.1737 27.2818 331.07 9 317.45 C
15.95 310 L
37.0002 325.6825 43.55 341.1788 43.55 393 C
33.05 393 L
f
31.7333 293.3303 m
31.7333 246.1783 26.0858 232.3043 8 218.8303 C
16.6334 209.6636 L
38.1837 225.7188 44.7334 241.414 44.7334 293.3303 C
31.7333 293.3303 L
f
30.4167 193.6697 m
30.4167 147.192 24.8898 133.5477 7 120.2196 C
17.3166 109.3364 L
39.3671 125.7642 45.9166 141.6584 45.9166 193.6697 C
30.4167 193.6697 L
f
U
18 9 m
40.5506 25.8004 47.1 41.8937 47.1 94 C
29.1 94 L
29.1 48.1966 23.6938 34.782 6 21.6 C
18 9 L
f
u
78.4999 555.9969 m
78.4999 515.9985 78.4999 515.997 54.3334 515.997 C
53 515.997 L
53 510.6636 L
83.4278 510.6636 84.1667 511.4011 84.1667 555.9969 C
84.1667 573.997 L
13.1667 573.997 L
13.1667 568.6636 L
78.4999 568.6636 L
78.4999 555.9969 l
f
75.9998 455.9939 m
75.9998 417.997 75.9998 417.994 54.6667 417.994 C
51.9999 417.994 L
51.9999 410.3272 L
83.3556 410.3272 84.3333 411.2941 84.3333 455.9939 C
84.3333 474.994 L
12.3333 474.994 L
12.3333 467.3272 L
75.9998 467.3272 L
75.9998 455.9939 l
f
73.5 356 m
73.5 320.0044 73.5 320 55 320 C
51 320 L
51 310 L
83.2834 310 84.5 311.1962 84.5 356 C
84.5 376 L
11.5 376 L
11.5 366 L
73.5 366 L
73.5 356 l
f
70.9999 255.9969 m
70.9999 222.0029 70.9999 221.997 55.3334 221.997 C
50 221.997 L
50 209.6636 L
83.2111 209.6636 84.6667 211.0891 84.6667 255.9969 C
84.6667 276.997 L
10.6667 276.997 L
10.6667 264.6636 L
70.9999 264.6636 L
70.9999 255.9969 l
f
68.5001 156.003 m
68.5001 124.0103 68.5001 124.003 55.6667 124.003 C
49 124.003 L
49 109.3364 L
83.1389 109.3364 84.8333 110.9912 84.8333 156.003 C
84.8333 178.003 L
9.8334 178.003 L
9.8334 163.3364 L
68.5001 163.3364 L
68.5001 156.003 l
f
U
66 62 m
66 56 l
66 26.0088 66 26 56 26 C
48 26 L
48 9 L
83.0667 9 85 10.8842 85 56 c
85 79 L
9 79 L
9 62 L
66 62 L
f
u
185.1667 568.4969 m
185.1667 573.8303 L
112.5 573.8303 L
112.5 568.4969 L
185.1667 568.4969 L
f
185.3333 466.9938 m
185.3333 474.6606 L
112 474.6606 L
112 466.9938 L
185.3333 466.9938 L
f
185.5 365.5 m
185.5 375.5 L
111.5 375.5 L
111.5 365.5 L
185.5 365.5 L
f
185.6667 263.9969 m
185.6667 276.3303 L
111 276.3303 L
111 263.9969 L
185.6667 263.9969 L
f
185.8333 162.5031 m
185.8333 177.1697 L
110.5 177.1697 L
110.5 162.5031 L
185.8333 162.5031 L
f
U
186 61 m
186 78 L
110 78 L
110 61 L
186 61 L
f
u
189.1667 536.3302 m
189.1667 541.6636 L
108.5 541.6636 L
108.5 536.3302 L
189.1667 536.3302 L
f
189.3333 434.6605 m
189.3333 442.3273 L
108 442.3273 L
108 434.6605 L
189.3333 434.6605 L
f
189.5 333 m
189.5 343 L
107.5 343 L
107.5 333 L
189.5 333 L
f
189.6667 231.3302 m
189.6667 243.6636 L
107 243.6636 L
107 231.3302 L
189.6667 231.3302 L
f
189.8333 129.6698 m
189.8333 144.3364 L
106.5 144.3364 L
106.5 129.6698 L
189.8333 129.6698 L
f
U
190 28 m
190 45 L
106 45 L
106 28 L
190 28 L
f
u
155.4622 507.6636 m
148.0545 592.3303 L
142.2044 592.3303 L
149.6121 507.6636 L
155.4622 507.6636 L
f
156.7498 407.3272 m
149.2837 492.6606 L
140.5835 492.6606 L
148.0496 407.3272 L
156.7498 407.3272 L
f
158.0372 307 m
150.5128 393 L
138.9628 393 L
146.4872 307 L
158.0372 307 L
f
159.3247 206.6636 m
151.742 293.3303 L
137.3419 293.3303 L
144.9246 206.6636 L
159.3247 206.6636 L
f
160.6121 106.3364 m
152.9711 193.6697 L
135.7212 193.6697 L
143.3622 106.3364 L
160.6121 106.3364 L
f
U
161.8997 6 m
154.2003 94 L
134.1003 94 L
141.7997 6 L
161.8997 6 L
f
u
361.1666 568.4969 m
361.1666 529.0973 354.2922 520.686 325.1667 515.7637 C
326.3334 510.4969 L
357.6319 515.7866 366.8334 525.8048 366.8334 568.4969 C
391 568.4969 L
391 573.8303 L
319.1667 573.8303 L
319.1667 568.4969 L
361.1666 568.4969 L
f
359.3332 466.9938 m
359.3332 429.574 353.422 422.3421 324.9333 417.5273 C
326.6667 409.9939 L
358.4643 415.3679 367.6667 425.3789 367.6667 466.9938 C
391 466.9938 L
391 474.6606 L
319.3333 474.6606 L
319.3333 466.9938 L
359.3332 466.9938 L
f
357.5 365.5 m
357.5 330.0598 352.5518 324.0071 324.7 319.3 C
327 309.5 L
359.2966 314.9583 368.5 324.9623 368.5 365.5 C
390 365.5 L
390 375.5 L
319.5 375.5 L
319.5 365.5 L
357.5 365.5 L
f
355.6666 263.9969 m
355.6666 230.5365 351.6816 225.6631 324.4667 221.0637 C
327.3334 208.9969 L
360.129 214.5396 369.3334 224.5364 369.3334 263.9969 C
391 263.9969 L
391 276.3303 L
319.6667 276.3303 L
319.6667 263.9969 L
355.6666 263.9969 L
f
353.8334 162.5031 m
353.8334 131.0223 350.8115 127.3282 324.2333 122.8363 C
327.6667 108.5031 L
360.9613 114.1301 370.1667 124.1198 370.1667 162.5031 C
391 162.5031 L
391 177.1697 L
319.8333 177.1697 L
319.8333 162.5031 L
353.8334 162.5031 L
f
U
328 8 m
361.7937 13.7114 371 23.694 371 61 C
391 61 L
391 78 L
320 78 L
320 61 L
352 61 L
352 31.499 349.9413 28.9842 324 24.6 C
328 8 L
f
u
96.5 580.6636 m
92.6543 586.1298 88.9687 591.1532 85 596.3303 C
81.1999 593.6136 L
85.0937 588.5282 88.5819 583.7677 92.5833 578.0802 C
96.5 580.6636 L
f
97 480.3272 m
93.0735 485.9127 89.0625 491.3689 85 496.6606 C
79.7999 493.0272 L
83.8124 487.8063 87.622 482.6135 91.6666 476.8605 C
97 480.3272 L
f
97.5 380 m
93.4926 385.7047 89.1562 391.5937 85 397 C
78.4 392.45 L
82.5312 387.0937 86.6623 381.4686 90.75 375.65 C
97.5 380 L
f
98 279.6636 m
93.9117 285.4876 89.25 291.8095 85 297.3303 C
77 291.8636 L
81.25 286.3719 85.7025 280.3145 89.8333 274.4302 C
98 279.6636 L
f
97.5 179.3364 m
93.3309 185.2796 88.3437 192.0343 84 197.6697 C
74.6 191.2864 L
78.9688 185.6593 83.7427 179.1696 87.9167 173.2197 C
97.5 179.3364 L
f
U
99 79 m
94.75 85.0625 89.4375 92.25 85 98 C
74.2 90.7 L
78.6875 84.9375 83.7829 78.0155 88 72 C
99 79 L
f
u
80.8333 577.6636 m
76.9877 583.1298 73.3021 588.1532 69.3333 593.3303 C
65.5333 590.6136 L
69.427 585.5282 72.9152 580.7677 76.9166 575.0802 C
80.8333 577.6636 L
f
80.6667 477.3272 m
76.7401 482.9127 72.7291 488.3689 68.6666 493.6606 C
63.4665 490.0272 L
67.479 484.8063 71.2886 479.6135 75.3332 473.8605 C
80.6667 477.3272 L
f
80.5 376 m
76.4926 381.7047 72.1562 387.5937 68 393 C
61.4 388.45 L
65.5312 383.0937 69.6623 377.4686 73.75 371.65 C
80.5 376 L
f
80.3333 275.6636 m
76.2451 281.4876 71.5833 287.8095 67.3333 293.3303 C
59.3333 287.8636 L
63.5833 282.3719 68.0358 276.3145 72.1666 270.4302 C
80.3333 275.6636 L
f
79.1667 175.3364 m
74.9975 181.2796 70.0104 188.0343 65.6667 193.6697 C
56.2667 187.2864 L
60.6355 181.6593 65.4094 175.1696 69.5834 169.2197 C
79.1667 175.3364 L
f
U
80 75 m
75.75 81.0625 70.4375 88.25 66 94 C
55.2 86.7 L
59.6875 80.9375 64.7829 74.0155 69 68 C
80 75 L
f
u
196.5 580.6636 m
192.6543 586.1298 188.9687 591.1532 185 596.3303 C
181.1999 593.6136 L
185.0937 588.5282 188.5819 583.7677 192.5833 578.0802 C
196.5 580.6636 L
f
197 480.3272 m
193.0735 485.9127 189.0625 491.3689 185 496.6606 C
179.7999 493.0272 L
183.8124 487.8063 187.622 482.6135 191.6666 476.8605 C
197 480.3272 L
f
197.5 380 m
193.4926 385.7047 189.1562 391.5937 185 397 C
178.4 392.45 L
182.5312 387.0937 186.6623 381.4686 190.75 375.65 C
197.5 380 L
f
198 279.6636 m
193.9117 285.4876 189.25 291.8095 185 297.3303 C
177 291.8636 L
181.25 286.3719 185.7025 280.3145 189.8333 274.4302 C
198 279.6636 L
f
197.5 179.3364 m
193.3309 185.2796 188.3437 192.0343 184 197.6697 C
174.6 191.2864 L
178.9688 185.6593 183.7427 179.1696 187.9167 173.2197 C
197.5 179.3364 L
f
U
199 79 m
194.75 85.0625 189.4375 92.25 185 98 C
174.2 90.7 L
178.6875 84.9375 183.7829 78.0155 188 72 C
199 79 L
f
u
181 577.6636 m
177.1543 583.1298 173.4687 588.1532 169.5 593.3303 C
165.6999 590.6136 L
169.5937 585.5282 173.0818 580.7677 177.0833 575.0802 C
181 577.6636 L
f
181 477.3272 m
177.0735 482.9127 173.0625 488.3689 169 493.6606 C
163.7999 490.0272 L
167.8124 484.8063 171.622 479.6135 175.6666 473.8605 C
181 477.3272 L
f
181 377 m
176.9926 382.7047 172.6562 388.5937 168.5 394 C
161.9 389.45 L
166.0312 384.0937 170.1623 378.4686 174.25 372.65 C
181 377 L
f
181 275.6636 m
176.9117 281.4876 172.25 287.8095 168 293.3303 C
159.9999 287.8636 L
164.2499 282.3719 168.7024 276.3145 172.8333 270.4302 C
181 275.6636 L
f
180 175.3364 m
175.8309 181.2796 170.8438 188.0343 166.5 193.6697 C
157.1 187.2864 L
161.4688 181.6593 166.2427 175.1696 170.4167 169.2197 C
180 175.3364 L
f
U
181 75 m
176.75 81.0625 171.4375 88.25 167 94 C
156.2 86.7 L
160.6875 80.9375 165.7829 74.0155 170 68 C
181 75 L
f
u
294.8334 580.6636 m
290.9877 586.1298 287.3021 591.1532 283.3334 596.3303 C
279.5333 593.6136 L
283.427 588.5282 286.9152 583.7677 290.9167 578.0802 C
294.8334 580.6636 L
f
295.6667 480.3272 m
291.7402 485.9127 287.7292 491.3689 283.6667 496.6606 C
278.4666 493.0272 L
282.4791 487.8063 286.2887 482.6135 290.3333 476.8605 C
295.6667 480.3272 L
f
296.5 380 m
292.4926 385.7047 288.1562 391.5937 284 397 C
277.4 392.45 L
281.5312 387.0937 285.6623 381.4686 289.75 375.65 C
296.5 380 L
f
296.3334 279.6636 m
292.2451 285.4876 287.5833 291.8095 283.3334 297.3303 C
275.3333 291.8636 L
279.5833 286.3719 284.0358 280.3145 288.1667 274.4302 C
296.3334 279.6636 L
f
298.1667 179.3364 m
293.9975 185.2796 289.0104 192.0343 284.6667 197.6697 C
275.2667 191.2864 L
279.6354 185.6593 284.4094 179.1696 288.5834 173.2197 C
298.1667 179.3364 L
f
U
299 79 m
294.75 85.0625 289.4375 92.25 285 98 C
274.2 90.7 L
278.6875 84.9375 283.7829 78.0155 288 72 C
299 79 L
f
u
278.3334 576.6636 m
274.4877 582.1298 270.8021 587.1532 266.8333 592.3303 C
263.0333 589.6136 L
266.6866 584.8434 270.0089 580.322 273.6714 575.1362 C
278.3334 576.6636 L
f
278.6667 476.3272 m
274.7402 481.9127 270.7292 487.3689 266.6667 492.6606 C
261.4666 489.0272 L
265.2867 484.0585 268.9636 479.057 272.7371 473.7052 C
278.6667 476.3272 L
f
279 376 m
274.9926 381.7047 270.6562 387.5937 266.5 393 C
259.9 388.45 L
263.887 383.2829 267.9185 377.8012 271.8029 372.2835 C
279 376 L
f
278.3334 275.6636 m
274.2451 281.4876 269.5833 287.8095 265.3333 293.3303 C
257.3333 287.8636 L
261.4871 282.498 265.8733 276.5362 269.8686 270.8526 C
278.3334 275.6636 L
f
279.6667 175.3364 m
275.4975 181.2796 270.5104 188.0343 266.1667 193.6697 C
256.7667 187.2864 L
261.0874 181.7224 265.8281 175.2805 269.9343 169.4309 C
279.6667 175.3364 L
f
U
280 75 m
275.75 81.0625 270.4375 88.25 266 94 C
255.2 86.7 L
259.6875 80.9375 264.7829 74.0155 269 68 C
280 75 L
f
u
396.5 580.6636 m
392.6543 586.1298 388.9687 591.1532 385 596.3303 C
381.1999 593.6136 L
385.0937 588.5282 388.5819 583.7677 392.5833 578.0802 C
396.5 580.6636 L
f
397 480.3272 m
393.0735 485.9127 389.0625 491.3689 385 496.6606 C
379.7999 493.0272 L
383.8124 487.8063 387.622 482.6135 391.6666 476.8605 C
397 480.3272 L
f
398.5 379 m
394.4926 384.7047 390.1562 390.5937 386 396 C
379.4 391.45 L
383.5312 386.0937 387.6623 380.4686 391.75 374.65 C
398.5 379 L
f
398 279.6636 m
393.9117 285.4876 389.25 291.8095 385 297.3303 C
377 291.8636 L
381.25 286.3719 385.7025 280.3145 389.8333 274.4302 C
398 279.6636 L
f
398.5 179.3364 m
394.3309 185.2796 389.3437 192.0343 385 197.6697 C
375.6 191.2864 L
379.9688 185.6593 384.7427 179.1696 388.9167 173.2197 C
398.5 179.3364 L
f
U
399 79 m
394.75 85.0625 389.4375 92.25 385 98 C
374.2 90.7 L
378.6875 84.9375 383.7829 78.0155 388 72 C
399 79 L
f
u
380.8333 577.6636 m
376.9877 583.1298 373.3021 588.1532 369.3333 593.3303 C
365.5333 590.6136 L
369.427 585.5282 372.9152 580.7677 376.9166 575.0802 C
380.8333 577.6636 L
f
380.6667 477.3272 m
376.7401 482.9127 372.7291 488.3689 368.6666 493.6606 C
363.4665 490.0272 L
367.479 484.8063 371.2886 479.6135 375.3332 473.8605 C
380.6667 477.3272 L
f
381.5 375 m
377.4926 380.7047 373.1562 386.5937 369 392 C
362.4 387.45 L
366.5312 382.0937 370.6623 376.4686 374.75 370.65 C
381.5 375 L
f
380.3333 275.6636 m
376.2451 281.4876 371.5833 287.8095 367.3333 293.3303 C
359.3333 287.8636 L
363.5833 282.3719 368.0358 276.3145 372.1666 270.4302 C
380.3333 275.6636 L
f
380.1667 175.3364 m
375.9975 181.2796 371.0104 188.0343 366.6667 193.6697 C
357.2667 187.2864 L
361.6355 181.6593 366.4094 175.1696 370.5834 169.2197 C
380.1667 175.3364 L
f
U
380 75 m
375.75 81.0625 370.4375 88.25 366 94 C
355.2 86.7 L
359.6875 80.9375 364.7829 74.0155 369 68 C
380 75 L
f
u
496.5 580.6636 m
492.6543 586.1298 488.9687 591.1532 485 596.3303 C
481.1999 593.6136 L
485.0937 588.5282 488.5819 583.7677 492.5833 578.0802 C
496.5 580.6636 L
f
497 480.3272 m
493.0735 485.9127 489.0625 491.3689 485 496.6606 C
479.7999 493.0272 L
483.8124 487.8063 487.622 482.6135 491.6666 476.8605 C
497 480.3272 L
f
497.5 380 m
493.4926 385.7047 489.1562 391.5937 485 397 C
478.4 392.45 L
482.5312 387.0937 486.6623 381.4686 490.75 375.65 C
497.5 380 L
f
498 279.6636 m
493.9117 285.4876 489.25 291.8095 485 297.3303 C
477 291.8636 L
481.25 286.3719 485.7025 280.3145 489.8333 274.4302 C
498 279.6636 L
f
497.5 179.3364 m
493.3309 185.2796 488.3437 192.0343 484 197.6697 C
474.6 191.2864 L
478.9688 185.6593 483.7427 179.1696 487.9167 173.2197 C
497.5 179.3364 L
f
U
499 79 m
494.75 85.0625 489.4375 92.25 485 98 C
474.2 90.7 L
478.6875 84.9375 483.7829 78.0155 488 72 C
499 79 L
f
u
478.2105 579.1876 m
475.0542 583.6255 471.8437 587.9698 468.5 592.3303 C
464.6999 589.6136 L
467.9956 585.3124 471.0601 581.1578 474.2655 576.6463 C
478.2105 579.1876 L
f
478.5684 478.3464 m
475.1934 483.1092 471.5624 488.0222 468 492.6606 C
462.7999 489.0272 L
466.3339 484.4337 469.8046 479.7256 473.2123 474.9133 C
478.5684 478.3464 L
f
478.9263 377.5144 m
475.3325 382.6021 471.2812 388.0837 467.5 393 C
460.9 388.45 L
464.6724 383.5643 468.5493 378.3027 472.1593 373.1896 C
478.9263 377.5144 L
f
479.2842 276.6732 m
475.4717 282.0859 471 288.1361 467 293.3303 C
458.9999 287.8636 L
463.0107 282.6856 467.2938 276.8706 471.1062 271.4566 C
479.2842 276.6732 L
f
478.6421 175.8412 m
474.6108 181.5788 469.7187 188.1976 465.5 193.6697 C
456.1 187.2864 L
460.3492 181.8162 465.0384 175.4476 469.0531 169.733 C
478.6421 175.8412 L
f
U
480 75 m
475.75 81.0625 470.4375 88.25 466 94 C
455.2 86.7 L
459.6875 80.9375 464.7829 74.0155 469 68 C
480 75 L
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
