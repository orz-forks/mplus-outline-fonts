%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (252C.eps)
%%CreationDate: (1/12/05) (11:20 AM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
400 600 m
400 700 L
500 700 L
500 600 L
400 600 L
n
100 600 m
100 700 L
200 700 L
200 600 L
100 600 L
n
200 600 m
200 700 L
300 700 L
300 600 L
200 600 L
n
300 600 m
300 700 L
400 700 L
400 600 L
300 600 L
n
0 500 m
0 600 L
100 600 L
100 500 L
0 500 L
n
400 500 m
400 600 L
500 600 L
500 500 L
400 500 L
n
100 500 m
100 600 L
200 600 L
200 500 L
100 500 L
n
200 500 m
200 600 L
300 600 L
300 500 L
200 500 L
n
300 500 m
300 600 L
400 600 L
400 500 L
300 500 L
n
0 400 m
0 500 L
100 500 L
100 400 L
0 400 L
n
400 400 m
400 500 L
500 500 L
500 400 L
400 400 L
n
100 400 m
100 500 L
200 500 L
200 400 L
100 400 L
n
200 400 m
200 500 L
300 500 L
300 400 L
200 400 L
n
300 400 m
300 500 L
400 500 L
400 400 L
300 400 L
n
0 300 m
0 400 L
100 400 L
100 300 L
0 300 L
n
400 300 m
400 400 L
500 400 L
500 300 L
400 300 L
n
100 300 m
100 400 L
200 400 L
200 300 L
100 300 L
n
200 300 m
200 400 L
300 400 L
300 300 L
200 300 L
n
300 300 m
300 400 L
400 400 L
400 300 L
300 300 L
n
0 200 m
0 300 L
100 300 L
100 200 L
0 200 L
n
400 200 m
400 300 L
500 300 L
500 200 L
400 200 L
n
100 200 m
100 300 L
200 300 L
200 200 L
100 200 L
n
200 200 m
200 300 L
300 300 L
300 200 L
200 200 L
n
300 200 m
300 300 L
400 300 L
400 200 L
300 200 L
n
0 100 m
0 200 L
100 200 L
100 100 L
0 100 L
n
400 100 m
400 200 L
500 200 L
500 100 L
400 100 L
n
100 100 m
100 200 L
200 200 L
200 100 L
100 100 L
n
200 100 m
200 200 L
300 200 L
300 100 L
200 100 L
n
300 100 m
300 200 L
400 200 L
400 100 L
300 100 L
n
0 0 m
0 100 L
100 100 L
100 0 L
0 0 L
n
400 0 m
400 100 L
500 100 L
500 0 L
400 0 L
n
100 0 m
100 100 L
200 100 L
200 0 L
100 0 L
n
200 0 m
200 100 L
300 100 L
300 0 L
200 0 L
n
300 0 m
300 100 L
400 100 L
400 0 L
300 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
0 O
0 g
1 D
212.1 646.9 m
225.5635 659.7781 232.2 672.9336 234 691 C
231 691 L
229.3134 674.0718 222.7961 661.2397 210 649 C
212.1 646.9 L
f
278 677.1 m
277.7924 634.7392 259.7068 616.4547 216.7 613 C
217 610 L
261.0391 613.5376 281 632.8747 281 678 C
230 678 L
230 675 L
280 675 L
278 677.1 L
f
322 691 m
320.301 673.947 314.6256 660.6742 305 649 C
307.4 647.2 L
317.6455 659.6261 323.2137 673.0706 325 691 C
322 691 L
f
361 671 m
361 628.5342 352.1876 617.625 323.4 613 C
324 610 L
354.2994 615.1208 364 626.6489 364 671 C
391 671 L
391 674 L
320 674 L
320 671 L
361 671 L
f
477 682 m
410 682 L
410 679 L
474 679 L
474 619 L
410 619 L
410 616 L
477 616 L
477 682 L
f
36 692 m
36 642.1508 29.8699 627.3581 11 613.3 C
12.9 611 L
32.4498 625.5647 39 640.4639 39 692 C
36 692 L
f
80 656 m
80 614 80 614 53 614 C
53 614 L
53 611 L
82.5 611 83 611.5082 83 656 C
83 674 L
13 674 L
13 671 L
80 671 L
80 656 l
f
185 669 m
185 672 L
113 672 L
113 669 L
185 669 L
f
189 637 m
189 640 L
109 640 L
109 637 L
189 637 L
f
155.1747 607 m
147.8253 691 L
144.8253 691 L
152.1747 607 L
155.1747 607 L
f
96 682 m
92.75 687.25 89.875 691.25 86 696 C
83.6 694.2 L
87.4897 689.4319 90.2563 685.5783 93.4 680.5 C
96 682 L
f
84.6 678.7 m
81.5234 683.6148 78.703 687.4608 75 692 C
72.6 690.2 L
76.2965 685.6688 79.0445 681.8155 82 677.1 C
84.6 678.7 L
f
196 682 m
192.75 687.25 189.875 691.25 186 696 C
183.6 694.2 L
187.4897 689.4319 190.2563 685.5783 193.4 680.5 C
196 682 L
f
184.6 678.7 m
181.5234 683.6148 178.703 687.4608 175 692 C
172.6 690.2 L
176.2965 685.6688 179.0445 681.8155 182 677.1 C
184.6 678.7 L
f
298 684 m
294.75 689.25 291.875 693.25 288 698 C
285.6 696.2 L
289.4897 691.4319 292.2563 687.5783 295.4 682.5 C
298 684 L
f
285.2 682.7 m
282.1234 687.6148 279.303 691.4608 275.6 696 C
273.2 694.2 L
276.8965 689.6688 279.6445 685.8155 282.6 681.1 C
285.2 682.7 L
f
396 683 m
392.75 688.25 389.875 692.25 386 697 C
383.6 695.2 L
387.4897 690.4319 390.2563 686.5783 393.4 681.5 C
396 683 L
f
384.6 679.7 m
381.5234 684.6148 378.703 688.4608 375 693 C
372.6 691.2 L
376.2965 686.6688 379.0445 682.8155 382 678.1 C
384.6 679.7 L
f
498 684 m
494.75 689.25 491.875 693.25 488 698 C
485.6 696.2 L
489.4897 691.4319 492.2563 687.5783 495.4 682.5 C
498 684 L
f
486.6 680.7 m
483.5234 685.6148 480.703 689.4608 477 694 C
474.6 692.2 L
478.2965 687.6688 481.0445 683.8155 484 679.1 C
486.6 680.7 L
f
u
35.0166 592.1636 m
35.0166 542.9887 29.0072 528.4257 10.3333 514.5136 C
13.9167 510.4969 L
33.9666 525.4342 40.5167 540.5325 40.5167 592.1636 C
35.0166 592.1636 L
f
34.0333 492.3272 m
34.0333 443.8267 28.1445 429.4934 9.6666 415.7273 C
14.9334 409.9939 L
35.4835 425.3038 42.0334 440.6011 42.0334 492.3272 C
34.0333 492.3272 L
f
33.05 392.5 m
33.05 344.6737 27.2818 330.57 9 316.95 C
15.95 309.5 L
37.0002 325.1825 43.55 340.6788 43.55 392.5 C
33.05 392.5 L
f
32.0666 292.6636 m
32.0666 245.5116 26.4191 231.6377 8.3333 218.1636 C
16.9667 208.9969 L
38.517 225.0521 45.0667 240.7474 45.0667 292.6636 C
32.0666 292.6636 L
f
31.0834 192.8364 m
31.0834 146.3587 25.5565 132.7144 7.6667 119.3863 C
17.9833 108.503 L
40.0337 124.9308 46.5833 140.8251 46.5833 192.8364 C
31.0834 192.8364 L
f
U
19 8 m
41.5506 24.8004 48.1 40.8937 48.1 93 C
30.1 93 L
30.1 47.1966 24.6938 33.782 7 20.6 C
19 8 L
f
u
185.1667 567.1635 m
185.1667 572.4969 L
112.3333 572.4969 L
112.3333 567.1635 L
185.1667 567.1635 L
f
185.3333 465.3271 m
185.3333 472.9939 L
111.6666 472.9939 L
111.6666 465.3271 L
185.3333 465.3271 L
f
185.5 363.5 m
185.5 373.5 L
111 373.5 L
111 363.5 L
185.5 363.5 L
f
185.6667 261.6635 m
185.6667 273.9969 L
110.3333 273.9969 L
110.3333 261.6635 L
185.6667 261.6635 L
f
185.8333 159.8364 m
185.8333 174.503 L
109.6667 174.503 L
109.6667 159.8364 L
185.8333 159.8364 L
f
U
186 58 m
186 75 L
109 75 L
109 58 L
186 58 L
f
u
189 535.3302 m
189 540.6636 L
108.3333 540.6636 L
108.3333 535.3302 L
189 535.3302 L
f
189 433.6604 m
189 441.3273 L
107.6666 441.3273 L
107.6666 433.6604 L
189 433.6604 L
f
189 332 m
189 342 L
107 342 L
107 332 L
189 332 L
f
189 230.3302 m
189 242.6636 L
106.3333 242.6636 L
106.3333 230.3302 L
189 230.3302 L
f
189 128.6697 m
189 143.3363 L
105.6667 143.3363 L
105.6667 128.6697 L
189 128.6697 L
f
U
189 27 m
189 44 L
105 44 L
105 27 L
189 27 L
f
u
156.2956 506.6636 m
148.8878 591.3303 L
143.0377 591.3303 L
150.4455 506.6636 L
156.2956 506.6636 L
f
157.4164 406.3272 m
149.9504 491.6606 L
141.2502 491.6606 L
148.7163 406.3272 L
157.4164 406.3272 L
f
158.5372 306 m
151.0128 392 L
139.4628 392 L
146.9872 306 L
158.5372 306 L
f
159.6581 205.6636 m
152.0753 292.3303 L
137.6752 292.3303 L
145.258 205.6636 L
159.6581 205.6636 L
f
160.7788 105.3364 m
153.1378 192.6697 L
135.8879 192.6697 L
143.5289 105.3364 L
160.7788 105.3364 L
f
U
161.8997 5 m
154.2003 93 L
134.1003 93 L
141.7997 5 L
161.8997 5 L
f
u
498.1667 583.6636 m
494.9175 589.0261 491.9838 593.288 488.1667 598.1636 C
484.4666 595.7302 L
488.248 590.9144 491.1158 586.7462 494.2666 581.5469 C
498.1667 583.6636 L
f
498.3333 483.3272 m
495.085 488.8022 492.0925 493.3261 488.3333 498.3272 C
483.3333 495.2605 L
487.0063 490.397 489.9754 485.9141 493.1333 480.5938 C
498.3333 483.3272 L
f
498.5 383 m
495.2525 388.5875 492.2013 393.3733 488.5 398.5 C
482.2 394.8 L
485.7647 389.8888 488.835 385.0912 492 379.65 C
498.5 383 L
f
498.6667 282.6636 m
495.42 288.3636 492.31 293.4113 488.6667 298.6636 C
481.0666 294.3302 L
484.523 289.3713 487.6945 284.2591 490.8666 278.6969 C
498.6667 282.6636 L
f
498.8333 182.3364 m
495.5875 188.149 492.4187 193.4585 488.8333 198.8364 C
479.9334 193.8697 L
483.2814 188.8631 486.5542 183.4363 489.7334 177.753 C
498.8333 182.3364 L
f
U
499 82 m
495.755 87.9251 492.5275 93.4966 489 99 C
478.8 93.4 L
482.0397 88.3457 485.4137 82.6042 488.6 76.8 C
499 82 L
f
483 79.3 m
479.8199 85.1066 476.5625 90.6875 473 96.4 C
463.004 90.9121 L
464.4069 88.7235 465.8353 86.3987 467.2623 84 C
410 84 L
410 67 L
464 67 L
464 29 L
410 29 L
410 12 L
483 12 L
483 79.3 L
f
u
196.5 581.9969 m
193.2508 587.3594 190.3171 591.6214 186.5 596.4969 C
182.8 594.0636 L
186.5813 589.2478 189.4492 585.0795 192.6 579.8802 C
196.5 581.9969 L
f
197 481.9939 m
193.7517 487.4689 190.7592 491.9928 187 496.9939 C
182 493.9272 L
185.673 489.0637 188.642 484.5808 191.8 479.2605 C
197 481.9939 L
f
197.5 382 m
194.2525 387.5875 191.2013 392.3733 187.5 397.5 C
181.2 393.8 L
184.7647 388.8888 187.835 384.0912 191 378.65 C
197.5 382 L
f
198 281.9969 m
194.7533 287.697 191.6434 292.7447 188 297.9969 C
180.4 293.6636 L
183.8563 288.7047 187.0279 283.5925 190.2 278.0302 C
198 281.9969 L
f
198.5 182.003 m
195.2542 187.8156 192.0854 193.1252 188.5 198.503 C
179.6 193.5364 L
182.9481 188.5298 186.2208 183.1029 189.4 177.4197 C
198.5 182.003 L
f
U
199 82 m
195.755 87.9251 192.5275 93.4966 189 99 C
178.8 93.4 L
182.0397 88.3457 185.4137 82.6042 188.6 76.8 C
199 82 L
f
u
184.1 579.2036 m
181.0061 584.2671 178.1286 588.3821 174.4667 593.0636 C
170.8006 590.649 L
174.4102 586.0474 177.2513 581.8985 180.2346 577.0209 C
184.1 579.2036 L
f
183.6 479.7073 m
180.4889 484.9194 177.5543 489.3034 173.9333 494.1273 C
169.0012 491.0979 L
172.5239 486.426 175.458 481.9816 178.4692 476.9419 C
183.6 479.7073 L
f
183.1 380.22 m
179.9717 385.5807 176.98 390.2337 173.4 395.2 C
167.202 391.556 L
170.6378 386.8138 173.665 382.0738 176.704 376.872 C
183.1 380.22 L
f
182.6 280.7237 m
179.4544 286.233 176.4056 291.155 172.8666 296.2636 C
165.4026 292.005 L
168.7514 287.1924 171.8718 282.1569 174.9386 276.793 C
182.6 280.7237 L
f
182.1 181.2364 m
178.9372 186.8944 175.8313 192.0854 172.3334 197.3363 C
163.6034 192.4631 L
166.8653 187.5802 170.0787 182.2491 173.1734 176.7231 C
182.1 181.2364 L
f
U
181.6 81.7401 m
178.4199 87.5467 175.2569 93.0067 171.8 98.4 C
161.804 92.9121 L
164.979 87.9588 168.2855 82.3322 171.408 76.6441 C
181.6 81.7401 L
f
474.6667 582.3303 m
407.8333 582.3303 L
407.8333 576.9969 L
469 576.9969 L
469 520.6636 L
407.8333 520.6636 L
407.8333 515.3302 L
474.6667 515.3302 L
474.6667 582.3303 L
f
480.3334 482.6606 m
410.6667 482.6606 L
410.6667 474.9938 L
471.9999 474.9938 L
471.9999 422.3273 L
410.6667 422.3273 L
410.6667 414.6605 L
480.3334 414.6605 L
480.3334 482.6606 L
f
u
479.5001 382.9954 m
410 382.9954 L
410 372.9953 L
468.4999 372.9953 L
468.4999 323.9955 L
410 323.9955 L
410 313.9954 L
479.5001 313.9954 L
479.5001 382.9954 L
f
U
478.6667 283.3303 m
409.3334 283.3303 L
409.3334 270.9969 L
465 270.9969 L
465 225.6636 L
409.3334 225.6636 L
409.3334 213.3302 L
478.6667 213.3302 L
478.6667 283.3303 L
f
479.2709 183.6697 m
410.1667 183.6697 L
410.1667 169.0031 L
466.0001 169.0031 L
466.0001 127.3363 L
410.1667 127.3363 L
410.1667 112.6697 L
482.3334 112.6697 L
482.3334 179.347 L
479.2709 183.6697 L
f
464.9368 191.1298 m
468.1987 186.2468 471.412 180.9158 474.5067 175.3898 C
482.3334 179.347 L
482.3334 181.837 L
479.5441 186.7485 476.7585 191.3618 473.6667 196.003 C
464.9368 191.1298 L
f
u
485.9666 580.5369 m
482.8728 585.6004 479.9953 589.7154 476.3333 594.3969 C
472.6673 591.9823 L
476.2769 587.3807 479.1179 583.2319 482.1013 578.3542 C
485.9666 580.5369 L
f
485.3333 480.3739 m
482.2222 485.586 479.2876 489.97 475.6666 494.7939 C
470.7346 491.7646 L
474.2572 487.0926 477.1914 482.6482 480.2025 477.6085 C
485.3333 480.3739 L
f
484.7 380.22 m
481.5717 385.5807 478.58 390.2337 475 395.2 C
468.802 391.556 L
472.2378 386.8138 475.265 382.0738 478.304 376.872 C
484.7 380.22 L
f
484.0666 280.057 m
480.921 285.5663 477.8722 290.4883 474.3333 295.5969 C
466.8693 291.3383 L
470.2181 286.5257 473.3384 281.4902 476.4053 276.1263 C
484.0666 280.057 L
f
U
u
213.25 545.3136 m
227.0597 558.6357 233.7391 571.3146 235.7001 590.9969 C
230.1667 590.9969 L
228.48 574.0687 221.9627 561.2366 209.1667 548.9969 C
213.25 545.3136 L
f
214.4001 443.7271 m
228.5559 457.4934 235.2781 469.6956 237.4001 490.9939 C
229.3333 490.9939 L
227.6467 474.0657 221.1294 461.2336 208.3333 448.9939 C
214.4001 443.7271 L
f
215.55 342.15 m
230.052 356.3603 236.8171 368.0858 239.1 391 C
228.5 391 L
226.8134 374.0718 220.2961 361.2397 207.5 349 C
215.55 342.15 L
f
216.7 240.5636 m
231.5481 255.2179 238.3561 266.4668 240.8001 290.9969 C
227.6667 290.9969 L
225.98 274.0687 219.4627 261.2366 206.6667 248.9969 C
216.7 240.5636 L
f
217.85 138.9864 m
233.0442 154.0848 239.895 164.8571 242.5 191.003 C
226.8334 191.003 L
225.1467 174.0748 218.6295 161.2427 205.8334 149.003 C
217.85 138.9864 L
f
U
219 37.4 m
234.5404 52.9425 241.4341 63.2381 244.2 91 C
226 91 L
224.3134 74.0718 217.7961 61.2397 205 49 C
219 37.4 L
f
u
276.3333 576.1469 m
276.0033 534.6502 259.3577 518.0836 216.7833 514.6636 C
217.3334 509.3302 L
262.5297 512.9608 282 531.8898 282 577.6636 C
230 577.6636 L
230 572.3302 L
280 572.3302 L
276.3333 576.1469 L
f
274.6666 475.1938 m
274.2142 434.5613 259.0087 419.7126 216.8667 416.3273 C
217.6667 408.6605 L
264.0204 412.384 283.0001 430.9049 283.0001 477.3272 C
230 477.3272 L
230 469.6604 L
280 469.6604 L
274.6666 475.1938 L
f
273 374.25 m
272.4253 334.4814 258.6597 321.3505 216.95 318 C
218 308 L
265.5109 311.8164 284 329.9293 284 377 C
230 377 L
230 367 L
280 367 L
273 374.25 L
f
271.3333 273.2969 m
270.6363 234.3925 258.3106 222.9794 217.0333 219.6636 C
218.3334 207.3302 L
267.0016 211.2397 285 228.9445 285 276.6636 C
230 276.6636 L
230 264.3302 L
280 264.3302 L
271.3333 273.2969 L
f
269.6667 172.3531 m
268.8474 134.3127 257.9616 124.6174 217.1167 121.3363 C
218.6667 106.6697 L
268.4921 110.6721 286 127.9689 286 176.3364 C
230 176.3364 L
230 161.6698 L
280 161.6698 L
269.6667 172.3531 L
f
U
268 71.4 m
267.0583 34.2237 257.6126 26.2463 217.2 23 C
219 6 L
269.9828 10.0953 287 26.984 287 76 C
230 76 L
230 59 L
280 59 L
268 71.4 L
f
u
321.6667 591.3303 m
319.9758 574.3587 314.3397 561.062 304.6667 549.3303 C
309.25 546.2636 L
319.6792 559.0268 325.3576 572.8374 327.2001 591.3303 C
321.6667 591.3303 L
f
321.3333 491.6606 m
319.6505 474.7704 314.0537 461.4498 304.3333 449.6606 C
311.1001 445.3272 L
321.7129 458.4275 327.5016 472.6042 329.4001 491.6606 C
321.3333 491.6606 L
f
321 392 m
319.3253 375.1912 313.7678 361.8467 304 350 C
312.95 344.4 L
323.7465 357.8374 329.6453 372.3802 331.6 392 C
321 392 L
f
320.6667 292.3303 m
319.0001 275.6029 313.4819 262.2345 303.6667 250.3303 C
314.8 243.4636 L
325.7802 257.2382 331.7892 272.147 333.8001 292.3303 C
320.6667 292.3303 L
f
320.3334 192.6697 m
318.6749 176.0237 313.196 162.6315 303.3334 150.6697 C
316.6499 142.5364 L
327.8137 156.6481 333.933 171.923 335.9999 192.6697 C
320.3334 192.6697 L
f
U
318.5 41.6 m
329.8475 56.0488 336.0769 71.6898 338.2 93 C
320 93 L
318.3497 76.4354 312.9101 63.0193 303 51 C
318.5 41.6 L
f
u
77.8333 555.8303 m
77.8333 515.8318 77.8333 515.8303 53.6667 515.8303 C
52.3333 515.8303 L
52.3333 510.4969 L
82.7611 510.4969 83.5 511.2344 83.5 555.8303 C
83.5 574.3303 L
12.1667 574.3303 L
12.1667 568.9969 L
77.8333 568.9969 L
77.8333 555.8303 l
f
75.6665 455.6605 m
75.6665 417.6636 75.6665 417.6607 54.3334 417.6607 C
51.6666 417.6607 L
51.6666 409.9939 L
83.0222 409.9939 84 410.9607 84 455.6605 C
84 474.6606 L
11.3333 474.6606 L
11.3333 466.9938 L
75.6665 466.9938 L
75.6665 455.6605 l
f
73.5 355.5 m
73.5 319.5044 73.5 319.5 55 319.5 C
51 319.5 L
51 309.5 L
83.2834 309.5 84.5 310.6962 84.5 355.5 C
84.5 375 L
10.5 375 L
10.5 365 L
73.5 365 L
73.5 355.5 l
f
71.3333 255.3303 m
71.3333 221.3362 71.3333 221.3303 55.6667 221.3303 C
50.3333 221.3303 L
50.3333 208.9969 L
83.5445 208.9969 85 210.4225 85 255.3303 C
85 275.3303 L
9.6667 275.3303 L
9.6667 262.9969 L
71.3333 262.9969 L
71.3333 255.3303 l
f
69.1667 155.1697 m
69.1667 123.177 69.1667 123.1696 56.3333 123.1696 C
49.6667 123.1696 L
49.6667 108.503 L
83.8056 108.503 85.5 110.1579 85.5 155.1697 C
85.5 175.6697 L
8.8334 175.6697 L
8.8334 161.0031 L
69.1667 161.0031 L
69.1667 155.1697 l
f
U
67 59 m
67 55 l
67 25.0088 67 25 57 25 C
49 25 L
49 8 L
84.0667 8 86 9.8842 86 55 c
86 76 L
8 76 L
8 59 L
67 59 L
f
u
359.3333 568.9969 m
359.3333 528.8954 351.7576 519.534 323.3333 514.9303 C
324.5 509.6636 L
355.4929 514.9016 365 525.9401 365 568.9969 C
391 568.9969 L
391 574.3303 L
320 574.3303 L
320 568.9969 L
359.3333 568.9969 L
f
357.6666 466.9938 m
357.6666 429.2567 351.3277 421.443 323.2667 416.8607 C
325 409.3272 L
356.6863 414.6824 366.0001 425.2313 366.0001 466.9938 C
391 466.9938 L
391 474.6606 L
320 474.6606 L
320 466.9938 L
357.6666 466.9938 L
f
356 365 m
356 329.627 350.8977 323.3609 323.2 318.8 C
325.5 309 L
357.8797 314.4724 367 324.5318 367 365 C
391 365 L
391 375 L
320 375 L
320 365 L
356 365 L
f
354.3333 262.9969 m
354.3333 229.9883 350.4678 225.2699 323.1333 220.7303 C
326 208.6636 L
359.0732 214.2532 368 223.823 368 262.9969 C
391 262.9969 L
391 275.3303 L
320 275.3303 L
320 262.9969 L
354.3333 262.9969 L
f
352.6667 161.0031 m
352.6667 130.3587 350.0379 127.1879 323.0667 122.6696 C
326.5 108.3364 L
360.2665 114.0432 369 123.1235 369 161.0031 C
391 161.0031 L
391 175.6697 L
320 175.6697 L
320 161.0031 L
352.6667 161.0031 L
f
U
327 8 m
361.46 13.824 370 22.4147 370 59 C
391 59 L
391 76 L
320 76 L
320 59 L
351 59 L
351 30.7199 349.6079 29.0969 323 24.6 C
327 8 L
f
u
298 583.8903 m
294.7941 589.1738 291.9034 593.3614 288.1333 598.1636 C
284.5693 595.8049 L
288.3075 591.0565 291.1303 586.9648 294.2386 581.8429 C
298 583.8903 L
f
298 483.7805 m
294.8382 489.0976 291.9318 493.4729 288.2667 498.3272 C
283.5386 495.4099 L
287.1252 490.6811 290.0043 486.3514 293.0773 481.1859 C
298 483.7805 L
f
298 383.68 m
294.8823 389.0305 291.9601 393.5934 288.4 398.5 C
282.508 395.024 L
285.9431 390.315 288.8785 385.7471 291.916 380.538 C
298 383.68 L
f
298 283.5703 m
294.9264 288.9543 291.9885 293.7049 288.5333 298.6636 C
281.4773 294.6289 L
284.7609 289.9396 287.7525 285.1336 290.7546 279.881 C
298 283.5703 L
f
298 183.4697 m
294.9705 188.8873 292.0169 193.8255 288.6667 198.8364 C
280.4467 194.2431 L
283.5788 189.5735 286.6266 184.5294 289.5934 179.2332 C
298 183.4697 L
f
U
298 83.36 m
295.0146 88.8111 292.0453 93.9369 288.8 99 C
279.416 93.848 L
282.3966 89.1981 285.5007 83.9159 288.432 78.5761 C
298 83.36 L
f
u
284.7413 582.6404 m
281.6899 587.6264 278.8545 591.6686 275.2386 596.2783 C
271.7059 593.9368 L
275.2731 589.4013 278.0701 585.3274 281.0118 580.5257 C
284.7413 582.6404 L
f
284.2826 482.5809 m
281.2563 487.638 278.4061 491.8765 274.8773 496.5566 C
270.2118 493.6736 L
273.6498 489.1338 276.4958 484.8394 279.4237 479.9514 C
284.2826 482.5809 L
f
283.824 382.5304 m
280.8229 387.6588 277.9577 392.0935 274.516 396.844 C
268.7179 393.4195 L
272.0266 388.8755 274.9216 384.3606 277.8357 379.3863 C
283.824 382.5304 L
f
283.3653 282.4709 m
280.3893 287.6705 277.5092 292.3013 274.1546 297.1223 C
267.2238 293.1563 L
270.4033 288.608 273.3472 283.8726 276.2475 278.812 C
283.3653 282.4709 L
f
282.9067 182.4205 m
279.9558 187.6913 277.0608 192.5183 273.7933 197.4097 C
265.7299 192.9023 L
268.78 188.3497 271.773 183.3937 274.6595 178.2469 C
282.9067 182.4205 L
f
U
282.448 82.3609 m
279.5223 87.7029 276.6124 92.7262 273.432 97.688 C
264.2358 92.6391 L
267.1567 88.0822 270.1987 82.9057 273.0714 77.6726 C
282.448 82.3609 L
f
u
396.3334 583.0569 m
393.1274 588.3405 390.2367 592.5281 386.4667 597.3303 C
382.9026 594.9716 L
386.6408 590.2232 389.4637 586.1315 392.572 581.0096 C
396.3334 583.0569 L
f
396.6667 483.1139 m
393.5049 488.4309 390.5984 492.8062 386.9334 497.6606 C
382.2053 494.7432 L
385.7919 490.0145 388.671 485.6847 391.7439 480.5192 C
396.6667 483.1139 L
f
397 383.18 m
393.8823 388.5305 390.9601 393.0934 387.4 398 C
381.508 394.524 L
384.9431 389.815 387.8785 385.2471 390.916 380.038 C
397 383.18 L
f
397.3334 283.2369 m
394.2597 288.621 391.3219 293.3715 387.8667 298.3303 C
380.8106 294.2956 L
384.0943 289.6063 387.0859 284.8003 390.088 279.5477 C
397.3334 283.2369 L
f
397.6667 183.303 m
394.6371 188.7206 391.6836 193.6588 388.3333 198.6697 C
380.1133 194.0764 L
383.2455 189.4068 386.2933 184.3627 389.26 179.0665 C
397.6667 183.303 L
f
U
398 83.36 m
395.0146 88.8111 392.0453 93.9369 388.8 99 C
379.416 93.848 L
382.3966 89.1981 385.5007 83.9159 388.432 78.5761 C
398 83.36 L
f
u
384.2413 580.1404 m
381.1899 585.1264 378.3545 589.1687 374.7387 593.7783 C
371.2059 591.4368 L
374.7731 586.9013 377.5701 582.8275 380.5119 578.0257 C
384.2413 580.1404 L
f
383.8826 480.5809 m
380.8563 485.6381 378.0061 489.8765 374.4773 494.5566 C
369.8118 491.6736 L
373.2498 487.1338 376.0958 482.8395 379.0237 477.9514 C
383.8826 480.5809 L
f
383.524 381.0304 m
380.5229 386.1588 377.6577 390.5935 374.216 395.344 C
368.4179 391.9195 L
371.7266 387.3755 374.6216 382.8606 377.5357 377.8863 C
383.524 381.0304 L
f
383.1653 281.4709 m
380.1893 286.6705 377.3092 291.3014 373.9547 296.1223 C
367.0238 292.1563 L
370.2032 287.608 373.1472 282.8726 376.0476 277.812 C
383.1653 281.4709 L
f
382.8067 181.9205 m
379.8558 187.1912 376.9608 192.0183 373.6933 196.9097 C
365.6299 192.4023 L
368.68 187.8497 371.673 182.8937 374.5596 177.7469 C
382.8067 181.9205 L
f
U
382.448 82.3609 m
379.5223 87.7029 376.6124 92.7262 373.432 97.688 C
364.2358 92.6391 L
367.1567 88.0822 370.1987 82.9057 373.0714 77.6726 C
382.448 82.3609 L
f
u
96.5 582.2236 m
93.2941 587.5071 90.4034 591.6948 86.6334 596.4969 C
83.0693 594.1383 L
86.8075 589.3899 89.6303 585.2982 92.7386 580.1763 C
96.5 582.2236 L
f
97 482.4472 m
93.8382 487.7643 90.9318 492.1395 87.2667 496.9939 C
82.5386 494.0765 L
86.1253 489.3478 89.0044 485.018 92.0773 479.8526 C
97 482.4472 L
f
97.5 382.68 m
94.3823 388.0305 91.4601 392.5934 87.9 397.5 C
82.008 394.024 L
85.4431 389.315 88.3785 384.7471 91.416 379.538 C
97.5 382.68 L
f
98 282.9036 m
94.9264 288.2877 91.9885 293.0382 88.5334 297.9969 C
81.4773 293.9623 L
84.7609 289.273 87.7525 284.467 90.7546 279.2143 C
98 282.9036 L
f
98.5 183.1363 m
95.4705 188.554 92.5169 193.4921 89.1666 198.503 C
80.9467 193.9097 L
84.0788 189.2401 87.1266 184.196 90.0933 178.8998 C
98.5 183.1363 L
f
U
99 83.36 m
96.0146 88.8111 93.0453 93.9369 89.8 99 C
80.416 93.848 L
83.3966 89.1981 86.5007 83.9159 89.432 78.5761 C
99 83.36 L
f
u
84.408 579.3071 m
81.3565 584.2931 78.5212 588.3353 74.9053 592.945 C
71.3726 590.6035 L
74.9398 586.068 77.7368 581.9941 80.6785 577.1924 C
84.408 579.3071 L
f
84.216 479.9142 m
81.1897 484.9714 78.3394 489.2099 74.8106 493.8899 C
70.1452 491.007 L
73.5831 486.4672 76.4291 482.1728 79.3571 477.2848 C
84.216 479.9142 L
f
84.024 380.5304 m
81.0229 385.6588 78.1577 390.0935 74.716 394.844 C
68.9179 391.4195 L
72.2266 386.8755 75.1216 382.3606 78.0357 377.3863 C
84.024 380.5304 L
f
83.832 281.1376 m
80.856 286.3372 77.9759 290.968 74.6213 295.789 C
67.6905 291.823 L
70.8699 287.2747 73.8139 282.5392 76.7142 277.4787 C
83.832 281.1376 L
f
83.64 181.7538 m
80.6891 187.0246 77.7942 191.8516 74.5267 196.743 C
66.4632 192.2356 L
69.5134 187.683 72.5064 182.727 75.3929 177.5802 C
83.64 181.7538 L
f
U
83.448 82.3609 m
80.5223 87.7029 77.6124 92.7262 74.432 97.688 C
65.2358 92.6391 L
68.1567 88.0822 71.1987 82.9057 74.0714 77.6726 C
83.448 82.3609 L
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
