%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (252C.eps)
%%CreationDate: (7/28/04) (11:46 AM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
1 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
400 600 m
400 700 L
500 700 L
500 600 L
400 600 L
n
100 600 m
100 700 L
200 700 L
200 600 L
100 600 L
n
200 600 m
200 700 L
300 700 L
300 600 L
200 600 L
n
300 600 m
300 700 L
400 700 L
400 600 L
300 600 L
n
0 500 m
0 600 L
100 600 L
100 500 L
0 500 L
n
400 500 m
400 600 L
500 600 L
500 500 L
400 500 L
n
100 500 m
100 600 L
200 600 L
200 500 L
100 500 L
n
200 500 m
200 600 L
300 600 L
300 500 L
200 500 L
n
300 500 m
300 600 L
400 600 L
400 500 L
300 500 L
n
0 400 m
0 500 L
100 500 L
100 400 L
0 400 L
n
400 400 m
400 500 L
500 500 L
500 400 L
400 400 L
n
100 400 m
100 500 L
200 500 L
200 400 L
100 400 L
n
200 400 m
200 500 L
300 500 L
300 400 L
200 400 L
n
300 400 m
300 500 L
400 500 L
400 400 L
300 400 L
n
0 300 m
0 400 L
100 400 L
100 300 L
0 300 L
n
400 300 m
400 400 L
500 400 L
500 300 L
400 300 L
n
100 300 m
100 400 L
200 400 L
200 300 L
100 300 L
n
200 300 m
200 400 L
300 400 L
300 300 L
200 300 L
n
300 300 m
300 400 L
400 400 L
400 300 L
300 300 L
n
0 200 m
0 300 L
100 300 L
100 200 L
0 200 L
n
400 200 m
400 300 L
500 300 L
500 200 L
400 200 L
n
100 200 m
100 300 L
200 300 L
200 200 L
100 200 L
n
200 200 m
200 300 L
300 300 L
300 200 L
200 200 L
n
300 200 m
300 300 L
400 300 L
400 200 L
300 200 L
n
0 100 m
0 200 L
100 200 L
100 100 L
0 100 L
n
400 100 m
400 200 L
500 200 L
500 100 L
400 100 L
n
100 100 m
100 200 L
200 200 L
200 100 L
100 100 L
n
200 100 m
200 200 L
300 200 L
300 100 L
200 100 L
n
300 100 m
300 200 L
400 200 L
400 100 L
300 100 L
n
0 0 m
0 100 L
100 100 L
100 0 L
0 0 L
n
400 0 m
400 100 L
500 100 L
500 0 L
400 0 L
n
100 0 m
100 100 L
200 100 L
200 0 L
100 0 L
n
200 0 m
200 100 L
300 100 L
300 0 L
200 0 L
n
300 0 m
300 100 L
400 100 L
400 0 L
300 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
0 Ap
0 O
0 g
1 D
322 692 m
320.301 674.947 314.6256 661.6742 305 650 C
307.4 648.2 L
317.6455 660.6261 323.2137 674.0706 325 692 C
322 692 L
f
361 670 m
361 628.6205 353.1624 619.03 323.4 614 C
324 611 L
354.7995 616.2053 364 626.2306 364 670 C
391 670 L
391 673 L
388 673 L
319 673 L
319 670 L
361 670 L
f
36 692 m
36 642.1508 29.8699 627.3581 11 613.3 C
12.9 611 L
32.4498 625.5647 39 640.4639 39 692 C
36 692 L
f
80 673 m
13 673 L
13 670 L
80 670 L
80 656 l
80 614 80 614 53 614 C
53 614 L
53 611 L
82.5 611 83 611.5082 83 656 C
83 673 L
80 673 L
f
182 673 m
113 673 L
113 670 L
185 670 L
185 673 L
182 673 L
f
189 638 m
189 641 L
109 641 L
109 638 L
189 638 L
f
155.1747 608 m
147.8253 692 L
144.8253 692 L
152.1747 608 L
155.1747 608 L
f
94 681 m
90.9719 686.7331 88.2844 691.4831 85 697 C
82.4 695.5 L
85.7848 689.8145 88.4289 685.0359 91.3 679.6 C
94 681 L
f
70.4 692.5 m
73.5265 687.2484 76.1108 682.5595 79.1 676.9 C
81.8 678.3 L
78.8325 683.9184 76.2187 688.5935 73 694 C
70.4 692.5 L
f
193 681 m
189.9719 686.7331 187.2844 691.4831 184 697 C
181.4 695.5 L
184.7848 689.8145 187.4289 685.0359 190.3 679.6 C
193 681 L
f
169.4 692.5 m
172.5265 687.2484 175.1108 682.5595 178.1 676.9 C
180.8 678.3 L
177.8325 683.9184 175.2187 688.5935 172 694 C
169.4 692.5 L
f
395 681 m
391.9719 686.7331 389.2844 691.4831 386 697 C
383.4 695.5 L
386.7848 689.8145 389.4289 685.0359 392.3 679.6 C
395 681 L
f
371.4 692.5 m
374.5265 687.2484 377.1108 682.5595 380.1 676.9 C
382.8 678.3 L
379.8325 683.9184 377.2187 688.5935 374 694 C
371.4 692.5 L
f
218 39.4 m
232.9505 54.3525 241.0242 71.1611 243.2 93 C
225 93 L
223.3134 76.0718 216.7961 63.2397 204 51 C
218 39.4 L
f
276.3 82 m
229 82 L
229 65 L
279 65 L
267 77.4 L
266.0158 38.5472 254.655 28.089 216.2 25 C
218 8 L
261.5847 11.501 281.548 27.0779 285.3262 66.6806 C
276.3 82 L
f
u
321.3333 592.3303 m
319.6424 575.3587 314.0063 562.062 304.3333 550.3303 C
308.9167 547.2636 L
319.3459 560.0268 325.0243 573.8374 326.8667 592.3303 C
321.3333 592.3303 L
f
320.6666 492.6606 m
318.9838 475.7704 313.3871 462.4498 303.6666 450.6606 C
310.4334 446.3272 L
321.0463 459.4275 326.8349 473.6042 328.7334 492.6606 C
320.6666 492.6606 L
f
320 393 m
318.3253 376.1912 312.7678 362.8467 303 351 C
311.95 345.4 L
322.7465 358.8374 328.6453 373.3802 330.6 393 C
320 393 L
f
319.3333 293.3303 m
317.6668 276.6029 312.1486 263.2345 302.3333 251.3303 C
313.4667 244.4636 L
324.4469 258.2382 330.4559 273.147 332.4667 293.3303 C
319.3333 293.3303 L
f
318.6667 193.6697 m
317.0083 177.0237 311.5294 163.6315 301.6667 151.6697 C
314.9833 143.5364 L
326.1471 157.6481 332.2663 172.923 334.3333 193.6697 C
318.6667 193.6697 L
f
U
316.5 42.6 m
327.8475 57.0488 334.0769 72.6898 336.2 94 C
318 94 L
316.3497 77.4354 310.9101 64.0193 301 52 C
316.5 42.6 L
f
475.7 83 m
411 83 L
411 66 L
464 66 L
464 31 L
411 31 L
411 14 L
483 14 L
483 70.7 L
475.7 83 L
f
34.85 592.3303 m
34.85 543.1554 28.8405 528.5924 10.1666 514.6803 C
13.75 510.6636 L
33.8 525.6009 40.35 540.6992 40.35 592.3303 C
34.85 592.3303 L
f
33.6999 492.6606 m
33.6999 444.16 27.8111 429.8267 9.3333 416.0606 C
14.6 410.3272 L
35.1501 425.6372 41.7001 440.9344 41.7001 492.6606 C
33.6999 492.6606 L
f
u
32.5499 392.9954 m
32.5499 345.1691 26.7818 331.0655 8.5 317.4454 C
15.45 309.9954 L
36.5002 325.678 43.0501 341.1742 43.0501 392.9954 C
32.5499 392.9954 L
f
31.3999 293.3303 m
31.3999 246.1783 25.7524 232.3043 7.6667 218.8303 C
16.3 209.6636 L
37.8503 225.7188 44.4001 241.414 44.4001 293.3303 C
31.3999 293.3303 L
f
30.25 193.6651 m
30.25 147.1874 24.7231 133.5432 6.8333 120.2151 C
17.15 109.3318 L
39.2005 125.7596 45.75 141.6539 45.75 193.6651 C
30.25 193.6651 L
f
U
18 9 m
40.5506 25.8004 47.1 41.8937 47.1 94 C
29.1 94 L
29.1 48.1966 23.6938 34.782 6 21.6 C
18 9 L
f
79.6666 572.997 m
12.1666 572.997 L
12.1666 567.6636 L
77.6666 567.6636 L
77.6666 555.9969 l
77.6666 515.9985 77.6666 515.997 53.5 515.997 C
52.1666 515.997 L
52.1666 510.6636 L
82.5944 510.6636 83.3333 511.4011 83.3333 555.9969 C
83.3333 572.997 L
79.6666 572.997 L
f
80.4666 474.994 m
11.3333 474.994 L
11.3333 467.3272 L
75.3332 467.3272 L
75.3332 455.9939 l
75.3332 417.997 75.3332 417.994 54 417.994 C
51.3333 417.994 L
51.3333 410.3272 L
82.6889 410.3272 83.6667 411.2941 83.6667 455.9939 C
83.6667 468.9939 L
80.4666 474.994 L
f
u
79.8499 375.9955 m
10.5 375.9955 L
10.5 365.9954 L
72.9999 365.9954 L
72.9999 355.9954 l
72.9999 319.9999 72.9999 319.9955 54.5 319.9955 C
50.5 319.9955 L
50.5 309.9954 L
82.7833 309.9954 84 311.1916 84 355.9954 C
84 368.5704 L
79.8499 375.9955 L
f
79.2333 276.997 m
9.6667 276.997 L
9.6667 264.6636 L
70.6666 264.6636 L
70.6666 255.9969 l
70.6666 222.0029 70.6666 221.997 55 221.997 C
49.6667 221.997 L
49.6667 209.6636 L
82.8778 209.6636 84.3333 211.0891 84.3333 255.9969 C
84.3333 268.1469 L
79.2333 276.997 L
f
78.6166 177.9985 m
8.8333 177.9985 L
8.8333 163.3318 L
68.3333 163.3318 L
68.3333 155.9985 l
68.3333 124.0058 68.3333 123.9985 55.5 123.9985 C
48.8333 123.9985 L
48.8333 109.3318 L
82.9722 109.3318 84.6667 110.9866 84.6667 155.9985 C
84.6667 167.7235 L
78.6166 177.9985 L
f
U
78 79 m
8 79 L
8 62 L
66 62 L
66 56 l
66 26.0088 66 26 56 26 C
48 26 L
48 9 L
83.0667 9 85 10.8842 85 56 c
85 67.3 L
78 79 L
f
358.8333 568.4969 m
358.8333 529.2639 351.9588 520.8527 322.8333 515.9303 C
324 510.6636 L
355.2985 515.9532 364.5 525.9714 364.5 568.4969 C
389.91 568.4969 L
389.91 573.8303 L
386.5 573.8303 L
318.8333 573.8303 L
318.8333 568.4969 L
358.8333 568.4969 L
f
364 464.9938 m
388.8199 464.9938 L
388.8199 472.6606 L
384.9999 472.6606 L
318.6667 472.6606 L
318.6667 464.9938 L
357.6665 464.9938 L
356.6665 466.9938 L
356.6665 429.9073 350.7553 422.6754 322.2666 417.8607 C
324 410.3272 L
355.7976 415.7012 365 425.7123 365 466.9938 C
364 464.9938 L
f
352.5 365.5 m
352.5 330.5598 347.5519 324.5071 319.7 319.8 C
322 310 L
354.2966 315.4583 363.5 325.4623 363.5 365.5 C
383.73 365.5 L
383.73 374.9 L
379.5 375.5 L
318.5 375.5 L
318.5 365.5 L
352.5 365.5 L
f
u
351 264.0015 m
351 231.2078 347.015 226.3343 319.8 221.7348 C
322.6667 209.6682 L
355.4623 215.2109 364.6667 225.2078 364.6667 264.0015 C
383.9733 264.0015 L
383.9733 274.4616 L
379.3333 276.3348 L
318.3333 276.3348 L
318.3333 264.0015 L
351 264.0015 L
f
349.5 162.4984 m
349.5 131.8512 346.4782 128.157 319.9 123.6652 C
323.3334 109.3318 L
356.628 114.9588 365.8334 124.9486 365.8334 162.4984 C
384.2167 162.4984 L
384.2167 174.0185 L
379.1667 177.1651 L
318.1667 177.1651 L
318.1667 162.4984 L
349.5 162.4984 L
f
U
324 9 m
357.7937 14.7114 367 24.6941 367 61 C
384.46 61 L
384.46 73.5801 L
379 78 L
318 78 L
318 61 L
348 61 L
348 32.4992 345.9413 29.9842 320 25.6 C
324 9 L
f
94.6667 580.4969 m
91.5391 586.3579 88.5569 591.5471 85.1667 597.1636 C
81.1166 594.8469 L
84.5785 589.1051 87.5015 583.9167 90.4833 578.3302 C
94.6667 580.4969 L
f
94.3334 477.9939 m
91.1063 483.9826 87.8294 489.611 84.3333 495.3273 C
78.8332 492.1939 L
82.3723 486.3957 85.5741 480.7974 88.6666 475.0605 C
94.3334 477.9939 L
f
u
95.25 377.9954 m
91.9235 384.1119 88.3519 390.1795 84.75 395.9955 C
77.7999 392.0454 L
81.4161 386.1909 84.8968 380.1828 88.1 374.2954 C
95.25 377.9954 L
f
96.1667 277.9969 m
92.7406 284.2413 88.8744 290.748 85.1667 296.6636 C
76.7666 291.8969 L
80.4599 285.9861 84.2194 279.5682 87.5333 273.5302 C
96.1667 277.9969 L
f
97.0833 177.9985 m
93.5578 184.3706 89.397 191.3166 85.5833 197.3318 C
75.7333 191.7485 L
79.5037 185.7813 83.5421 178.9536 86.9667 172.7651 C
97.0833 177.9985 L
f
U
74.7 91.6 m
78.5475 85.5765 82.8648 78.339 86.4 72 C
98 78 L
94.375 84.5 89.9195 91.8851 86 98 C
74.7 91.6 L
f
68.3166 591.6971 m
71.5504 586.337 74.4148 581.2487 77.4832 575.4971 C
81.6333 577.6471 L
78.5683 583.3908 75.6557 588.493 72.3333 593.9971 C
68.3166 591.6971 L
f
65.2332 488.8941 m
68.5744 483.4253 71.7189 477.9377 74.8665 472.094 C
80.4666 474.994 L
77.3041 480.863 74.0928 486.3922 70.6666 491.9941 C
65.2332 488.8941 L
f
u
63.3999 388.5956 m
66.8484 383.0182 70.273 377.1313 73.4999 371.1955 C
80.5499 374.8455 L
77.2899 380.8397 73.7799 386.796 70.25 392.4956 C
63.3999 388.5956 L
f
61.5666 288.297 m
65.1224 282.6111 68.8272 276.3249 72.1332 270.297 C
80.6333 274.697 L
77.2758 280.8165 73.4669 287.1998 69.8333 292.997 C
61.5666 288.297 L
f
59.7333 187.9985 m
63.3965 182.2041 67.3813 175.5186 70.7666 169.3985 C
80.7166 174.5485 L
77.2616 180.7932 73.154 187.6036 69.4167 193.4985 C
59.7333 187.9985 L
f
U
57.9 87.7 m
61.6705 81.797 65.9355 74.7122 69.4 68.5 C
80.8 74.4 L
77.2475 80.77 72.8411 88.0074 69 94 C
57.9 87.7 L
f
274.7 91.6 m
278.5475 85.5765 282.8648 78.339 286.4 72 C
298 78 L
294.375 84.5 289.9195 91.8851 286 98 C
274.7 91.6 L
f
257.9 87.7 m
261.6705 81.797 265.9355 74.7122 269.4 68.5 C
280.8 74.4 L
277.2475 80.77 272.8411 88.0074 269 94 C
257.9 87.7 L
f
474.7 91.6 m
478.5475 85.5765 482.8648 78.339 486.4 72 C
498 78 L
494.375 84.5 489.9195 91.8851 486 98 C
474.7 91.6 L
f
457.9 87.7 m
461.6705 81.797 465.9355 74.7122 469.4 68.5 C
480.8 74.4 L
477.2475 80.77 472.8411 88.0074 469 94 C
457.9 87.7 L
f
370.0508 592.4094 m
373.2532 587.0984 376.0821 582.0693 379.1216 576.3694 C
383.1767 578.4703 L
380.1413 584.1608 377.2654 589.2027 373.975 594.6569 C
370.0508 592.4094 L
f
368.6016 491.3588 m
371.8799 485.9885 374.9534 480.619 378.0433 474.8788 C
383.4533 477.6805 L
380.3501 483.4433 377.2122 488.8519 373.85 494.3539 C
368.6016 491.3588 L
f
367.1525 388.3175 m
370.5068 382.8878 373.8248 377.1781 376.965 371.3975 C
383.73 374.9 L
380.5588 380.7349 377.1589 386.5103 373.725 392.06 C
367.1525 388.3175 L
f
u
365.67 287.6182 m
369.1002 282.1291 372.6628 276.0792 375.8534 270.2583 C
383.9733 274.4616 L
380.7342 280.3686 377.0723 286.5108 373.5667 292.1082 C
365.67 287.6182 L
f
364.1875 186.9143 m
367.6936 181.3659 371.5008 174.9756 374.7417 169.1143 C
384.2167 174.0185 L
380.9097 179.9978 376.9857 186.5066 373.4084 192.1518 C
364.1875 186.9143 L
f
U
362.7051 86.215 m
366.2871 80.6072 370.3388 73.8767 373.6301 67.9751 C
384.46 73.5801 L
381.0852 79.6315 376.8991 86.5071 373.2501 92.2 C
362.7051 86.215 L
f
u
395.6667 581.8303 m
392.5693 587.637 389.6242 592.7647 386.2667 598.3303 C
382.3108 596.0669 L
385.7407 590.3753 388.6277 585.2472 391.58 579.7136 C
395.6667 581.8303 L
f
396.3334 481.6606 m
393.1667 487.541 389.9641 493.0463 386.5333 498.6606 C
381.2216 495.6339 L
384.6965 489.9361 387.8264 484.4585 390.86 478.8272 C
396.3334 481.6606 L
f
397 379.5 m
393.764 385.454 390.3039 391.337 386.8 397 C
380.1325 393.21 L
383.6525 387.5061 387.0252 381.679 390.14 375.95 C
397 379.5 L
f
397.6667 280.3303 m
394.3614 286.358 390.6438 292.6186 387.0667 298.3303 C
379.0433 293.7769 L
382.6083 288.0669 386.224 281.8903 389.42 276.0636 C
397.6667 280.3303 L
f
398.3333 180.1698 m
394.9588 186.2711 390.9836 192.9093 387.3333 198.6697 C
377.9543 193.3531 L
381.5643 187.6369 385.4228 181.1108 388.7001 175.1865 C
398.3333 180.1698 L
f
U
376.8651 92.92 m
380.5202 87.1977 384.6216 80.3221 387.9801 74.3001 C
399 80.0001 L
395.5562 86.175 391.3235 93.1909 387.6 99 C
376.8651 92.92 L
f
182.3333 573.6636 m
113.1667 573.6636 L
113.1667 568.3302 L
185.3 568.3302 L
185.3 573.6636 L
182.3333 573.6636 L
f
181.6666 473.3273 m
112.3333 473.3273 L
112.3333 465.6605 L
184.6 465.6605 L
184.5999 473.3273 L
181.6666 473.3273 L
f
177.9 376 m
111.5 376 L
111.5 366 L
180.8 366 L
180.8 375.3 L
177.9 376 L
f
u
178.2667 276.3348 m
110.6667 276.3348 L
110.6667 264.0015 L
181.1333 264.0015 L
181.1333 275.0015 L
178.2667 276.3348 L
f
178.6333 176.6651 m
109.8333 176.6651 L
109.8333 161.9984 L
181.4667 161.9984 L
181.4667 174.6985 L
178.6333 176.6651 L
f
U
179 77 m
109 77 L
109 60 L
181.8 60 L
181.8 74.4 L
179 77 L
f
u
189.8333 536.3302 m
189.8333 541.6636 L
109.1667 541.6636 L
109.1667 536.3302 L
189.8333 536.3302 L
f
189.6667 434.6605 m
189.6667 442.3273 L
108.3333 442.3273 L
108.3333 434.6605 L
189.6667 434.6605 L
f
189.5 333 m
189.5 343 L
107.5 343 L
107.5 333 L
189.5 333 L
f
190.3333 231.3302 m
190.3333 243.6636 L
107.6667 243.6636 L
107.6667 231.3302 L
190.3333 231.3302 L
f
190.1667 129.6697 m
190.1667 144.3363 L
106.8334 144.3363 L
106.8334 129.6697 L
190.1667 129.6697 L
f
U
189 28 m
189 45 L
105 45 L
105 28 L
189 28 L
f
u
156.9622 507.6636 m
149.5545 592.3303 L
143.7044 592.3303 L
151.1121 507.6636 L
156.9622 507.6636 L
f
157.7498 407.3272 m
150.2837 492.6606 L
141.5835 492.6606 L
149.0496 407.3272 L
157.7498 407.3272 L
f
158.5372 307 m
151.0128 393 L
139.4628 393 L
146.9872 307 L
158.5372 307 L
f
160.3247 206.6636 m
152.742 293.3303 L
138.3419 293.3303 L
145.9246 206.6636 L
160.3247 206.6636 L
f
161.1122 106.3364 m
153.4711 193.6697 L
136.2212 193.6697 L
143.8623 106.3364 L
161.1122 106.3364 L
f
U
160.8997 6 m
153.2003 94 L
133.1003 94 L
140.7997 6 L
160.8997 6 L
f
u
193.8334 581.4969 m
190.7058 587.3578 187.7236 592.547 184.3334 598.1636 C
180.2833 595.8469 L
183.7452 590.1051 186.6682 584.9166 189.65 579.3302 C
193.8334 581.4969 L
f
194.6667 480.9939 m
191.4396 486.9826 188.1628 492.611 184.6667 498.3272 C
179.1666 495.1938 L
182.7056 489.3957 185.9075 483.7974 188.9999 478.0605 C
194.6667 480.9939 L
f
195.5 378.5 m
192.1734 384.6165 188.6019 390.6841 185 396.5 C
178.05 392.55 L
181.6661 386.6955 185.1468 380.6874 188.35 374.8 C
195.5 378.5 L
f
196.3334 277.9969 m
192.9073 284.2413 189.0411 290.748 185.3334 296.6636 C
176.9333 291.8969 L
180.6266 285.9861 184.3861 279.5682 187.7 273.5302 C
196.3334 277.9969 L
f
199.1667 178.503 m
195.6411 184.8752 191.4803 191.8211 187.6667 197.8364 C
177.8167 192.2531 L
181.5871 186.2859 185.6255 179.4582 189.05 173.2697 C
199.1667 178.503 L
f
U
175.7 91.6 m
179.5475 85.5765 183.8648 78.339 187.4 72 C
199 78 L
195.375 84.5 190.9195 91.8851 187 98 C
175.7 91.6 L
f
167.4833 592.6469 m
170.7171 587.2867 173.5815 582.1985 176.6499 576.4469 C
180.8 578.5969 L
177.735 584.3406 174.8224 589.4427 171.5 594.9469 C
167.4833 592.6469 L
f
165.5665 491.8438 m
168.9077 486.3751 172.0523 480.8875 175.1999 475.0438 C
180.8 477.9438 L
177.6375 483.8128 174.4261 489.342 171 494.9439 C
165.5665 491.8438 L
f
163.65 389.05 m
167.0985 383.4727 170.5231 377.5858 173.75 371.65 C
180.8 375.3 L
177.54 381.2942 174.0299 387.2504 170.5 392.95 C
163.65 389.05 L
f
u
162.0667 288.6015 m
165.6225 282.9157 169.3272 276.6295 172.6333 270.6015 C
181.1333 275.0015 L
177.7758 281.121 173.967 287.5043 170.3334 293.3015 C
162.0667 288.6015 L
f
160.4833 188.1484 m
164.1465 182.354 168.1313 175.6685 171.5167 169.5485 C
181.4667 174.6985 L
178.0117 180.9432 173.904 187.7535 170.1667 193.6485 C
160.4833 188.1484 L
f
U
158.9 87.7 m
162.6705 81.797 166.9355 74.7122 170.4 68.5 C
181.8 74.4 L
178.2475 80.77 173.8411 88.0074 170 94 C
158.9 87.7 L
f
u
217.1833 140.8197 m
231.886 155.4265 239.7201 171.6262 241.8333 192.8364 C
226.1667 192.8364 L
224.4801 175.9082 217.9628 163.076 205.1667 150.8364 C
217.1833 140.8197 L
f
216.3666 242.2395 m
230.8214 256.5005 238.416 272.0914 240.4666 292.6728 C
227.3334 292.6728 L
225.6468 275.7445 219.1295 262.9124 206.3334 250.6728 C
216.3666 242.2395 L
f
215.55 343.65 m
229.757 357.5653 237.1121 372.5473 239.1 392.5 C
228.5 392.5 L
226.8134 375.5718 220.2961 362.7397 207.5 350.5 C
215.55 343.65 L
f
214.7333 445.0697 m
228.6925 458.6393 235.808 473.0125 237.7333 492.3364 C
229.6667 492.3364 L
227.9801 475.4082 221.4628 462.576 208.6667 450.3364 C
214.7333 445.0697 L
f
213.9167 546.4802 m
227.628 559.7041 234.5041 573.4684 236.3667 592.1636 C
230.8333 592.1636 L
229.1467 575.2354 222.6294 562.4033 209.8333 550.1636 C
213.9167 546.4802 L
f
U
213.1 647.9 m
226.5635 660.7781 233.2 673.9336 235 692 C
232 692 L
230.3134 675.0718 223.7961 662.2397 211 650 C
213.1 647.9 L
f
u
276.8917 181.6697 m
229.3334 181.6697 L
229.3334 167.0031 L
279.3334 167.0031 L
269.0001 177.6864 L
268.138 138.2222 255.5459 126.3101 216.45 123.1696 C
218 108.503 L
261.408 111.9899 281.4393 128.1251 284.7644 168.266 C
276.8917 181.6697 L
f
277.4833 281.3394 m
229.6667 281.3394 L
229.6667 269.0062 L
279.6667 269.0062 L
271.0001 277.9728 L
270.2601 237.8972 256.4368 224.5313 216.7 221.3393 C
218 209.0061 L
261.2313 212.4788 281.3306 229.1723 284.2027 269.8515 C
277.4833 281.3394 L
f
278.075 381 m
230 381 L
230 371 L
280 371 L
273 378.25 L
272.3821 337.5631 257.3276 322.7434 216.95 319.5 C
218 309.5 L
261.0546 312.9584 281.2219 330.2102 283.641 371.4276 C
278.075 381 L
f
278.6667 480.6697 m
230.3334 480.6697 L
230.3334 473.0031 L
280.3334 473.0031 L
275.0001 478.5364 L
274.5043 437.2381 258.2185 420.9646 217.2 417.6696 C
218 410.003 L
260.8778 413.4473 281.1132 431.2574 283.0793 473.013 C
278.6667 480.6697 L
f
279.2583 580.3303 m
230.6667 580.3303 L
230.6667 574.9969 L
280.6667 574.9969 L
277 578.8136 L
276.6262 536.904 259.1093 519.1767 217.45 515.8303 C
218 510.4969 L
260.7011 513.927 281.0045 532.2954 282.5176 574.5892 C
279.2583 580.3303 L
f
U
279.85 680 m
231 680 L
231 677 L
281 677 L
279 679.1 L
278.7484 636.579 260.0002 617.3979 217.7 614 C
218 611 L
260.5244 614.4159 280.8958 633.3426 281.9559 676.1746 C
279.85 680 L
f
u
476.225 182.8364 m
411.3334 182.8364 L
411.3334 168.1698 L
466.1667 168.1698 L
466.1667 129.1696 L
411.3334 129.1696 L
411.3334 114.503 L
482.5 114.503 L
482.5 172.2198 L
476.225 182.8364 L
f
476.75 282.6728 m
411.6667 282.6728 L
411.6667 270.3396 L
468.3335 270.3396 L
468.3335 227.3393 L
411.6667 227.3393 L
411.6667 215.0061 L
482 215.0061 L
482 273.7395 L
476.75 282.6728 L
f
477.275 382.5 m
412 382.5 L
412 372.5 L
470.5 372.5 L
470.5 325.5 L
412 325.5 L
412 315.5 L
481.5 315.5 L
481.5 375.25 L
477.275 382.5 L
f
477.8 482.3364 m
412.3334 482.3364 L
412.3334 474.6698 L
472.6667 474.6698 L
472.6667 423.6696 L
412.3334 423.6696 L
412.3334 416.003 L
481 416.003 L
481 476.7698 L
477.8 482.3364 L
f
478.325 582.1636 m
412.6667 582.1636 L
412.6667 576.8302 L
474.8333 576.8302 L
474.8333 521.8303 L
412.6667 521.8303 L
412.6667 516.4969 L
480.5 516.4969 L
480.5 578.2802 L
478.325 582.1636 L
f
U
480 679.8 m
478.85 682 L
413 682 L
413 679 L
477 679 L
477 620 L
413 620 L
413 617 L
480 617 L
480 679.8 L
f
u
297.1667 178.503 m
293.6411 184.8752 289.4803 191.8211 285.6667 197.8364 C
275.8167 192.2531 L
279.5871 186.2859 283.6255 179.4582 287.05 173.2697 C
297.1667 178.503 L
f
296.3333 279.0061 m
292.9073 285.2505 289.0411 291.7572 285.3333 297.6728 C
276.9334 292.9061 L
280.6267 286.9953 284.3862 280.5774 287.7 274.5395 C
296.3333 279.0061 L
f
295.5 379.5 m
292.1734 385.6165 288.6019 391.6841 285 397.5 C
278.05 393.55 L
281.6661 387.6955 285.1468 381.6874 288.35 375.8 C
295.5 379.5 L
f
294.6667 480.003 m
291.4396 485.9918 288.1627 491.6201 284.6667 497.3364 C
279.1667 494.203 L
282.7057 488.4049 285.9075 482.8067 289 477.0697 C
294.6667 480.003 L
f
293.8334 580.4969 m
290.7058 586.3578 287.7236 591.547 284.3334 597.1636 C
280.2833 594.8469 L
283.7452 589.1051 286.6682 583.9166 289.65 578.3302 C
293.8334 580.4969 L
f
U
293 681 m
289.9719 686.7331 287.2844 691.4831 284 697 C
281.4 695.5 L
284.7848 689.8145 287.4289 685.0359 290.3 679.6 C
293 681 L
f
u
280.8 175.0531 m
277.345 181.2978 273.2374 188.1081 269.5 194.003 C
259.8167 188.5031 L
263.4648 182.734 267.4397 176.0685 270.8069 169.9846 C
280.8 175.0531 L
f
280.8 275.7061 m
277.4425 281.8256 273.6336 288.2089 270 294.0061 C
261.7334 289.3061 L
265.2591 283.671 268.9439 277.4248 272.2138 271.4693 C
280.8 275.7061 L
f
280.8 376.35 m
277.54 382.3442 274.0299 388.3004 270.5 394 C
263.65 390.1 L
267.0532 384.5987 270.448 378.7719 273.6206 372.9446 C
280.8 376.35 L
f
280.8 477.003 m
277.6375 482.872 274.4262 488.4012 271 494.003 C
265.5667 490.9031 L
268.8475 485.5357 271.9523 480.1282 275.0276 474.4293 C
280.8 477.003 L
f
280.8 577.6469 m
277.735 583.3906 274.8224 588.4927 271.5 593.9969 C
267.4833 591.6969 L
270.6416 586.4635 273.4564 581.4752 276.4344 575.9046 C
280.8 577.6469 L
f
U
280.8 678.3 m
277.8325 683.9184 275.2187 688.5935 272 694 C
269.4 692.5 L
272.4359 687.4005 274.9606 682.8316 277.8413 677.3893 C
280.8 678.3 L
f
u
497.1667 178.503 m
493.6411 184.8752 489.4803 191.8211 485.6667 197.8364 C
475.8167 192.2531 L
479.5871 186.2859 483.6255 179.4582 487.05 173.2697 C
497.1667 178.503 L
f
496.3333 279.0061 m
492.9073 285.2505 489.0411 291.7572 485.3333 297.6728 C
476.9334 292.9061 L
480.6267 286.9953 484.3862 280.5774 487.7 274.5395 C
496.3333 279.0061 L
f
495.5 379.5 m
492.1734 385.6165 488.6019 391.6841 485 397.5 C
478.05 393.55 L
481.6661 387.6955 485.1468 381.6874 488.35 375.8 C
495.5 379.5 L
f
494.6667 480.003 m
491.4396 485.9918 488.1627 491.6201 484.6667 497.3364 C
479.1667 494.203 L
482.7057 488.4049 485.9075 482.8067 489 477.0697 C
494.6667 480.003 L
f
493.8334 580.4969 m
490.7058 586.3578 487.7236 591.547 484.3334 597.1636 C
480.2833 594.8469 L
483.7452 589.1051 486.6682 583.9166 489.65 578.3302 C
493.8334 580.4969 L
f
U
493 681 m
489.9719 686.7331 487.2844 691.4831 484 697 C
481.4 695.5 L
484.7848 689.8145 487.4289 685.0359 490.3 679.6 C
493 681 L
f
u
480.5561 175.5108 m
477.1965 181.5617 473.1477 188.2588 469.5 194.003 C
459.8167 188.5031 L
463.3897 182.8601 467.313 176.2965 470.5966 170.3796 C
480.5561 175.5108 L
f
480.3123 276.6217 m
477.1455 282.3535 473.4543 288.5101 470 294.0061 C
461.7334 289.3061 L
465.1089 283.9233 468.6904 277.8807 471.7932 272.2592 C
480.3123 276.6217 L
f
480.0684 377.7232 m
477.0945 383.136 473.7608 388.7523 470.5 394 C
463.65 390.1 L
466.828 384.9771 470.0678 379.4557 472.9897 374.1295 C
480.0684 377.7232 L
f
479.8246 478.8341 m
477.0435 483.9277 474.0674 489.0037 471 494.003 C
465.5667 490.9031 L
468.5471 486.0403 471.4453 481.04 474.1864 476.0092 C
479.8246 478.8341 L
f
479.5808 579.9356 m
476.9926 584.7102 474.374 589.2459 471.5 593.9969 C
467.4833 591.6969 L
470.2662 587.0941 472.8226 582.615 475.3829 577.8795 C
479.5808 579.9356 L
f
U
479.3369 681.0465 m
476.9416 685.502 474.6806 689.4973 472 694 C
469.4 692.5 L
471.9854 688.1573 474.2001 684.1993 476.5795 679.7591 C
479.3369 681.0465 L
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
