%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (252C.eps)
%%CreationDate: (5/26/04) (4:36 PM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
1 Ap
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
500 600 m
500 700 L
400 700 L
400 600 L
500 600 L
n
200 600 m
200 700 L
100 700 L
100 600 L
200 600 L
n
300 600 m
300 700 L
200 700 L
200 600 L
300 600 L
n
400 600 m
400 700 L
300 700 L
300 600 L
400 600 L
n
100 500 m
100 600 L
0 600 L
0 500 L
100 500 L
n
500 500 m
500 600 L
400 600 L
400 500 L
500 500 L
n
200 500 m
200 600 L
100 600 L
100 500 L
200 500 L
n
300 500 m
300 600 L
200 600 L
200 500 L
300 500 L
n
400 500 m
400 600 L
300 600 L
300 500 L
400 500 L
n
100 400 m
100 500 L
0 500 L
0 400 L
100 400 L
n
500 400 m
500 500 L
400 500 L
400 400 L
500 400 L
n
200 400 m
200 500 L
100 500 L
100 400 L
200 400 L
n
300 400 m
300 500 L
200 500 L
200 400 L
300 400 L
n
400 400 m
400 500 L
300 500 L
300 400 L
400 400 L
n
100 300 m
100 400 L
0 400 L
0 300 L
100 300 L
n
500 300 m
500 400 L
400 400 L
400 300 L
500 300 L
n
200 300 m
200 400 L
100 400 L
100 300 L
200 300 L
n
300 300 m
300 400 L
200 400 L
200 300 L
300 300 L
n
400 300 m
400 400 L
300 400 L
300 300 L
400 300 L
n
100 200 m
100 300 L
0 300 L
0 200 L
100 200 L
n
500 200 m
500 300 L
400 300 L
400 200 L
500 200 L
n
200 200 m
200 300 L
100 300 L
100 200 L
200 200 L
n
300 200 m
300 300 L
200 300 L
200 200 L
300 200 L
n
400 200 m
400 300 L
300 300 L
300 200 L
400 200 L
n
100 100 m
100 200 L
0 200 L
0 100 L
100 100 L
n
500 100 m
500 200 L
400 200 L
400 100 L
500 100 L
n
200 100 m
200 200 L
100 200 L
100 100 L
200 100 L
n
300 100 m
300 200 L
200 200 L
200 100 L
300 100 L
n
400 100 m
400 200 L
300 200 L
300 100 L
400 100 L
n
100 0 m
100 100 L
0 100 L
0 0 L
100 0 L
n
500 0 m
500 100 L
400 100 L
400 0 L
500 0 L
n
200 0 m
200 100 L
100 100 L
100 0 L
200 0 L
n
300 0 m
300 100 L
200 100 L
200 0 L
300 0 L
n
400 0 m
400 100 L
300 100 L
300 0 L
400 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
0 Ap
0 O
0 g
1 D
214.1 647.9 m
227.5635 660.7781 234.2 673.9336 236 692 C
233 692 L
231.3134 675.0718 224.7961 662.2397 212 650 C
214.1 647.9 L
f
282 680 m
232 680 L
232 677 L
282 677 L
280 679.1 L
279.7484 636.579 261.0002 617.3979 218.7 614 C
219 611 L
262.7057 614.5108 283 634.4009 283 680 C
282 680 L
f
322 692 m
320.301 674.947 314.6256 661.6742 305 650 C
307.4 648.2 L
317.6455 660.6261 323.2137 674.0706 325 692 C
322 692 L
f
481 682 m
478 682 L
414 682 L
414 679 L
478 679 L
478 620 L
414 620 L
414 617 L
481 617 L
481 682 L
f
37 692 m
37 642.1508 30.8699 627.3581 12 613.3 C
13.9 611 L
33.4498 625.5647 40 640.4639 40 692 C
37 692 L
f
81 673 m
14 673 L
14 670 L
81 670 L
81 656 l
81 614 81 614 54 614 C
54 614 L
54 611 L
83.5 611 84 611.5082 84 656 C
84 673 L
81 673 L
f
182 673 m
113 673 L
113 670 L
185 670 L
185 673 L
182 673 L
f
189 638 m
189 641 L
109 641 L
109 638 L
189 638 L
f
154.1747 608 m
146.8253 692 L
143.8253 692 L
151.1747 608 L
154.1747 608 L
f
96 681 m
92.2352 686.347 88.875 690.9375 85 696 C
82.6 694.2 L
86.375 689.25 89.5417 684.9218 93.5 679.3 C
96 681 L
f
81 677 m
77.2352 682.347 73.875 686.9375 70 692 C
67.6 690.2 L
71.375 685.25 74.5417 680.9218 78.5 675.3 C
81 677 L
f
196 681 m
192.2352 686.347 188.875 690.9375 185 696 C
182.6 694.2 L
186.375 689.25 189.5417 684.9218 193.5 679.3 C
196 681 L
f
181 677 m
177.2352 682.347 173.875 686.9375 170 692 C
167.6 690.2 L
171.375 685.25 174.5417 680.9218 178.5 675.3 C
181 677 L
f
361 670 m
361 628.6205 353.1624 619.03 323.4 614 C
324 611 L
354.7995 616.2053 364 626.2306 364 670 C
391 670 L
391 673 L
388 673 L
319 673 L
319 670 L
361 670 L
f
396 681 m
392.2352 686.347 388.875 690.9375 385 696 C
382.6 694.2 L
386.375 689.25 389.5417 684.9218 393.5 679.3 C
396 681 L
f
381 677 m
377.2352 682.347 373.875 686.9375 370 692 C
367.6 690.2 L
371.375 685.25 374.5417 680.9218 378.5 675.3 C
381 677 L
f
494 682 m
490.2352 687.347 486.875 691.9375 483 697 C
480.6 695.2 L
484.375 690.25 487.5417 685.9218 491.5 680.3 C
494 682 L
f
475.8526 681.0289 m
472.9151 685.1418 470.1249 688.9174 467 693 C
464.6 691.2 L
467.6573 687.1911 470.3156 683.59 473.3186 679.3792 C
475.8526 681.0289 L
f
294 682 m
290.2352 687.347 286.875 691.9375 283 697 C
280.6 695.2 L
284.375 690.25 287.5417 685.9218 291.5 680.3 C
294 682 L
f
278 678 m
274.2352 683.347 270.875 687.9375 267 693 C
264.6 691.2 L
268.0865 686.6283 271.0541 682.587 274.6057 677.5671 C
278 678 L
f
u
214.75 546.6469 m
228.4613 559.8708 235.3374 573.6351 237.2 592.3303 C
231.6666 592.3303 L
229.98 575.4021 223.4627 562.57 210.6666 550.3303 C
214.75 546.6469 L
f
215.4 445.3938 m
229.3592 458.9634 236.4748 473.3366 238.4001 492.6606 C
230.3332 492.6606 L
228.6466 475.7324 222.1293 462.9003 209.3332 450.6606 C
215.4 445.3938 L
f
215.05 344.15 m
229.257 358.0653 236.6121 373.0473 238.6 393 C
228 393 L
226.3134 376.0718 219.7961 363.2397 207 351 C
215.05 344.15 L
f
215.7 242.8969 m
230.1548 257.1579 237.7495 272.7489 239.8 293.3303 C
226.6666 293.3303 L
224.98 276.4021 218.4627 263.57 205.6666 251.3303 C
215.7 242.8969 L
f
217.35 141.6531 m
232.0526 156.2598 239.8868 172.4595 242 193.6697 C
226.3334 193.6697 L
224.6468 176.7415 218.1295 163.9094 205.3334 151.6697 C
217.35 141.6531 L
f
U
218 40.4 m
232.9505 55.3525 241.0242 72.1611 243.2 94 C
225 94 L
223.3134 77.0718 216.7961 64.2397 204 52 C
218 40.4 L
f
u
280.8333 580.497 m
231.5 580.497 L
231.5 575.1636 L
281.5 575.1636 L
277.8333 578.9803 L
277.4596 537.0707 259.9426 519.3434 218.2833 515.997 C
218.8333 510.6636 L
264.1074 514.3004 283.4333 534.5625 283.4333 580.497 C
280.8333 580.497 L
f
279.6666 480.9939 m
231 480.9939 L
231 473.3271 L
281 473.3271 L
275.6665 478.8605 L
275.1707 437.5623 258.8851 421.2889 217.8666 417.994 C
218.6667 410.3272 L
264.3931 414.0003 283.8666 433.75 283.8666 480.9939 C
279.6666 480.9939 L
f
277.5 381.5 m
229.5 381.5 L
229.5 371.5 L
279.5 371.5 L
272.5 378.75 L
271.8821 338.0631 256.8276 323.2434 216.45 320 C
217.5 310 L
264.1671 313.7487 283.4 333.5 283.4 381.5 C
277.5 381.5 L
f
275.3333 281.997 m
228 281.997 L
228 269.6636 L
278 269.6636 L
269.3333 278.6303 L
268.5933 238.5547 254.77 225.189 215.0333 221.997 C
216.3333 209.6636 L
263.4226 213.4461 282.7333 232.75 282.7333 281.997 C
275.3333 281.997 L
f
275.1667 182.503 m
229.5 182.503 L
229.5 167.8364 L
279.5 167.8364 L
269.1667 178.5197 L
268.3046 139.0555 255.7126 127.1435 216.6167 124.003 C
218.1667 109.3364 L
261.5225 112.8191 281.5438 128.9316 284.8956 169.0986 C
275.1667 182.503 L
f
U
275 83 m
229 83 L
229 66 L
279 66 L
267 78.4 L
266.0158 39.5472 254.655 29.089 216.2 26 C
218 9 L
262.0184 12.5359 281.9429 28.3891 285.4342 68.8698 C
275 83 L
f
u
321.5 592.3303 m
319.8091 575.3587 314.173 562.062 304.5 550.3303 C
309.0834 547.2636 L
319.5126 560.0268 325.1909 573.8374 327.0334 592.3303 C
321.5 592.3303 L
f
321 492.6606 m
319.3172 475.7704 313.7204 462.4498 304 450.6606 C
310.7668 446.3272 L
321.3796 459.4275 327.1682 473.6042 329.0668 492.6606 C
321 492.6606 L
f
320.5 393 m
318.8253 376.1912 313.2678 362.8467 303.5 351 C
312.45 345.4 L
323.2465 358.8374 329.1453 373.3802 331.1 393 C
320.5 393 L
f
320 293.3303 m
318.3334 276.6029 312.8152 263.2346 303 251.3303 C
314.1334 244.4636 L
325.1135 258.2382 331.1226 273.147 333.1334 293.3303 C
320 293.3303 L
f
319.5 193.6697 m
317.8416 177.0237 312.3627 163.6315 302.5 151.6697 C
315.8166 143.5364 L
326.9804 157.6481 333.0996 172.923 335.1666 193.6697 C
319.5 193.6697 L
f
U
u
481.3333 582.1636 m
413.5 582.1636 L
413.5 576.8302 L
475.6666 576.8302 L
475.6666 521.8303 L
413.5 521.8303 L
413.5 516.4969 L
481.3334 516.4969 L
481.3334 580.3302 L
481.3333 582.1636 L
f
481.6667 482.3273 m
413 482.3273 L
413 474.6604 L
473.3332 474.6604 L
473.3332 423.6607 L
413 423.6607 L
413 415.9939 L
481.6667 415.9939 L
481.6667 478.6605 L
481.6667 482.3273 L
f
481 382.5 m
411.5 382.5 L
411.5 372.5 L
470 372.5 L
470 325.5 L
411.5 325.5 L
411.5 315.5 L
481 315.5 L
481 377 L
481 382.5 L
f
481.3333 282.6636 m
411 282.6636 L
411 270.3302 L
467.6666 270.3302 L
467.6666 227.3303 L
411 227.3303 L
411 214.9969 L
481.3334 214.9969 L
481.3334 275.3302 L
481.3333 282.6636 L
f
474.9 182.8364 m
411.5 182.8364 L
411.5 168.1698 L
466.3334 168.1698 L
466.3334 129.1697 L
411.5 129.1697 L
411.5 114.5031 L
482.6667 114.5031 L
482.6667 172.1698 L
474.9 182.8364 L
f
U
475 83 m
411 83 L
411 66 L
464 66 L
464 31 L
411 31 L
411 14 L
483 14 L
483 72 L
475 83 L
f
u
35.6833 592.3303 m
35.6833 543.1554 29.6738 528.5924 11 514.6803 C
14.5834 510.6636 L
34.6333 525.6009 41.1834 540.6992 41.1834 592.3303 C
35.6833 592.3303 L
f
34.3666 492.6606 m
34.3666 444.16 28.4778 429.8267 9.9999 416.0606 C
15.2667 410.3272 L
35.8168 425.6372 42.3667 440.9344 42.3667 492.6606 C
34.3666 492.6606 L
f
34.05 393 m
34.05 345.1737 28.2818 331.07 10 317.45 C
16.95 310 L
38.0002 325.6825 44.55 341.1788 44.55 393 C
34.05 393 L
f
31.7333 293.3303 m
31.7333 246.1783 26.0858 232.3043 8 218.8303 C
16.6334 209.6636 L
38.1837 225.7188 44.7334 241.414 44.7334 293.3303 C
31.7333 293.3303 L
f
30.4167 193.6697 m
30.4167 147.192 24.8898 133.5477 7 120.2196 C
17.3166 109.3364 L
39.3671 125.7642 45.9166 141.6584 45.9166 193.6697 C
30.4167 193.6697 L
f
U
18 9 m
40.5506 25.8004 47.1 41.8937 47.1 94 C
29.1 94 L
29.1 48.1966 23.6938 34.782 6 21.6 C
18 9 L
f
u
84.1667 572.997 m
13 572.997 L
13 567.6636 L
78.4999 567.6636 L
78.4999 555.9969 l
78.4999 515.9985 78.4999 515.997 54.3334 515.997 C
53 515.997 L
53 510.6636 L
83.4278 510.6636 84.1667 511.4011 84.1667 555.9969 C
84.1667 570.9969 L
84.1667 572.997 L
f
84.3333 474.994 m
11.9999 474.994 L
11.9999 467.3272 L
75.9998 467.3272 L
75.9998 455.9939 l
75.9998 417.997 75.9998 417.994 54.6667 417.994 C
51.9999 417.994 L
51.9999 410.3272 L
83.3556 410.3272 84.3333 411.2941 84.3333 455.9939 C
84.3333 470.9938 L
84.3333 474.994 L
f
85.5 376 m
12 376 L
12 366 L
74.5 366 L
74.5 356 l
74.5 320.0044 74.5 320 56 320 C
52 320 L
52 310 L
84.2834 310 85.5 311.1962 85.5 356 C
85.5 369.6 L
85.5 376 L
f
84.6667 276.997 m
10 276.997 L
10 264.6636 L
70.9999 264.6636 L
70.9999 255.9969 l
70.9999 222.0029 70.9999 221.997 55.3334 221.997 C
50 221.997 L
50 209.6636 L
83.2111 209.6636 84.6667 211.0891 84.6667 255.9969 C
84.6667 268.9969 L
84.6667 276.997 L
f
77.4333 178.003 m
9 178.003 L
9 163.3364 L
68.5001 163.3364 L
68.5001 156.003 l
68.5001 124.0103 68.5001 124.003 55.6667 124.003 C
49 124.003 L
49 109.3364 L
83.1389 109.3364 84.8333 110.9912 84.8333 156.003 C
84.8333 167.6031 L
77.4333 178.003 L
f
U
76 79 m
8 79 L
8 62 L
66 62 L
66 56 l
66 26.0088 66 26 56 26 C
48 26 L
48 9 L
83.0667 9 85 10.8842 85 56 c
85 67 L
76 79 L
f
u
184.5 573.6636 m
112.5 573.6636 L
112.5 568.3302 L
184.5 568.3302 L
184.5 573.1636 L
184.5 573.6636 L
f
185 474.3273 m
113 474.3273 L
113 466.6605 L
185 466.6605 L
185 473.3273 L
185 474.3273 L
f
185.5 375 m
112.5 375 L
112.5 365 L
185.5 365 L
185.5 373.5 L
185.5 375 L
f
184 275.6636 m
112 275.6636 L
112 263.3302 L
184 263.3302 L
184 273.6636 L
184 275.6636 L
f
180.5 176.3364 m
110.5 176.3364 L
110.5 161.6698 L
182.5 161.6698 L
182.5 173.5364 L
180.5 176.3364 L
f
U
179 77 m
110 77 L
110 60 L
182 60 L
182 74 L
179 77 L
f
u
188.8333 535.3302 m
188.8333 540.6636 L
108.5 540.6636 L
108.5 535.3302 L
188.8333 535.3302 L
f
189.6667 434.6605 m
189.6667 442.3273 L
109 442.3273 L
109 434.6605 L
189.6667 434.6605 L
f
189.5 333 m
189.5 343 L
108.5 343 L
108.5 333 L
189.5 333 L
f
189.3333 231.3302 m
189.3333 243.6636 L
108 243.6636 L
108 231.3302 L
189.3333 231.3302 L
f
188.1667 129.6698 m
188.1667 144.3364 L
106.5 144.3364 L
106.5 129.6698 L
188.1667 129.6698 L
f
U
188 28 m
188 45 L
106 45 L
106 28 L
188 28 L
f
u
155.2956 507.6636 m
147.8878 592.3303 L
142.0377 592.3303 L
149.4455 507.6636 L
155.2956 507.6636 L
f
157.4164 407.3272 m
149.9503 492.6606 L
141.2502 492.6606 L
148.7163 407.3272 L
157.4164 407.3272 L
f
158.5372 307 m
151.0128 393 L
139.4628 393 L
146.9872 307 L
158.5372 307 L
f
159.6581 206.6636 m
152.0753 293.3303 L
137.6752 293.3303 L
145.258 206.6636 L
159.6581 206.6636 L
f
159.7788 106.3364 m
152.1378 193.6697 L
134.8878 193.6697 L
142.5289 106.3364 L
159.7788 106.3364 L
f
U
160.8997 6 m
153.2003 94 L
133.1003 94 L
140.7997 6 L
160.8997 6 L
f
u
324.3334 510.6636 m
355.6319 515.9533 364.8334 525.9714 364.8334 567.4969 C
389.5 567.4969 L
389.5 572.3303 L
389.5 572.8303 L
319 572.8303 L
319 567.4969 L
359.1666 567.4969 L
359.1666 529.2643 352.2922 520.8527 323.1667 515.9303 C
324.3334 510.6636 L
f
324.6667 410.3272 m
356.4643 415.7012 365.6667 425.7123 365.6667 466.9938 C
387.9999 466.9938 L
387.9999 473.6606 L
387.9999 474.6606 L
319 474.6606 L
319 466.9938 L
357.3332 466.9938 L
357.3332 429.9073 351.422 422.6754 322.9333 417.8607 C
324.6667 410.3272 L
f
325 310 m
357.2966 315.4583 366.5 325.4623 366.5 365.5 C
386.5 365.5 L
386.5 374 L
386.5 375.5 L
319 375.5 L
319 365.5 L
355.5 365.5 L
355.5 330.5598 350.5519 324.5071 322.7 319.8 C
325 310 L
f
325.3334 209.6636 m
358.129 215.2063 367.3334 225.2032 367.3334 263.9969 C
386 263.9969 L
386 274.3303 L
386 276.3303 L
319 276.3303 L
319 263.9969 L
353.6666 263.9969 L
353.6666 231.2033 349.6816 226.3298 322.4667 221.7303 C
325.3334 209.6636 L
f
324.6667 109.3364 m
357.9613 114.9634 367.1667 124.9532 367.1667 162.5031 C
382.5001 162.5031 L
382.5001 172.9697 L
379.5001 177.1697 L
319 177.1697 L
319 162.5031 L
350.8334 162.5031 L
350.8334 131.8558 347.8115 128.1615 321.2333 123.6696 C
324.6667 109.3364 L
f
U
u
96.3334 581.6636 m
92.4877 587.1298 88.8021 592.1532 84.8333 597.3303 C
81.0333 594.6136 L
84.927 589.5282 88.4152 584.7677 92.4166 579.0802 C
96.3334 581.6636 L
f
96.6667 478.8272 m
92.7402 484.4127 88.7292 489.8689 84.6667 495.1606 C
79.4666 491.5272 L
83.4791 486.3063 87.2887 481.1135 91.3333 475.3605 C
96.6667 478.8272 L
f
97 380 m
92.9926 385.7047 88.6562 391.5937 84.5 397 C
77.9 392.45 L
82.0312 387.0937 86.1623 381.4686 90.25 375.65 C
97 380 L
f
97.3334 279.6636 m
93.2451 285.4876 88.5833 291.8095 84.3333 297.3303 C
76.3333 291.8636 L
80.5833 286.3719 85.0358 280.3145 89.1666 274.4302 C
97.3334 279.6636 L
f
97.6667 179.3364 m
93.4975 185.2796 88.5104 192.0343 84.1667 197.6697 C
74.7667 191.2864 L
79.1355 185.6593 83.9094 179.1696 88.0834 173.2197 C
97.6667 179.3364 L
f
U
98 79 m
93.75 85.0625 88.4375 92.25 84 98 C
73.2 90.7 L
77.6875 84.9375 82.7829 78.0155 87 72 C
98 79 L
f
u
80.6667 577.6636 m
76.821 583.1298 73.1354 588.1532 69.1667 593.3303 C
65.3666 590.6136 L
69.2603 585.5282 72.7485 580.7677 76.75 575.0802 C
80.6667 577.6636 L
f
80.3333 474.8272 m
76.4068 480.4127 72.3958 485.8689 68.3333 491.1606 C
63.1332 487.5272 L
67.1457 482.3063 70.9553 477.1135 74.9999 471.3605 C
80.3333 474.8272 L
f
80 376 m
75.9926 381.7047 71.6562 387.5937 67.5 393 C
60.9 388.45 L
65.0312 383.0937 69.1623 377.4686 73.25 371.65 C
80 376 L
f
79.6667 275.6636 m
75.5784 281.4876 70.9166 287.8095 66.6667 293.3303 C
58.6666 287.8636 L
62.9166 282.3719 67.3691 276.3145 71.5 270.4302 C
79.6667 275.6636 L
f
79.3334 175.3364 m
75.1642 181.2796 70.1771 188.0343 65.8334 193.6697 C
56.4334 187.2864 L
60.8022 181.6593 65.5761 175.1696 69.7501 169.2197 C
79.3334 175.3364 L
f
U
79 75 m
74.75 81.0625 69.4375 88.25 65 94 C
54.2 86.7 L
58.6875 80.9375 63.7829 74.0155 68 68 C
79 75 L
f
u
196.5 582.8303 m
192.6543 588.2965 188.9687 593.3199 185 598.497 C
181.1999 595.7803 L
185.0937 590.6949 188.5819 585.9344 192.5833 580.2469 C
196.5 582.8303 L
f
196 478.8606 m
192.0735 484.4461 188.0625 489.9023 184 495.194 C
178.7999 491.5606 L
182.8124 486.3397 186.622 481.1469 190.6666 475.3938 C
196 478.8606 L
f
196.5 379.7 m
192.4926 385.4047 188.1562 391.2937 184 396.7 C
177.4 392.15 L
181.5312 386.7937 185.6623 381.1687 189.75 375.35 C
196.5 379.7 L
f
197 280.3303 m
192.9117 286.1543 188.25 292.4761 184 297.997 C
176 292.5303 L
180.25 287.0386 184.7025 280.9812 188.8333 275.0969 C
197 280.3303 L
f
198.5 180.1697 m
194.3309 186.113 189.3437 192.8676 185 198.503 C
175.6 192.1197 L
179.9688 186.4926 184.7427 180.0029 188.9167 174.0531 C
198.5 180.1697 L
f
U
199 80 m
194.75 86.0625 189.4375 93.25 185 99 C
174.2 91.7 L
178.6875 85.9375 183.7829 79.0155 188 73 C
199 80 L
f
u
181.1667 578.4969 m
177.321 583.9632 173.6354 588.9865 169.6667 594.1636 C
165.8666 591.4469 L
169.7604 586.3615 173.2485 581.601 177.25 575.9136 C
181.1667 578.4969 L
f
180.3333 474.1939 m
176.4068 479.7794 172.3958 485.2356 168.3333 490.5273 C
163.1332 486.8939 L
167.1457 481.673 170.9553 476.4802 174.9999 470.7272 C
180.3333 474.1939 L
f
180.5 374.7 m
176.4926 380.4047 172.1562 386.2937 168 391.7 C
161.4 387.15 L
165.5312 381.7937 169.6623 376.1687 173.75 370.35 C
180.5 374.7 L
f
180.6667 274.9969 m
176.5784 280.8209 171.9167 287.1428 167.6667 292.6636 C
159.6666 287.1969 L
163.9166 281.7052 168.3691 275.6478 172.5 269.7636 C
180.6667 274.9969 L
f
181.8333 174.5031 m
177.6642 180.4463 172.6771 187.201 168.3334 192.8364 C
158.9334 186.4531 L
163.3021 180.826 168.0761 174.3363 172.25 168.3864 C
181.8333 174.5031 L
f
U
182 74 m
177.75 80.0625 172.4375 87.25 168 93 C
157.2 85.7 L
161.6875 79.9375 166.7829 73.0155 171 67 C
182 74 L
f
u
294.8334 581.6636 m
290.9877 587.1298 287.3021 592.1532 283.3334 597.3303 C
279.5333 594.6136 L
283.427 589.5282 286.9152 584.7677 290.9167 579.0802 C
294.8334 581.6636 L
f
295.6667 481.3272 m
291.7402 486.9127 287.7292 492.3689 283.6667 497.6606 C
278.4666 494.0272 L
282.4791 488.8063 286.2887 483.6135 290.3333 477.8605 C
295.6667 481.3272 L
f
296.5 381 m
292.4926 386.7047 288.1562 392.5937 284 398 C
277.4 393.45 L
281.5312 388.0937 285.6623 382.4686 289.75 376.65 C
296.5 381 L
f
298.3334 280.6636 m
294.2451 286.4876 289.5833 292.8095 285.3334 298.3303 C
277.3333 292.8636 L
281.5833 287.3719 286.0358 281.3145 290.1667 275.4302 C
298.3334 280.6636 L
f
298.1667 180.3364 m
293.9975 186.2796 289.0104 193.0343 284.6667 198.6697 C
275.2667 192.2864 L
279.6354 186.6593 284.4094 180.1696 288.5834 174.2197 C
298.1667 180.3364 L
f
U
299 80 m
294.75 86.0625 289.4375 93.25 285 99 C
274.2 91.7 L
278.6875 85.9375 283.7829 79.0155 288 73 C
299 80 L
f
u
278.3334 577.6636 m
274.4877 583.1298 270.8021 588.1532 266.8333 593.3303 C
263.0333 590.6136 L
266.6866 585.8434 270.0089 581.322 273.6714 576.1361 C
278.3334 577.6636 L
f
278.6667 477.3272 m
274.7402 482.9127 270.7292 488.3689 266.6667 493.6606 C
261.4666 490.0272 L
265.2867 485.0585 268.9636 480.057 272.7371 474.7052 C
278.6667 477.3272 L
f
279 377 m
274.9926 382.7047 270.6562 388.5937 266.5 394 C
259.9 389.45 L
263.887 384.2829 267.9185 378.8012 271.8029 373.2835 C
279 377 L
f
280.3334 276.6636 m
276.2451 282.4876 271.5833 288.8095 267.3333 294.3303 C
259.3333 288.8636 L
263.4871 283.498 267.8733 277.5362 271.8685 271.8526 C
280.3334 276.6636 L
f
279.6667 176.3364 m
275.4975 182.2796 270.5104 189.0343 266.1667 194.6697 C
256.7667 188.2864 L
261.0874 182.7224 265.8281 176.2805 269.9343 170.4309 C
279.6667 176.3364 L
f
U
280 76 m
275.75 82.0625 270.4375 89.25 266 95 C
255.2 87.7 L
259.6875 81.9375 264.7829 75.0155 269 69 C
280 76 L
f
u
494.8334 581.6636 m
490.9877 587.1298 487.3021 592.1532 483.3334 597.3303 C
479.5333 594.6136 L
483.427 589.5282 486.9152 584.7677 490.9167 579.0802 C
494.8334 581.6636 L
f
495.6667 481.3272 m
491.7402 486.9127 487.7292 492.3689 483.6667 497.6606 C
478.4666 494.0272 L
482.4791 488.8063 486.2887 483.6135 490.3333 477.8605 C
495.6667 481.3272 L
f
496.5 381 m
492.4926 386.7047 488.1562 392.5937 484 398 C
477.4 393.45 L
481.5312 388.0937 485.6623 382.4686 489.75 376.65 C
496.5 381 L
f
498.3334 280.6636 m
494.2451 286.4876 489.5833 292.8095 485.3334 298.3303 C
477.3333 292.8636 L
481.5833 287.3719 486.0358 281.3145 490.1667 275.4302 C
498.3334 280.6636 L
f
498.1667 180.3364 m
493.9975 186.2796 489.0104 193.0343 484.6667 198.6697 C
475.2667 192.2864 L
479.6354 186.6593 484.4094 180.1696 488.5834 174.2197 C
498.1667 180.3364 L
f
U
499 80 m
494.75 86.0625 489.4375 93.25 485 99 C
474.2 91.7 L
478.6875 85.9375 483.7829 79.0155 488 73 C
499 80 L
f
u
476.5438 580.1877 m
473.3876 584.6255 470.177 588.9698 466.8333 593.3303 C
463.0333 590.6136 L
466.3289 586.3124 469.3934 582.1578 472.5988 577.6462 C
476.5438 580.1877 L
f
477.2351 479.3464 m
473.8601 484.1092 470.2291 489.0222 466.6667 493.6606 C
461.4666 490.0272 L
465.0006 485.4337 468.4713 480.7256 471.879 475.9133 C
477.2351 479.3464 L
f
477.9263 378.5144 m
474.3325 383.6021 470.2812 389.0837 466.5 394 C
459.9 389.45 L
463.6724 384.5643 467.5493 379.3027 471.1593 374.1896 C
477.9263 378.5144 L
f
479.6175 277.6732 m
475.805 283.0859 471.3333 289.1361 467.3333 294.3303 C
459.3333 288.8636 L
463.3441 283.6856 467.6271 277.8706 471.4395 272.4566 C
479.6175 277.6732 L
f
479.3087 176.8412 m
475.2775 182.5788 470.3854 189.1976 466.1667 194.6697 C
456.7667 188.2864 L
461.0158 182.8162 465.705 176.4476 469.7198 170.733 C
479.3087 176.8412 L
f
U
480 76 m
475.75 82.0625 470.4375 89.25 466 95 C
455.2 87.7 L
459.6875 81.9375 464.7829 75.0155 469 69 C
480 76 L
f
u
396.6667 581.8303 m
392.821 587.2965 389.1354 592.3199 385.1667 597.497 C
381.3666 594.7803 L
385.2604 589.6949 388.7485 584.9344 392.75 579.2469 C
396.6667 581.8303 L
f
397.3334 478.8606 m
393.4068 484.4461 389.3959 489.9023 385.3333 495.194 C
380.1333 491.5606 L
384.1458 486.3397 387.9554 481.1469 392 475.3938 C
397.3334 478.8606 L
f
398 379.9 m
393.9926 385.6047 389.6562 391.4937 385.5 396.9 C
378.9 392.35 L
383.0312 386.9937 387.1623 381.3686 391.25 375.55 C
398 379.9 L
f
398.6667 280.3303 m
394.5784 286.1543 389.9167 292.4761 385.6667 297.997 C
377.6666 292.5303 L
381.9166 287.0386 386.3691 280.9812 390.5 275.0969 C
398.6667 280.3303 L
f
398.3333 180.1697 m
394.1642 186.113 389.1771 192.8676 384.8333 198.503 C
375.4334 192.1197 L
379.8021 186.4926 384.576 180.0029 388.75 174.0531 C
398.3333 180.1697 L
f
U
u
381.1667 577.6636 m
377.321 583.1298 373.6354 588.1532 369.6667 593.3303 C
365.8666 590.6136 L
369.7604 585.5282 373.2485 580.7677 377.25 575.0802 C
381.1667 577.6636 L
f
381.3333 474.5272 m
377.4068 480.1127 373.3958 485.5689 369.3333 490.8606 C
364.1332 487.2272 L
368.1457 482.0064 371.9553 476.8135 375.9999 471.0605 C
381.3333 474.5272 L
f
381.5 375.4 m
377.4926 381.1047 373.1562 386.9937 369 392.4 C
362.4 387.85 L
366.5312 382.4937 370.6623 376.8686 374.75 371.05 C
381.5 375.4 L
f
381.6667 275.6636 m
377.5784 281.4876 372.9167 287.8095 368.6667 293.3303 C
360.6666 287.8636 L
364.9166 282.3719 369.3691 276.3145 373.5 270.4302 C
381.6667 275.6636 L
f
380.8333 175.3364 m
376.6642 181.2796 371.6771 188.0343 367.3334 193.6697 C
357.9334 187.2864 L
362.3021 181.6593 367.0761 175.1696 371.25 169.2197 C
380.8333 175.3364 L
f
U
317.5 42.6 m
328.8475 57.0488 335.0769 72.6898 337.2 94 C
319 94 L
317.3497 77.4354 311.9101 64.0193 302 52 C
317.5 42.6 L
f
325 9 m
358.7937 14.7114 368 24.6941 368 61 C
381 61 L
381 75 L
379 78 L
319 78 L
319 61 L
349 61 L
349 32.4992 346.9413 29.9842 321 25.6 C
325 9 L
f
399 80 m
394.75 86.0625 389.4375 93.25 385 99 C
374.2 91.7 L
378.6875 85.9375 383.7829 79.0155 388 73 C
399 80 L
f
381 75 m
376.75 81.0625 371.4375 88.25 367 94 C
356.2 86.7 L
360.6875 80.9375 365.7829 74.0155 370 68 C
381 75 L
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
