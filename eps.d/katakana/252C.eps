%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (coz) (underforest)
%%Title: (252C.eps)
%%CreationDate: (9/24/04) (9:37 AM)
%%BoundingBox: 0 0 500 700
%%HiResBoundingBox: 0 0 500 700
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Black&White
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 8.5 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 244.5 356.5 244.5 356.5
%AI3_TileBox: -41.5 -19.5 534.5 742.5
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 592 840
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: -331.5 752.5 -1.5 794 556 25 0 0 3 40 0 0
%AI5_OpenViewLayers: 5
%%PageOrigin:-41.5 -19.5
%%AI3_PaperRect:-10 808 585 -34
%%AI3_Margin:10 -43 -9 34
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 0 1 1 0 0 3 79 79 255 Lb
(glyphs) Ln
0 A
u
800 Ar
0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
0 XR
100 600 m
100 700 L
0 700 L
0 600 L
100 600 L
n
400 600 m
400 700 L
500 700 L
500 600 L
400 600 L
n
100 600 m
100 700 L
200 700 L
200 600 L
100 600 L
n
200 600 m
200 700 L
300 700 L
300 600 L
200 600 L
n
300 600 m
300 700 L
400 700 L
400 600 L
300 600 L
n
0 500 m
0 600 L
100 600 L
100 500 L
0 500 L
n
400 500 m
400 600 L
500 600 L
500 500 L
400 500 L
n
100 500 m
100 600 L
200 600 L
200 500 L
100 500 L
n
200 500 m
200 600 L
300 600 L
300 500 L
200 500 L
n
300 500 m
300 600 L
400 600 L
400 500 L
300 500 L
n
0 400 m
0 500 L
100 500 L
100 400 L
0 400 L
n
400 400 m
400 500 L
500 500 L
500 400 L
400 400 L
n
100 400 m
100 500 L
200 500 L
200 400 L
100 400 L
n
200 400 m
200 500 L
300 500 L
300 400 L
200 400 L
n
300 400 m
300 500 L
400 500 L
400 400 L
300 400 L
n
0 300 m
0 400 L
100 400 L
100 300 L
0 300 L
n
400 300 m
400 400 L
500 400 L
500 300 L
400 300 L
n
100 300 m
100 400 L
200 400 L
200 300 L
100 300 L
n
200 300 m
200 400 L
300 400 L
300 300 L
200 300 L
n
300 300 m
300 400 L
400 400 L
400 300 L
300 300 L
n
0 200 m
0 300 L
100 300 L
100 200 L
0 200 L
n
400 200 m
400 300 L
500 300 L
500 200 L
400 200 L
n
100 200 m
100 300 L
200 300 L
200 200 L
100 200 L
n
200 200 m
200 300 L
300 300 L
300 200 L
200 200 L
n
300 200 m
300 300 L
400 300 L
400 200 L
300 200 L
n
0 100 m
0 200 L
100 200 L
100 100 L
0 100 L
n
400 100 m
400 200 L
500 200 L
500 100 L
400 100 L
n
100 100 m
100 200 L
200 200 L
200 100 L
100 100 L
n
200 100 m
200 200 L
300 200 L
300 100 L
200 100 L
n
300 100 m
300 200 L
400 200 L
400 100 L
300 100 L
n
0 0 m
0 100 L
100 100 L
100 0 L
0 0 L
n
400 0 m
400 100 L
500 100 L
500 0 L
400 0 L
n
100 0 m
100 100 L
200 100 L
200 0 L
100 0 L
n
200 0 m
200 100 L
300 100 L
300 0 L
200 0 L
n
300 0 m
300 100 L
400 100 L
400 0 L
300 0 L
n
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
u
U
0 O
0 g
1 D
212.1 646.9 m
225.5635 659.7781 232.2 672.9336 234 691 C
231 691 L
229.3134 674.0718 222.7961 661.2397 210 649 C
212.1 646.9 L
f
278 677.1 m
277.7924 634.7392 259.7068 616.4547 216.7 613 C
217 610 L
261.0391 613.5375 281 632.8747 281 678 C
230 678 L
230 675 L
280 675 L
278 677.1 L
f
322 691 m
320.301 673.947 314.6256 660.6742 305 649 C
307.4 647.2 L
317.6455 659.6261 323.2137 673.0706 325 691 C
322 691 L
f
361 671 m
361 628.5342 352.1876 617.625 323.4 613 C
324 610 L
354.2994 615.1208 364 626.6489 364 671 C
391 671 L
391 674 L
320 674 L
320 671 L
361 671 L
f
479 682 m
411 682 L
411 679 L
476 679 L
476 619 L
411 619 L
411 616 L
479 616 L
479 682 L
f
36 692 m
36 642.1508 29.8699 627.3581 11 613.3 C
12.9 611 L
32.4498 625.5647 39 640.4639 39 692 C
36 692 L
f
80 656 m
80 614 80 614 53 614 C
53 614 L
53 611 L
82.5 611 83 611.5082 83 656 C
83 674 L
13 674 L
13 671 L
80 671 L
80 656 l
f
185 669 m
185 672 L
113 672 L
113 669 L
185 669 L
f
189 637 m
189 640 L
109 640 L
109 637 L
189 637 L
f
155.1747 607 m
147.8253 691 L
144.8253 691 L
152.1747 607 L
155.1747 607 L
f
96 682 m
92.75 687.25 89.875 691.25 86 696 C
83.6 694.2 L
87.4897 689.4319 90.2563 685.5783 93.4 680.5 C
96 682 L
f
84.6 678.7 m
81.5234 683.6148 78.703 687.4608 75 692 C
72.6 690.2 L
76.2965 685.6688 79.0445 681.8155 82 677.1 C
84.6 678.7 L
f
196 682 m
192.75 687.25 189.875 691.25 186 696 C
183.6 694.2 L
187.4897 689.4319 190.2563 685.5783 193.4 680.5 C
196 682 L
f
184.6 678.7 m
181.5234 683.6148 178.703 687.4608 175 692 C
172.6 690.2 L
176.2965 685.6688 179.0445 681.8155 182 677.1 C
184.6 678.7 L
f
298 684 m
294.75 689.25 291.875 693.25 288 698 C
285.6 696.2 L
289.4897 691.4319 292.2563 687.5783 295.4 682.5 C
298 684 L
f
286.6 680.7 m
283.5234 685.6148 280.703 689.4608 277 694 C
274.6 692.2 L
278.2965 687.6688 281.0445 683.8155 284 679.1 C
286.6 680.7 L
f
396 683 m
392.75 688.25 389.875 692.25 386 697 C
383.6 695.2 L
387.4897 690.4319 390.2563 686.5783 393.4 681.5 C
396 683 L
f
384.6 679.7 m
381.5234 684.6148 378.703 688.4608 375 693 C
372.6 691.2 L
376.2965 686.6688 379.0445 682.8155 382 678.1 C
384.6 679.7 L
f
498 684 m
494.75 689.25 491.875 693.25 488 698 C
485.6 696.2 L
489.4897 691.4319 492.2563 687.5783 495.4 682.5 C
498 684 L
f
486.6 680.7 m
483.5234 685.6148 480.703 689.4608 477 694 C
474.6 692.2 L
478.2965 687.6688 481.0445 683.8155 484 679.1 C
486.6 680.7 L
f
u
212.0833 545.3135 m
225.7947 558.5374 232.6707 572.3018 234.5334 590.9969 C
229 590.9969 L
227.3133 574.0687 220.7961 561.2366 208 548.9969 C
212.0833 545.3135 L
f
214.0667 443.7271 m
228.0259 457.2967 235.1415 471.6699 237.0668 490.9939 C
228.9999 490.9939 L
227.3133 474.0657 220.796 461.2336 207.9999 448.9939 C
214.0667 443.7271 L
f
214.05 342.15 m
228.257 356.0653 235.6121 371.0473 237.6 391 C
227 391 L
225.3134 374.0718 218.7961 361.2397 206 349 C
214.05 342.15 L
f
218.0334 240.5635 m
232.4882 254.8246 240.0828 270.4155 242.1334 290.9969 C
229 290.9969 L
227.3133 274.0687 220.796 261.2366 208 248.9969 C
218.0334 240.5635 L
f
U
u
218.0167 138.9817 m
232.7193 153.5885 240.5535 169.7883 242.6667 190.9984 C
227 190.9984 L
225.3134 174.0702 218.7961 161.2381 206 148.9984 C
218.0167 138.9817 L
f
U
218 37.4 m
232.9505 52.3525 241.0242 69.1611 243.2 91 C
225 91 L
223.3134 74.0718 216.7961 61.2397 204 49 C
218 37.4 L
f
u
275.1666 576.8136 m
274.8302 535.0631 257.892 518.0596 215.6166 514.6636 C
216.1667 509.3302 L
261.0854 512.9385 280.8334 532.301 280.8334 578.3303 C
228.8333 578.3303 L
228.8333 572.9969 L
278.8333 572.9969 L
275.1666 576.8136 L
f
274.3332 476.5272 m
273.868 435.3869 258.0773 419.6645 216.5333 416.3273 C
217.3333 408.6605 L
263.1316 412.3394 282.6667 431.7274 282.6667 478.6606 C
229.6667 478.6606 L
229.6667 470.9938 L
279.6667 470.9938 L
274.3332 476.5272 L
f
271.5 376.25 m
270.906 335.7199 256.2625 321.2784 215.45 318 C
216.5 308 L
263.1777 311.7495 282.5 331.1629 282.5 379 C
228.5 379 L
228.5 369 L
278.5 369 L
271.5 376.25 L
f
272.6666 275.9636 m
271.9438 236.0438 258.4477 222.8833 218.3666 219.6636 C
219.6667 207.3302 L
267.2239 211.1504 286.3334 230.5892 286.3334 279.3303 C
231.3333 279.3303 L
231.3333 266.9969 L
281.3333 266.9969 L
272.6666 275.9636 L
f
U
u
269.8333 175.6818 m
268.9817 136.3723 256.633 124.4927 217.2833 121.3318 C
218.8333 106.6651 L
267.2701 110.5559 286.1667 130.0202 286.1667 179.6651 C
230.1667 179.6651 L
230.1667 164.9984 L
280.1667 164.9984 L
269.8333 175.6818 L
f
U
267 75.4 m
266.0196 36.7007 254.8182 26.1022 216.2 23 C
218 6 L
267.3162 9.9615 286 29.4511 286 80 C
229 80 L
229 63 L
279 63 L
267 75.4 L
f
u
321.5 591.3303 m
319.8091 574.3587 314.173 561.062 304.5 549.3303 C
309.0834 546.2636 L
319.5125 559.0268 325.1909 572.8374 327.0334 591.3303 C
321.5 591.3303 L
f
321 491.6606 m
319.3172 474.7704 313.7204 461.4498 304 449.6606 C
310.7668 445.3271 L
321.3796 458.4275 327.1682 472.6042 329.0668 491.6606 C
321 491.6606 L
f
320.5 392 m
318.8253 375.1912 313.2678 361.8467 303.5 350 C
312.45 344.4 L
323.2465 357.8374 329.1453 372.3802 331.1 392 C
320.5 392 L
f
320 292.3303 m
318.3334 275.6029 312.8152 262.2345 303 250.3303 C
314.1334 243.4636 L
325.1135 257.2381 331.1225 272.147 333.1334 292.3303 C
320 292.3303 L
f
319.5 192.6697 m
317.8416 176.0237 312.3627 162.6315 302.5 150.6697 C
315.8166 142.5364 L
326.9804 156.6481 333.0996 171.923 335.1666 192.6697 C
319.5 192.6697 L
f
U
317.5 41.6 m
328.8475 56.0488 335.0769 71.6898 337.2 93 C
319 93 L
317.3497 76.4354 311.9101 63.0193 302 51 C
317.5 41.6 L
f
u
477.6667 582.3303 m
409.8333 582.3303 L
409.8333 576.9969 L
471.9999 576.9969 L
471.9999 520.6636 L
409.8333 520.6636 L
409.8333 515.3302 L
477.6667 515.3302 L
477.6667 582.3303 L
f
480.3334 482.6606 m
410.6667 482.6606 L
410.6667 474.9938 L
471.9999 474.9938 L
471.9999 422.3273 L
410.6667 422.3273 L
410.6667 414.6605 L
480.3334 414.6605 L
480.3334 482.6606 L
f
u
480.3334 382.9985 m
410.1667 382.9985 L
410.1667 372.9984 L
469.3333 372.9984 L
469.3333 323.9985 L
410.1667 323.9985 L
410.1667 313.9985 L
480.3334 313.9985 L
480.3334 382.9985 L
f
480.3333 283.3318 m
409.6667 283.3318 L
409.6667 270.9984 L
466.6666 270.9984 L
466.6666 225.6652 L
409.6667 225.6652 L
409.6667 213.3318 L
480.3333 213.3318 L
480.3333 283.3318 L
f
U
480.3333 183.6697 m
409.1667 183.6697 L
409.1667 169.0031 L
464.0001 169.0031 L
464.0001 127.3363 L
409.1667 127.3363 L
409.1667 112.6697 L
480.3333 112.6697 L
480.3333 183.6697 L
f
U
483 84 m
410 84 L
410 67 L
464 67 L
464 29 L
410 29 L
410 12 L
483 12 L
483 84 L
f
u
35.0166 592.1636 m
35.0166 542.9887 29.0072 528.4257 10.3333 514.5136 C
13.9167 510.4969 L
33.9666 525.4342 40.5167 540.5325 40.5167 592.1636 C
35.0166 592.1636 L
f
34.0333 492.3272 m
34.0333 443.8266 28.1445 429.4933 9.6666 415.7273 C
14.9334 409.9938 L
35.4835 425.3038 42.0334 440.601 42.0334 492.3272 C
34.0333 492.3272 L
f
33.05 392.5 m
33.05 344.6737 27.2818 330.57 9 316.95 C
15.95 309.5 L
37.0002 325.1825 43.55 340.6788 43.55 392.5 C
33.05 392.5 L
f
32.0666 292.6636 m
32.0666 245.5116 26.4191 231.6377 8.3333 218.1636 C
16.9667 208.9969 L
38.517 225.0521 45.0667 240.7474 45.0667 292.6636 C
32.0666 292.6636 L
f
31.0833 192.8364 m
31.0833 146.3586 25.5565 132.7144 7.6667 119.3863 C
17.9833 108.503 L
40.0337 124.9308 46.5833 140.8251 46.5833 192.8364 C
31.0833 192.8364 L
f
U
19 8 m
41.5506 24.8004 48.1 40.8937 48.1 93 C
30.1 93 L
30.1 47.1966 24.6938 33.782 7 20.6 C
19 8 L
f
u
77.8334 555.8348 m
77.8334 515.8363 77.8334 515.8348 53.6667 515.8348 C
52.3334 515.8348 L
52.3334 510.5015 L
82.7611 510.5015 83.5 511.239 83.5 555.8348 C
83.5 573.8348 L
12.1667 573.8348 L
12.1667 568.5015 L
77.8334 568.5015 L
77.8334 555.8348 l
f
75.6666 455.6651 m
75.6666 417.6681 75.6666 417.6651 54.3334 417.6651 C
51.6667 417.6651 L
51.6667 409.9984 L
83.0222 409.9984 84 410.9653 84 455.6651 C
84 473.6651 L
11.3333 473.6651 L
11.3333 465.9984 L
75.6666 465.9984 L
75.6666 455.6651 l
f
U
u
73.5 355.5 m
73.5 319.5044 73.5 319.5 55 319.5 C
51 319.5 L
51 309.5 L
83.2833 309.5 84.5 310.6962 84.5 355.5 C
84.5 373.5 L
10.5 373.5 L
10.5 363.5 L
73.5 363.5 L
73.5 355.5 l
f
71.3333 255.3303 m
71.3333 221.3362 71.3333 221.3303 55.6667 221.3303 C
50.3333 221.3303 L
50.3333 208.9969 L
83.5445 208.9969 85 210.4225 85 255.3303 C
85 274.9969 L
9.6666 274.9969 L
9.6666 262.6635 L
71.3333 262.6635 L
71.3333 255.3303 l
f
69.1667 155.1697 m
69.1667 123.177 69.1667 123.1696 56.3333 123.1696 C
49.6667 123.1696 L
49.6667 108.503 L
83.8056 108.503 85.5 110.1579 85.5 155.1697 C
85.5 176.503 L
8.8334 176.503 L
8.8334 161.8364 L
69.1667 161.8364 L
69.1667 155.1697 l
f
U
67 60 m
67 55 l
67 25.0088 67 25 57 25 C
49 25 L
49 8 L
84.0667 8 86 9.8842 86 55 c
86 77 L
8 77 L
8 60 L
67 60 L
f
u
189 535.3302 m
189 540.6636 L
108.3333 540.6636 L
108.3333 535.3302 L
189 535.3302 L
f
189 433.6605 m
189 441.3273 L
107.6666 441.3273 L
107.6666 433.6605 L
189 433.6605 L
f
189 332 m
189 342 L
107 342 L
107 332 L
189 332 L
f
189 230.3302 m
189 242.6636 L
106.3333 242.6636 L
106.3333 230.3302 L
189 230.3302 L
f
189 128.6697 m
189 143.3363 L
105.6667 143.3363 L
105.6667 128.6697 L
189 128.6697 L
f
U
189 27 m
189 44 L
105 44 L
105 27 L
189 27 L
f
u
156.2956 506.6636 m
148.8878 591.3303 L
143.0377 591.3303 L
150.4455 506.6636 L
156.2956 506.6636 L
f
157.4164 406.3272 m
149.9503 491.6606 L
141.2502 491.6606 L
148.7163 406.3272 L
157.4164 406.3272 L
f
158.5372 306 m
151.0128 392 L
139.4628 392 L
146.9872 306 L
158.5372 306 L
f
159.6581 205.6636 m
152.0753 292.3303 L
137.6752 292.3303 L
145.258 205.6636 L
159.6581 205.6636 L
f
160.7788 105.3364 m
153.1378 192.6697 L
135.8878 192.6697 L
143.5289 105.3364 L
160.7788 105.3364 L
f
U
161.8997 5 m
154.2003 93 L
134.1003 93 L
141.7997 5 L
161.8997 5 L
f
u
359.1666 568.8302 m
359.1666 528.91 351.341 519.4917 323.1667 514.9303 C
324.3333 509.6636 L
355.0763 514.8593 364.8334 526.0379 364.8334 568.8302 C
390.8333 568.8302 L
390.8333 574.1636 L
319.8333 574.1636 L
319.8333 568.8302 L
359.1666 568.8302 L
f
U
u
357.3332 466.6604 m
357.3332 429.2857 350.4944 421.3585 322.9333 416.8607 C
324.6667 409.3272 L
355.8531 414.5979 365.6667 425.427 365.6667 466.6604 C
390.6667 466.6604 L
390.6667 474.3273 L
319.6667 474.3273 L
319.6667 466.6604 L
357.3332 466.6604 L
f
355.5 366 m
355.5 329.6704 349.6478 323.2342 322.7 318.8 C
325 309 L
356.6299 314.3457 366.5 324.825 366.5 366 C
390.5 366 L
390.5 376 L
319.5 376 L
319.5 366 L
355.5 366 L
f
353.6666 263.3302 m
353.6666 230.0463 348.8012 225.1009 322.4666 220.7303 C
325.3333 208.6636 L
357.4067 214.0842 367.3334 224.2142 367.3334 263.3302 C
390.3333 263.3302 L
390.3333 275.6636 L
319.3333 275.6636 L
319.3333 263.3302 L
353.6666 263.3302 L
f
351.8334 162.6697 m
351.8334 130.4309 347.9546 126.9766 322.2333 122.6696 C
325.6667 108.3364 L
358.1834 113.832 368.1666 123.6121 368.1666 162.6697 C
390.1667 162.6697 L
390.1667 177.3363 L
319.1667 177.3363 L
319.1667 162.6697 L
351.8334 162.6697 L
f
U
326 8 m
358.9603 13.5706 369 23.0011 369 61 C
390 61 L
390 78 L
319 78 L
319 61 L
350 61 L
350 30.8066 347.108 28.8434 322 24.6 C
326 8 L
f
u
96.6667 582.1682 m
93.4175 587.5307 90.4837 591.7926 86.6667 596.6682 C
82.9667 594.2348 L
86.748 589.419 89.6159 585.2508 92.7667 580.0515 C
96.6667 582.1682 L
f
97.3334 482.3318 m
94.085 487.8068 91.0925 492.3307 87.3334 497.3318 C
82.3333 494.2651 L
86.0063 489.4016 88.9754 484.9187 92.1333 479.5985 C
97.3334 482.3318 L
f
U
u
98 382.5 m
94.7525 388.0876 91.7012 392.8733 88 398 C
81.7 394.3 L
85.2647 389.3888 88.335 384.5912 91.5 379.15 C
98 382.5 L
f
98 282 m
94.7533 287.7 91.6433 292.7477 88 298 C
80.3999 293.6666 L
83.8563 288.7077 87.0278 283.5955 90.1999 278.0333 C
98 282 L
f
97.6663 180.6029 m
94.4205 186.4155 91.2517 191.7251 87.6663 197.1029 C
78.7663 192.1363 L
82.1144 187.1297 85.3872 181.7028 88.5664 176.0196 C
97.6663 180.6029 L
f
U
98 81 m
94.755 86.9251 91.5275 92.4966 88 98 C
77.8 92.4 L
81.0397 87.3457 84.4137 81.6042 87.6 75.8 C
98 81 L
f
u
84.65 578.7082 m
81.5561 583.7716 78.6786 587.8866 75.0167 592.5682 C
71.3507 590.1535 L
74.9603 585.552 77.8013 581.4031 80.7847 576.5255 C
84.65 578.7082 L
f
84.7 478.7118 m
81.5889 483.9239 78.6543 488.3079 75.0333 493.1318 C
70.1013 490.1025 L
73.624 485.4306 76.5581 480.9862 79.5693 475.9465 C
84.7 478.7118 L
f
U
u
84.75 378.7201 m
81.6216 384.0807 78.6299 388.7337 75.05 393.7 C
68.852 390.0561 L
72.2877 385.3138 75.315 380.5738 78.354 375.3721 C
84.75 378.7201 L
f
84.1333 278.06 m
80.9877 283.5693 77.9389 288.4914 74.4 293.6 C
66.9359 289.3414 L
70.2847 284.5287 73.4051 279.4933 76.4719 274.1293 C
84.1333 278.06 L
f
83.183 176.503 m
80.0202 182.161 76.9142 187.352 73.4163 192.6029 C
64.6864 187.7297 L
67.9483 182.8467 71.1617 177.5157 74.2564 171.9897 C
83.183 176.503 L
f
U
82.9 76.7401 m
79.7199 82.5467 76.5569 88.0067 73.1 93.4 C
63.104 87.9121 L
66.279 82.9588 69.5855 77.3322 72.708 71.6441 C
82.9 76.7401 L
f
u
196.4 581.9015 m
193.1508 587.264 190.2171 591.526 186.4 596.4015 C
182.7 593.9682 L
186.4814 589.1524 189.3492 584.9841 192.5 579.7849 C
196.4 581.9015 L
f
196.8 481.8031 m
193.5516 487.2781 190.5592 491.8019 186.8 496.803 C
181.8 493.7364 L
185.473 488.8729 188.4421 484.39 191.6 479.0697 C
196.8 481.8031 L
f
197.2 381.6969 m
193.9525 387.2845 190.9012 392.0702 187.2 397.1969 C
180.9 393.4969 L
184.4647 388.5857 187.535 383.7882 190.7 378.3469 C
197.2 381.6969 L
f
197.6 281.5985 m
194.3533 287.2985 191.2433 292.3462 187.6 297.5985 C
180 293.2651 L
183.4564 288.3062 186.6279 283.194 189.8 277.6318 C
197.6 281.5985 L
f
U
u
198 181.5 m
194.7541 187.3126 191.5854 192.6222 188 198 C
179.1 193.0333 L
182.448 188.0267 185.7208 182.5999 188.9 176.9167 C
198 181.5 L
f
U
199 81 m
195.755 86.9251 192.5275 92.4966 189 98 C
178.8 92.4 L
182.0397 87.3457 185.4137 81.6042 188.6 75.8 C
199 81 L
f
u
299 584.5 m
295.7508 589.8625 292.8171 594.1244 289 599 C
285.3 596.5666 L
289.0813 591.7508 291.9491 587.5826 295.0999 582.3833 C
299 584.5 L
f
298 482.9999 m
294.7517 488.475 291.7592 492.9988 288 498 C
282.9999 494.9333 L
286.6729 490.0697 289.642 485.5868 292.7999 480.2666 C
298 482.9999 L
f
299 383.5 m
295.7525 389.0876 292.7012 393.8733 289 399 C
282.7 395.3 L
286.2647 390.3888 289.335 385.5912 292.5 380.15 C
299 383.5 L
f
296.6664 282.6035 m
293.4197 288.3036 290.3097 293.3513 286.6664 298.6036 C
279.0663 294.2702 L
282.5227 289.3113 285.6943 284.1991 288.8663 278.6369 C
296.6664 282.6035 L
f
U
u
297.8332 182.3018 m
294.5874 188.1143 291.4186 193.4239 287.8332 198.8018 C
278.9332 193.8351 L
282.2812 188.8285 285.554 183.4016 288.7332 177.7184 C
297.8332 182.3018 L
f
U
299 82 m
295.755 87.9251 292.5275 93.4966 289 99 C
278.8 93.4 L
282.0397 88.3457 285.4137 82.6042 288.6 76.8 C
299 82 L
f
u
286.9 581.2066 m
283.8061 586.2701 280.9286 590.3851 277.2666 595.0666 C
273.6006 592.652 L
277.2102 588.0504 280.0513 583.9016 283.0346 579.024 C
286.9 581.2066 L
f
285.1999 479.7133 m
282.0888 484.9254 279.1542 489.3094 275.5333 494.1333 C
270.6012 491.104 L
274.1239 486.432 277.058 481.9876 280.0692 476.9479 C
285.1999 479.7133 L
f
285.5 380.2201 m
282.3716 385.5807 279.3799 390.2337 275.8 395.2 C
269.602 391.5561 L
273.0377 386.8138 276.065 382.0738 279.104 376.8721 C
285.5 380.2201 L
f
282.4664 279.3303 m
279.3208 284.8396 276.272 289.7616 272.733 294.8702 C
265.269 290.6116 L
268.6178 285.799 271.7382 280.7635 274.805 275.3996 C
282.4664 279.3303 L
f
U
u
282.9332 179.0352 m
279.7703 184.6931 276.6644 189.8842 273.1665 195.1351 C
264.4365 190.2618 L
267.6984 185.3789 270.9118 180.0478 274.0065 174.5218 C
282.9332 179.0352 L
f
U
283.4 78.7401 m
280.2199 84.5467 277.0569 90.0067 273.6 95.4 C
263.604 89.9121 L
266.779 84.9588 270.0855 79.3322 273.208 73.6441 C
283.4 78.7401 L
f
u
396.5 583 m
393.2508 588.3625 390.3171 592.6244 386.5 597.5 C
382.8 595.0666 L
386.5813 590.2508 389.4491 586.0825 392.6 580.8833 C
396.5 583 L
f
U
u
397 482.9999 m
393.7517 488.475 390.7592 492.9988 387 498 C
381.9999 494.9333 L
385.6729 490.0697 388.642 485.5868 391.7999 480.2666 C
397 482.9999 L
f
397 381.5 m
393.7525 387.0876 390.7012 391.8733 387 397 C
380.7 393.3 L
384.2647 388.3888 387.335 383.5912 390.5 378.15 C
397 381.5 L
f
398 282 m
394.7533 287.7 391.6433 292.7477 388 298 C
380.3999 293.6666 L
383.8563 288.7077 387.0278 283.5955 390.1999 278.0333 C
398 282 L
f
397.6667 180.6029 m
394.4208 186.4155 391.2521 191.7251 387.6667 197.1029 C
378.7667 192.1363 L
382.1147 187.1297 385.3875 181.7028 388.5667 176.0196 C
397.6667 180.6029 L
f
U
398 81 m
394.755 86.9251 391.5275 92.4966 388 98 C
377.8 92.4 L
381.0397 87.3457 384.4137 81.6042 387.6 75.8 C
398 81 L
f
u
384.4 579.7066 m
381.3061 584.7701 378.4286 588.8851 374.7666 593.5666 C
371.1006 591.152 L
374.7102 586.5504 377.5513 582.4015 380.5346 577.5239 C
384.4 579.7066 L
f
U
u
384.1999 479.7133 m
381.0888 484.9254 378.1542 489.3094 374.5333 494.1333 C
369.6012 491.104 L
373.1239 486.432 376.058 481.9876 379.0692 476.9479 C
384.1999 479.7133 L
f
383.5 378.2201 m
380.3716 383.5807 377.3799 388.2337 373.8 393.2 C
367.602 389.5561 L
371.0377 384.8138 374.065 380.0738 377.104 374.8721 C
383.5 378.2201 L
f
383.8 278.7267 m
380.6544 284.236 377.6055 289.158 374.0666 294.2666 C
366.6026 290.008 L
369.9514 285.1954 373.0717 280.1599 376.1386 274.796 C
383.8 278.7267 L
f
382.7667 177.3363 m
379.6038 182.9943 376.4979 188.1853 373 193.4362 C
364.27 188.563 L
367.532 183.6801 370.7454 178.349 373.8401 172.823 C
382.7667 177.3363 L
f
U
382.4 77.7401 m
379.2199 83.5467 376.0569 89.0067 372.6 94.4 C
362.604 88.9121 L
365.779 83.9588 369.0855 78.3322 372.208 72.6441 C
382.4 77.7401 L
f
u
499 584.5 m
495.7508 589.8625 492.8171 594.1244 489 599 C
485.3 596.5666 L
489.0813 591.7508 491.9491 587.5826 495.0999 582.3833 C
499 584.5 L
f
498.6642 483.3269 m
495.4158 488.8019 492.4233 493.3258 488.6642 498.3269 C
483.6641 495.2602 L
487.3371 490.3967 490.3062 485.9138 493.4641 480.5935 C
498.6642 483.3269 L
f
u
498.7761 383.0528 m
495.5286 388.6403 492.4774 393.4261 488.7761 398.5528 C
482.4761 394.8528 L
486.0408 389.9416 489.1111 385.144 492.2761 379.7028 C
498.7761 383.0528 L
f
498.8881 282.7741 m
495.6414 288.4742 492.5314 293.5218 488.8881 298.7741 C
481.288 294.4408 L
484.7444 289.4819 487.9159 284.3697 491.088 278.8074 C
498.8881 282.7741 L
f
U
499 182.5 m
495.7541 188.3126 492.5854 193.6221 489 199 C
480.1 194.0333 L
483.448 189.0267 486.7208 183.5999 489.9 177.9167 C
499 182.5 L
f
U
499 82 m
495.755 87.9251 492.5275 93.4966 489 99 C
478.8 93.4 L
482.0397 88.3457 485.4137 82.6042 488.6 76.8 C
499 82 L
f
u
486.7 581.54 m
483.6061 586.6034 480.7286 590.7184 477.0666 595.4 C
473.4006 592.9853 L
477.0102 588.3838 479.8513 584.2349 482.8346 579.3573 C
486.7 581.54 L
f
485.4641 480.707 m
482.353 485.919 479.4184 490.303 475.7974 495.1269 C
470.8654 492.0976 L
474.388 487.4257 477.3222 482.9813 480.3334 477.9416 C
485.4641 480.707 L
f
u
484.6761 380.7729 m
481.5477 386.1336 478.556 390.7866 474.9761 395.7528 C
468.7781 392.1088 L
472.2138 387.3666 475.2411 382.6266 478.2801 377.4248 C
484.6761 380.7729 L
f
483.888 280.8342 m
480.7424 286.3435 477.6936 291.2655 474.1547 296.3741 C
466.6907 292.1155 L
470.0395 287.3029 473.1599 282.2674 476.2267 276.9035 C
483.888 280.8342 L
f
U
483.1 180.9001 m
479.9372 186.558 476.8313 191.749 473.3334 197 C
464.6034 192.1267 L
467.8653 187.2438 471.0787 181.9127 474.1734 176.3867 C
483.1 180.9001 L
f
U
482.2 80.7401 m
479.0199 86.5467 475.8569 92.0067 472.4 97.4 C
462.404 91.9121 L
465.579 86.9588 468.8855 81.3322 472.008 75.6441 C
482.2 80.7401 L
f
u
185.1667 567.3022 m
185.1667 572.6354 L
112.3334 572.6354 L
112.3334 567.3022 L
185.1667 567.3022 L
f
185.3333 465.6043 m
185.3333 473.2709 L
111.6667 473.2709 L
111.6667 465.6043 L
185.3333 465.6043 L
f
185.5 363.8987 m
185.5 373.8988 L
111 373.8988 L
111 363.8987 L
185.5 363.8987 L
f
185.6667 262.2009 m
185.6667 274.5342 L
110.3334 274.5342 L
110.3334 262.2009 L
185.6667 262.2009 L
f
U
u
185.8333 160.5031 m
185.8333 175.1697 L
109.6667 175.1697 L
109.6667 160.5031 L
185.8333 160.5031 L
f
U
186 60 m
186 77 L
109 77 L
109 60 L
186 60 L
f
u
184 579.1082 m
180.9061 584.1716 178.0286 588.2866 174.3667 592.9682 C
170.7007 590.5535 L
174.3103 585.952 177.1514 581.8031 180.1347 576.9255 C
184 579.1082 L
f
183.4 479.5164 m
180.2889 484.7285 177.3543 489.1124 173.7333 493.9363 C
168.8014 490.9071 L
172.3241 486.2352 175.2583 481.7908 178.2694 476.7511 C
183.4 479.5164 L
f
182.8 379.917 m
179.6716 385.2777 176.6799 389.9307 173.1 394.897 C
166.902 391.253 L
170.3377 386.5108 173.365 381.7708 176.404 376.569 C
182.8 379.917 L
f
182.2 280.3252 m
179.0544 285.8345 176.0056 290.7565 172.4667 295.8651 C
165.0027 291.6065 L
168.3515 286.7939 171.4718 281.7584 174.5387 276.3945 C
182.2 280.3252 L
f
U
u
181.6 180.7334 m
178.4372 186.3914 175.3312 191.5824 171.8333 196.8333 C
163.1034 191.9601 L
166.3653 187.0771 169.5787 181.7461 172.6734 176.2201 C
181.6 180.7334 L
f
U
181.6 80.7401 m
178.4199 86.5467 175.2569 92.0067 171.8 97.4 C
161.804 91.9121 L
164.979 86.9588 168.2855 81.3322 171.408 75.6441 C
181.6 80.7401 L
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
